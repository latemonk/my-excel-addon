{"version":3,"file":"taskpane.js","mappings":"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","sources":["webpack://worksai-excel-addon/webpack/bootstrap","webpack://worksai-excel-addon/webpack/runtime/global","webpack://worksai-excel-addon/webpack/runtime/hasOwnProperty shorthand","webpack://worksai-excel-addon/webpack/runtime/publicPath","webpack://worksai-excel-addon/webpack/runtime/jsonp chunk loading","webpack://worksai-excel-addon/./src/taskpane/taskpane.html","webpack://worksai-excel-addon/./src/taskpane/taskpane.js"],"sourcesContent":["// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript && document.currentScript.tagName.toUpperCase() === 'SCRIPT')\n\t\tscriptUrl = document.currentScript.src;\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) {\n\t\t\tvar i = scripts.length - 1;\n\t\t\twhile (i > -1 && (!scriptUrl || !/^http(s?):/.test(scriptUrl))) scriptUrl = scripts[i--].src;\n\t\t}\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/^blob:/, \"\").replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","__webpack_require__.b = document.baseURI || self.location.href;\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t926: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n// no on chunks loaded\n\n// no jsonp function","// Imports\nvar ___HTML_LOADER_IMPORT_0___ = new URL(\"./taskpane.css\", import.meta.url);\n// Module\nvar code = \"<!DOCTYPE html> <html> <head> <meta charset=\\\"UTF-8\\\"/> <meta http-equiv=\\\"X-UA-Compatible\\\" content=\\\"IE=Edge\\\"/> <meta name=\\\"viewport\\\" content=\\\"width=device-width,initial-scale=1\\\"> <title>웍스AI 엑셀 도우미</title> <\" + \"script src=\\\"https://appsforoffice.microsoft.com/lib/1.1/hosted/office.js\\\"><\" + \"/script> <link rel=\\\"stylesheet\\\" href=\\\"https://static2.sharepointonline.com/files/fabric/office-ui-fabric-js/1.4.0/css/fabric.min.css\\\"/> <link rel=\\\"stylesheet\\\" href=\\\"https://static2.sharepointonline.com/files/fabric/office-ui-fabric-js/1.4.0/css/fabric.components.min.css\\\"/> <link href=\\\"\" + ___HTML_LOADER_IMPORT_0___ + \"\\\" rel=\\\"stylesheet\\\"/> </head> <body class=\\\"ms-font-m ms-welcome ms-Fabric\\\"> <main id=\\\"app-body\\\" class=\\\"ms-welcome__main\\\"> <div class=\\\"container\\\"> <div class=\\\"header-section\\\"> <h2 class=\\\"ms-font-xl\\\" style=\\\"font-weight:700\\\">웍스AI 엑셀 도우미</h2> <p class=\\\"help-text\\\">자연어로 Excel 작업을 요청하세요. (대용량 번역 지원)</p> </div> <div class=\\\"voice-section\\\"> <button id=\\\"voiceButton\\\" class=\\\"voice-button\\\"> <svg width=\\\"24\\\" height=\\\"24\\\" viewBox=\\\"0 0 24 24\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"> <path d=\\\"M12 14c1.66 0 3-1.34 3-3V5c0-1.66-1.34-3-3-3S9 3.34 9 5v6c0 1.66 1.34 3 3 3z\\\"/> <path d=\\\"M17 11c0 2.76-2.24 5-5 5s-5-2.24-5-5H5c0 3.53 2.61 6.43 6 6.92V21h2v-3.08c3.39-.49 6-3.39 6-6.92h-2z\\\"/> </svg> </button> <div class=\\\"voice-status\\\" id=\\\"voiceStatus\\\">음성 인식 준비</div> </div> <div class=\\\"model-selection\\\"> <label for=\\\"modelSelect\\\">AI 모델:</label> <select id=\\\"modelSelect\\\" class=\\\"model-dropdown\\\"> <option value=\\\"gpt-4.1-mini-2025-04-14\\\">GPT-4.1-mini (무료)</option> <option value=\\\"gpt-4.1-2025-04-14\\\">GPT-4.1 (인증 필요)</option> </select> </div> <div class=\\\"input-container\\\"> <textarea id=\\\"commandInput\\\" placeholder=\\\"예: A1부터 A10까지 합계를 구해줘\\\" rows=\\\"3\\\"></textarea> <div class=\\\"button-container\\\"> <button id=\\\"executeButton\\\" class=\\\"ms-Button ms-Button--primary\\\"> <span class=\\\"ms-Button-label\\\">실행</span> </button> <button id=\\\"clearButton\\\" class=\\\"ms-Button\\\"> <span class=\\\"ms-Button-label\\\">지우기</span> </button> </div> </div> <div id=\\\"status\\\" class=\\\"status-message\\\"></div> <div class=\\\"examples\\\"> <h3>예제 명령어</h3> <div class=\\\"example-list\\\"> <div class=\\\"example-item\\\" data-command=\\\"A1:B5 셀을 병합해줘\\\"> <strong>셀 병합:</strong> A1:B5 셀을 병합해줘 </div> <div class=\\\"example-item\\\" data-command=\\\"A열의 합계를 구해줘\\\"> <strong>합계 계산:</strong> A열의 합계를 구해줘 </div> <div class=\\\"example-item\\\" data-command=\\\"Name 열의 합계를 구해줘\\\"> <strong>레이블로 합계:</strong> Name 열의 합계를 구해줘 </div> <div class=\\\"example-item\\\" data-command=\\\"C열 평균을 구해줘\\\"> <strong>열 평균:</strong> C열 평균을 구해줘 </div> <div class=\\\"example-item\\\" data-command=\\\"3행 평균을 계산해줘\\\"> <strong>행 평균:</strong> 3행 평균을 계산해줘 </div> <div class=\\\"example-item\\\" data-command=\\\"선택한 셀을 굵게 만들고 파란색으로 바꿔줘\\\"> <strong>서식 지정:</strong> 선택한 셀을 굵게 만들고 파란색으로 바꿔줘 </div> <div class=\\\"example-item\\\" data-command=\\\"B열 기준으로 내림차순 정렬해줘\\\"> <strong>정렬:</strong> B열 기준으로 내림차순 정렬해줘 </div> <div class=\\\"example-item\\\" data-command=\\\"값이 100보다 큰 셀은 녹색 배경으로 표시해줘\\\"> <strong>조건부 서식:</strong> 값이 100보다 큰 셀은 녹색 배경으로 표시해줘 </div> <div class=\\\"example-item\\\" data-command=\\\"A1:B10 데이터로 막대 차트를 만들어줘\\\"> <strong>차트 생성:</strong> A1:B10 데이터로 막대 차트를 만들어줘 </div> <div class=\\\"example-item\\\" data-command=\\\"D열을 중국어로 번역해서 다음 열에 추가해줘\\\"> <strong>번역:</strong> D열을 중국어로 번역해서 다음 열에 추가해줘 </div> <div class=\\\"example-item\\\" data-command=\\\"A열의 10000개 행을 영어로 번역해줘\\\"> <strong>대용량 번역:</strong> A열의 10000개 행을 영어로 번역해줘 </div> <div class=\\\"example-item\\\" data-command=\\\"D2:D170 사이의 빈 행을 제거해줘\\\"> <strong>빈 행 제거:</strong> D2:D170 사이의 빈 행을 제거해줘 </div> <div class=\\\"example-item\\\" data-command=\\\"C열의 오른쪽 테두리를 없애줘\\\"> <strong>테두리 제거:</strong> C열의 오른쪽 테두리를 없애줘 </div> </div> </div> <div class=\\\"settings-section\\\"> <button id=\\\"authButton\\\" class=\\\"settings-link\\\">인증</button> <button id=\\\"contactButton\\\" class=\\\"settings-link\\\">문의/요청</button> </div> <div id=\\\"authModal\\\" class=\\\"modal\\\" style=\\\"display:none\\\"> <div class=\\\"modal-content\\\"> <span class=\\\"close\\\">&times;</span> <h3>인증키 입력</h3> <p>GPT-4.1 모델을 사용하려면 인증 정보를 입력하세요.</p> <input type=\\\"email\\\" id=\\\"authEmailInput\\\" placeholder=\\\"회사 이메일 주소\\\" style=\\\"margin-bottom:10px\\\"/> <input type=\\\"text\\\" id=\\\"authKeyInput\\\" placeholder=\\\"인증키를 입력하세요\\\"/> <button id=\\\"submitAuthKey\\\" class=\\\"ms-Button ms-Button--primary\\\"> <span class=\\\"ms-Button-label\\\">인증</span> </button> <div id=\\\"authStatus\\\" class=\\\"auth-status\\\"></div> </div> </div> <div id=\\\"deauthModal\\\" class=\\\"modal\\\" style=\\\"display:none\\\"> <div class=\\\"modal-content\\\"> <span class=\\\"close-deauth\\\">&times;</span> <h3>인증 해제 확인</h3> <p>더 이상 사용하지 않아 인증을 해제합니다.</p> <p>인증 해제 후 나중에 필요해지면 다시 인증해 사용할 수 있습니다.</p> <p style=\\\"margin-top:16px;font-weight:700\\\">정말 인증을 해제하시겠습니까?</p> <div style=\\\"display:flex;gap:10px;margin-top:20px\\\"> <button id=\\\"confirmDeauth\\\" class=\\\"ms-Button ms-Button--primary\\\" style=\\\"background:#dc2626\\\"> <span class=\\\"ms-Button-label\\\">인증 해제</span> </button> <button id=\\\"cancelDeauth\\\" class=\\\"ms-Button\\\"> <span class=\\\"ms-Button-label\\\">취소</span> </button> </div> </div> </div> <div class=\\\"footer-section\\\"> <p class=\\\"disclaimer\\\">AI는 잘못된 작업을 할 수 있습니다. 모든 데이터는 AI 학습에 활용되지 않습니다.</p> <p class=\\\"disclaimer\\\" style=\\\"margin-top:8px\\\"> <a href=\\\"https://policies.wrks.ai/sheet-assistant-privacy-policy\\\" target=\\\"_blank\\\" style=\\\"color:#6b7280;text-decoration:underline\\\">개인정보처리방침</a> </p> </div> </div> </main> </body> </html>\";\n// Exports\nexport default code;","/*\n * Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n * See LICENSE in the project root for license information.\n */\n\n/* global document, Office, Excel */\n\n// Voice recognition variables\nlet recognition = null;\nlet isListening = false;\n\n// Backend API URL - Vercel 배포\nconst API_PROXY_URL = process.env.API_PROXY_URL || 'https://excel-addon-backend.vercel.app/api/openai-proxy';\n\nOffice.onReady((info) => {\n  if (info.host === Office.HostType.Excel) {\n    // Test backend connection\n    testBackendConnection();\n    \n    // Assign event handlers\n    document.getElementById(\"executeButton\").onclick = executeCommand;\n    document.getElementById(\"clearButton\").onclick = clearInput;\n    document.getElementById(\"voiceButton\").onclick = () => toggleVoiceRecognition();\n    \n    // Auth and contact buttons\n    document.getElementById(\"authButton\").onclick = handleAuthAction;\n    document.getElementById(\"contactButton\").onclick = showContactInfo;\n    \n    // Update auth button text based on auth state\n    updateAuthButton();\n    \n    // Modal handlers\n    const authModal = document.getElementById(\"authModal\");\n    const closeBtn = authModal.querySelector(\".close\");\n    closeBtn.onclick = () => hideAuthModal();\n    \n    const deauthModal = document.getElementById(\"deauthModal\");\n    const closeDeauthBtn = deauthModal.querySelector(\".close-deauth\");\n    closeDeauthBtn.onclick = () => hideDeauthModal();\n    \n    window.onclick = (event) => {\n      if (event.target == authModal) {\n        hideAuthModal();\n      } else if (event.target == deauthModal) {\n        hideDeauthModal();\n      }\n    };\n    \n    document.getElementById(\"submitAuthKey\").onclick = submitAuthKey;\n    document.getElementById(\"confirmDeauth\").onclick = confirmDeauth;\n    document.getElementById(\"cancelDeauth\").onclick = hideDeauthModal;\n    \n    // Model selection handler\n    document.getElementById(\"modelSelect\").onchange = handleModelChange;\n\n    // Handle example clicks\n    const exampleItems = document.querySelectorAll('.example-item');\n    exampleItems.forEach(item => {\n      item.onclick = function() {\n        setCommand(this.getAttribute('data-command'));\n      };\n    });\n\n    // Handle Enter key\n    document.getElementById('commandInput').addEventListener('keydown', function(event) {\n      if (event.key === 'Enter' && !event.shiftKey) {\n        event.preventDefault();\n        executeCommand();\n      }\n    });\n\n    // Initialize speech recognition\n    initializeSpeechRecognition();\n  }\n});\n\n// Initialize speech recognition\nfunction initializeSpeechRecognition() {\n  // Check if we're in a web environment (Excel Online) - disable voice feature\n  const isWebEnvironment = window.location.protocol === 'https:' && \n                          !window.location.hostname.includes('localhost');\n  \n  if (isWebEnvironment) {\n    console.log('Voice recognition disabled in web environment');\n    const voiceButton = document.getElementById('voiceButton');\n    const voiceStatus = document.getElementById('voiceStatus');\n    \n    voiceButton.disabled = true;\n    voiceButton.style.opacity = '0.5';\n    voiceButton.style.cursor = 'not-allowed';\n    voiceStatus.textContent = '웹 환경에서는 음성 인식 미지원';\n    voiceStatus.style.color = '#666';\n    \n    // Add tooltip\n    voiceButton.title = 'Excel Online에서는 보안상 음성 인식을 사용할 수 없습니다. 데스크톱 Excel을 사용해주세요.';\n    \n    return null;\n  }\n  \n  const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n  \n  if (!SpeechRecognition) {\n    showStatus('음성 인식이 지원되지 않는 브라우저입니다.', 'error');\n    document.getElementById('voiceButton').disabled = true;\n    document.getElementById('voiceStatus').textContent = '음성 인식 미지원';\n    return null;\n  }\n  \n  recognition = new SpeechRecognition();\n  recognition.lang = 'ko-KR';\n  recognition.continuous = false;\n  recognition.interimResults = true;\n  recognition.maxAlternatives = 1;\n  \n  recognition.onstart = function() {\n    isListening = true;\n    document.getElementById('voiceButton').classList.add('listening');\n    document.getElementById('voiceStatus').textContent = '듣고 있습니다... 말씀해주세요';\n    document.getElementById('voiceStatus').classList.add('listening');\n  };\n  \n  recognition.onresult = function(event) {\n    const transcript = event.results[0][0].transcript;\n    document.getElementById('commandInput').value = transcript;\n    \n    if (event.results[0].isFinal) {\n      document.getElementById('voiceStatus').textContent = '음성 인식 완료';\n    } else {\n      document.getElementById('voiceStatus').textContent = '인식중: ' + transcript;\n    }\n  };\n  \n  recognition.onerror = function(event) {\n    console.log('Speech recognition error:', event.error, 'Location:', window.location.hostname);\n    isListening = false;\n    document.getElementById('voiceButton').classList.remove('listening');\n    document.getElementById('voiceStatus').classList.remove('listening');\n    \n    let errorMessage = '음성 인식 오류';\n    \n    // Check if we're in a web environment - use broader detection\n    const isWebEnvironment = window.location.protocol === 'https:' && \n                            !window.location.hostname.includes('localhost');\n    \n    switch(event.error) {\n      case 'no-speech':\n        errorMessage = '음성이 감지되지 않았습니다.';\n        break;\n      case 'audio-capture':\n        errorMessage = '마이크를 찾을 수 없습니다.';\n        break;\n      case 'not-allowed':\n        // Always show web environment message for not-allowed in HTTPS contexts\n        if (isWebEnvironment) {\n          errorMessage = 'Excel Online에서는 보안 정책상 음성 인식을 사용할 수 없습니다. 데스크톱 Excel에서 이용해주세요.';\n          document.getElementById('voiceStatus').textContent = '웹 버전 미지원';\n        } else {\n          errorMessage = '마이크 권한이 거부되었습니다. 브라우저 설정을 확인해주세요.';\n        }\n        break;\n      case 'network':\n        errorMessage = '네트워크 오류가 발생했습니다.';\n        break;\n      default:\n        // For any other error in web environment, show the web limitation message\n        if (isWebEnvironment && event.error) {\n          errorMessage = 'Excel Online에서는 보안 정책상 음성 인식을 사용할 수 없습니다. 데스크톱 Excel에서 이용해주세요.';\n          document.getElementById('voiceStatus').textContent = '웹 버전 미지원';\n        }\n        break;\n    }\n    \n    // Override the status text display for web environment\n    if (isWebEnvironment && event.error === 'not-allowed') {\n      document.getElementById('voiceStatus').textContent = '웹 버전 미지원';\n    } else {\n      document.getElementById('voiceStatus').textContent = errorMessage;\n    }\n    \n    showStatus(errorMessage, 'error');\n  };\n  \n  recognition.onend = function() {\n    isListening = false;\n    document.getElementById('voiceButton').classList.remove('listening');\n    document.getElementById('voiceStatus').classList.remove('listening');\n    \n    const command = document.getElementById('commandInput').value.trim();\n    if (command) {\n      document.getElementById('voiceStatus').textContent = '음성 인식 완료. 실행 버튼을 눌러주세요.';\n      document.getElementById('executeButton').focus();\n    } else {\n      document.getElementById('voiceStatus').textContent = '음성 인식 준비';\n    }\n  };\n  \n  return recognition;\n}\n\n// Toggle voice recognition\nfunction toggleVoiceRecognition() {\n  // Check if we're in Excel Online/web environment\n  const isWebEnvironment = window.location.protocol === 'https:' && \n                          !window.location.hostname.includes('localhost');\n  \n  if (isWebEnvironment) {\n    showStatus('Excel Online에서는 보안 정책상 음성 인식을 사용할 수 없습니다. 데스크톱 Excel에서 이용해주세요.', 'error');\n    document.getElementById('voiceStatus').textContent = '웹 버전 미지원';\n    return;\n  }\n  \n  if (!recognition) {\n    // Recognition would be null if unsupported browser\n    showStatus('이 브라우저는 음성 인식을 지원하지 않습니다.', 'error');\n    return;\n  }\n  \n  if (isListening) {\n    recognition.stop();\n  } else {\n    try {\n      recognition.start();\n    } catch (error) {\n      console.error('Voice recognition start error:', error);\n      \n      // More user-friendly error messages\n      if (error.message && error.message.includes('not-allowed')) {\n        showStatus('마이크 권한이 필요합니다. 브라우저 설정에서 마이크 접근을 허용해주세요.', 'error');\n      } else {\n        showStatus('음성 인식을 시작할 수 없습니다.', 'error');\n      }\n    }\n  }\n}\n\n// Execute command\n// Add flag to prevent duplicate execution\nlet isExecuting = false;\n\nasync function executeCommand() {\n  // Prevent duplicate execution\n  if (isExecuting) {\n    console.log('Command already executing, ignoring duplicate call');\n    return;\n  }\n  \n  const command = document.getElementById('commandInput').value.trim();\n  \n  if (!command) {\n    showStatus('명령어를 입력해주세요.', 'error');\n    return;\n  }\n  \n  isExecuting = true;\n  \n  const button = document.getElementById('executeButton');\n  const originalText = '<span class=\"ms-Button-label\">실행</span>';\n  \n  // Show loading state\n  button.disabled = true;\n  button.innerHTML = '<span class=\"loading\"></span><span>처리중...</span>';\n  showStatus('명령을 처리하고 있습니다...', 'info');\n  \n  try {\n    await Excel.run(async (context) => {\n      console.log('Starting Excel.run for command execution');\n      // Get current worksheet context\n      const worksheet = context.workbook.worksheets.getActiveWorksheet();\n      // Handle both single and multiple range selections\n      let activeRangeInfo = null;\n      let isMultipleRanges = false;\n      \n      try {\n        // Try to get selected ranges first\n        const selectedRanges = context.workbook.getSelectedRanges();\n        selectedRanges.load([\"areas\", \"areaCount\"]);\n        await context.sync();\n        \n        if (selectedRanges.areaCount > 1) {\n          // Multiple non-contiguous ranges\n          isMultipleRanges = true;\n          const firstRange = selectedRanges.areas.items[0];\n          firstRange.load([\"address\", \"rowIndex\", \"columnIndex\", \"rowCount\", \"columnCount\"]);\n          await context.sync();\n          \n          // Build combined address string\n          const rangeAddresses = [];\n          for (let i = 0; i < selectedRanges.areas.items.length; i++) {\n            const area = selectedRanges.areas.items[i];\n            area.load(\"address\");\n          }\n          await context.sync();\n          \n          for (let i = 0; i < selectedRanges.areas.items.length; i++) {\n            rangeAddresses.push(selectedRanges.areas.items[i].address);\n          }\n          \n          activeRangeInfo = {\n            address: rangeAddresses.join(','),\n            row: firstRange.rowIndex + 1,\n            column: firstRange.columnIndex + 1,\n            numRows: firstRange.rowCount,\n            numColumns: firstRange.columnCount,\n            isMultipleRanges: true\n          };\n        } else {\n          // Single range\n          const range = selectedRanges.areas.items[0];\n          range.load([\"address\", \"rowIndex\", \"columnIndex\", \"rowCount\", \"columnCount\"]);\n          await context.sync();\n          \n          activeRangeInfo = {\n            address: range.address,\n            row: range.rowIndex + 1,\n            column: range.columnIndex + 1,\n            numRows: range.rowCount,\n            numColumns: range.columnCount,\n            isMultipleRanges: false\n          };\n        }\n      } catch (error) {\n        console.log('Error getting selected ranges, using fallback:', error);\n        // If getting selected ranges fails, provide a default\n        activeRangeInfo = {\n          address: 'A1',\n          row: 1,\n          column: 1,\n          numRows: 1,\n          numColumns: 1,\n          isMultipleRanges: false\n        };\n      }\n      \n      // Load necessary properties\n      worksheet.load(\"name\");\n      \n      // Get sheet data for context\n      const usedRange = worksheet.getUsedRange();\n      usedRange.load([\"rowCount\", \"columnCount\", \"values\"]);\n      \n      await context.sync();\n      \n      // Build sheet context\n      const sheetContext = {\n        sheetName: worksheet.name,\n        activeRange: activeRangeInfo,\n        lastRow: usedRange ? usedRange.rowCount : 0,\n        lastColumn: usedRange ? usedRange.columnCount : 0,\n        headers: [],\n        dataRange: usedRange ? usedRange.values : [],\n        isLargeSheet: usedRange && usedRange.rowCount > 1000\n      };\n      \n      // Extract headers\n      if (usedRange && usedRange.rowCount > 0) {\n        const headerRow = usedRange.values[0];\n        for (let i = 0; i < headerRow.length; i++) {\n          sheetContext.headers.push({\n            column: i + 1,\n            columnLetter: getColumnLetter(i),\n            label: headerRow[i] ? headerRow[i].toString() : ''\n          });\n        }\n      }\n      \n      // Call OpenAI API to interpret the command\n      const interpretation = await callOpenAI(command, sheetContext);\n      \n      if (!interpretation.success) {\n        throw new Error(interpretation.error);\n      }\n      \n      // Execute the interpreted command\n      console.log('Executing interpreted command...');\n      const result = await executeInterpretedCommand(context, interpretation.data);\n      console.log('Command execution result:', result);\n      \n      // Reset button and show success\n      button.disabled = false;\n      button.innerHTML = originalText;\n      \n      if (result.success) {\n        console.log('Operation completed successfully:', result);\n        showStatus(result.message || '명령이 성공적으로 실행되었습니다.', 'success');\n        setTimeout(() => {\n          document.getElementById('commandInput').value = '';\n        }, 1000);\n      } else {\n        console.error('Operation failed:', result);\n        showStatus(result.error || '명령 실행에 실패했습니다.', 'error');\n      }\n      \n      console.log('Excel.run completing...');\n    });\n    console.log('Excel.run completed');\n  } catch (error) {\n    console.error('Error in executeCommand:', error);\n    console.error('Error stack:', error.stack);\n    button.disabled = false;\n    button.innerHTML = originalText;\n    showStatus('오류가 발생했습니다: ' + error.message, 'error');\n  } finally {\n    // Reset execution flag\n    isExecuting = false;\n  }\n}\n\n// Call OpenAI API through proxy\nasync function callOpenAI(command, sheetContext) {\n  try {\n    // Get selected model and auth key\n    const selectedModel = localStorage.getItem(\"excel_addon_selected_model\") || \"gpt-4.1-mini-2025-04-14\";\n    const authKey = localStorage.getItem(\"excel_addon_auth_key\");\n    const authEmail = localStorage.getItem(\"excel_addon_auth_email\");\n    \n    const response = await fetch(API_PROXY_URL, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        command: command,\n        sheetContext: sheetContext,\n        model: selectedModel,\n        authKey: authKey,\n        authEmail: authEmail\n      })\n    });\n    \n    if (!response.ok) {\n      const errorData = await response.json();\n      return {\n        success: false,\n        error: errorData.error || `서버 오류 (${response.status})`\n      };\n    }\n    \n    return await response.json();\n    \n  } catch (error) {\n    console.error('Proxy API Error:', error);\n    return {\n      success: false,\n      error: `API 요청 오류: ${error.toString()}`\n    };\n  }\n}\n\n// Original OpenAI API call (no longer used)\nasync function callOpenAIDirectly(command, sheetContext) {\n  const systemPrompt = `You are an Excel assistant that interprets natural language commands and returns JSON instructions for Excel operations.\n  \nAvailable operations:\n1. merge: Merge cells\n2. sum: Sum values in a range or column\n3. average: Calculate average\n4. count: Count cells (can count all, numbers only, or based on conditions)\n5. format: Format cells (bold, italic, font color, background color, etc.)\n6. sort: Sort data\n7. filter: Filter data\n8. insert: Insert rows/columns\n9. delete: Delete rows/columns\n10. formula: Add custom formula\n11. chart: Create chart\n12. conditional_format: Add conditional formatting\n13. translate: Translate cell contents to another language\n14. compress: Remove empty rows in a specific column range\n15. retry_translation: Retry translation for failed items marked as [번역 실패]\n\nFor sum operation:\n- If user mentions a column by header name (e.g., \"totalToken 열의 합\", \"totalToken 합산\"), return: { \"sumType\": \"column\", \"columnName\": \"totalToken\" }\n- The system will automatically find the column, determine the data range, and place the sum in the first empty cell below the data\n- For specific range sum, use: { \"sourceRange\": \"A2:A10\" }\n- For adding sum below selection, use: { \"addNewRow\": true }\n\nCurrent sheet context:\n- Active range: ${sheetContext.activeRange.address}\n- Sheet dimensions: ${sheetContext.lastRow} rows x ${sheetContext.lastColumn} columns\n- Headers: ${sheetContext.headers.map(h => `Column ${h.columnLetter}: \"${h.label}\"`).join(', ')}\n\nReturn JSON in this format:\n{\n  \"operation\": \"operation_name\",\n  \"parameters\": {\n    // operation-specific parameters\n  }\n}`;\n\n  const url = 'https://api.openai.com/v1/chat/completions';\n  \n  const payload = {\n    model: 'gpt-4.1-2025-04-14',\n    messages: [\n      { role: 'system', content: systemPrompt },\n      { role: 'user', content: `Current Excel state:\nHeaders: ${sheetContext.headers.map(h => `Column ${h.columnLetter}: \"${h.label}\"`).join(', ')}\nActive sheet: ${sheetContext.sheetName}\n\nUser command: ${command}` }\n    ],\n    temperature: 0.3,\n    max_tokens: 500\n  };\n  \n  try {\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${OPENAI_API_KEY}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(payload)\n    });\n    \n    if (!response.ok) {\n      const errorData = await response.json();\n      if (response.status === 429) {\n        return {\n          success: false,\n          error: 'API 요청 한도를 초과했습니다. 잠시 후 다시 시도해주세요.'\n        };\n      } else if (response.status === 401) {\n        return {\n          success: false,\n          error: 'API 키가 유효하지 않습니다. API 키를 확인해주세요.'\n        };\n      }\n      return {\n        success: false,\n        error: `API 오류 (${response.status}): ${errorData.error?.message || '알 수 없는 오류'}`\n      };\n    }\n    \n    const result = await response.json();\n    \n    if (result.choices && result.choices[0]) {\n      const content = result.choices[0].message.content;\n      try {\n        const parsedCommand = JSON.parse(content);\n        return {\n          success: true,\n          data: parsedCommand\n        };\n      } catch (parseError) {\n        console.error('Failed to parse AI response:', content);\n        return {\n          success: false,\n          error: 'AI 응답을 해석할 수 없습니다. 다시 시도해주세요.'\n        };\n      }\n    } else {\n      return {\n        success: false,\n        error: 'OpenAI API 응답을 파싱할 수 없습니다.'\n      };\n    }\n  } catch (error) {\n    console.error('OpenAI API Error:', error);\n    return {\n      success: false,\n      error: `OpenAI API 오류: ${error.toString()}`\n    };\n  }\n}\n\n// Execute the interpreted command\nasync function executeInterpretedCommand(context, commandData) {\n  // Check if multiple operations\n  if (commandData.operations && Array.isArray(commandData.operations)) {\n    console.log('Executing multiple operations:', commandData.operations.length);\n    const results = [];\n    let successCount = 0;\n    \n    for (const op of commandData.operations) {\n      const result = await executeSingleOperation(context, op.operation, op.parameters || {});\n      results.push(result);\n      if (result.success) successCount++;\n    }\n    \n    return {\n      success: successCount === commandData.operations.length,\n      message: `${successCount}/${commandData.operations.length} 작업이 완료되었습니다.`,\n      results: results\n    };\n  }\n  \n  // Single operation\n  return await executeSingleOperation(context, commandData.operation, commandData.parameters || {});\n}\n\n// Execute a single operation\nasync function executeSingleOperation(context, operation, params) {\n  console.log(`[${new Date().toISOString()}] Executing operation: ${operation} with params:`, params);\n  \n  try {\n    switch (operation) {\n      case 'merge':\n        return await executeMerge(context, params);\n      \n      case 'sum':\n        return await executeSum(context, params);\n      \n      case 'average':\n        return await executeAverage(context, params);\n      \n      case 'count':\n        return await executeCount(context, params);\n      \n      case 'format':\n        return await executeFormat(context, params);\n      \n      case 'sort':\n        return await executeSort(context, params);\n      \n      case 'filter':\n        return await executeFilter(context, params);\n      \n      case 'insert':\n        return await executeInsert(context, params);\n      \n      case 'delete':\n        return await executeDelete(context, params);\n      \n      case 'formula':\n        return await executeFormula(context, params);\n      \n      case 'chart':\n        return await executeChart(context, params);\n      \n      case 'conditional_format':\n        return await executeConditionalFormat(context, params);\n      \n      case 'translate':\n        return await executeTranslate(context, params);\n      \n      case 'compress':\n        return await executeCompress(context, params);\n      \n      case 'retry_translation':\n        return await executeRetryTranslation(context, params);\n      \n      case 'remove_border':\n        return await executeRemoveBorder(context, params);\n      \n      case 'border_format':\n        return await executeBorderFormat(context, params);\n      \n      default:\n        return {\n          success: false,\n          error: `알 수 없는 작업: ${operation}`\n        };\n    }\n  } catch (error) {\n    console.error('Error in executeInterpretedCommand:', error);\n    return {\n      success: false,\n      error: `작업 실행 중 오류: ${error.message || error.toString()}`\n    };\n  }\n}\n\n// Merge cells\nasync function executeMerge(context, params) {\n  console.log('executeMerge started with params:', params);\n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  const range = params.range ? worksheet.getRange(params.range) : context.workbook.getSelectedRange();\n  \n  console.log('Loading range address...');\n  // Load address property before using it\n  range.load('address');\n  await context.sync();\n  \n  console.log('Range address loaded:', range.address);\n  const rangeAddress = range.address;\n  \n  console.log('Merging range...');\n  range.merge();\n  await context.sync();\n  \n  console.log('Merge completed successfully');\n  return {\n    success: true,\n    message: `${rangeAddress} 범위가 병합되었습니다.`\n  };\n}\n\n// Sum values\nasync function executeSum(context, params) {\n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  \n  // If column name is provided, find the column and create range\n  if (params.columnName || params.sumType === 'column') {\n    console.log('Sum by column name:', params.columnName);\n    \n    // Get sheet context to find column by name\n    const usedRange = worksheet.getUsedRange();\n    usedRange.load([\"values\", \"rowCount\", \"columnCount\"]);\n    await context.sync();\n    \n    if (!usedRange || usedRange.rowCount === 0) {\n      return {\n        success: false,\n        error: '시트에 데이터가 없습니다.'\n      };\n    }\n    \n    let columnIndex = -1;\n    let columnLetter = '';\n    \n    // Check if columnName is a column letter reference (like \"D\", \"AA\", \"ABC\")\n    if (params.columnName && params.columnName.match(/^[A-Z]+$/)) {\n      // Direct column letter reference\n      columnLetter = params.columnName;\n      // Convert column letter(s) to index\n      columnIndex = 0;\n      for (let i = 0; i < columnLetter.length; i++) {\n        columnIndex = columnIndex * 26 + (columnLetter.charCodeAt(i) - 64);\n      }\n      columnIndex--; // Convert to 0-based index\n      console.log('Column letter specified:', columnLetter, 'index:', columnIndex);\n    } else {\n      // Find column by header name\n      const headers = usedRange.values[0];\n      \n      for (let i = 0; i < headers.length; i++) {\n        if (headers[i] && headers[i].toString().toLowerCase() === (params.columnName || '').toLowerCase()) {\n          columnIndex = i;\n          columnLetter = getColumnLetter(i);\n          break;\n        }\n      }\n    }\n    \n    if (columnIndex === -1) {\n      return {\n        success: false,\n        error: `\"${params.columnName}\" 열을 찾을 수 없습니다.`\n      };\n    }\n    \n    // Find last row with data in this column\n    let lastDataRow = 1; // Start from row 2 (after header)\n    for (let row = 1; row < usedRange.rowCount; row++) {\n      if (usedRange.values[row][columnIndex] !== null && \n          usedRange.values[row][columnIndex] !== undefined && \n          usedRange.values[row][columnIndex] !== '') {\n        lastDataRow = row + 1; // +1 because Excel rows are 1-indexed\n      }\n    }\n    \n    // Create range from row 2 to last data row\n    const rangeAddress = `${columnLetter}2:${columnLetter}${lastDataRow}`;\n    \n    // Find first empty cell below the data\n    let targetRow = lastDataRow; // Start from row after last data (0-based becomes 1-based)\n    let foundEmpty = false;\n    \n    // Check up to 10 rows below for an empty cell\n    for (let i = 0; i < 10; i++) {\n      const checkCell = worksheet.getCell(lastDataRow + i, columnIndex);\n      checkCell.load(\"values\");\n      await context.sync();\n      \n      const cellValue = checkCell.values[0][0];\n      if (cellValue === null || cellValue === undefined || cellValue === '') {\n        targetRow = lastDataRow + i;\n        foundEmpty = true;\n        break;\n      }\n    }\n    \n    // If no empty cell found, use the row after last data\n    if (!foundEmpty) {\n      targetRow = lastDataRow;\n    }\n    \n    const sumCell = worksheet.getCell(targetRow, columnIndex);\n    \n    console.log(`Summing range: ${rangeAddress}, placing result in row ${targetRow + 1}`);\n    \n    sumCell.formulas = [[`=SUM(${rangeAddress})`]];\n    await context.sync();\n    \n    sumCell.load([\"values\", \"address\"]);\n    await context.sync();\n    \n    return {\n      success: true,\n      message: `${params.columnName} 열의 합계를 ${sumCell.address}에 계산했습니다: ${formatNumber(sumCell.values[0][0])}`,\n      value: sumCell.values[0][0]\n    };\n  }\n  \n  // Original logic for range-based sum - handle multiple selections\n  let sourceRange;\n  let sumFormula;\n  \n  if (params.sourceRange) {\n    sourceRange = worksheet.getRange(params.sourceRange);\n    sourceRange.load([\"columnIndex\", \"rowIndex\", \"rowCount\", \"address\"]);\n    await context.sync();\n    sumFormula = `=SUM(${sourceRange.address})`;\n  } else {\n    // Handle multiple selections\n    try {\n      const selectedRanges = context.workbook.getSelectedRanges();\n      selectedRanges.load([\"areas\", \"areaCount\"]);\n      await context.sync();\n      \n      if (selectedRanges.areaCount > 1) {\n        // Multiple non-contiguous ranges selected\n        const rangeAddresses = [];\n        \n        for (let i = 0; i < selectedRanges.areas.items.length; i++) {\n          const area = selectedRanges.areas.items[i];\n          area.load(\"address\");\n        }\n        await context.sync();\n        \n        for (let i = 0; i < selectedRanges.areas.items.length; i++) {\n          rangeAddresses.push(selectedRanges.areas.items[i].address);\n        }\n        \n        sumFormula = `=SUM(${rangeAddresses.join(',')})`;\n        sourceRange = selectedRanges.areas.items[0];\n        sourceRange.load([\"columnIndex\", \"rowIndex\", \"rowCount\"]);\n        await context.sync();\n      } else {\n        // Single contiguous range\n        sourceRange = context.workbook.getSelectedRange();\n        sourceRange.load([\"columnIndex\", \"rowIndex\", \"rowCount\", \"address\"]);\n        await context.sync();\n        sumFormula = `=SUM(${sourceRange.address})`;\n      }\n    } catch (error) {\n      console.log('Error getting selected ranges, trying fallback:', error);\n      // For non-contiguous selections, getSelectedRange() fails\n      // Try to get selected ranges differently\n      try {\n        const selectedRanges = context.workbook.getSelectedRanges();\n        selectedRanges.load([\"areas\", \"areaCount\"]);\n        await context.sync();\n        \n        if (selectedRanges.areas.items.length > 0) {\n          const rangeAddresses = [];\n          for (let i = 0; i < selectedRanges.areas.items.length; i++) {\n            const area = selectedRanges.areas.items[i];\n            area.load(\"address\");\n          }\n          await context.sync();\n          \n          for (let i = 0; i < selectedRanges.areas.items.length; i++) {\n            rangeAddresses.push(selectedRanges.areas.items[i].address);\n          }\n          \n          sumFormula = `=SUM(${rangeAddresses.join(',')})`;\n          sourceRange = selectedRanges.areas.items[0];\n          sourceRange.load([\"columnIndex\", \"rowIndex\", \"rowCount\"]);\n          await context.sync();\n        } else {\n          throw new Error('No ranges selected');\n        }\n      } catch (fallbackError) {\n        console.error('Fallback also failed:', fallbackError);\n        return { success: false, error: '선택한 범위를 처리할 수 없습니다. 연속된 범위를 선택해주세요.' };\n      }\n    }\n  }\n  \n  if (params.addNewRow === true) {\n    // Add new row for sum\n    const column = sourceRange.columnIndex;\n    const lastRow = sourceRange.rowIndex + sourceRange.rowCount;\n    const newCell = worksheet.getCell(lastRow, column);\n    \n    newCell.formulas = [[sumFormula]];\n    await context.sync();\n    \n    newCell.load([\"values\", \"address\"]);\n    await context.sync();\n    \n    return {\n      success: true,\n      message: `${newCell.address}에 합계를 계산했습니다: ${formatNumber(newCell.values[0][0])}`,\n      value: newCell.values[0][0]\n    };\n  } else if (params.targetCell) {\n    // Sum to specific cell\n    const targetCell = worksheet.getRange(params.targetCell);\n    targetCell.formulas = [[sumFormula]];\n    await context.sync();\n    \n    targetCell.load([\"values\", \"address\"]);\n    await context.sync();\n    \n    return {\n      success: true,\n      message: `${targetCell.address}에 합계를 계산했습니다: ${formatNumber(targetCell.values[0][0])}`,\n      value: targetCell.values[0][0]\n    };\n  } else {\n    // Default: find an empty cell for the result\n    // For multiple non-contiguous selections, find an empty spot\n    const usedRange = worksheet.getUsedRange();\n    usedRange.load([\"rowCount\", \"columnCount\"]);\n    await context.sync();\n    \n    let targetCell;\n    \n    // If multiple ranges selected (formula contains comma), find empty cell strategically\n    if (sumFormula.includes(',')) {\n      // Multiple ranges - find empty area\n      const lastUsedRow = usedRange ? usedRange.rowCount : 1;\n      const lastUsedCol = usedRange ? usedRange.columnCount : 1;\n      \n      // Try to find empty cell to the right of selection\n      let foundEmpty = false;\n      for (let col = lastUsedCol; col < lastUsedCol + 5; col++) {\n        const checkCell = worksheet.getCell(sourceRange.rowIndex, col);\n        checkCell.load(\"values\");\n        await context.sync();\n        \n        if (!checkCell.values[0][0]) {\n          targetCell = checkCell;\n          foundEmpty = true;\n          break;\n        }\n      }\n      \n      // If not found to the right, try below the used range\n      if (!foundEmpty) {\n        for (let row = lastUsedRow; row < lastUsedRow + 5; row++) {\n          const checkCell = worksheet.getCell(row, 0);\n          checkCell.load(\"values\");\n          await context.sync();\n          \n          if (!checkCell.values[0][0]) {\n            targetCell = checkCell;\n            foundEmpty = true;\n            break;\n          }\n        }\n      }\n      \n      // If still not found, use a safe location below all data\n      if (!foundEmpty) {\n        targetCell = worksheet.getCell(lastUsedRow + 2, 0);\n      }\n    } else {\n      // Single range - find empty cell below the range\n      const column = sourceRange.columnIndex;\n      const startRow = sourceRange.rowIndex + sourceRange.rowCount;\n      \n      let targetRow = startRow;\n      let foundEmpty = false;\n      \n      // Check up to 10 rows below for an empty cell\n      for (let i = 0; i < 10; i++) {\n        const checkCell = worksheet.getCell(startRow + i, column);\n        checkCell.load(\"values\");\n        await context.sync();\n        \n        const cellValue = checkCell.values[0][0];\n        if (cellValue === null || cellValue === undefined || cellValue === '') {\n          targetRow = startRow + i;\n          foundEmpty = true;\n          break;\n        }\n      }\n      \n      // If no empty cell found in the next 10 rows, use the immediate next row\n      if (!foundEmpty) {\n        targetRow = startRow;\n      }\n      \n      targetCell = worksheet.getCell(targetRow, column);\n    }\n    \n    targetCell.formulas = [[sumFormula]];\n    await context.sync();\n    \n    targetCell.load([\"values\", \"address\"]);\n    await context.sync();\n    \n    return {\n      success: true,\n      message: `${targetCell.address}에 합계를 계산했습니다: ${formatNumber(targetCell.values[0][0])}`,\n      value: targetCell.values[0][0]\n    };\n  }\n}\n\n// Helper function to get headers\nasync function getHeaders(context) {\n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  const usedRange = worksheet.getUsedRange();\n  \n  if (!usedRange) {\n    return [];\n  }\n  \n  usedRange.load([\"values\", \"columnCount\"]);\n  await context.sync();\n  \n  const headers = [];\n  const headerRow = usedRange.values[0];\n  \n  if (headerRow) {\n    for (let i = 0; i < headerRow.length; i++) {\n      headers.push({\n        column: i + 1,\n        columnLetter: getColumnLetter(i),\n        label: headerRow[i] ? headerRow[i].toString() : ''\n      });\n    }\n  }\n  \n  return headers;\n}\n\n// Calculate average\nasync function executeAverage(context, params) {\n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  let sourceRange;\n  let rangeDescription = '';\n  let averageFormula = '';\n  \n  try {\n    // Handle different average types\n    if (params.averageType === 'column') {\n      if (params.column) {\n        // Column specified by letter (e.g., \"C\")\n        const usedRange = worksheet.getUsedRange();\n        if (!usedRange) {\n          return { success: false, error: '데이터가 없습니다.' };\n        }\n        \n        usedRange.load([\"rowCount\", \"columnCount\"]);\n        await context.sync();\n        \n        const columnIndex = params.column.charCodeAt(0) - 65;\n        if (columnIndex < 0 || columnIndex >= usedRange.columnCount) {\n          return { success: false, error: '유효하지 않은 열입니다.' };\n        }\n        \n        // Get column data starting from row 2 (skip header)\n        if (usedRange.rowCount > 1) {\n          sourceRange = worksheet.getRangeByIndexes(1, columnIndex, usedRange.rowCount - 1, 1);\n          rangeDescription = `${params.column}열`;\n        } else {\n          return { success: false, error: '평균을 계산할 데이터가 없습니다.' };\n        }\n        \n        sourceRange.load([\"address\"]);\n        await context.sync();\n        averageFormula = `=AVERAGE(${sourceRange.address})`;\n        \n      } else if (params.columnName) {\n        // Check if columnName is a column letter reference (like \"E\", \"AA\", \"ABC\")\n        if (params.columnName.match(/^[A-Z]+$/)) {\n          // Direct column letter reference\n          const columnLetter = params.columnName;\n          // Convert column letter(s) to index (A=0, B=1, ..., Z=25, AA=26, AB=27, ...)\n          let columnIndex = 0;\n          for (let i = 0; i < columnLetter.length; i++) {\n            columnIndex = columnIndex * 26 + (columnLetter.charCodeAt(i) - 64);\n          }\n          columnIndex--; // Convert to 0-based index\n          \n          const usedRange = worksheet.getUsedRange();\n          if (!usedRange) {\n            return { success: false, error: '데이터가 없습니다.' };\n          }\n          \n          usedRange.load([\"rowCount\", \"columnCount\"]);\n          await context.sync();\n          \n          if (columnIndex < 0 || columnIndex >= usedRange.columnCount) {\n            return { success: false, error: '유효하지 않은 열입니다.' };\n          }\n          \n          // Get column data starting from row 2 (skip header)\n          if (usedRange.rowCount > 1) {\n            sourceRange = worksheet.getRangeByIndexes(1, columnIndex, usedRange.rowCount - 1, 1);\n            rangeDescription = `${params.columnName}열`;\n          } else {\n            return { success: false, error: '평균을 계산할 데이터가 없습니다.' };\n          }\n          \n          sourceRange.load([\"address\"]);\n          await context.sync();\n          averageFormula = `=AVERAGE(${sourceRange.address})`;\n        } else {\n          // Column specified by header name\n          const headers = await getHeaders(context);\n          const columnInfo = headers.find(h => h.label === params.columnName);\n          \n          if (!columnInfo) {\n            return { success: false, error: `\"${params.columnName}\" 열을 찾을 수 없습니다.` };\n          }\n          \n          const usedRange = worksheet.getUsedRange();\n          usedRange.load([\"rowCount\"]);\n          await context.sync();\n          \n          if (usedRange.rowCount > 1) {\n            sourceRange = worksheet.getRangeByIndexes(1, columnInfo.column - 1, usedRange.rowCount - 1, 1);\n            rangeDescription = `\"${params.columnName}\" 열`;\n          } else {\n            return { success: false, error: '평균을 계산할 데이터가 없습니다.' };\n          }\n          \n          sourceRange.load([\"address\"]);\n          await context.sync();\n          averageFormula = `=AVERAGE(${sourceRange.address})`;\n        }\n      }\n    } else if (params.averageType === 'row') {\n      // Row average (e.g., \"3행 평균\")\n      const usedRange = worksheet.getUsedRange();\n      if (!usedRange) {\n        return { success: false, error: '데이터가 없습니다.' };\n      }\n      \n      usedRange.load([\"rowCount\", \"columnCount\"]);\n      await context.sync();\n      \n      const rowIndex = params.row - 1; // Convert to 0-based\n      if (rowIndex < 0 || rowIndex >= usedRange.rowCount) {\n        return { success: false, error: '유효하지 않은 행입니다.' };\n      }\n      \n      // Get entire row data\n      sourceRange = worksheet.getRangeByIndexes(rowIndex, 0, 1, usedRange.columnCount);\n      rangeDescription = `${params.row}행`;\n      \n      sourceRange.load([\"address\", \"rowIndex\", \"columnIndex\", \"columnCount\"]);\n      await context.sync();\n      averageFormula = `=AVERAGE(${sourceRange.address})`;\n      \n    } else if (params.sourceRange) {\n      // Specific range (e.g., \"C1:C100\")\n      sourceRange = worksheet.getRange(params.sourceRange);\n      rangeDescription = params.sourceRange;\n      \n      sourceRange.load([\"address\"]);\n      await context.sync();\n      averageFormula = `=AVERAGE(${sourceRange.address})`;\n      \n    } else {\n      // Default: use selected range(s) - handle multiple selections\n      try {\n        // Try to get multiple selected ranges (for non-contiguous selections)\n        const selectedRanges = context.workbook.getSelectedRanges();\n        selectedRanges.load([\"areas\", \"areaCount\"]);\n        await context.sync();\n        \n        if (selectedRanges.areaCount > 1) {\n          // Multiple non-contiguous ranges selected\n          const rangeAddresses = [];\n          \n          for (let i = 0; i < selectedRanges.areas.items.length; i++) {\n            const area = selectedRanges.areas.items[i];\n            area.load(\"address\");\n          }\n          await context.sync();\n          \n          for (let i = 0; i < selectedRanges.areas.items.length; i++) {\n            rangeAddresses.push(selectedRanges.areas.items[i].address);\n          }\n          \n          averageFormula = `=AVERAGE(${rangeAddresses.join(',')})`;\n          rangeDescription = '선택한 셀';\n          \n          // Use the first selected range for positioning\n          sourceRange = selectedRanges.areas.items[0];\n          sourceRange.load([\"columnIndex\", \"rowIndex\", \"rowCount\", \"columnCount\"]);\n          await context.sync();\n          \n        } else {\n          // Single contiguous range\n          sourceRange = context.workbook.getSelectedRange();\n          rangeDescription = '선택한 범위';\n          \n          sourceRange.load([\"columnIndex\", \"rowIndex\", \"rowCount\", \"columnCount\", \"address\"]);\n          await context.sync();\n          averageFormula = `=AVERAGE(${sourceRange.address})`;\n        }\n        \n      } catch (error) {\n        console.log('Error getting selected ranges for average, trying fallback:', error);\n        // For non-contiguous selections, getSelectedRange() fails\n        try {\n          const selectedRanges = context.workbook.getSelectedRanges();\n          selectedRanges.load([\"areas\", \"areaCount\"]);\n          await context.sync();\n          \n          if (selectedRanges.areas.items.length > 0) {\n            const rangeAddresses = [];\n            for (let i = 0; i < selectedRanges.areas.items.length; i++) {\n              const area = selectedRanges.areas.items[i];\n              area.load(\"address\");\n            }\n            await context.sync();\n            \n            for (let i = 0; i < selectedRanges.areas.items.length; i++) {\n              rangeAddresses.push(selectedRanges.areas.items[i].address);\n            }\n            \n            averageFormula = `=AVERAGE(${rangeAddresses.join(',')})`;\n            rangeDescription = '선택한 셀';\n            sourceRange = selectedRanges.areas.items[0];\n            sourceRange.load([\"columnIndex\", \"rowIndex\", \"rowCount\", \"columnCount\"]);\n            await context.sync();\n          } else {\n            throw new Error('No ranges selected');\n          }\n        } catch (fallbackError) {\n          console.error('Average fallback also failed:', fallbackError);\n          return { success: false, error: '선택한 범위를 처리할 수 없습니다. 연속된 범위를 선택해주세요.' };\n        }\n      }\n    }\n    \n    // Determine where to place the result\n    let targetCell;\n    if (params.targetCell) {\n      targetCell = worksheet.getRange(params.targetCell);\n    } else if (params.averageType === 'row') {\n      // For row average, place result at the end of the row\n      const lastColumn = sourceRange.columnIndex + sourceRange.columnCount;\n      targetCell = worksheet.getCell(sourceRange.rowIndex, lastColumn);\n    } else {\n      // For column average or range, find first empty cell below the range\n      const column = sourceRange.columnIndex;\n      const startRow = sourceRange.rowIndex + sourceRange.rowCount;\n      \n      // Find the first empty cell below the selected range\n      let targetRow = startRow;\n      let foundEmpty = false;\n      \n      // Check up to 10 rows below for an empty cell\n      for (let i = 0; i < 10; i++) {\n        const checkCell = worksheet.getCell(startRow + i, column);\n        checkCell.load(\"values\");\n        await context.sync();\n        \n        const cellValue = checkCell.values[0][0];\n        if (cellValue === null || cellValue === undefined || cellValue === '') {\n          targetRow = startRow + i;\n          foundEmpty = true;\n          break;\n        }\n      }\n      \n      // If no empty cell found in the next 10 rows, use the immediate next row\n      if (!foundEmpty) {\n        targetRow = startRow;\n      }\n      \n      targetCell = worksheet.getCell(targetRow, column);\n    }\n    \n    // Apply AVERAGE formula\n    targetCell.formulas = [[averageFormula]];\n    targetCell.numberFormat = [[\"#,##0.00\"]]; // Format as number with 2 decimal places\n    await context.sync();\n    \n    targetCell.load([\"values\", \"address\"]);\n    await context.sync();\n    \n    return {\n      success: true,\n      message: `${rangeDescription}의 평균을 ${targetCell.address}에 계산했습니다: ${formatNumber(targetCell.values[0][0])}`,\n      value: targetCell.values[0][0]\n    };\n    \n  } catch (error) {\n    console.error('Error in executeAverage:', error);\n    return {\n      success: false,\n      error: `평균 계산 중 오류 발생: ${error.message}`\n    };\n  }\n}\n\n// Count cells\nasync function executeCount(context, params) {\n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  const sourceRange = params.sourceRange ? worksheet.getRange(params.sourceRange) : context.workbook.getSelectedRange();\n  \n  sourceRange.load([\"address\"]);\n  await context.sync();\n  \n  let formula;\n  if (params.countType === 'countif' && params.condition !== undefined) {\n    let criteria;\n    if (params.operator === 'contains') {\n      criteria = `\"*${params.condition}*\"`;\n    } else if (params.operator === 'equals') {\n      criteria = typeof params.condition === 'string' ? `\"${params.condition}\"` : params.condition;\n    } else if (params.operator && ['>', '<', '>=', '<=', '<>'].includes(params.operator)) {\n      criteria = `\"${params.operator}${params.condition}\"`;\n    } else {\n      if (typeof params.condition === 'string') {\n        criteria = `\"*${params.condition}*\"`;\n      } else {\n        criteria = params.condition;\n      }\n    }\n    formula = `=COUNTIF(${sourceRange.address}, ${criteria})`;\n  } else if (params.countType === 'counta') {\n    formula = `=COUNTA(${sourceRange.address})`;\n  } else {\n    formula = `=COUNT(${sourceRange.address})`;\n  }\n  \n  let resultCell;\n  if (params.targetCell) {\n    resultCell = worksheet.getRange(params.targetCell);\n  } else {\n    const usedRange = worksheet.getUsedRange();\n    await context.sync();\n    \n    const lastRow = usedRange ? usedRange.rowCount : 1;\n    const lastCol = usedRange ? usedRange.columnCount : 1;\n    resultCell = worksheet.getCell(lastRow, lastCol);\n  }\n  \n  resultCell.formulas = [[formula]];\n  await context.sync();\n  \n  resultCell.load(\"values\");\n  await context.sync();\n  \n  return {\n    success: true,\n    message: params.countType === 'countif' ? \n      `\"${params.condition}\"을(를) 포함하는 셀의 개수: ${formatNumber(resultCell.values[0][0])}개` :\n      `개수를 계산했습니다: ${formatNumber(resultCell.values[0][0])}개`,\n    value: resultCell.values[0][0]\n  };\n}\n\n// Format cells\nasync function executeFormat(context, params) {\n  console.log('executeFormat called with params:', params);\n  \n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  let ranges = [];\n  \n  if (params.range) {\n    ranges.push(worksheet.getRange(params.range));\n  } else {\n    // Handle multiple selections\n    try {\n      const selectedRanges = context.workbook.getSelectedRanges();\n      selectedRanges.load([\"areas\", \"areaCount\"]);\n      await context.sync();\n      \n      if (selectedRanges.areaCount > 1) {\n        // Multiple non-contiguous ranges selected\n        for (let i = 0; i < selectedRanges.areas.items.length; i++) {\n          ranges.push(selectedRanges.areas.items[i]);\n        }\n      } else {\n        // Single contiguous range\n        ranges.push(context.workbook.getSelectedRange());\n      }\n    } catch (error) {\n      console.log('Error getting selected ranges for format:', error);\n      return { success: false, error: '선택한 범위를 처리할 수 없습니다. 연속된 범위를 선택해주세요.' };\n    }\n  }\n  \n  // Load format for all ranges\n  for (const range of ranges) {\n    range.load(\"format\");\n  }\n  await context.sync();\n  \n  // Apply formatting to all ranges\n  for (const range of ranges) {\n    if (params.bold !== undefined) {\n      range.format.font.bold = params.bold;\n    }\n    \n    if (params.italic !== undefined) {\n      range.format.font.italic = params.italic;\n    }\n    \n    if (params.fontSize) {\n      range.format.font.size = params.fontSize;\n    }\n    \n    if (params.fontColor) {\n      range.format.font.color = params.fontColor;\n    }\n    \n    if (params.backgroundColor) {\n      range.format.fill.color = params.backgroundColor;\n    }\n    \n    if (params.horizontalAlignment) {\n      range.format.horizontalAlignment = params.horizontalAlignment === 'left' ? 'Left' :\n                                       params.horizontalAlignment === 'center' ? 'Center' :\n                                       params.horizontalAlignment === 'right' ? 'Right' : 'General';\n    }\n    \n    if (params.numberFormat) {\n      // Handle specific format types\n      let format = params.numberFormat;\n      if (format === 'number' || format === '숫자') {\n        format = '#,##0';\n      } else if (format === 'currency' || format === '원화' || format === 'won' || format === '통화') {\n        format = '₩#,##0';\n      } else if (format === 'currency_decimal' || format === '원화_소수') {\n        format = '₩#,##0.00';\n      } else if (format === 'percentage' || format === '퍼센트' || format === '백분율') {\n        format = '0%';\n      } else if (format === 'percentage_decimal' || format === '퍼센트_소수') {\n        format = '0.00%';\n      } else if (format === 'date' || format === '날짜') {\n        format = 'yyyy-mm-dd';\n      } else if (format === 'time' || format === '시간') {\n        format = 'hh:mm:ss';\n      } else if (format === 'text' || format === '텍스트') {\n        format = '@';\n      } else if (format === 'general' || format === '일반') {\n        format = 'General';\n      }\n      \n      // Set number format for the range\n      range.numberFormat = format;\n    }\n  }\n  \n  await context.sync();\n  \n  return {\n    success: true,\n    message: '서식이 적용되었습니다.'\n  };\n}\n\n// Sort data\nasync function executeSort(context, params) {\n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  const range = params.range ? worksheet.getRange(params.range) : worksheet.getUsedRange();\n  \n  const column = params.column || 1;\n  const ascending = params.ascending !== undefined ? params.ascending : true;\n  \n  range.sort.apply([\n    {\n      key: column - 1, // Excel API uses 0-based index\n      ascending: ascending\n    }\n  ]);\n  \n  await context.sync();\n  \n  const columnLetter = getColumnLetter(column - 1);\n  \n  return {\n    success: true,\n    message: `${columnLetter}열 기준으로 ${ascending ? '오름차순' : '내림차순'} 정렬되었습니다.`\n  };\n}\n\n// Create chart\nasync function executeChart(context, params) {\n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  let sourceData;\n  let dataAddress = '';\n  \n  console.log('Creating chart with params:', params);\n  \n  if (params.range) {\n    sourceData = worksheet.getRange(params.range);\n    sourceData.load([\"address\", \"values\"]);\n    await context.sync();\n    dataAddress = sourceData.address;\n  } else {\n    // Handle multiple selections for chart data\n    try {\n      const selectedRanges = context.workbook.getSelectedRanges();\n      selectedRanges.load([\"areas\", \"areaCount\"]);\n      await context.sync();\n      \n      if (selectedRanges.areaCount > 1) {\n        // For charts with multiple non-contiguous ranges, create a temporary data range\n        console.log('Multiple ranges selected for chart, need to consolidate data');\n        \n        // Collect all selected ranges\n        const allRanges = [];\n        for (let i = 0; i < selectedRanges.areas.items.length; i++) {\n          const area = selectedRanges.areas.items[i];\n          area.load([\"address\", \"values\", \"rowIndex\", \"columnIndex\"]);\n          allRanges.push(area);\n        }\n        await context.sync();\n        \n        // Find an empty area to create temporary consolidated data\n        const usedRange = worksheet.getUsedRangeOrNullObject();\n        usedRange.load([\"isNullObject\", \"rowCount\", \"columnCount\"]);\n        await context.sync();\n        \n        const tempStartRow = !usedRange.isNullObject ? usedRange.rowCount + 2 : 1;\n        const tempStartCol = 0;\n        \n        // Consolidate data into a contiguous range - handle individual cells\n        const consolidatedData = [];\n        let maxColumns = 1;\n        \n        for (const range of allRanges) {\n          if (range.values && range.values.length > 0) {\n            // Each range might be a single cell or a range of cells\n            for (const row of range.values) {\n              consolidatedData.push(row);\n              maxColumns = Math.max(maxColumns, row.length);\n            }\n          }\n        }\n        \n        // Write consolidated data to temporary location\n        if (consolidatedData.length > 0) {\n          console.log('Consolidated data:', consolidatedData);\n          console.log('Number of ranges:', allRanges.length);\n          \n          try {\n            // For individual cells, reorganize data for chart\n            if (consolidatedData.every(row => row.length === 1)) {\n              // All are single cells - create label-value pairs\n              const reorganizedData = [];\n              for (let i = 0; i < consolidatedData.length; i++) {\n                const value = consolidatedData[i][0];\n                // Skip empty cells\n                if (value !== null && value !== undefined && value !== '') {\n                  reorganizedData.push([`Item ${i+1}`, value]);\n                }\n              }\n              \n              if (reorganizedData.length === 0) {\n                return { success: false, error: '선택한 셀에 유효한 데이터가 없습니다.' };\n              }\n              \n              console.log('Reorganized data for chart:', reorganizedData);\n              \n              const tempRange = worksheet.getRangeByIndexes(\n                tempStartRow, \n                tempStartCol, \n                reorganizedData.length, \n                2  // Always 2 columns for label-value pairs\n              );\n              \n              tempRange.values = reorganizedData;\n              await context.sync();\n              \n              sourceData = tempRange;\n            } else {\n              // Mixed or multi-column data - use as-is\n              const tempRange = worksheet.getRangeByIndexes(\n                tempStartRow, \n                tempStartCol, \n                consolidatedData.length, \n                maxColumns\n              );\n              \n              tempRange.values = consolidatedData;\n              await context.sync();\n              \n              sourceData = tempRange;\n            }\n            \n            sourceData.load([\"address\", \"values\", \"rowCount\", \"columnCount\"]);\n            await context.sync();\n            \n            console.log('Temp range created:', {\n              address: sourceData.address,\n              rowCount: sourceData.rowCount,\n              columnCount: sourceData.columnCount,\n              firstValue: sourceData.values[0]\n            });\n            \n            dataAddress = sourceData.address;\n          } catch (error) {\n            console.error('Error creating temporary range:', error);\n            return { success: false, error: '임시 데이터 범위 생성 중 오류가 발생했습니다.' };\n          }\n        } else {\n          return { success: false, error: '선택한 셀에 데이터가 없습니다.' };\n        }\n      } else {\n        // Single contiguous range\n        sourceData = context.workbook.getSelectedRange();\n        sourceData.load([\"address\", \"values\"]);\n        await context.sync();\n        dataAddress = sourceData.address;\n      }\n    } catch (error) {\n      console.log('Error getting selected ranges for chart:', error);\n      return { success: false, error: '선택한 범위를 처리할 수 없습니다. 연속된 범위를 선택해주세요.' };\n    }\n  }\n  \n  console.log('Chart data range:', dataAddress);\n  \n  // Determine chart type\n  let chartType;\n  if (params.chartType === 'bar' || params.chartType === '막대') {\n    chartType = Excel.ChartType.columnClustered;\n  } else if (params.chartType === 'line' || params.chartType === '선') {\n    chartType = Excel.ChartType.line;\n  } else if (params.chartType === 'pie' || params.chartType === '원') {\n    chartType = Excel.ChartType.pie;\n  } else if (params.chartType === 'scatter' || params.chartType === '분산형') {\n    chartType = Excel.ChartType.xyscatter;\n  } else {\n    // Default to column chart\n    chartType = Excel.ChartType.columnClustered;\n  }\n  \n  try {\n    // Validate source data before creating chart\n    if (!sourceData) {\n      return { success: false, error: '차트 데이터가 없습니다.' };\n    }\n    \n    // Create the chart with error handling\n    console.log('Creating chart with type:', chartType);\n    console.log('Source data address:', dataAddress);\n    \n    const chart = worksheet.charts.add(chartType, sourceData, Excel.ChartSeriesBy.auto);\n    \n    // Set chart properties\n    chart.title.text = params.title || '차트';\n    chart.height = 300;\n    chart.width = 400;\n    \n    // Position the chart\n    chart.left = params.offsetX || 100;\n    chart.top = params.offsetY || 100;\n    \n    // Set legend position\n    chart.legend.position = Excel.ChartLegendPosition.bottom;\n    chart.legend.visible = true;\n    \n    await context.sync();\n    \n    console.log('Chart created successfully');\n  } catch (chartError) {\n    console.error('Error creating chart:', chartError);\n    console.error('Chart error details:', {\n      message: chartError.message,\n      stack: chartError.stack,\n      chartType: chartType,\n      dataAddress: dataAddress\n    });\n    \n    // Try a simpler chart type as fallback\n    if (chartType !== Excel.ChartType.columnClustered) {\n      console.log('Trying fallback to column chart...');\n      try {\n        const chart = worksheet.charts.add(Excel.ChartType.columnClustered, sourceData, Excel.ChartSeriesBy.auto);\n        chart.title.text = params.title || '차트';\n        chart.height = 300;\n        chart.width = 400;\n        chart.left = params.offsetX || 100;\n        chart.top = params.offsetY || 100;\n        await context.sync();\n        \n        return {\n          success: true,\n          message: `${dataAddress} 범위로 막대 차트가 생성되었습니다. (원래 요청한 차트 타입이 지원되지 않아 막대 차트로 대체되었습니다.)`\n        };\n      } catch (fallbackError) {\n        console.error('Fallback chart also failed:', fallbackError);\n        return { success: false, error: '차트 생성에 실패했습니다. 데이터 형식을 확인해주세요.' };\n      }\n    }\n    \n    return { success: false, error: `차트 생성 중 오류: ${chartError.message}` };\n  }\n  \n  return {\n    success: true,\n    message: `${dataAddress} 범위로 ${params.chartType || '막대'} 차트가 생성되었습니다.`\n  };\n}\n\n// Add conditional formatting\nasync function executeConditionalFormat(context, params) {\n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  let ranges = [];\n  \n  console.log('Applying conditional format with params:', params);\n  \n  if (params.range) {\n    ranges.push(worksheet.getRange(params.range));\n  } else {\n    // If no range specified, use the entire used range of the worksheet\n    console.log('No range specified for conditional format, using entire sheet');\n    const usedRange = worksheet.getUsedRangeOrNullObject();\n    usedRange.load(\"isNullObject\");\n    await context.sync();\n    \n    if (!usedRange.isNullObject) {\n      // Use the entire used range\n      ranges.push(usedRange);\n    } else {\n      // If no used range, apply to a large default range\n      // Excel will optimize this automatically\n      const defaultRange = worksheet.getRange(\"A1:XFD1048576\");\n      ranges.push(defaultRange);\n    }\n  }\n  \n  // Apply conditional formatting to all ranges\n  try {\n    for (const range of ranges) {\n      // Load range to ensure it's valid\n      range.load(\"address\");\n      await context.sync();\n      \n      console.log('Applying conditional format to range:', range.address);\n      \n      // Simply apply conditional format to the entire range\n      // Excel will automatically skip non-numeric cells for numeric comparisons\n      const conditionalFormat = range.conditionalFormats.add(Excel.ConditionalFormatType.cellValue);\n      \n      // Set the rule based on condition\n      if (params.condition === 'greater_than' && params.value !== undefined) {\n        conditionalFormat.cellValue.rule = {\n          formula1: params.value.toString(),\n          operator: Excel.ConditionalCellValueOperator.greaterThan\n        };\n      } else if (params.condition === 'less_than' && params.value !== undefined) {\n        conditionalFormat.cellValue.rule = {\n          formula1: params.value.toString(),\n          operator: Excel.ConditionalCellValueOperator.lessThan\n        };\n      } else if (params.condition === 'equal_to' && params.value !== undefined) {\n        conditionalFormat.cellValue.rule = {\n          formula1: params.value.toString(),\n          operator: Excel.ConditionalCellValueOperator.equalTo\n        };\n      } else if (params.condition === 'text_contains' && params.value !== undefined) {\n        conditionalFormat.cellValue.rule = {\n          formula1: params.value.toString(),\n          operator: Excel.ConditionalCellValueOperator.containsText\n        };\n      } else {\n        // Default to greater than\n        conditionalFormat.cellValue.rule = {\n          formula1: (params.value || 0).toString(),\n          operator: Excel.ConditionalCellValueOperator.greaterThan\n        };\n      }\n      \n      // Set the format\n      conditionalFormat.cellValue.format.fill.color = params.backgroundColor || \"#00FF00\";\n      if (params.fontColor) {\n        conditionalFormat.cellValue.format.font.color = params.fontColor;\n      }\n      if (params.bold) {\n        conditionalFormat.cellValue.format.font.bold = true;\n      }\n    }\n  } catch (formatError) {\n    console.error('Error applying conditional format:', formatError);\n    return {\n      success: false,\n      error: `조건부 서식 적용 중 오류: ${formatError.message}`\n    };\n  }\n  \n  await context.sync();\n  \n  return {\n    success: true,\n    message: `조건부 서식이 적용되었습니다. (${params.condition} ${params.value || ''})`\n  };\n}\n\n// Translate column contents\nasync function executeTranslate(context, params) {\n  console.log('executeTranslate called with params:', params);\n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  \n  if (!params.targetLanguage) {\n    return { success: false, error: '대상 언어를 지정해주세요.' };\n  }\n  \n  let sourceRange;\n  let targetColumnIndex;\n  \n  if (params.sourceRange) {\n    // Handle column ranges like \"C:C\" by intersecting with used range\n    if (params.sourceRange.match(/^[A-Z]+:[A-Z]+$/)) {\n      console.log('Handling column range:', params.sourceRange);\n      const usedRange = worksheet.getUsedRange();\n      if (!usedRange) {\n        return { success: false, error: '번역할 데이터가 없습니다.' };\n      }\n      \n      usedRange.load([\"rowCount\", \"columnCount\"]);\n      await context.sync();\n      \n      console.log('Used range:', {\n        rowCount: usedRange.rowCount,\n        columnCount: usedRange.columnCount\n      });\n      \n      // Get the column letter from the range (e.g., \"C\" from \"C:C\")\n      const columnLetter = params.sourceRange.split(':')[0];\n      const columnIndex = columnLetter.charCodeAt(0) - 65;\n      \n      // Get only the used portion of the column, starting from row 2 (skip header)\n      if (usedRange.rowCount > 1) {\n        sourceRange = worksheet.getRangeByIndexes(1, columnIndex, usedRange.rowCount - 1, 1);\n      } else {\n        return { success: false, error: '번역할 데이터가 없습니다.' };\n      }\n      \n      // Handle target range similarly\n      if (params.targetRange && params.targetRange.match(/^[A-Z]+:[A-Z]+$/)) {\n        const targetColumnLetter = params.targetRange.split(':')[0];\n        targetColumnIndex = targetColumnLetter.charCodeAt(0) - 65;\n        console.log('Target column calculation:', {\n          targetRange: params.targetRange,\n          targetColumnLetter,\n          targetColumnIndex\n        });\n      } else {\n        // If no target specified, use next column\n        targetColumnIndex = columnIndex + 1;\n        console.log('Using next column as target:', {\n          sourceColumnIndex: columnIndex,\n          targetColumnIndex\n        });\n      }\n    } else {\n      // Handle specific ranges like \"B2:B40\"\n      sourceRange = worksheet.getRange(params.sourceRange);\n      \n      // Parse target column if specified\n      if (params.targetRange) {\n        if (params.targetRange.match(/^[A-Z]+:[A-Z]+$/)) {\n          // Extract column letter from targetRange like \"E:E\"\n          const targetColumnLetter = params.targetRange.split(':')[0];\n          targetColumnIndex = targetColumnLetter.charCodeAt(0) - 65;\n          console.log('Target column parsed from targetRange:', {\n            targetRange: params.targetRange,\n            targetColumnLetter,\n            targetColumnIndex\n          });\n        }\n      }\n    }\n  } else if (params.sourceColumn) {\n    const columnIndex = params.sourceColumn.charCodeAt(0) - 65;\n    const usedRange = worksheet.getUsedRange();\n    usedRange.load([\"rowCount\"]);\n    await context.sync();\n    \n    if (usedRange.rowCount > 1) {\n      sourceRange = worksheet.getRangeByIndexes(1, columnIndex, usedRange.rowCount - 1, 1);\n    } else {\n      return { success: false, error: '번역할 데이터가 없습니다.' };\n    }\n    \n    targetColumnIndex = params.targetColumn === 'next' ? columnIndex + 1 :\n                       params.targetColumn ? params.targetColumn.charCodeAt(0) - 65 : columnIndex + 1;\n  } else {\n    return { success: false, error: '번역할 열을 지정해주세요.' };\n  }\n  \n  sourceRange.load([\"values\", \"rowIndex\", \"columnIndex\", \"rowCount\"]);\n  await context.sync();\n  \n  console.log('Source range loaded:', {\n    rowIndex: sourceRange.rowIndex,\n    columnIndex: sourceRange.columnIndex,\n    rowCount: sourceRange.rowCount,\n    values: sourceRange.values ? `${sourceRange.values.length} rows` : 'null'\n  });\n  \n  const sourceValues = sourceRange.values;\n  if (!sourceValues || sourceValues.length === 0) {\n    return { success: false, error: '번역할 데이터가 없습니다.' };\n  }\n  \n  const translations = [];\n  const batchSize = 20;\n  \n  // Translate in batches\n  for (let i = 0; i < sourceValues.length; i += batchSize) {\n    const batch = sourceValues.slice(i, Math.min(i + batchSize, sourceValues.length));\n    const batchTexts = batch.map(row => row[0]).filter(text => text);\n    \n    if (batchTexts.length > 0) {\n      const translatedBatch = await translateBatch(batchTexts, params.targetLanguage, params.sourceLanguage);\n      \n      // Check if translatedBatch is valid\n      if (!translatedBatch || !Array.isArray(translatedBatch)) {\n        console.error('Invalid translation batch received:', translatedBatch);\n        // Mark all as translation failed\n        for (let j = 0; j < batch.length; j++) {\n          if (batch[j][0]) {\n            translations.push([{ text: '번역 실패', isError: true }]);\n          } else {\n            translations.push([{ text: '', isError: false }]);\n          }\n        }\n      } else {\n        console.log('Processing translation batch:', {\n          batchLength: batch.length,\n          translatedBatchLength: translatedBatch.length,\n          sampleTranslations: translatedBatch.slice(0, 3),\n          firstTranslation: translatedBatch[0],\n          translationType: typeof translatedBatch[0],\n          rawData: JSON.stringify(translatedBatch.slice(0, 3))\n        });\n        \n        let translationIndex = 0;\n        for (let j = 0; j < batch.length; j++) {\n          if (batch[j][0]) {\n            const translatedText = translatedBatch[translationIndex] || '';\n            // Check if translation is empty or failed\n            if (!translatedText || translatedText.trim() === '') {\n              translations.push([{ text: '번역 실패', isError: true }]);\n            } else {\n              translations.push([{ text: translatedText, isError: false }]);\n            }\n            if (j < 3) {\n              console.log(`Translation ${j}: \"${batch[j][0]}\" -> \"${translatedText}\"`);\n            }\n            translationIndex++;\n          } else {\n            // Keep empty rows as empty\n            translations.push([{ text: '', isError: false }]);\n          }\n        }\n      }\n    } else {\n      for (let j = 0; j < batch.length; j++) {\n        translations.push([{ text: '', isError: false }]);\n      }\n    }\n    \n    // Show progress\n    if (i % 100 === 0 && i > 0) {\n      showStatus(`번역 중... ${Math.round((i / sourceValues.length) * 100)}%`, 'info');\n    }\n  }\n  \n  // Write translations\n  console.log('Writing translations to target column:', {\n    rowIndex: sourceRange.rowIndex,\n    targetColumnIndex: targetColumnIndex || sourceRange.columnIndex + 1,\n    translationsCount: translations.length,\n    sampleTranslations: translations.slice(0, 3).map(t => t[0])\n  });\n  console.log('First 5 translations raw:', JSON.stringify(translations.slice(0, 5)));\n  console.log('Translation content check:', {\n    first: translations[0] ? translations[0][0] : 'null',\n    second: translations[1] ? translations[1][0] : 'null',\n    third: translations[2] ? translations[2][0] : 'null',\n    isEmpty: translations[0] && translations[0][0] === ''\n  });\n  \n  // DEBUG: Check if translations contain original text instead of translations\n  console.log('DEBUG: Comparing source and translations:');\n  for (let i = 0; i < Math.min(5, translations.length); i++) {\n    console.log(`  [${i}] Source: \"${sourceValues[i][0]}\" -> Translation: \"${translations[i][0]}\"`);\n  }\n  \n  // Ensure targetColumnIndex is set correctly\n  if (targetColumnIndex === undefined) {\n    // If no target column specified, use the next column after source\n    targetColumnIndex = sourceRange.columnIndex + 1;\n    console.log('No target column specified, using next column:', targetColumnIndex);\n  }\n  \n  const targetRange = worksheet.getRangeByIndexes(\n    sourceRange.rowIndex,\n    targetColumnIndex,\n    translations.length,\n    1\n  );\n  \n  targetRange.load([\"address\", \"values\"]);\n  await context.sync();\n  console.log('Target range address:', targetRange.address);\n  console.log('Existing target values (first 3):', targetRange.values.slice(0, 3));\n  \n  // Clear existing values first\n  targetRange.clear(Excel.ClearApplyTo.contents);\n  await context.sync();\n  console.log('Target range cleared');\n  \n  // Ensure translations are properly formatted as 2D array\n  console.log('Setting target range values:', {\n    translationsLength: translations.length,\n    firstTranslation: translations[0],\n    isArray: Array.isArray(translations),\n    is2DArray: Array.isArray(translations[0])\n  });\n  \n  // Process translations and prepare values\n  const stringTranslations = [];\n  const errorRows = [];\n  \n  for (let i = 0; i < translations.length; i++) {\n    const translation = translations[i][0];\n    if (translation && typeof translation === 'object') {\n      stringTranslations.push([translation.text]);\n      if (translation.isError) {\n        errorRows.push(i);\n      }\n    } else {\n      // Handle legacy format\n      stringTranslations.push([String(translation || '')]);\n    }\n  }\n  \n  console.log('String translations (first 3):', stringTranslations.slice(0, 3));\n  console.log('Error rows:', errorRows.length, 'rows marked as errors');\n  \n  // Set the values\n  targetRange.values = stringTranslations;\n  await context.sync();\n  \n  // Apply error styling to failed translations\n  if (errorRows.length > 0) {\n    for (const rowIndex of errorRows) {\n      const errorCell = targetRange.getCell(rowIndex, 0);\n      errorCell.format.fill.color = \"#FFE6E6\"; // Light red background\n      errorCell.format.font.color = \"#CC0000\"; // Dark red text\n      errorCell.format.font.bold = true;\n    }\n    await context.sync();\n  }\n  \n  console.log('Translations written to Excel with error styling applied');\n  \n  // Verify the values were actually written\n  targetRange.load([\"values\", \"text\", \"valueTypes\"]);\n  await context.sync();\n  console.log('Verification - Target range:', {\n    address: targetRange.address,\n    values: targetRange.values.slice(0, 3),\n    text: targetRange.text.slice(0, 3),\n    valueTypes: targetRange.valueTypes.slice(0, 3),\n    actualFirstValue: targetRange.values[0] ? targetRange.values[0][0] : 'null',\n    firstThreeValues: [\n      targetRange.values[0] ? targetRange.values[0][0] : 'empty',\n      targetRange.values[1] ? targetRange.values[1][0] : 'empty',\n      targetRange.values[2] ? targetRange.values[2][0] : 'empty'\n    ]\n  });\n  \n  // Try alternative method - set each cell individually for debugging\n  if (translations.length > 0) {\n    const isEmpty = !targetRange.values[0] || !targetRange.values[0][0] || targetRange.values[0][0] === '';\n    console.log('Checking if values are empty:', {\n      isEmpty,\n      firstValue: targetRange.values[0] ? targetRange.values[0][0] : 'null',\n      firstValueLength: targetRange.values[0] && targetRange.values[0][0] ? targetRange.values[0][0].length : 0\n    });\n    \n    if (isEmpty) {\n      console.log('Values not visible, trying individual cell approach...');\n      // Try setting just the first few cells individually\n      for (let i = 0; i < Math.min(3, translations.length); i++) {\n        const cellRow = sourceRange.rowIndex + i;\n        const cellCol = targetColumnIndex || sourceRange.columnIndex + 1;\n        const cell = worksheet.getCell(cellRow, cellCol);\n        const cellValue = stringTranslations[i][0];\n        \n        console.log(`Setting cell (${cellRow},${cellCol}) to: \"${cellValue}\"`);\n        cell.values = [[cellValue]];\n        \n        await context.sync();\n        \n        // Verify it was set\n        cell.load(\"values\");\n        await context.sync();\n        console.log(`Cell ${i} after setting:`, cell.values[0][0]);\n      }\n    }\n  }\n  \n  // Add header\n  const headerCell = worksheet.getCell(0, targetColumnIndex || sourceRange.columnIndex + 1);\n  const sourceHeaderCell = worksheet.getCell(0, sourceRange.columnIndex);\n  sourceHeaderCell.load(\"values\");\n  await context.sync();\n  \n  headerCell.values = [[`${sourceHeaderCell.values[0][0]} (${params.targetLanguage})`]];\n  await context.sync();\n  \n  return {\n    success: true,\n    message: `번역이 완료되었습니다. (${sourceValues.length}개 항목)`\n  };\n}\n\n// Translate a batch of texts through proxy\nasync function translateBatch(texts, targetLanguage, sourceLanguage) {\n  try {\n    console.log('translateBatch called with', texts.length, 'texts');\n    \n    // Get selected model and auth key\n    const selectedModel = localStorage.getItem(\"excel_addon_selected_model\") || \"gpt-4.1-mini-2025-04-14\";\n    const authKey = localStorage.getItem(\"excel_addon_auth_key\");\n    const authEmail = localStorage.getItem(\"excel_addon_auth_email\");\n    \n    const response = await fetch(API_PROXY_URL, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        command: `Translate these items to ${targetLanguage}: ${texts.join(', ')}`,\n        sheetContext: {\n          operation: 'translate_batch',\n          texts: texts,\n          targetLanguage: targetLanguage,\n          sourceLanguage: sourceLanguage\n        },\n        model: selectedModel,\n        authKey: authKey,\n        authEmail: authEmail\n      })\n    });\n    \n    console.log('Translation response status:', response.status);\n    \n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    \n    const result = await response.json();\n    console.log('Translation result:', result);\n    \n    if (result.success && result.data && result.data.translations) {\n      console.log('Translations received:', result.data.translations.length);\n      console.log('First 3 translations from API:', result.data.translations.slice(0, 3));\n      console.log('Raw translations data:', JSON.stringify(result.data.translations.slice(0, 5)));\n      return result.data.translations;\n    } else if (result.error) {\n      console.error('Translation API error:', result.error);\n      throw new Error(result.error);\n    } else {\n      console.error('Invalid translation response structure:', result);\n      throw new Error('번역 응답을 받을 수 없습니다.');\n    }\n  } catch (error) {\n    console.error('Translation error:', error);\n    return texts.map(() => '');\n  }\n}\n\n// Helper functions\nfunction getColumnLetter(columnIndex) {\n  let columnLetter = '';\n  let tempIndex = columnIndex;\n  \n  while (tempIndex >= 0) {\n    columnLetter = String.fromCharCode((tempIndex % 26) + 65) + columnLetter;\n    tempIndex = Math.floor(tempIndex / 26) - 1;\n  }\n  \n  return columnLetter;\n}\n\nfunction formatNumber(value) {\n  if (typeof value === 'number') {\n    if (Number.isInteger(value)) {\n      return value.toLocaleString('ko-KR');\n    } else {\n      return value.toLocaleString('ko-KR', { minimumFractionDigits: 0, maximumFractionDigits: 2 });\n    }\n  }\n  return value;\n}\n\nfunction showStatus(message, type) {\n  const status = document.getElementById('status');\n  status.textContent = message;\n  status.className = 'status-message ' + type;\n  status.style.display = 'block';\n  \n  if (window.statusTimeout) {\n    clearTimeout(window.statusTimeout);\n  }\n  \n  if (type === 'success') {\n    window.statusTimeout = setTimeout(() => {\n      status.style.display = 'none';\n    }, 5000);\n  }\n}\n\nfunction clearInput() {\n  document.getElementById('commandInput').value = '';\n  document.getElementById('status').style.display = 'none';\n}\n\nfunction setCommand(command) {\n  document.getElementById('commandInput').value = command;\n  document.getElementById('commandInput').focus();\n}\n\n// Auth modal functions\n// Update auth button based on authentication state\nfunction updateAuthButton() {\n  const authKey = localStorage.getItem(\"excel_addon_auth_key\");\n  const authEmail = localStorage.getItem(\"excel_addon_auth_email\");\n  const authButton = document.getElementById(\"authButton\");\n  \n  if (authKey && authEmail) {\n    authButton.textContent = \"인증 해제\";\n    authButton.classList.add(\"authenticated\");\n  } else {\n    authButton.textContent = \"인증\";\n    authButton.classList.remove(\"authenticated\");\n  }\n}\n\n// Handle auth button click based on state\nfunction handleAuthAction() {\n  const authKey = localStorage.getItem(\"excel_addon_auth_key\");\n  const authEmail = localStorage.getItem(\"excel_addon_auth_email\");\n  \n  if (authKey && authEmail) {\n    // Show deauth confirmation modal\n    showDeauthModal();\n  } else {\n    // Show auth modal\n    showAuthModal();\n  }\n}\n\n// Show deauth modal\nfunction showDeauthModal() {\n  document.getElementById(\"deauthModal\").style.display = \"block\";\n}\n\n// Hide deauth modal\nfunction hideDeauthModal() {\n  document.getElementById(\"deauthModal\").style.display = \"none\";\n}\n\n// Confirm deauth action\nfunction confirmDeauth() {\n  try {\n    console.log(\"confirmDeauth called\");\n    \n    // Clear auth data\n    localStorage.removeItem(\"excel_addon_auth_key\");\n    localStorage.removeItem(\"excel_addon_auth_email\");\n    \n    // Reset model to free version\n    document.getElementById(\"modelSelect\").value = \"gpt-4.1-mini-2025-04-14\";\n    \n    // Update button text\n    updateAuthButton();\n    \n    // Hide modal\n    hideDeauthModal();\n    \n    // Show success message\n    showStatus(\"인증이 해제되었습니다. 무료 모델로 전환됩니다.\", \"success\");\n  } catch (error) {\n    console.error(\"Error in confirmDeauth:\", error);\n    showStatus(\"인증 해제 중 오류가 발생했습니다.\", \"error\");\n  }\n}\n\n\nfunction showAuthModal() {\n  document.getElementById(\"authModal\").style.display = \"block\";\n}\n\nfunction hideAuthModal() {\n  document.getElementById(\"authModal\").style.display = \"none\";\n  document.getElementById(\"authEmailInput\").value = \"\";\n  document.getElementById(\"authKeyInput\").value = \"\";\n  document.getElementById(\"authStatus\").style.display = \"none\";\n}\n\nasync function submitAuthKey() {\n  const authKey = document.getElementById(\"authKeyInput\").value.trim();\n  const email = document.getElementById(\"authEmailInput\").value.trim();\n  \n  if (!email) {\n    showAuthStatus(\"이메일 주소를 입력해주세요.\", \"error\");\n    return;\n  }\n  \n  if (!authKey) {\n    showAuthStatus(\"인증키를 입력해주세요.\", \"error\");\n    return;\n  }\n  \n  // Validate auth key format\n  if (authKey.length < 8) {\n    showAuthStatus(\"인증키는 최소 8자 이상이어야 합니다.\", \"error\");\n    return;\n  }\n  \n  // Test authentication with backend\n  showAuthStatus(\"인증을 확인하고 있습니다...\", \"info\");\n  \n  // Store temporarily for validation\n  localStorage.setItem(\"excel_addon_auth_key\", authKey);\n  localStorage.setItem(\"excel_addon_auth_email\", email);\n  \n  // Test with a simple API call that requires auth\n  try {\n    const response = await fetch(API_PROXY_URL, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        command: \"테스트\",\n        sheetContext: { \n          activeRange: { address: \"A1\" },\n          lastRow: 1,\n          lastColumn: 1,\n          headers: []\n        },\n        model: \"gpt-4.1-2025-04-14\",  // Force premium model to trigger auth check\n        authKey: authKey,\n        authEmail: email\n      })\n    });\n    \n    // Check response status first\n    if (response.status === 403) {\n      // Definitely invalid auth key\n      showAuthStatus(\"유효하지 않은 인증키입니다.\", \"error\");\n      localStorage.removeItem(\"excel_addon_auth_key\");\n      localStorage.removeItem(\"excel_addon_auth_email\");\n      return;\n    }\n    \n    const data = await response.json();\n    console.log('Auth validation response:', { status: response.status, data });\n    \n    // Check for any error in response or debug info\n    if (!data.success || data.error || data.debug) {\n      // Invalid auth key or other error\n      const errorMessage = data.error || (data.debug ? \"유효하지 않은 인증키입니다.\" : \"인증 오류가 발생했습니다.\");\n      showAuthStatus(errorMessage, \"error\");\n      localStorage.removeItem(\"excel_addon_auth_key\");\n      localStorage.removeItem(\"excel_addon_auth_email\");\n    } else {\n      // Valid auth key - command was processed successfully\n      showAuthStatus(\"인증이 완료되었습니다.\", \"success\");\n      \n      // Update auth button text\n      updateAuthButton();\n      \n      // Enable GPT-4.1 model\n      const modelSelect = document.getElementById(\"modelSelect\");\n      modelSelect.value = \"gpt-4.1-2025-04-14\";\n      handleModelChange();\n      \n      setTimeout(() => {\n        hideAuthModal();\n      }, 2000);\n    }\n  } catch (error) {\n    console.error(\"Auth validation error:\", error);\n    showAuthStatus(\"인증 확인 중 오류가 발생했습니다.\", \"error\");\n    localStorage.removeItem(\"excel_addon_auth_key\");\n    localStorage.removeItem(\"excel_addon_auth_email\");\n  }\n}\n\nfunction showAuthStatus(message, type) {\n  const statusDiv = document.getElementById(\"authStatus\");\n  statusDiv.textContent = message;\n  statusDiv.className = `auth-status ${type}`;\n  statusDiv.style.display = \"block\";\n}\n\nfunction showContactInfo() {\n  showStatus('문의/요청: support@worksai.co.kr', 'info');\n}\n\nfunction handleModelChange() {\n  const modelSelect = document.getElementById(\"modelSelect\");\n  const selectedModel = modelSelect.value;\n  \n  // Check if premium model is selected\n  if (selectedModel === \"gpt-4.1-2025-04-14\") {\n    const authKey = localStorage.getItem(\"excel_addon_auth_key\");\n    if (!authKey) {\n      showStatus(\"GPT-4.1 모델을 사용하려면 인증이 필요합니다.\", \"warning\");\n      modelSelect.value = \"gpt-4.1-mini-2025-04-14\"; // Reset to free model\n      showAuthModal();\n      return;\n    }\n  }\n  \n  // Store selected model\n  localStorage.setItem(\"excel_addon_selected_model\", selectedModel);\n  showStatus(`모델이 ${selectedModel.includes(\"mini\") ? \"GPT-4.1-mini\" : \"GPT-4.1\"}로 변경되었습니다.`, \"success\");\n}\n\n// Test backend connection\nasync function testBackendConnection() {\n  try {\n    console.log('Testing backend connection...');\n    const testUrl = 'https://excel-addon-backend.vercel.app/api/test';\n    \n    const response = await fetch(testUrl, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({ test: true })\n    });\n    \n    console.log('Test response status:', response.status);\n    console.log('Test response headers:', response.headers);\n    \n    const data = await response.json();\n    console.log('Test response data:', data);\n    \n    showStatus('백엔드 연결 테스트 성공', 'success');\n  } catch (error) {\n    console.error('Backend test error:', error);\n    showStatus('백엔드 연결 테스트 실패: ' + error.message, 'error');\n  }\n}\n\n// Format cell borders\nasync function executeBorderFormat(context, params) {\n  console.log('executeBorderFormat called with params:', params);\n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  \n  try {\n    let targetRanges = [];\n    \n    // Determine the range based on params\n    if (!params.range) {\n      // No range specified - handle multiple selections\n      try {\n        const selectedRanges = context.workbook.getSelectedRanges();\n        selectedRanges.load([\"areas\", \"areaCount\"]);\n        await context.sync();\n        \n        if (selectedRanges.areaCount > 1) {\n          // Multiple non-contiguous ranges selected\n          for (let i = 0; i < selectedRanges.areas.items.length; i++) {\n            targetRanges.push(selectedRanges.areas.items[i]);\n          }\n        } else {\n          // Single contiguous range\n          targetRanges.push(context.workbook.getSelectedRange());\n        }\n      } catch (error) {\n        console.log('Error getting selected ranges for border format/removal:', error);\n        return { success: false, error: '선택한 범위를 처리할 수 없습니다. 연속된 범위를 선택해주세요.' };\n      }\n    } else if (params.range === 'all' || params.range === '전체') {\n      // Entire sheet\n      const usedRange = worksheet.getUsedRangeOrNullObject();\n      usedRange.load(\"isNullObject\");\n      await context.sync();\n      \n      if (usedRange.isNullObject) {\n        return { success: false, error: '시트에 데이터가 없습니다.' };\n      } else {\n        targetRanges.push(usedRange);\n      }\n    } else {\n      // Specific range provided\n      targetRanges.push(worksheet.getRange(params.range));\n    }\n    \n    // Load all ranges\n    for (const range of targetRanges) {\n      range.load([\"address\", \"rowCount\", \"columnCount\"]);\n    }\n    await context.sync();\n    \n    console.log('Target ranges for border format:', targetRanges.length);\n    for (let i = 0; i < targetRanges.length; i++) {\n      console.log(`Range ${i + 1}:`, {\n        address: targetRanges[i].address,\n        rowCount: targetRanges[i].rowCount,\n        columnCount: targetRanges[i].columnCount\n      });\n    }\n    \n    // Determine which borders to format\n    const borderType = params.borderType || 'all';\n    const color = params.color || '#000000';\n    const style = params.style || 'Continuous';\n    \n    // Map style names to Excel constants\n    const styleMap = {\n      'continuous': 'Continuous',\n      'dash': 'Dash',\n      'dashdot': 'DashDot',\n      'double': 'Double',\n      'dot': 'Dot',\n      'dashdotdot': 'DashDotDot',\n      'slantdashdot': 'SlantDashDot'\n    };\n    \n    const excelStyle = styleMap[style.toLowerCase()] || 'Continuous';\n    \n    // Apply border formatting to all selected ranges\n    for (const targetRange of targetRanges) {\n      if (borderType === 'all') {\n        // Format all borders\n        const borderItems = ['EdgeTop', 'EdgeBottom', 'EdgeLeft', 'EdgeRight', 'InsideVertical', 'InsideHorizontal'];\n        \n        for (const borderItem of borderItems) {\n          try {\n            const border = targetRange.format.borders.getItem(borderItem);\n            border.style = excelStyle;\n            border.color = color;\n            border.weight = 'Thin';\n          } catch (e) {\n            // Some border items might not be applicable (e.g., InsideVertical for single cell)\n            console.log(`Skipping ${borderItem}:`, e.message);\n          }\n        }\n      } else if (borderType === 'inside') {\n        // Format only inside borders\n        try {\n          const insideV = targetRange.format.borders.getItem('InsideVertical');\n          insideV.style = excelStyle;\n          insideV.color = color;\n          insideV.weight = 'Thin';\n        } catch (e) {\n          console.log('No inside vertical borders');\n        }\n        \n        try {\n          const insideH = targetRange.format.borders.getItem('InsideHorizontal');\n          insideH.style = excelStyle;\n          insideH.color = color;\n          insideH.weight = 'Thin';\n        } catch (e) {\n          console.log('No inside horizontal borders');\n        }\n      } else {\n        // Format specific border\n        const borderMap = {\n          'top': 'EdgeTop',\n          'bottom': 'EdgeBottom',\n          'left': 'EdgeLeft',\n          'right': 'EdgeRight'\n        };\n        \n        const borderName = borderMap[borderType.toLowerCase()];\n        if (borderName) {\n          const border = targetRange.format.borders.getItem(borderName);\n          border.style = excelStyle;\n          border.color = color;\n          border.weight = 'Thin';\n        }\n      }\n    }\n    \n    await context.sync();\n    \n    return {\n      success: true,\n      message: '테두리 서식이 적용되었습니다.'\n    };\n    \n  } catch (error) {\n    console.error('Error in executeBorderFormat:', error);\n    return {\n      success: false,\n      error: `테두리 서식 적용 중 오류 발생: ${error.message}`\n    };\n  }\n}\n\n// Additional operations (compress, filter, insert, delete, formula, retry_translation)\n// These would need to be implemented based on Excel JavaScript API capabilities\n\nasync function executeCompress(context, params) {\n  console.log('executeCompress called with params:', params);\n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  \n  try {\n    if (!params.range) {\n      return { success: false, error: '범위를 지정해주세요.' };\n    }\n    \n    // Get the specified range\n    const checkRange = worksheet.getRange(params.range);\n    checkRange.load([\"rowIndex\", \"rowCount\", \"columnIndex\", \"values\", \"address\"]);\n    await context.sync();\n    \n    console.log('Compress range:', {\n      address: checkRange.address,\n      rowIndex: checkRange.rowIndex,\n      rowCount: checkRange.rowCount,\n      columnIndex: checkRange.columnIndex\n    });\n    \n    // Find empty rows in the specified column\n    const emptyRows = [];\n    const values = checkRange.values;\n    \n    // Check each row in the range\n    for (let i = 0; i < values.length; i++) {\n      const cellValue = values[i][0]; // First column of the range\n      if (cellValue === null || cellValue === undefined || cellValue === '' || \n          (typeof cellValue === 'string' && cellValue.trim() === '')) {\n        // This row is empty in the specified column\n        // Store the actual row index (rowIndex + i)\n        emptyRows.push(checkRange.rowIndex + i);\n      }\n    }\n    \n    console.log('Found empty rows:', emptyRows.length, 'rows at indices:', emptyRows);\n    \n    if (emptyRows.length === 0) {\n      return {\n        success: true,\n        message: '제거할 빈 행이 없습니다.'\n      };\n    }\n    \n    // IMPORTANT: Only delete rows that are within the specified range\n    // This prevents accidentally deleting rows outside the range (like A1)\n    const minRowIndex = checkRange.rowIndex;\n    const maxRowIndex = checkRange.rowIndex + checkRange.rowCount - 1;\n    \n    // Filter out any row indices that are outside the specified range\n    const rowsToDelete = emptyRows.filter(rowIdx => rowIdx >= minRowIndex && rowIdx <= maxRowIndex);\n    \n    console.log('Rows to delete (filtered):', rowsToDelete);\n    \n    // Delete rows from bottom to top to avoid index shifting\n    rowsToDelete.sort((a, b) => b - a); // Sort in descending order\n    \n    for (const rowIndex of rowsToDelete) {\n      console.log('Deleting row:', rowIndex + 1); // Display 1-based for user\n      // Get the entire row using a fixed large column count to avoid getUsedRange() issues\n      const rowToDelete = worksheet.getRangeByIndexes(rowIndex, 0, 1, 1000);\n      rowToDelete.delete(Excel.DeleteShiftDirection.up);\n      await context.sync();\n    }\n    \n    return {\n      success: true,\n      message: `${rowsToDelete.length}개의 빈 행이 제거되었습니다.`\n    };\n    \n  } catch (error) {\n    console.error('Error in executeCompress:', error);\n    return {\n      success: false,\n      error: `빈 행 제거 중 오류 발생: ${error.message}`\n    };\n  }\n}\n\nasync function executeFilter(context, params) {\n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  const range = params.range ? worksheet.getRange(params.range) : worksheet.getUsedRange();\n  \n  // Apply autofilter\n  range.worksheet.autoFilter.apply(range);\n  \n  await context.sync();\n  \n  return {\n    success: true,\n    message: '필터가 적용되었습니다.'\n  };\n}\n\nasync function executeInsert(context, params) {\n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  const type = params.type || 'row';\n  const position = params.position || 1;\n  const count = params.count || 1;\n  \n  if (type === 'row') {\n    const range = worksheet.getRangeByIndexes(position - 1, 0, count, 1);\n    range.insert(Excel.InsertShiftDirection.down);\n  } else {\n    const range = worksheet.getRangeByIndexes(0, position - 1, 1, count);\n    range.insert(Excel.InsertShiftDirection.right);\n  }\n  \n  await context.sync();\n  \n  return {\n    success: true,\n    message: `${count}개의 ${type === 'row' ? '행' : '열'}이 삽입되었습니다.`\n  };\n}\n\nasync function executeDelete(context, params) {\n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  const type = params.type || 'row';\n  const position = params.position || 1;\n  const count = params.count || 1;\n  \n  if (type === 'row') {\n    const range = worksheet.getRangeByIndexes(position - 1, 0, count, 1);\n    range.delete(Excel.DeleteShiftDirection.up);\n  } else {\n    const range = worksheet.getRangeByIndexes(0, position - 1, 1, count);\n    range.delete(Excel.DeleteShiftDirection.left);\n  }\n  \n  await context.sync();\n  \n  return {\n    success: true,\n    message: `${count}개의 ${type === 'row' ? '행' : '열'}이 삭제되었습니다.`\n  };\n}\n\nasync function executeFormula(context, params) {\n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  const range = params.range ? worksheet.getRange(params.range) : context.workbook.getSelectedRange();\n  \n  if (!params.formula) {\n    return { success: false, error: '수식을 지정해주세요.' };\n  }\n  \n  range.formulas = [[params.formula]];\n  await context.sync();\n  \n  return {\n    success: true,\n    message: '수식이 적용되었습니다.'\n  };\n}\n\nasync function executeRetryTranslation(context, params) {\n  // Implementation would be similar to Google Sheets version\n  // but using Excel JavaScript API\n  return {\n    success: false,\n    error: '이 기능은 현재 구현 중입니다.'\n  };\n}\n\nasync function executeRemoveBorder(context, params) {\n  console.log('executeRemoveBorder called with params:', params);\n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  \n  try {\n    let targetRanges = [];\n    \n    // Determine the range to apply border removal\n    if (params.range) {\n      // Handle special case for entire sheet\n      if (params.range === 'all' || params.range === '전체') {\n        console.log('Removing borders from entire sheet');\n        // Use getUsedRangeOrNullObject to get the actual used range\n        const usedRange = worksheet.getUsedRangeOrNullObject();\n        usedRange.load(\"isNullObject\");\n        await context.sync();\n        \n        if (usedRange.isNullObject) {\n          console.log('No used range in the sheet, nothing to remove borders from');\n          return { success: true, message: '시트에 데이터가 없어 테두리를 제거할 필요가 없습니다.' };\n        } else {\n          // Expand the used range to ensure we get all cells that might have borders\n          usedRange.load([\"rowCount\", \"columnCount\", \"rowIndex\", \"columnIndex\"]);\n          await context.sync();\n          \n          // Get a slightly larger range to ensure we capture all borders\n          const expandedRows = Math.min(usedRange.rowCount + 100, 1048576);\n          const expandedCols = Math.min(usedRange.columnCount + 20, 16384);\n          targetRanges.push(worksheet.getRangeByIndexes(0, 0, expandedRows, expandedCols));\n        }\n      } else if (params.range.match(/^[A-Z]+:[A-Z]+$/)) {\n        // Handle column ranges like \"C:C\"\n        console.log('Handling column range:', params.range);\n        const usedRange = worksheet.getUsedRange();\n        if (!usedRange) {\n          return { success: false, error: '데이터가 없습니다.' };\n        }\n        \n        usedRange.load([\"rowCount\", \"columnCount\"]);\n        await context.sync();\n        \n        // Get the column letter from the range (e.g., \"C\" from \"C:C\")\n        const columnLetter = params.range.split(':')[0];\n        const columnIndex = columnLetter.charCodeAt(0) - 65;\n        \n        // Get the entire used portion of the column\n        targetRanges.push(worksheet.getRangeByIndexes(0, columnIndex, usedRange.rowCount, 1));\n      } else {\n        // Handle specific ranges like \"A1:B10\"\n        targetRanges.push(worksheet.getRange(params.range));\n      }\n    } else {\n      // If no range specified, handle multiple selections\n      try {\n        const selectedRanges = context.workbook.getSelectedRanges();\n        selectedRanges.load([\"areas\", \"areaCount\"]);\n        await context.sync();\n        \n        if (selectedRanges.areaCount > 1) {\n          // Multiple non-contiguous ranges selected\n          for (let i = 0; i < selectedRanges.areas.items.length; i++) {\n            targetRanges.push(selectedRanges.areas.items[i]);\n          }\n        } else {\n          // Single contiguous range\n          targetRanges.push(context.workbook.getSelectedRange());\n        }\n      } catch (error) {\n        console.log('Error getting selected ranges for border format/removal:', error);\n        return { success: false, error: '선택한 범위를 처리할 수 없습니다. 연속된 범위를 선택해주세요.' };\n      }\n    }\n    \n    // Load all ranges\n    for (const range of targetRanges) {\n      range.load([\"address\", \"rowCount\", \"columnCount\"]);\n    }\n    await context.sync();\n    \n    console.log('Target ranges for border removal:', targetRanges.length);\n    for (let i = 0; i < targetRanges.length; i++) {\n      console.log(`Range ${i + 1}:`, {\n        address: targetRanges[i].address,\n        rowCount: targetRanges[i].rowCount,\n        columnCount: targetRanges[i].columnCount\n      });\n    }\n    \n    // Determine which borders to remove\n    const borderType = params.borderType || 'all';\n    \n    // Apply border removal to all selected ranges\n    for (const targetRange of targetRanges) {\n      if (borderType === 'all') {\n        // Remove all borders\n        targetRange.format.borders.getItem(Excel.BorderIndex.edgeLeft).style = Excel.BorderLineStyle.none;\n        targetRange.format.borders.getItem(Excel.BorderIndex.edgeRight).style = Excel.BorderLineStyle.none;\n        targetRange.format.borders.getItem(Excel.BorderIndex.edgeTop).style = Excel.BorderLineStyle.none;\n        targetRange.format.borders.getItem(Excel.BorderIndex.edgeBottom).style = Excel.BorderLineStyle.none;\n        targetRange.format.borders.getItem(Excel.BorderIndex.insideHorizontal).style = Excel.BorderLineStyle.none;\n        targetRange.format.borders.getItem(Excel.BorderIndex.insideVertical).style = Excel.BorderLineStyle.none;\n      } else {\n        // Remove specific border\n        switch (borderType) {\n          case 'right':\n            targetRange.format.borders.getItem(Excel.BorderIndex.edgeRight).style = Excel.BorderLineStyle.none;\n            break;\n          case 'left':\n            targetRange.format.borders.getItem(Excel.BorderIndex.edgeLeft).style = Excel.BorderLineStyle.none;\n            break;\n          case 'top':\n            targetRange.format.borders.getItem(Excel.BorderIndex.edgeTop).style = Excel.BorderLineStyle.none;\n            break;\n          case 'bottom':\n            targetRange.format.borders.getItem(Excel.BorderIndex.edgeBottom).style = Excel.BorderLineStyle.none;\n            break;\n          default:\n            return { success: false, error: `알 수 없는 테두리 유형: ${borderType}` };\n        }\n      }\n    }\n    \n    await context.sync();\n    \n    return {\n      success: true,\n      message: `${borderType === 'all' ? '모든' : borderType} 테두리가 제거되었습니다.`\n    };\n    \n  } catch (error) {\n    console.error('Error in executeRemoveBorder:', error);\n    return {\n      success: false,\n      error: `테두리 제거 중 오류 발생: ${error.message}`\n    };\n  }\n}"],"names":["__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","m","g","globalThis","this","Function","e","window","o","obj","prop","Object","prototype","hasOwnProperty","call","scriptUrl","importScripts","location","document","currentScript","tagName","toUpperCase","src","scripts","getElementsByTagName","length","i","test","Error","replace","p","b","baseURI","self","href","URL","t","r","Symbol","n","iterator","toStringTag","c","Generator","u","create","_regeneratorDefine2","f","y","G","v","a","d","bind","l","TypeError","done","value","return","GeneratorFunction","GeneratorFunctionPrototype","getPrototypeOf","setPrototypeOf","__proto__","displayName","_regenerator","w","defineProperty","_invoke","enumerable","configurable","writable","asyncGeneratorStep","Promise","resolve","then","_asyncToGenerator","arguments","apply","_next","_throw","recognition","isListening","API_PROXY_URL","process","Office","onReady","info","host","HostType","Excel","_testBackendConnection","testBackendConnection","getElementById","onclick","executeCommand","clearInput","protocol","hostname","includes","showStatus","textContent","stop","start","error","console","message","toggleVoiceRecognition","handleAuthAction","showContactInfo","updateAuthButton","authModal","querySelector","hideAuthModal","deauthModal","hideDeauthModal","event","target","submitAuthKey","confirmDeauth","onchange","handleModelChange","querySelectorAll","forEach","item","command","getAttribute","focus","addEventListener","key","shiftKey","preventDefault","log","voiceButton","voiceStatus","disabled","style","opacity","cursor","color","title","SpeechRecognition","webkitSpeechRecognition","lang","continuous","interimResults","maxAlternatives","onstart","classList","add","onresult","transcript","results","isFinal","onerror","remove","errorMessage","isWebEnvironment","onend","trim","initializeSpeechRecognition","isExecuting","_executeCommand","_callee2","button","originalText","_t2","_context2","innerHTML","run","_ref","_callee","context","worksheet","activeRangeInfo","selectedRanges","firstRange","rangeAddresses","_i","range","usedRange","sheetContext","headerRow","_i2","interpretation","result","_t","_context","workbook","worksheets","getActiveWorksheet","getSelectedRanges","load","sync","areaCount","areas","items","push","address","join","row","rowIndex","column","columnIndex","numRows","rowCount","numColumns","columnCount","isMultipleRanges","getUsedRange","sheetName","name","activeRange","lastRow","lastColumn","headers","dataRange","values","isLargeSheet","columnLetter","getColumnLetter","label","toString","callOpenAI","success","executeInterpretedCommand","data","setTimeout","_x46","stack","_x","_x2","_callOpenAI","_callee3","selectedModel","authKey","authEmail","response","errorData","_t3","_context3","localStorage","getItem","fetch","method","body","JSON","stringify","model","ok","json","concat","status","_x5","_x6","_executeInterpretedCommand","_callee5","commandData","successCount","_iterator","_step","op","_t6","_context5","operations","Array","isArray","_createForOfIteratorHelper","s","executeSingleOperation","operation","parameters","_x7","_x8","_x9","_executeSingleOperation","_callee6","params","_t7","_t8","_context6","Date","toISOString","executeMerge","executeSum","executeAverage","executeCount","executeFormat","executeSort","executeFilter","executeInsert","executeDelete","executeFormula","executeChart","executeConditionalFormat","executeTranslate","executeCompress","executeRetryTranslation","executeRemoveBorder","executeBorderFormat","_x0","_x1","_executeMerge","_callee7","rangeAddress","_context7","getRange","getSelectedRange","merge","_x10","_x11","_executeSum","_callee8","_i3","lastDataRow","targetRow","foundEmpty","_i4","checkCell","cellValue","sumCell","sourceRange","sumFormula","_i5","_i6","_selectedRanges","_rangeAddresses","_i7","_i8","newCell","targetCell","_usedRange","_targetCell","lastUsedRow","lastUsedCol","_foundEmpty","col","_checkCell","_row","_checkCell2","_column","startRow","_targetRow","_foundEmpty2","_i9","_checkCell3","_cellValue","_t9","_t0","_context8","columnName","sumType","match","charCodeAt","toLowerCase","getCell","formulas","formatNumber","addNewRow","getHeaders","_x12","_getHeaders","_callee9","_context9","_x13","_x14","_executeAverage","_callee0","rangeDescription","averageFormula","_columnIndex","_usedRange2","columnInfo","_usedRange3","_usedRange4","_i0","_i1","_selectedRanges2","_rangeAddresses2","_i10","_i11","_i12","_t1","_t10","_t11","_context0","averageType","getRangeByIndexes","find","h","numberFormat","_x15","_x16","_executeCount","_callee1","formula","criteria","resultCell","lastCol","_context1","countType","condition","operator","_x17","_x18","_executeFormat","_callee10","ranges","_i13","_ranges","_i14","_ranges2","_range","format","_t12","_context10","bold","font","italic","fontSize","size","fontColor","backgroundColor","fill","horizontalAlignment","_x19","_x20","_executeSort","_callee11","ascending","_context11","sort","_x21","_x22","_executeChart","_callee12","sourceData","dataAddress","allRanges","area","tempStartRow","tempStartCol","consolidatedData","maxColumns","_i15","_allRanges","_iterator2","_step2","reorganizedData","_i16","tempRange","_tempRange","chartType","chart","_chart","_t13","_t14","_t15","_t16","_context12","getUsedRangeOrNullObject","isNullObject","Math","max","err","every","firstValue","ChartType","columnClustered","line","pie","xyscatter","charts","ChartSeriesBy","auto","text","height","width","left","offsetX","top","offsetY","legend","position","ChartLegendPosition","bottom","visible","_x23","_x24","_executeConditionalFormat","_callee13","defaultRange","_i17","_ranges3","conditionalFormat","_t17","_context13","conditionalFormats","ConditionalFormatType","rule","formula1","ConditionalCellValueOperator","greaterThan","lessThan","equalTo","containsText","_x25","_x26","_executeTranslate","_callee14","targetColumnIndex","targetColumnLetter","_targetColumnLetter","_columnIndex2","_usedRange5","sourceValues","translations","batchSize","batch","batchTexts","translatedBatch","j","translationIndex","_j","translatedText","_j2","_i18","targetRange","stringTranslations","errorRows","_i19","translation","_iterator3","_step3","errorCell","isEmpty","_i20","cellRow","cellCol","cell","headerCell","sourceHeaderCell","_context14","targetLanguage","split","sourceColumnIndex","sourceColumn","targetColumn","slice","min","map","filter","translateBatch","sourceLanguage","batchLength","translatedBatchLength","sampleTranslations","firstTranslation","translationType","_typeof","rawData","isError","round","translationsCount","first","second","third","clear","ClearApplyTo","contents","translationsLength","is2DArray","String","valueTypes","actualFirstValue","firstThreeValues","firstValueLength","_x27","_x28","_x29","_translateBatch","_callee15","texts","_t18","_context15","tempIndex","fromCharCode","floor","Number","isInteger","toLocaleString","minimumFractionDigits","maximumFractionDigits","type","className","display","statusTimeout","clearTimeout","authButton","showAuthModal","removeItem","_submitAuthKey","_callee16","email","_t19","_context16","showAuthStatus","setItem","debug","statusDiv","modelSelect","_callee17","_t20","_context17","_x30","_x31","_executeBorderFormat","_callee18","targetRanges","_i21","_targetRanges","_i22","borderType","excelStyle","_i23","_targetRanges2","_i24","_borderItems","borderItem","border","insideV","insideH","borderName","_border","_t21","_t22","_context18","borders","weight","_x32","_x33","_executeCompress","_callee19","checkRange","emptyRows","minRowIndex","maxRowIndex","rowsToDelete","_iterator4","_step4","_t23","_t24","_context19","rowIdx","delete","DeleteShiftDirection","up","_x34","_x35","_executeFilter","_callee20","_context20","autoFilter","_x36","_x37","_executeInsert","_callee21","count","_context21","insert","InsertShiftDirection","down","right","_x38","_x39","_executeDelete","_callee22","_context22","_x40","_x41","_executeFormula","_callee23","_context23","_x42","_x43","_executeRetryTranslation","_callee24","_context24","_x44","_x45","_executeRemoveBorder","_callee25","expandedRows","expandedCols","_usedRange6","_i25","_targetRanges3","_i26","_i27","_targetRanges4","_t25","_t26","_t27","_context25","BorderIndex","edgeLeft","BorderLineStyle","none","edgeRight","edgeTop","edgeBottom","insideHorizontal","insideVertical"],"sourceRoot":""}