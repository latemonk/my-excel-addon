{"version":3,"file":"taskpane.js","mappings":"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","sources":["webpack://worksai-excel-addon/webpack/bootstrap","webpack://worksai-excel-addon/webpack/runtime/global","webpack://worksai-excel-addon/webpack/runtime/hasOwnProperty shorthand","webpack://worksai-excel-addon/webpack/runtime/publicPath","webpack://worksai-excel-addon/webpack/runtime/jsonp chunk loading","webpack://worksai-excel-addon/./src/taskpane/taskpane.html","webpack://worksai-excel-addon/./src/taskpane/taskpane.js"],"sourcesContent":["// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript && document.currentScript.tagName.toUpperCase() === 'SCRIPT')\n\t\tscriptUrl = document.currentScript.src;\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) {\n\t\t\tvar i = scripts.length - 1;\n\t\t\twhile (i > -1 && (!scriptUrl || !/^http(s?):/.test(scriptUrl))) scriptUrl = scripts[i--].src;\n\t\t}\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/^blob:/, \"\").replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","__webpack_require__.b = document.baseURI || self.location.href;\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t926: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n// no on chunks loaded\n\n// no jsonp function","// Imports\nvar ___HTML_LOADER_IMPORT_0___ = new URL(\"./taskpane.css\", import.meta.url);\n// Module\nvar code = \"<!DOCTYPE html> <html> <head> <meta charset=\\\"UTF-8\\\"/> <meta http-equiv=\\\"X-UA-Compatible\\\" content=\\\"IE=Edge\\\"/> <meta name=\\\"viewport\\\" content=\\\"width=device-width,initial-scale=1\\\"> <title>웍스AI 엑셀 도우미</title> <\" + \"script src=\\\"https://appsforoffice.microsoft.com/lib/1.1/hosted/office.js\\\"><\" + \"/script> <link rel=\\\"stylesheet\\\" href=\\\"https://static2.sharepointonline.com/files/fabric/office-ui-fabric-js/1.4.0/css/fabric.min.css\\\"/> <link rel=\\\"stylesheet\\\" href=\\\"https://static2.sharepointonline.com/files/fabric/office-ui-fabric-js/1.4.0/css/fabric.components.min.css\\\"/> <link href=\\\"\" + ___HTML_LOADER_IMPORT_0___ + \"\\\" rel=\\\"stylesheet\\\"/> </head> <body class=\\\"ms-font-m ms-welcome ms-Fabric\\\"> <main id=\\\"app-body\\\" class=\\\"ms-welcome__main\\\"> <div class=\\\"container\\\"> <div class=\\\"header-section\\\"> <h2 class=\\\"ms-font-xl\\\" style=\\\"font-weight:700\\\">웍스AI 엑셀 도우미</h2> <p class=\\\"help-text\\\">자연어로 Excel 작업을 요청하세요. (대용량 번역 지원)</p> </div> <div class=\\\"voice-section\\\"> <button id=\\\"voiceButton\\\" class=\\\"voice-button\\\"> <svg width=\\\"24\\\" height=\\\"24\\\" viewBox=\\\"0 0 24 24\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"> <path d=\\\"M12 14c1.66 0 3-1.34 3-3V5c0-1.66-1.34-3-3-3S9 3.34 9 5v6c0 1.66 1.34 3 3 3z\\\"/> <path d=\\\"M17 11c0 2.76-2.24 5-5 5s-5-2.24-5-5H5c0 3.53 2.61 6.43 6 6.92V21h2v-3.08c3.39-.49 6-3.39 6-6.92h-2z\\\"/> </svg> </button> <div class=\\\"voice-status\\\" id=\\\"voiceStatus\\\">음성 인식 준비</div> </div> <div class=\\\"input-container\\\"> <textarea id=\\\"commandInput\\\" placeholder=\\\"예: A1부터 A10까지 합계를 구해줘\\\" rows=\\\"3\\\"></textarea> <div class=\\\"button-container\\\"> <button id=\\\"executeButton\\\" class=\\\"ms-Button ms-Button--primary\\\"> <span class=\\\"ms-Button-label\\\">실행</span> </button> <button id=\\\"clearButton\\\" class=\\\"ms-Button\\\"> <span class=\\\"ms-Button-label\\\">지우기</span> </button> </div> </div> <div id=\\\"status\\\" class=\\\"status-message\\\"></div> <div class=\\\"examples\\\"> <h3>예제 명령어</h3> <div class=\\\"example-list\\\"> <div class=\\\"example-item\\\" data-command=\\\"A1:B5 셀을 병합해줘\\\"> <strong>셀 병합:</strong> A1:B5 셀을 병합해줘 </div> <div class=\\\"example-item\\\" data-command=\\\"A열의 합계를 구해줘\\\"> <strong>합계 계산:</strong> A열의 합계를 구해줘 </div> <div class=\\\"example-item\\\" data-command=\\\"Name 열의 합계를 구해줘\\\"> <strong>레이블로 합계:</strong> Name 열의 합계를 구해줘 </div> <div class=\\\"example-item\\\" data-command=\\\"C열 평균을 구해줘\\\"> <strong>열 평균:</strong> C열 평균을 구해줘 </div> <div class=\\\"example-item\\\" data-command=\\\"3행 평균을 계산해줘\\\"> <strong>행 평균:</strong> 3행 평균을 계산해줘 </div> <div class=\\\"example-item\\\" data-command=\\\"선택한 셀을 굵게 만들고 파란색으로 바꿔줘\\\"> <strong>서식 지정:</strong> 선택한 셀을 굵게 만들고 파란색으로 바꿔줘 </div> <div class=\\\"example-item\\\" data-command=\\\"B열 기준으로 내림차순 정렬해줘\\\"> <strong>정렬:</strong> B열 기준으로 내림차순 정렬해줘 </div> <div class=\\\"example-item\\\" data-command=\\\"값이 100보다 큰 셀은 녹색 배경으로 표시해줘\\\"> <strong>조건부 서식:</strong> 값이 100보다 큰 셀은 녹색 배경으로 표시해줘 </div> <div class=\\\"example-item\\\" data-command=\\\"A1:B10 데이터로 막대 차트를 만들어줘\\\"> <strong>차트 생성:</strong> A1:B10 데이터로 막대 차트를 만들어줘 </div> <div class=\\\"example-item\\\" data-command=\\\"D열을 중국어로 번역해서 다음 열에 추가해줘\\\"> <strong>번역:</strong> D열을 중국어로 번역해서 다음 열에 추가해줘 </div> <div class=\\\"example-item\\\" data-command=\\\"A열의 10000개 행을 영어로 번역해줘\\\"> <strong>대용량 번역:</strong> A열의 10000개 행을 영어로 번역해줘 </div> <div class=\\\"example-item\\\" data-command=\\\"D2:D170 사이의 빈 행을 제거해줘\\\"> <strong>빈 행 제거:</strong> D2:D170 사이의 빈 행을 제거해줘 </div> <div class=\\\"example-item\\\" data-command=\\\"C열의 오른쪽 테두리를 없애줘\\\"> <strong>테두리 제거:</strong> C열의 오른쪽 테두리를 없애줘 </div> </div> </div> <div class=\\\"settings-section\\\"> <button id=\\\"settingsButton\\\" class=\\\"settings-link\\\">설정</button> </div> </div> </main> </body> </html>\";\n// Exports\nexport default code;","/*\n * Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n * See LICENSE in the project root for license information.\n */\n\n/* global document, Office, Excel */\n\n// Voice recognition variables\nlet recognition = null;\nlet isListening = false;\n\n// Backend API URL - Vercel 배포 후 실제 URL로 변경해주세요\n// 디버그용 URL 사용 중 (CORS 문제 해결 후 원래 URL로 변경 필요)\nconst API_PROXY_URL = process.env.API_PROXY_URL || 'https://excel-addon-backend.vercel.app/api/openai-proxy-debug';\n\nOffice.onReady((info) => {\n  if (info.host === Office.HostType.Excel) {\n    // Test backend connection\n    testBackendConnection();\n    \n    // Assign event handlers\n    document.getElementById(\"executeButton\").onclick = executeCommand;\n    document.getElementById(\"clearButton\").onclick = clearInput;\n    document.getElementById(\"voiceButton\").onclick = () => toggleVoiceRecognition();\n    document.getElementById(\"settingsButton\").onclick = showSettings;\n\n    // Handle example clicks\n    const exampleItems = document.querySelectorAll('.example-item');\n    exampleItems.forEach(item => {\n      item.onclick = function() {\n        setCommand(this.getAttribute('data-command'));\n      };\n    });\n\n    // Handle Enter key\n    document.getElementById('commandInput').addEventListener('keydown', function(event) {\n      if (event.key === 'Enter' && !event.shiftKey) {\n        event.preventDefault();\n        executeCommand();\n      }\n    });\n\n    // Initialize speech recognition\n    initializeSpeechRecognition();\n  }\n});\n\n// Initialize speech recognition\nfunction initializeSpeechRecognition() {\n  // Check if we're in a web environment (Excel Online) - disable voice feature\n  const isWebEnvironment = window.location.protocol === 'https:' && \n                          !window.location.hostname.includes('localhost');\n  \n  if (isWebEnvironment) {\n    console.log('Voice recognition disabled in web environment');\n    const voiceButton = document.getElementById('voiceButton');\n    const voiceStatus = document.getElementById('voiceStatus');\n    \n    voiceButton.disabled = true;\n    voiceButton.style.opacity = '0.5';\n    voiceButton.style.cursor = 'not-allowed';\n    voiceStatus.textContent = '웹 환경에서는 음성 인식 미지원';\n    voiceStatus.style.color = '#666';\n    \n    // Add tooltip\n    voiceButton.title = 'Excel Online에서는 보안상 음성 인식을 사용할 수 없습니다. 데스크톱 Excel을 사용해주세요.';\n    \n    return null;\n  }\n  \n  const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n  \n  if (!SpeechRecognition) {\n    showStatus('음성 인식이 지원되지 않는 브라우저입니다.', 'error');\n    document.getElementById('voiceButton').disabled = true;\n    document.getElementById('voiceStatus').textContent = '음성 인식 미지원';\n    return null;\n  }\n  \n  recognition = new SpeechRecognition();\n  recognition.lang = 'ko-KR';\n  recognition.continuous = false;\n  recognition.interimResults = true;\n  recognition.maxAlternatives = 1;\n  \n  recognition.onstart = function() {\n    isListening = true;\n    document.getElementById('voiceButton').classList.add('listening');\n    document.getElementById('voiceStatus').textContent = '듣고 있습니다... 말씀해주세요';\n    document.getElementById('voiceStatus').classList.add('listening');\n  };\n  \n  recognition.onresult = function(event) {\n    const transcript = event.results[0][0].transcript;\n    document.getElementById('commandInput').value = transcript;\n    \n    if (event.results[0].isFinal) {\n      document.getElementById('voiceStatus').textContent = '음성 인식 완료';\n    } else {\n      document.getElementById('voiceStatus').textContent = '인식중: ' + transcript;\n    }\n  };\n  \n  recognition.onerror = function(event) {\n    console.log('Speech recognition error:', event.error, 'Location:', window.location.hostname);\n    isListening = false;\n    document.getElementById('voiceButton').classList.remove('listening');\n    document.getElementById('voiceStatus').classList.remove('listening');\n    \n    let errorMessage = '음성 인식 오류';\n    \n    // Check if we're in a web environment - use broader detection\n    const isWebEnvironment = window.location.protocol === 'https:' && \n                            !window.location.hostname.includes('localhost');\n    \n    switch(event.error) {\n      case 'no-speech':\n        errorMessage = '음성이 감지되지 않았습니다.';\n        break;\n      case 'audio-capture':\n        errorMessage = '마이크를 찾을 수 없습니다.';\n        break;\n      case 'not-allowed':\n        // Always show web environment message for not-allowed in HTTPS contexts\n        if (isWebEnvironment) {\n          errorMessage = 'Excel Online에서는 보안 정책상 음성 인식을 사용할 수 없습니다. 데스크톱 Excel에서 이용해주세요.';\n          document.getElementById('voiceStatus').textContent = '웹 버전 미지원';\n        } else {\n          errorMessage = '마이크 권한이 거부되었습니다. 브라우저 설정을 확인해주세요.';\n        }\n        break;\n      case 'network':\n        errorMessage = '네트워크 오류가 발생했습니다.';\n        break;\n      default:\n        // For any other error in web environment, show the web limitation message\n        if (isWebEnvironment && event.error) {\n          errorMessage = 'Excel Online에서는 보안 정책상 음성 인식을 사용할 수 없습니다. 데스크톱 Excel에서 이용해주세요.';\n          document.getElementById('voiceStatus').textContent = '웹 버전 미지원';\n        }\n        break;\n    }\n    \n    // Override the status text display for web environment\n    if (isWebEnvironment && event.error === 'not-allowed') {\n      document.getElementById('voiceStatus').textContent = '웹 버전 미지원';\n    } else {\n      document.getElementById('voiceStatus').textContent = errorMessage;\n    }\n    \n    showStatus(errorMessage, 'error');\n  };\n  \n  recognition.onend = function() {\n    isListening = false;\n    document.getElementById('voiceButton').classList.remove('listening');\n    document.getElementById('voiceStatus').classList.remove('listening');\n    \n    const command = document.getElementById('commandInput').value.trim();\n    if (command) {\n      document.getElementById('voiceStatus').textContent = '음성 인식 완료. 실행 버튼을 눌러주세요.';\n      document.getElementById('executeButton').focus();\n    } else {\n      document.getElementById('voiceStatus').textContent = '음성 인식 준비';\n    }\n  };\n  \n  return recognition;\n}\n\n// Toggle voice recognition\nfunction toggleVoiceRecognition() {\n  // Check if we're in Excel Online/web environment\n  const isWebEnvironment = window.location.protocol === 'https:' && \n                          !window.location.hostname.includes('localhost');\n  \n  if (isWebEnvironment) {\n    showStatus('Excel Online에서는 보안 정책상 음성 인식을 사용할 수 없습니다. 데스크톱 Excel에서 이용해주세요.', 'error');\n    document.getElementById('voiceStatus').textContent = '웹 버전 미지원';\n    return;\n  }\n  \n  if (!recognition) {\n    // Recognition would be null if unsupported browser\n    showStatus('이 브라우저는 음성 인식을 지원하지 않습니다.', 'error');\n    return;\n  }\n  \n  if (isListening) {\n    recognition.stop();\n  } else {\n    try {\n      recognition.start();\n    } catch (error) {\n      console.error('Voice recognition start error:', error);\n      \n      // More user-friendly error messages\n      if (error.message && error.message.includes('not-allowed')) {\n        showStatus('마이크 권한이 필요합니다. 브라우저 설정에서 마이크 접근을 허용해주세요.', 'error');\n      } else {\n        showStatus('음성 인식을 시작할 수 없습니다.', 'error');\n      }\n    }\n  }\n}\n\n// Execute command\n// Add flag to prevent duplicate execution\nlet isExecuting = false;\n\nasync function executeCommand() {\n  // Prevent duplicate execution\n  if (isExecuting) {\n    console.log('Command already executing, ignoring duplicate call');\n    return;\n  }\n  \n  const command = document.getElementById('commandInput').value.trim();\n  \n  if (!command) {\n    showStatus('명령어를 입력해주세요.', 'error');\n    return;\n  }\n  \n  isExecuting = true;\n  \n  const button = document.getElementById('executeButton');\n  const originalText = '<span class=\"ms-Button-label\">실행</span>';\n  \n  // Show loading state\n  button.disabled = true;\n  button.innerHTML = '<span class=\"loading\"></span><span>처리중...</span>';\n  showStatus('명령을 처리하고 있습니다...', 'info');\n  \n  try {\n    await Excel.run(async (context) => {\n      console.log('Starting Excel.run for command execution');\n      // Get current worksheet context\n      const worksheet = context.workbook.worksheets.getActiveWorksheet();\n      // Handle both single and multiple range selections\n      let activeRangeInfo = null;\n      let isMultipleRanges = false;\n      \n      try {\n        // Try to get selected ranges first\n        const selectedRanges = context.workbook.getSelectedRanges();\n        selectedRanges.load([\"areas\", \"areaCount\"]);\n        await context.sync();\n        \n        if (selectedRanges.areaCount > 1) {\n          // Multiple non-contiguous ranges\n          isMultipleRanges = true;\n          const firstRange = selectedRanges.areas.items[0];\n          firstRange.load([\"address\", \"rowIndex\", \"columnIndex\", \"rowCount\", \"columnCount\"]);\n          await context.sync();\n          \n          // Build combined address string\n          const rangeAddresses = [];\n          for (let i = 0; i < selectedRanges.areas.items.length; i++) {\n            const area = selectedRanges.areas.items[i];\n            area.load(\"address\");\n          }\n          await context.sync();\n          \n          for (let i = 0; i < selectedRanges.areas.items.length; i++) {\n            rangeAddresses.push(selectedRanges.areas.items[i].address);\n          }\n          \n          activeRangeInfo = {\n            address: rangeAddresses.join(','),\n            row: firstRange.rowIndex + 1,\n            column: firstRange.columnIndex + 1,\n            numRows: firstRange.rowCount,\n            numColumns: firstRange.columnCount,\n            isMultipleRanges: true\n          };\n        } else {\n          // Single range\n          const range = selectedRanges.areas.items[0];\n          range.load([\"address\", \"rowIndex\", \"columnIndex\", \"rowCount\", \"columnCount\"]);\n          await context.sync();\n          \n          activeRangeInfo = {\n            address: range.address,\n            row: range.rowIndex + 1,\n            column: range.columnIndex + 1,\n            numRows: range.rowCount,\n            numColumns: range.columnCount,\n            isMultipleRanges: false\n          };\n        }\n      } catch (error) {\n        console.log('Error getting selected ranges, using fallback:', error);\n        // If getting selected ranges fails, provide a default\n        activeRangeInfo = {\n          address: 'A1',\n          row: 1,\n          column: 1,\n          numRows: 1,\n          numColumns: 1,\n          isMultipleRanges: false\n        };\n      }\n      \n      // Load necessary properties\n      worksheet.load(\"name\");\n      \n      // Get sheet data for context\n      const usedRange = worksheet.getUsedRange();\n      usedRange.load([\"rowCount\", \"columnCount\", \"values\"]);\n      \n      await context.sync();\n      \n      // Build sheet context\n      const sheetContext = {\n        sheetName: worksheet.name,\n        activeRange: activeRangeInfo,\n        lastRow: usedRange ? usedRange.rowCount : 0,\n        lastColumn: usedRange ? usedRange.columnCount : 0,\n        headers: [],\n        dataRange: usedRange ? usedRange.values : [],\n        isLargeSheet: usedRange && usedRange.rowCount > 1000\n      };\n      \n      // Extract headers\n      if (usedRange && usedRange.rowCount > 0) {\n        const headerRow = usedRange.values[0];\n        for (let i = 0; i < headerRow.length; i++) {\n          sheetContext.headers.push({\n            column: i + 1,\n            columnLetter: getColumnLetter(i),\n            label: headerRow[i] ? headerRow[i].toString() : ''\n          });\n        }\n      }\n      \n      // Call OpenAI API to interpret the command\n      const interpretation = await callOpenAI(command, sheetContext);\n      \n      if (!interpretation.success) {\n        throw new Error(interpretation.error);\n      }\n      \n      // Execute the interpreted command\n      console.log('Executing interpreted command...');\n      const result = await executeInterpretedCommand(context, interpretation.data);\n      console.log('Command execution result:', result);\n      \n      // Reset button and show success\n      button.disabled = false;\n      button.innerHTML = originalText;\n      \n      if (result.success) {\n        console.log('Operation completed successfully:', result);\n        showStatus(result.message || '명령이 성공적으로 실행되었습니다.', 'success');\n        setTimeout(() => {\n          document.getElementById('commandInput').value = '';\n        }, 1000);\n      } else {\n        console.error('Operation failed:', result);\n        showStatus(result.error || '명령 실행에 실패했습니다.', 'error');\n      }\n      \n      console.log('Excel.run completing...');\n    });\n    console.log('Excel.run completed');\n  } catch (error) {\n    console.error('Error in executeCommand:', error);\n    console.error('Error stack:', error.stack);\n    button.disabled = false;\n    button.innerHTML = originalText;\n    showStatus('오류가 발생했습니다: ' + error.message, 'error');\n  } finally {\n    // Reset execution flag\n    isExecuting = false;\n  }\n}\n\n// Call OpenAI API through proxy\nasync function callOpenAI(command, sheetContext) {\n  try {\n    const response = await fetch(API_PROXY_URL, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        command: command,\n        sheetContext: sheetContext\n      })\n    });\n    \n    if (!response.ok) {\n      const errorData = await response.json();\n      return {\n        success: false,\n        error: errorData.error || `서버 오류 (${response.status})`\n      };\n    }\n    \n    return await response.json();\n    \n  } catch (error) {\n    console.error('Proxy API Error:', error);\n    return {\n      success: false,\n      error: `API 요청 오류: ${error.toString()}`\n    };\n  }\n}\n\n// Original OpenAI API call (no longer used)\nasync function callOpenAIDirectly(command, sheetContext) {\n  const systemPrompt = `You are an Excel assistant that interprets natural language commands and returns JSON instructions for Excel operations.\n  \nAvailable operations:\n1. merge: Merge cells\n2. sum: Sum values in a range or column\n3. average: Calculate average\n4. count: Count cells (can count all, numbers only, or based on conditions)\n5. format: Format cells (bold, italic, font color, background color, etc.)\n6. sort: Sort data\n7. filter: Filter data\n8. insert: Insert rows/columns\n9. delete: Delete rows/columns\n10. formula: Add custom formula\n11. chart: Create chart\n12. conditional_format: Add conditional formatting\n13. translate: Translate cell contents to another language\n14. compress: Remove empty rows in a specific column range\n15. retry_translation: Retry translation for failed items marked as [번역 실패]\n\nFor sum operation:\n- If user mentions a column by header name (e.g., \"totalToken 열의 합\", \"totalToken 합산\"), return: { \"sumType\": \"column\", \"columnName\": \"totalToken\" }\n- The system will automatically find the column, determine the data range, and place the sum in the first empty cell below the data\n- For specific range sum, use: { \"sourceRange\": \"A2:A10\" }\n- For adding sum below selection, use: { \"addNewRow\": true }\n\nCurrent sheet context:\n- Active range: ${sheetContext.activeRange.address}\n- Sheet dimensions: ${sheetContext.lastRow} rows x ${sheetContext.lastColumn} columns\n- Headers: ${sheetContext.headers.map(h => `Column ${h.columnLetter}: \"${h.label}\"`).join(', ')}\n\nReturn JSON in this format:\n{\n  \"operation\": \"operation_name\",\n  \"parameters\": {\n    // operation-specific parameters\n  }\n}`;\n\n  const url = 'https://api.openai.com/v1/chat/completions';\n  \n  const payload = {\n    model: 'gpt-4.1-2025-04-14',\n    messages: [\n      { role: 'system', content: systemPrompt },\n      { role: 'user', content: `Current Excel state:\nHeaders: ${sheetContext.headers.map(h => `Column ${h.columnLetter}: \"${h.label}\"`).join(', ')}\nActive sheet: ${sheetContext.sheetName}\n\nUser command: ${command}` }\n    ],\n    temperature: 0.3,\n    max_tokens: 500\n  };\n  \n  try {\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${OPENAI_API_KEY}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(payload)\n    });\n    \n    if (!response.ok) {\n      const errorData = await response.json();\n      if (response.status === 429) {\n        return {\n          success: false,\n          error: 'API 요청 한도를 초과했습니다. 잠시 후 다시 시도해주세요.'\n        };\n      } else if (response.status === 401) {\n        return {\n          success: false,\n          error: 'API 키가 유효하지 않습니다. API 키를 확인해주세요.'\n        };\n      }\n      return {\n        success: false,\n        error: `API 오류 (${response.status}): ${errorData.error?.message || '알 수 없는 오류'}`\n      };\n    }\n    \n    const result = await response.json();\n    \n    if (result.choices && result.choices[0]) {\n      const content = result.choices[0].message.content;\n      try {\n        const parsedCommand = JSON.parse(content);\n        return {\n          success: true,\n          data: parsedCommand\n        };\n      } catch (parseError) {\n        console.error('Failed to parse AI response:', content);\n        return {\n          success: false,\n          error: 'AI 응답을 해석할 수 없습니다. 다시 시도해주세요.'\n        };\n      }\n    } else {\n      return {\n        success: false,\n        error: 'OpenAI API 응답을 파싱할 수 없습니다.'\n      };\n    }\n  } catch (error) {\n    console.error('OpenAI API Error:', error);\n    return {\n      success: false,\n      error: `OpenAI API 오류: ${error.toString()}`\n    };\n  }\n}\n\n// Execute the interpreted command\nasync function executeInterpretedCommand(context, commandData) {\n  // Check if multiple operations\n  if (commandData.operations && Array.isArray(commandData.operations)) {\n    console.log('Executing multiple operations:', commandData.operations.length);\n    const results = [];\n    let successCount = 0;\n    \n    for (const op of commandData.operations) {\n      const result = await executeSingleOperation(context, op.operation, op.parameters || {});\n      results.push(result);\n      if (result.success) successCount++;\n    }\n    \n    return {\n      success: successCount === commandData.operations.length,\n      message: `${successCount}/${commandData.operations.length} 작업이 완료되었습니다.`,\n      results: results\n    };\n  }\n  \n  // Single operation\n  return await executeSingleOperation(context, commandData.operation, commandData.parameters || {});\n}\n\n// Execute a single operation\nasync function executeSingleOperation(context, operation, params) {\n  console.log(`[${new Date().toISOString()}] Executing operation: ${operation} with params:`, params);\n  \n  try {\n    switch (operation) {\n      case 'merge':\n        return await executeMerge(context, params);\n      \n      case 'sum':\n        return await executeSum(context, params);\n      \n      case 'average':\n        return await executeAverage(context, params);\n      \n      case 'count':\n        return await executeCount(context, params);\n      \n      case 'format':\n        return await executeFormat(context, params);\n      \n      case 'sort':\n        return await executeSort(context, params);\n      \n      case 'filter':\n        return await executeFilter(context, params);\n      \n      case 'insert':\n        return await executeInsert(context, params);\n      \n      case 'delete':\n        return await executeDelete(context, params);\n      \n      case 'formula':\n        return await executeFormula(context, params);\n      \n      case 'chart':\n        return await executeChart(context, params);\n      \n      case 'conditional_format':\n        return await executeConditionalFormat(context, params);\n      \n      case 'translate':\n        return await executeTranslate(context, params);\n      \n      case 'compress':\n        return await executeCompress(context, params);\n      \n      case 'retry_translation':\n        return await executeRetryTranslation(context, params);\n      \n      case 'remove_border':\n        return await executeRemoveBorder(context, params);\n      \n      case 'border_format':\n        return await executeBorderFormat(context, params);\n      \n      default:\n        return {\n          success: false,\n          error: `알 수 없는 작업: ${operation}`\n        };\n    }\n  } catch (error) {\n    console.error('Error in executeInterpretedCommand:', error);\n    return {\n      success: false,\n      error: `작업 실행 중 오류: ${error.message || error.toString()}`\n    };\n  }\n}\n\n// Merge cells\nasync function executeMerge(context, params) {\n  console.log('executeMerge started with params:', params);\n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  const range = params.range ? worksheet.getRange(params.range) : context.workbook.getSelectedRange();\n  \n  console.log('Loading range address...');\n  // Load address property before using it\n  range.load('address');\n  await context.sync();\n  \n  console.log('Range address loaded:', range.address);\n  const rangeAddress = range.address;\n  \n  console.log('Merging range...');\n  range.merge();\n  await context.sync();\n  \n  console.log('Merge completed successfully');\n  return {\n    success: true,\n    message: `${rangeAddress} 범위가 병합되었습니다.`\n  };\n}\n\n// Sum values\nasync function executeSum(context, params) {\n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  \n  // If column name is provided, find the column and create range\n  if (params.columnName || params.sumType === 'column') {\n    console.log('Sum by column name:', params.columnName);\n    \n    // Get sheet context to find column by name\n    const usedRange = worksheet.getUsedRange();\n    usedRange.load([\"values\", \"rowCount\", \"columnCount\"]);\n    await context.sync();\n    \n    if (!usedRange || usedRange.rowCount === 0) {\n      return {\n        success: false,\n        error: '시트에 데이터가 없습니다.'\n      };\n    }\n    \n    let columnIndex = -1;\n    let columnLetter = '';\n    \n    // Check if columnName is a single letter (column letter like \"D\")\n    if (params.columnName && params.columnName.match(/^[A-Z]$/)) {\n      // Direct column letter reference\n      columnLetter = params.columnName;\n      columnIndex = columnLetter.charCodeAt(0) - 65;\n      console.log('Column letter specified:', columnLetter, 'index:', columnIndex);\n    } else {\n      // Find column by header name\n      const headers = usedRange.values[0];\n      \n      for (let i = 0; i < headers.length; i++) {\n        if (headers[i] && headers[i].toString().toLowerCase() === (params.columnName || '').toLowerCase()) {\n          columnIndex = i;\n          columnLetter = getColumnLetter(i);\n          break;\n        }\n      }\n    }\n    \n    if (columnIndex === -1) {\n      return {\n        success: false,\n        error: `\"${params.columnName}\" 열을 찾을 수 없습니다.`\n      };\n    }\n    \n    // Find last row with data in this column\n    let lastDataRow = 1; // Start from row 2 (after header)\n    for (let row = 1; row < usedRange.rowCount; row++) {\n      if (usedRange.values[row][columnIndex] !== null && \n          usedRange.values[row][columnIndex] !== undefined && \n          usedRange.values[row][columnIndex] !== '') {\n        lastDataRow = row + 1; // +1 because Excel rows are 1-indexed\n      }\n    }\n    \n    // Create range from row 2 to last data row\n    const rangeAddress = `${columnLetter}2:${columnLetter}${lastDataRow}`;\n    const sumCell = worksheet.getCell(lastDataRow, columnIndex); // This will place sum in row lastDataRow+1 (0-based index)\n    \n    console.log(`Summing range: ${rangeAddress}, placing result in row ${lastDataRow + 1}`);\n    \n    sumCell.formulas = [[`=SUM(${rangeAddress})`]];\n    await context.sync();\n    \n    sumCell.load([\"values\", \"address\"]);\n    await context.sync();\n    \n    return {\n      success: true,\n      message: `${params.columnName} 열의 합계를 ${sumCell.address}에 계산했습니다: ${formatNumber(sumCell.values[0][0])}`,\n      value: sumCell.values[0][0]\n    };\n  }\n  \n  // Original logic for range-based sum - handle multiple selections\n  let sourceRange;\n  let sumFormula;\n  \n  if (params.sourceRange) {\n    sourceRange = worksheet.getRange(params.sourceRange);\n    sourceRange.load([\"columnIndex\", \"rowIndex\", \"rowCount\", \"address\"]);\n    await context.sync();\n    sumFormula = `=SUM(${sourceRange.address})`;\n  } else {\n    // Handle multiple selections\n    try {\n      const selectedRanges = context.workbook.getSelectedRanges();\n      selectedRanges.load([\"areas\", \"areaCount\"]);\n      await context.sync();\n      \n      if (selectedRanges.areaCount > 1) {\n        // Multiple non-contiguous ranges selected\n        const rangeAddresses = [];\n        \n        for (let i = 0; i < selectedRanges.areas.items.length; i++) {\n          const area = selectedRanges.areas.items[i];\n          area.load(\"address\");\n        }\n        await context.sync();\n        \n        for (let i = 0; i < selectedRanges.areas.items.length; i++) {\n          rangeAddresses.push(selectedRanges.areas.items[i].address);\n        }\n        \n        sumFormula = `=SUM(${rangeAddresses.join(',')})`;\n        sourceRange = selectedRanges.areas.items[0];\n        sourceRange.load([\"columnIndex\", \"rowIndex\", \"rowCount\"]);\n        await context.sync();\n      } else {\n        // Single contiguous range\n        sourceRange = context.workbook.getSelectedRange();\n        sourceRange.load([\"columnIndex\", \"rowIndex\", \"rowCount\", \"address\"]);\n        await context.sync();\n        sumFormula = `=SUM(${sourceRange.address})`;\n      }\n    } catch (error) {\n      console.log('Error getting selected ranges, trying fallback:', error);\n      // For non-contiguous selections, getSelectedRange() fails\n      // Try to get selected ranges differently\n      try {\n        const selectedRanges = context.workbook.getSelectedRanges();\n        selectedRanges.load([\"areas\", \"areaCount\"]);\n        await context.sync();\n        \n        if (selectedRanges.areas.items.length > 0) {\n          const rangeAddresses = [];\n          for (let i = 0; i < selectedRanges.areas.items.length; i++) {\n            const area = selectedRanges.areas.items[i];\n            area.load(\"address\");\n          }\n          await context.sync();\n          \n          for (let i = 0; i < selectedRanges.areas.items.length; i++) {\n            rangeAddresses.push(selectedRanges.areas.items[i].address);\n          }\n          \n          sumFormula = `=SUM(${rangeAddresses.join(',')})`;\n          sourceRange = selectedRanges.areas.items[0];\n          sourceRange.load([\"columnIndex\", \"rowIndex\", \"rowCount\"]);\n          await context.sync();\n        } else {\n          throw new Error('No ranges selected');\n        }\n      } catch (fallbackError) {\n        console.error('Fallback also failed:', fallbackError);\n        return { success: false, error: '선택한 범위를 처리할 수 없습니다. 연속된 범위를 선택해주세요.' };\n      }\n    }\n  }\n  \n  if (params.addNewRow === true) {\n    // Add new row for sum\n    const column = sourceRange.columnIndex;\n    const lastRow = sourceRange.rowIndex + sourceRange.rowCount;\n    const newCell = worksheet.getCell(lastRow, column);\n    \n    newCell.formulas = [[sumFormula]];\n    await context.sync();\n    \n    newCell.load([\"values\", \"address\"]);\n    await context.sync();\n    \n    return {\n      success: true,\n      message: `${newCell.address}에 합계를 계산했습니다: ${formatNumber(newCell.values[0][0])}`,\n      value: newCell.values[0][0]\n    };\n  } else if (params.targetCell) {\n    // Sum to specific cell\n    const targetCell = worksheet.getRange(params.targetCell);\n    targetCell.formulas = [[sumFormula]];\n    await context.sync();\n    \n    targetCell.load([\"values\", \"address\"]);\n    await context.sync();\n    \n    return {\n      success: true,\n      message: `${targetCell.address}에 합계를 계산했습니다: ${formatNumber(targetCell.values[0][0])}`,\n      value: targetCell.values[0][0]\n    };\n  } else {\n    // Default: add sum below the range\n    const column = sourceRange.columnIndex;\n    const lastRow = sourceRange.rowIndex + sourceRange.rowCount;\n    const newCell = worksheet.getCell(lastRow, column);\n    \n    newCell.formulas = [[sumFormula]];\n    await context.sync();\n    \n    newCell.load([\"values\", \"address\"]);\n    await context.sync();\n    \n    return {\n      success: true,\n      message: `${newCell.address}에 합계를 계산했습니다: ${formatNumber(newCell.values[0][0])}`,\n      value: newCell.values[0][0]\n    };\n  }\n}\n\n// Calculate average\nasync function executeAverage(context, params) {\n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  let sourceRange;\n  let rangeDescription = '';\n  let averageFormula = '';\n  \n  try {\n    // Handle different average types\n    if (params.averageType === 'column') {\n      if (params.column) {\n        // Column specified by letter (e.g., \"C\")\n        const usedRange = worksheet.getUsedRange();\n        if (!usedRange) {\n          return { success: false, error: '데이터가 없습니다.' };\n        }\n        \n        usedRange.load([\"rowCount\", \"columnCount\"]);\n        await context.sync();\n        \n        const columnIndex = params.column.charCodeAt(0) - 65;\n        if (columnIndex < 0 || columnIndex >= usedRange.columnCount) {\n          return { success: false, error: '유효하지 않은 열입니다.' };\n        }\n        \n        // Get column data starting from row 2 (skip header)\n        if (usedRange.rowCount > 1) {\n          sourceRange = worksheet.getRangeByIndexes(1, columnIndex, usedRange.rowCount - 1, 1);\n          rangeDescription = `${params.column}열`;\n        } else {\n          return { success: false, error: '평균을 계산할 데이터가 없습니다.' };\n        }\n        \n        sourceRange.load([\"address\"]);\n        await context.sync();\n        averageFormula = `=AVERAGE(${sourceRange.address})`;\n        \n      } else if (params.columnName) {\n        // Column specified by header name\n        const headers = await getHeaders(context);\n        const columnInfo = headers.find(h => h.label === params.columnName);\n        \n        if (!columnInfo) {\n          return { success: false, error: `\"${params.columnName}\" 열을 찾을 수 없습니다.` };\n        }\n        \n        const usedRange = worksheet.getUsedRange();\n        usedRange.load([\"rowCount\"]);\n        await context.sync();\n        \n        if (usedRange.rowCount > 1) {\n          sourceRange = worksheet.getRangeByIndexes(1, columnInfo.column - 1, usedRange.rowCount - 1, 1);\n          rangeDescription = `\"${params.columnName}\" 열`;\n        } else {\n          return { success: false, error: '평균을 계산할 데이터가 없습니다.' };\n        }\n        \n        sourceRange.load([\"address\"]);\n        await context.sync();\n        averageFormula = `=AVERAGE(${sourceRange.address})`;\n      }\n    } else if (params.averageType === 'row') {\n      // Row average (e.g., \"3행 평균\")\n      const usedRange = worksheet.getUsedRange();\n      if (!usedRange) {\n        return { success: false, error: '데이터가 없습니다.' };\n      }\n      \n      usedRange.load([\"rowCount\", \"columnCount\"]);\n      await context.sync();\n      \n      const rowIndex = params.row - 1; // Convert to 0-based\n      if (rowIndex < 0 || rowIndex >= usedRange.rowCount) {\n        return { success: false, error: '유효하지 않은 행입니다.' };\n      }\n      \n      // Get entire row data\n      sourceRange = worksheet.getRangeByIndexes(rowIndex, 0, 1, usedRange.columnCount);\n      rangeDescription = `${params.row}행`;\n      \n      sourceRange.load([\"address\"]);\n      await context.sync();\n      averageFormula = `=AVERAGE(${sourceRange.address})`;\n      \n    } else if (params.sourceRange) {\n      // Specific range (e.g., \"C1:C100\")\n      sourceRange = worksheet.getRange(params.sourceRange);\n      rangeDescription = params.sourceRange;\n      \n      sourceRange.load([\"address\"]);\n      await context.sync();\n      averageFormula = `=AVERAGE(${sourceRange.address})`;\n      \n    } else {\n      // Default: use selected range(s) - handle multiple selections\n      try {\n        // Try to get multiple selected ranges (for non-contiguous selections)\n        const selectedRanges = context.workbook.getSelectedRanges();\n        selectedRanges.load([\"areas\", \"areaCount\"]);\n        await context.sync();\n        \n        if (selectedRanges.areaCount > 1) {\n          // Multiple non-contiguous ranges selected\n          const rangeAddresses = [];\n          \n          for (let i = 0; i < selectedRanges.areas.items.length; i++) {\n            const area = selectedRanges.areas.items[i];\n            area.load(\"address\");\n          }\n          await context.sync();\n          \n          for (let i = 0; i < selectedRanges.areas.items.length; i++) {\n            rangeAddresses.push(selectedRanges.areas.items[i].address);\n          }\n          \n          averageFormula = `=AVERAGE(${rangeAddresses.join(',')})`;\n          rangeDescription = '선택한 셀';\n          \n          // Use the first selected range for positioning\n          sourceRange = selectedRanges.areas.items[0];\n          sourceRange.load([\"columnIndex\", \"rowIndex\", \"rowCount\", \"columnCount\"]);\n          await context.sync();\n          \n        } else {\n          // Single contiguous range\n          sourceRange = context.workbook.getSelectedRange();\n          rangeDescription = '선택한 범위';\n          \n          sourceRange.load([\"columnIndex\", \"rowIndex\", \"rowCount\", \"columnCount\", \"address\"]);\n          await context.sync();\n          averageFormula = `=AVERAGE(${sourceRange.address})`;\n        }\n        \n      } catch (error) {\n        console.log('Error getting selected ranges for average, trying fallback:', error);\n        // For non-contiguous selections, getSelectedRange() fails\n        try {\n          const selectedRanges = context.workbook.getSelectedRanges();\n          selectedRanges.load([\"areas\", \"areaCount\"]);\n          await context.sync();\n          \n          if (selectedRanges.areas.items.length > 0) {\n            const rangeAddresses = [];\n            for (let i = 0; i < selectedRanges.areas.items.length; i++) {\n              const area = selectedRanges.areas.items[i];\n              area.load(\"address\");\n            }\n            await context.sync();\n            \n            for (let i = 0; i < selectedRanges.areas.items.length; i++) {\n              rangeAddresses.push(selectedRanges.areas.items[i].address);\n            }\n            \n            averageFormula = `=AVERAGE(${rangeAddresses.join(',')})`;\n            rangeDescription = '선택한 셀';\n            sourceRange = selectedRanges.areas.items[0];\n            sourceRange.load([\"columnIndex\", \"rowIndex\", \"rowCount\", \"columnCount\"]);\n            await context.sync();\n          } else {\n            throw new Error('No ranges selected');\n          }\n        } catch (fallbackError) {\n          console.error('Average fallback also failed:', fallbackError);\n          return { success: false, error: '선택한 범위를 처리할 수 없습니다. 연속된 범위를 선택해주세요.' };\n        }\n      }\n    }\n    \n    // Determine where to place the result\n    let targetCell;\n    if (params.targetCell) {\n      targetCell = worksheet.getRange(params.targetCell);\n    } else if (params.averageType === 'row') {\n      // For row average, place result at the end of the row\n      const lastColumn = sourceRange.columnIndex + sourceRange.columnCount;\n      targetCell = worksheet.getCell(sourceRange.rowIndex, lastColumn);\n    } else {\n      // For column average or range, place result below the first selected range\n      const lastRow = sourceRange.rowIndex + sourceRange.rowCount;\n      targetCell = worksheet.getCell(lastRow, sourceRange.columnIndex);\n    }\n    \n    // Apply AVERAGE formula\n    targetCell.formulas = [[averageFormula]];\n    targetCell.numberFormat = [[\"#,##0.00\"]]; // Format as number with 2 decimal places\n    await context.sync();\n    \n    targetCell.load([\"values\", \"address\"]);\n    await context.sync();\n    \n    return {\n      success: true,\n      message: `${rangeDescription}의 평균을 ${targetCell.address}에 계산했습니다: ${formatNumber(targetCell.values[0][0])}`,\n      value: targetCell.values[0][0]\n    };\n    \n  } catch (error) {\n    console.error('Error in executeAverage:', error);\n    return {\n      success: false,\n      error: `평균 계산 중 오류 발생: ${error.message}`\n    };\n  }\n}\n\n// Count cells\nasync function executeCount(context, params) {\n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  const sourceRange = params.sourceRange ? worksheet.getRange(params.sourceRange) : context.workbook.getSelectedRange();\n  \n  sourceRange.load([\"address\"]);\n  await context.sync();\n  \n  let formula;\n  if (params.countType === 'countif' && params.condition !== undefined) {\n    let criteria;\n    if (params.operator === 'contains') {\n      criteria = `\"*${params.condition}*\"`;\n    } else if (params.operator === 'equals') {\n      criteria = typeof params.condition === 'string' ? `\"${params.condition}\"` : params.condition;\n    } else if (params.operator && ['>', '<', '>=', '<=', '<>'].includes(params.operator)) {\n      criteria = `\"${params.operator}${params.condition}\"`;\n    } else {\n      if (typeof params.condition === 'string') {\n        criteria = `\"*${params.condition}*\"`;\n      } else {\n        criteria = params.condition;\n      }\n    }\n    formula = `=COUNTIF(${sourceRange.address}, ${criteria})`;\n  } else if (params.countType === 'counta') {\n    formula = `=COUNTA(${sourceRange.address})`;\n  } else {\n    formula = `=COUNT(${sourceRange.address})`;\n  }\n  \n  let resultCell;\n  if (params.targetCell) {\n    resultCell = worksheet.getRange(params.targetCell);\n  } else {\n    const usedRange = worksheet.getUsedRange();\n    await context.sync();\n    \n    const lastRow = usedRange ? usedRange.rowCount : 1;\n    const lastCol = usedRange ? usedRange.columnCount : 1;\n    resultCell = worksheet.getCell(lastRow, lastCol);\n  }\n  \n  resultCell.formulas = [[formula]];\n  await context.sync();\n  \n  resultCell.load(\"values\");\n  await context.sync();\n  \n  return {\n    success: true,\n    message: params.countType === 'countif' ? \n      `\"${params.condition}\"을(를) 포함하는 셀의 개수: ${formatNumber(resultCell.values[0][0])}개` :\n      `개수를 계산했습니다: ${formatNumber(resultCell.values[0][0])}개`,\n    value: resultCell.values[0][0]\n  };\n}\n\n// Format cells\nasync function executeFormat(context, params) {\n  console.log('executeFormat called with params:', params);\n  \n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  let ranges = [];\n  \n  if (params.range) {\n    ranges.push(worksheet.getRange(params.range));\n  } else {\n    // Handle multiple selections\n    try {\n      const selectedRanges = context.workbook.getSelectedRanges();\n      selectedRanges.load([\"areas\", \"areaCount\"]);\n      await context.sync();\n      \n      if (selectedRanges.areaCount > 1) {\n        // Multiple non-contiguous ranges selected\n        for (let i = 0; i < selectedRanges.areas.items.length; i++) {\n          ranges.push(selectedRanges.areas.items[i]);\n        }\n      } else {\n        // Single contiguous range\n        ranges.push(context.workbook.getSelectedRange());\n      }\n    } catch (error) {\n      console.log('Error getting selected ranges for format:', error);\n      return { success: false, error: '선택한 범위를 처리할 수 없습니다. 연속된 범위를 선택해주세요.' };\n    }\n  }\n  \n  // Load format for all ranges\n  for (const range of ranges) {\n    range.load(\"format\");\n  }\n  await context.sync();\n  \n  // Apply formatting to all ranges\n  for (const range of ranges) {\n    if (params.bold !== undefined) {\n      range.format.font.bold = params.bold;\n    }\n    \n    if (params.italic !== undefined) {\n      range.format.font.italic = params.italic;\n    }\n    \n    if (params.fontSize) {\n      range.format.font.size = params.fontSize;\n    }\n    \n    if (params.fontColor) {\n      range.format.font.color = params.fontColor;\n    }\n    \n    if (params.backgroundColor) {\n      range.format.fill.color = params.backgroundColor;\n    }\n    \n    if (params.horizontalAlignment) {\n      range.format.horizontalAlignment = params.horizontalAlignment === 'left' ? 'Left' :\n                                       params.horizontalAlignment === 'center' ? 'Center' :\n                                       params.horizontalAlignment === 'right' ? 'Right' : 'General';\n    }\n    \n    if (params.numberFormat) {\n      // Handle specific format types\n      let format = params.numberFormat;\n      if (format === 'number' || format === '숫자') {\n        format = '#,##0';\n      } else if (format === 'currency' || format === '원화' || format === 'won' || format === '통화') {\n        format = '₩#,##0';\n      } else if (format === 'currency_decimal' || format === '원화_소수') {\n        format = '₩#,##0.00';\n      } else if (format === 'percentage' || format === '퍼센트' || format === '백분율') {\n        format = '0%';\n      } else if (format === 'percentage_decimal' || format === '퍼센트_소수') {\n        format = '0.00%';\n      } else if (format === 'date' || format === '날짜') {\n        format = 'yyyy-mm-dd';\n      } else if (format === 'time' || format === '시간') {\n        format = 'hh:mm:ss';\n      } else if (format === 'text' || format === '텍스트') {\n        format = '@';\n      } else if (format === 'general' || format === '일반') {\n        format = 'General';\n      }\n      \n      // Set number format for the range\n      range.numberFormat = format;\n    }\n  }\n  \n  await context.sync();\n  \n  return {\n    success: true,\n    message: '서식이 적용되었습니다.'\n  };\n}\n\n// Sort data\nasync function executeSort(context, params) {\n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  const range = params.range ? worksheet.getRange(params.range) : worksheet.getUsedRange();\n  \n  const column = params.column || 1;\n  const ascending = params.ascending !== undefined ? params.ascending : true;\n  \n  range.sort.apply([\n    {\n      key: column - 1, // Excel API uses 0-based index\n      ascending: ascending\n    }\n  ]);\n  \n  await context.sync();\n  \n  const columnLetter = getColumnLetter(column - 1);\n  \n  return {\n    success: true,\n    message: `${columnLetter}열 기준으로 ${ascending ? '오름차순' : '내림차순'} 정렬되었습니다.`\n  };\n}\n\n// Create chart\nasync function executeChart(context, params) {\n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  let sourceData;\n  let dataAddress = '';\n  \n  console.log('Creating chart with params:', params);\n  \n  if (params.range) {\n    sourceData = worksheet.getRange(params.range);\n    sourceData.load([\"address\", \"values\"]);\n    await context.sync();\n    dataAddress = sourceData.address;\n  } else {\n    // Handle multiple selections for chart data\n    try {\n      const selectedRanges = context.workbook.getSelectedRanges();\n      selectedRanges.load([\"areas\", \"areaCount\"]);\n      await context.sync();\n      \n      if (selectedRanges.areaCount > 1) {\n        // For charts, we need to combine ranges into a union range\n        // Excel charts work better with contiguous data, so we'll use the first area\n        sourceData = selectedRanges.areas.items[0];\n        sourceData.load([\"address\", \"values\"]);\n        await context.sync();\n        dataAddress = sourceData.address;\n        \n        // Note: Charts typically work best with contiguous data\n        console.log('Multiple ranges selected, using first range for chart:', dataAddress);\n      } else {\n        // Single contiguous range\n        sourceData = context.workbook.getSelectedRange();\n        sourceData.load([\"address\", \"values\"]);\n        await context.sync();\n        dataAddress = sourceData.address;\n      }\n    } catch (error) {\n      console.log('Error getting selected ranges for chart:', error);\n      return { success: false, error: '선택한 범위를 처리할 수 없습니다. 연속된 범위를 선택해주세요.' };\n    }\n  }\n  \n  console.log('Chart data range:', dataAddress);\n  \n  // Determine chart type\n  let chartType;\n  if (params.chartType === 'bar' || params.chartType === '막대') {\n    chartType = Excel.ChartType.columnClustered;\n  } else if (params.chartType === 'line' || params.chartType === '선') {\n    chartType = Excel.ChartType.line;\n  } else if (params.chartType === 'pie' || params.chartType === '원') {\n    chartType = Excel.ChartType.pie;\n  } else if (params.chartType === 'scatter' || params.chartType === '분산형') {\n    chartType = Excel.ChartType.xyscatter;\n  } else {\n    // Default to column chart\n    chartType = Excel.ChartType.columnClustered;\n  }\n  \n  // Create the chart\n  const chart = worksheet.charts.add(chartType, sourceData, Excel.ChartSeriesBy.auto);\n  \n  // Set chart properties\n  chart.title.text = params.title || '차트';\n  chart.height = 300;\n  chart.width = 400;\n  \n  // Position the chart\n  chart.left = params.offsetX || 100;\n  chart.top = params.offsetY || 100;\n  \n  // Set legend position\n  chart.legend.position = Excel.ChartLegendPosition.bottom;\n  chart.legend.visible = true;\n  \n  await context.sync();\n  \n  return {\n    success: true,\n    message: `${dataAddress} 범위로 ${params.chartType || '막대'} 차트가 생성되었습니다.`\n  };\n}\n\n// Add conditional formatting\nasync function executeConditionalFormat(context, params) {\n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  let ranges = [];\n  \n  console.log('Applying conditional format with params:', params);\n  \n  if (params.range) {\n    ranges.push(worksheet.getRange(params.range));\n  } else {\n    // Handle multiple selections\n    try {\n      const selectedRanges = context.workbook.getSelectedRanges();\n      selectedRanges.load([\"areas\", \"areaCount\"]);\n      await context.sync();\n      \n      if (selectedRanges.areaCount > 1) {\n        // Multiple non-contiguous ranges selected\n        for (let i = 0; i < selectedRanges.areas.items.length; i++) {\n          ranges.push(selectedRanges.areas.items[i]);\n        }\n      } else {\n        // Single contiguous range - use entire used range if no selection\n        const singleRange = context.workbook.getSelectedRange();\n        singleRange.load(\"isNullObject\");\n        await context.sync();\n        \n        if (singleRange.isNullObject) {\n          ranges.push(worksheet.getUsedRange());\n        } else {\n          ranges.push(singleRange);\n        }\n      }\n    } catch (error) {\n      // Fallback to used range\n      ranges.push(worksheet.getUsedRange());\n    }\n  }\n  \n  // Apply conditional formatting to all ranges\n  for (const range of ranges) {\n    // Simply apply conditional format to the entire range\n    // Excel will automatically skip non-numeric cells for numeric comparisons\n    const conditionalFormat = range.conditionalFormats.add(Excel.ConditionalFormatType.cellValue);\n    \n    // Set the rule based on condition\n    if (params.condition === 'greater_than' && params.value !== undefined) {\n      conditionalFormat.cellValue.rule = {\n        formula1: params.value.toString(),\n        operator: Excel.ConditionalCellValueOperator.greaterThan\n      };\n    } else if (params.condition === 'less_than' && params.value !== undefined) {\n      conditionalFormat.cellValue.rule = {\n        formula1: params.value.toString(),\n        operator: Excel.ConditionalCellValueOperator.lessThan\n      };\n    } else if (params.condition === 'equal_to' && params.value !== undefined) {\n      conditionalFormat.cellValue.rule = {\n        formula1: params.value.toString(),\n        operator: Excel.ConditionalCellValueOperator.equalTo\n      };\n    } else if (params.condition === 'text_contains' && params.value !== undefined) {\n      conditionalFormat.cellValue.rule = {\n        formula1: params.value.toString(),\n        operator: Excel.ConditionalCellValueOperator.containsText\n      };\n    } else {\n      // Default to greater than\n      conditionalFormat.cellValue.rule = {\n        formula1: (params.value || 0).toString(),\n        operator: Excel.ConditionalCellValueOperator.greaterThan\n      };\n    }\n    \n    // Set the format\n    conditionalFormat.cellValue.format.fill.color = params.backgroundColor || \"#00FF00\";\n    if (params.fontColor) {\n      conditionalFormat.cellValue.format.font.color = params.fontColor;\n    }\n    if (params.bold) {\n      conditionalFormat.cellValue.format.font.bold = true;\n    }\n  }\n  \n  await context.sync();\n  \n  return {\n    success: true,\n    message: `조건부 서식이 적용되었습니다. (${params.condition} ${params.value || ''})`\n  };\n}\n\n// Translate column contents\nasync function executeTranslate(context, params) {\n  console.log('executeTranslate called with params:', params);\n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  \n  if (!params.targetLanguage) {\n    return { success: false, error: '대상 언어를 지정해주세요.' };\n  }\n  \n  let sourceRange;\n  let targetColumnIndex;\n  \n  if (params.sourceRange) {\n    // Handle column ranges like \"C:C\" by intersecting with used range\n    if (params.sourceRange.match(/^[A-Z]+:[A-Z]+$/)) {\n      console.log('Handling column range:', params.sourceRange);\n      const usedRange = worksheet.getUsedRange();\n      if (!usedRange) {\n        return { success: false, error: '번역할 데이터가 없습니다.' };\n      }\n      \n      usedRange.load([\"rowCount\", \"columnCount\"]);\n      await context.sync();\n      \n      console.log('Used range:', {\n        rowCount: usedRange.rowCount,\n        columnCount: usedRange.columnCount\n      });\n      \n      // Get the column letter from the range (e.g., \"C\" from \"C:C\")\n      const columnLetter = params.sourceRange.split(':')[0];\n      const columnIndex = columnLetter.charCodeAt(0) - 65;\n      \n      // Get only the used portion of the column, starting from row 2 (skip header)\n      if (usedRange.rowCount > 1) {\n        sourceRange = worksheet.getRangeByIndexes(1, columnIndex, usedRange.rowCount - 1, 1);\n      } else {\n        return { success: false, error: '번역할 데이터가 없습니다.' };\n      }\n      \n      // Handle target range similarly\n      if (params.targetRange && params.targetRange.match(/^[A-Z]+:[A-Z]+$/)) {\n        const targetColumnLetter = params.targetRange.split(':')[0];\n        targetColumnIndex = targetColumnLetter.charCodeAt(0) - 65;\n        console.log('Target column calculation:', {\n          targetRange: params.targetRange,\n          targetColumnLetter,\n          targetColumnIndex\n        });\n      } else {\n        // If no target specified, use next column\n        targetColumnIndex = columnIndex + 1;\n        console.log('Using next column as target:', {\n          sourceColumnIndex: columnIndex,\n          targetColumnIndex\n        });\n      }\n    } else {\n      // Handle specific ranges like \"B2:B40\"\n      sourceRange = worksheet.getRange(params.sourceRange);\n      \n      // Parse target column if specified\n      if (params.targetRange) {\n        if (params.targetRange.match(/^[A-Z]+:[A-Z]+$/)) {\n          // Extract column letter from targetRange like \"E:E\"\n          const targetColumnLetter = params.targetRange.split(':')[0];\n          targetColumnIndex = targetColumnLetter.charCodeAt(0) - 65;\n          console.log('Target column parsed from targetRange:', {\n            targetRange: params.targetRange,\n            targetColumnLetter,\n            targetColumnIndex\n          });\n        }\n      }\n    }\n  } else if (params.sourceColumn) {\n    const columnIndex = params.sourceColumn.charCodeAt(0) - 65;\n    const usedRange = worksheet.getUsedRange();\n    usedRange.load([\"rowCount\"]);\n    await context.sync();\n    \n    if (usedRange.rowCount > 1) {\n      sourceRange = worksheet.getRangeByIndexes(1, columnIndex, usedRange.rowCount - 1, 1);\n    } else {\n      return { success: false, error: '번역할 데이터가 없습니다.' };\n    }\n    \n    targetColumnIndex = params.targetColumn === 'next' ? columnIndex + 1 :\n                       params.targetColumn ? params.targetColumn.charCodeAt(0) - 65 : columnIndex + 1;\n  } else {\n    return { success: false, error: '번역할 열을 지정해주세요.' };\n  }\n  \n  sourceRange.load([\"values\", \"rowIndex\", \"columnIndex\", \"rowCount\"]);\n  await context.sync();\n  \n  console.log('Source range loaded:', {\n    rowIndex: sourceRange.rowIndex,\n    columnIndex: sourceRange.columnIndex,\n    rowCount: sourceRange.rowCount,\n    values: sourceRange.values ? `${sourceRange.values.length} rows` : 'null'\n  });\n  \n  const sourceValues = sourceRange.values;\n  if (!sourceValues || sourceValues.length === 0) {\n    return { success: false, error: '번역할 데이터가 없습니다.' };\n  }\n  \n  const translations = [];\n  const batchSize = 20;\n  \n  // Translate in batches\n  for (let i = 0; i < sourceValues.length; i += batchSize) {\n    const batch = sourceValues.slice(i, Math.min(i + batchSize, sourceValues.length));\n    const batchTexts = batch.map(row => row[0]).filter(text => text);\n    \n    if (batchTexts.length > 0) {\n      const translatedBatch = await translateBatch(batchTexts, params.targetLanguage, params.sourceLanguage);\n      \n      // Check if translatedBatch is valid\n      if (!translatedBatch || !Array.isArray(translatedBatch)) {\n        console.error('Invalid translation batch received:', translatedBatch);\n        // Mark all as translation failed\n        for (let j = 0; j < batch.length; j++) {\n          if (batch[j][0]) {\n            translations.push([{ text: '번역 실패', isError: true }]);\n          } else {\n            translations.push([{ text: '', isError: false }]);\n          }\n        }\n      } else {\n        console.log('Processing translation batch:', {\n          batchLength: batch.length,\n          translatedBatchLength: translatedBatch.length,\n          sampleTranslations: translatedBatch.slice(0, 3),\n          firstTranslation: translatedBatch[0],\n          translationType: typeof translatedBatch[0],\n          rawData: JSON.stringify(translatedBatch.slice(0, 3))\n        });\n        \n        let translationIndex = 0;\n        for (let j = 0; j < batch.length; j++) {\n          if (batch[j][0]) {\n            const translatedText = translatedBatch[translationIndex] || '';\n            // Check if translation is empty or failed\n            if (!translatedText || translatedText.trim() === '') {\n              translations.push([{ text: '번역 실패', isError: true }]);\n            } else {\n              translations.push([{ text: translatedText, isError: false }]);\n            }\n            if (j < 3) {\n              console.log(`Translation ${j}: \"${batch[j][0]}\" -> \"${translatedText}\"`);\n            }\n            translationIndex++;\n          } else {\n            // Keep empty rows as empty\n            translations.push([{ text: '', isError: false }]);\n          }\n        }\n      }\n    } else {\n      for (let j = 0; j < batch.length; j++) {\n        translations.push([{ text: '', isError: false }]);\n      }\n    }\n    \n    // Show progress\n    if (i % 100 === 0 && i > 0) {\n      showStatus(`번역 중... ${Math.round((i / sourceValues.length) * 100)}%`, 'info');\n    }\n  }\n  \n  // Write translations\n  console.log('Writing translations to target column:', {\n    rowIndex: sourceRange.rowIndex,\n    targetColumnIndex: targetColumnIndex || sourceRange.columnIndex + 1,\n    translationsCount: translations.length,\n    sampleTranslations: translations.slice(0, 3).map(t => t[0])\n  });\n  console.log('First 5 translations raw:', JSON.stringify(translations.slice(0, 5)));\n  console.log('Translation content check:', {\n    first: translations[0] ? translations[0][0] : 'null',\n    second: translations[1] ? translations[1][0] : 'null',\n    third: translations[2] ? translations[2][0] : 'null',\n    isEmpty: translations[0] && translations[0][0] === ''\n  });\n  \n  // DEBUG: Check if translations contain original text instead of translations\n  console.log('DEBUG: Comparing source and translations:');\n  for (let i = 0; i < Math.min(5, translations.length); i++) {\n    console.log(`  [${i}] Source: \"${sourceValues[i][0]}\" -> Translation: \"${translations[i][0]}\"`);\n  }\n  \n  // Ensure targetColumnIndex is set correctly\n  if (targetColumnIndex === undefined) {\n    // If no target column specified, use the next column after source\n    targetColumnIndex = sourceRange.columnIndex + 1;\n    console.log('No target column specified, using next column:', targetColumnIndex);\n  }\n  \n  const targetRange = worksheet.getRangeByIndexes(\n    sourceRange.rowIndex,\n    targetColumnIndex,\n    translations.length,\n    1\n  );\n  \n  targetRange.load([\"address\", \"values\"]);\n  await context.sync();\n  console.log('Target range address:', targetRange.address);\n  console.log('Existing target values (first 3):', targetRange.values.slice(0, 3));\n  \n  // Clear existing values first\n  targetRange.clear(Excel.ClearApplyTo.contents);\n  await context.sync();\n  console.log('Target range cleared');\n  \n  // Ensure translations are properly formatted as 2D array\n  console.log('Setting target range values:', {\n    translationsLength: translations.length,\n    firstTranslation: translations[0],\n    isArray: Array.isArray(translations),\n    is2DArray: Array.isArray(translations[0])\n  });\n  \n  // Process translations and prepare values\n  const stringTranslations = [];\n  const errorRows = [];\n  \n  for (let i = 0; i < translations.length; i++) {\n    const translation = translations[i][0];\n    if (translation && typeof translation === 'object') {\n      stringTranslations.push([translation.text]);\n      if (translation.isError) {\n        errorRows.push(i);\n      }\n    } else {\n      // Handle legacy format\n      stringTranslations.push([String(translation || '')]);\n    }\n  }\n  \n  console.log('String translations (first 3):', stringTranslations.slice(0, 3));\n  console.log('Error rows:', errorRows.length, 'rows marked as errors');\n  \n  // Set the values\n  targetRange.values = stringTranslations;\n  await context.sync();\n  \n  // Apply error styling to failed translations\n  if (errorRows.length > 0) {\n    for (const rowIndex of errorRows) {\n      const errorCell = targetRange.getCell(rowIndex, 0);\n      errorCell.format.fill.color = \"#FFE6E6\"; // Light red background\n      errorCell.format.font.color = \"#CC0000\"; // Dark red text\n      errorCell.format.font.bold = true;\n    }\n    await context.sync();\n  }\n  \n  console.log('Translations written to Excel with error styling applied');\n  \n  // Verify the values were actually written\n  targetRange.load([\"values\", \"text\", \"valueTypes\"]);\n  await context.sync();\n  console.log('Verification - Target range:', {\n    address: targetRange.address,\n    values: targetRange.values.slice(0, 3),\n    text: targetRange.text.slice(0, 3),\n    valueTypes: targetRange.valueTypes.slice(0, 3),\n    actualFirstValue: targetRange.values[0] ? targetRange.values[0][0] : 'null',\n    firstThreeValues: [\n      targetRange.values[0] ? targetRange.values[0][0] : 'empty',\n      targetRange.values[1] ? targetRange.values[1][0] : 'empty',\n      targetRange.values[2] ? targetRange.values[2][0] : 'empty'\n    ]\n  });\n  \n  // Try alternative method - set each cell individually for debugging\n  if (translations.length > 0) {\n    const isEmpty = !targetRange.values[0] || !targetRange.values[0][0] || targetRange.values[0][0] === '';\n    console.log('Checking if values are empty:', {\n      isEmpty,\n      firstValue: targetRange.values[0] ? targetRange.values[0][0] : 'null',\n      firstValueLength: targetRange.values[0] && targetRange.values[0][0] ? targetRange.values[0][0].length : 0\n    });\n    \n    if (isEmpty) {\n      console.log('Values not visible, trying individual cell approach...');\n      // Try setting just the first few cells individually\n      for (let i = 0; i < Math.min(3, translations.length); i++) {\n        const cellRow = sourceRange.rowIndex + i;\n        const cellCol = targetColumnIndex || sourceRange.columnIndex + 1;\n        const cell = worksheet.getCell(cellRow, cellCol);\n        const cellValue = stringTranslations[i][0];\n        \n        console.log(`Setting cell (${cellRow},${cellCol}) to: \"${cellValue}\"`);\n        cell.values = [[cellValue]];\n        \n        await context.sync();\n        \n        // Verify it was set\n        cell.load(\"values\");\n        await context.sync();\n        console.log(`Cell ${i} after setting:`, cell.values[0][0]);\n      }\n    }\n  }\n  \n  // Add header\n  const headerCell = worksheet.getCell(0, targetColumnIndex || sourceRange.columnIndex + 1);\n  const sourceHeaderCell = worksheet.getCell(0, sourceRange.columnIndex);\n  sourceHeaderCell.load(\"values\");\n  await context.sync();\n  \n  headerCell.values = [[`${sourceHeaderCell.values[0][0]} (${params.targetLanguage})`]];\n  await context.sync();\n  \n  return {\n    success: true,\n    message: `번역이 완료되었습니다. (${sourceValues.length}개 항목)`\n  };\n}\n\n// Translate a batch of texts through proxy\nasync function translateBatch(texts, targetLanguage, sourceLanguage) {\n  try {\n    console.log('translateBatch called with', texts.length, 'texts');\n    const response = await fetch(API_PROXY_URL, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        command: `Translate these items to ${targetLanguage}: ${texts.join(', ')}`,\n        sheetContext: {\n          operation: 'translate_batch',\n          texts: texts,\n          targetLanguage: targetLanguage,\n          sourceLanguage: sourceLanguage\n        }\n      })\n    });\n    \n    console.log('Translation response status:', response.status);\n    \n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    \n    const result = await response.json();\n    console.log('Translation result:', result);\n    \n    if (result.success && result.data && result.data.translations) {\n      console.log('Translations received:', result.data.translations.length);\n      console.log('First 3 translations from API:', result.data.translations.slice(0, 3));\n      console.log('Raw translations data:', JSON.stringify(result.data.translations.slice(0, 5)));\n      return result.data.translations;\n    } else if (result.error) {\n      console.error('Translation API error:', result.error);\n      throw new Error(result.error);\n    } else {\n      console.error('Invalid translation response structure:', result);\n      throw new Error('번역 응답을 받을 수 없습니다.');\n    }\n  } catch (error) {\n    console.error('Translation error:', error);\n    return texts.map(() => '');\n  }\n}\n\n// Helper functions\nfunction getColumnLetter(columnIndex) {\n  let columnLetter = '';\n  let tempIndex = columnIndex;\n  \n  while (tempIndex >= 0) {\n    columnLetter = String.fromCharCode((tempIndex % 26) + 65) + columnLetter;\n    tempIndex = Math.floor(tempIndex / 26) - 1;\n  }\n  \n  return columnLetter;\n}\n\nfunction formatNumber(value) {\n  if (typeof value === 'number') {\n    if (Number.isInteger(value)) {\n      return value.toLocaleString('ko-KR');\n    } else {\n      return value.toLocaleString('ko-KR', { minimumFractionDigits: 0, maximumFractionDigits: 2 });\n    }\n  }\n  return value;\n}\n\nfunction showStatus(message, type) {\n  const status = document.getElementById('status');\n  status.textContent = message;\n  status.className = 'status-message ' + type;\n  status.style.display = 'block';\n  \n  if (window.statusTimeout) {\n    clearTimeout(window.statusTimeout);\n  }\n  \n  if (type === 'success') {\n    window.statusTimeout = setTimeout(() => {\n      status.style.display = 'none';\n    }, 5000);\n  }\n}\n\nfunction clearInput() {\n  document.getElementById('commandInput').value = '';\n  document.getElementById('status').style.display = 'none';\n}\n\nfunction setCommand(command) {\n  document.getElementById('commandInput').value = command;\n  document.getElementById('commandInput').focus();\n}\n\nfunction showSettings() {\n  showStatus('이 애드인은 보안 서버를 통해 AI 기능을 제공합니다. 별도의 API 키 설정이 필요하지 않습니다.', 'info');\n}\n\n// Test backend connection\nasync function testBackendConnection() {\n  try {\n    console.log('Testing backend connection...');\n    const testUrl = 'https://excel-addon-backend.vercel.app/api/test';\n    \n    const response = await fetch(testUrl, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({ test: true })\n    });\n    \n    console.log('Test response status:', response.status);\n    console.log('Test response headers:', response.headers);\n    \n    const data = await response.json();\n    console.log('Test response data:', data);\n    \n    showStatus('백엔드 연결 테스트 성공', 'success');\n  } catch (error) {\n    console.error('Backend test error:', error);\n    showStatus('백엔드 연결 테스트 실패: ' + error.message, 'error');\n  }\n}\n\n// Format cell borders\nasync function executeBorderFormat(context, params) {\n  console.log('executeBorderFormat called with params:', params);\n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  \n  try {\n    let targetRanges = [];\n    \n    // Determine the range based on params\n    if (!params.range) {\n      // No range specified - handle multiple selections\n      try {\n        const selectedRanges = context.workbook.getSelectedRanges();\n        selectedRanges.load([\"areas\", \"areaCount\"]);\n        await context.sync();\n        \n        if (selectedRanges.areaCount > 1) {\n          // Multiple non-contiguous ranges selected\n          for (let i = 0; i < selectedRanges.areas.items.length; i++) {\n            targetRanges.push(selectedRanges.areas.items[i]);\n          }\n        } else {\n          // Single contiguous range\n          targetRanges.push(context.workbook.getSelectedRange());\n        }\n      } catch (error) {\n        console.log('Error getting selected ranges for border format/removal:', error);\n        return { success: false, error: '선택한 범위를 처리할 수 없습니다. 연속된 범위를 선택해주세요.' };\n      }\n    } else if (params.range === 'all' || params.range === '전체') {\n      // Entire sheet\n      const usedRange = worksheet.getUsedRangeOrNullObject();\n      usedRange.load(\"isNullObject\");\n      await context.sync();\n      \n      if (usedRange.isNullObject) {\n        return { success: false, error: '시트에 데이터가 없습니다.' };\n      } else {\n        targetRanges.push(usedRange);\n      }\n    } else {\n      // Specific range provided\n      targetRanges.push(worksheet.getRange(params.range));\n    }\n    \n    // Load all ranges\n    for (const range of targetRanges) {\n      range.load([\"address\", \"rowCount\", \"columnCount\"]);\n    }\n    await context.sync();\n    \n    console.log('Target ranges for border format:', targetRanges.length);\n    for (let i = 0; i < targetRanges.length; i++) {\n      console.log(`Range ${i + 1}:`, {\n        address: targetRanges[i].address,\n        rowCount: targetRanges[i].rowCount,\n        columnCount: targetRanges[i].columnCount\n      });\n    }\n    \n    // Determine which borders to format\n    const borderType = params.borderType || 'all';\n    const color = params.color || '#000000';\n    const style = params.style || 'Continuous';\n    \n    // Map style names to Excel constants\n    const styleMap = {\n      'continuous': 'Continuous',\n      'dash': 'Dash',\n      'dashdot': 'DashDot',\n      'double': 'Double',\n      'dot': 'Dot',\n      'dashdotdot': 'DashDotDot',\n      'slantdashdot': 'SlantDashDot'\n    };\n    \n    const excelStyle = styleMap[style.toLowerCase()] || 'Continuous';\n    \n    // Apply border formatting to all selected ranges\n    for (const targetRange of targetRanges) {\n      if (borderType === 'all') {\n        // Format all borders\n        const borderItems = ['EdgeTop', 'EdgeBottom', 'EdgeLeft', 'EdgeRight', 'InsideVertical', 'InsideHorizontal'];\n        \n        for (const borderItem of borderItems) {\n          try {\n            const border = targetRange.format.borders.getItem(borderItem);\n            border.style = excelStyle;\n            border.color = color;\n            border.weight = 'Thin';\n          } catch (e) {\n            // Some border items might not be applicable (e.g., InsideVertical for single cell)\n            console.log(`Skipping ${borderItem}:`, e.message);\n          }\n        }\n      } else if (borderType === 'inside') {\n        // Format only inside borders\n        try {\n          const insideV = targetRange.format.borders.getItem('InsideVertical');\n          insideV.style = excelStyle;\n          insideV.color = color;\n          insideV.weight = 'Thin';\n        } catch (e) {\n          console.log('No inside vertical borders');\n        }\n        \n        try {\n          const insideH = targetRange.format.borders.getItem('InsideHorizontal');\n          insideH.style = excelStyle;\n          insideH.color = color;\n          insideH.weight = 'Thin';\n        } catch (e) {\n          console.log('No inside horizontal borders');\n        }\n      } else {\n        // Format specific border\n        const borderMap = {\n          'top': 'EdgeTop',\n          'bottom': 'EdgeBottom',\n          'left': 'EdgeLeft',\n          'right': 'EdgeRight'\n        };\n        \n        const borderName = borderMap[borderType.toLowerCase()];\n        if (borderName) {\n          const border = targetRange.format.borders.getItem(borderName);\n          border.style = excelStyle;\n          border.color = color;\n          border.weight = 'Thin';\n        }\n      }\n    }\n    \n    await context.sync();\n    \n    return {\n      success: true,\n      message: '테두리 서식이 적용되었습니다.'\n    };\n    \n  } catch (error) {\n    console.error('Error in executeBorderFormat:', error);\n    return {\n      success: false,\n      error: `테두리 서식 적용 중 오류 발생: ${error.message}`\n    };\n  }\n}\n\n// Additional operations (compress, filter, insert, delete, formula, retry_translation)\n// These would need to be implemented based on Excel JavaScript API capabilities\n\nasync function executeCompress(context, params) {\n  console.log('executeCompress called with params:', params);\n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  \n  try {\n    if (!params.range) {\n      return { success: false, error: '범위를 지정해주세요.' };\n    }\n    \n    // Get the specified range\n    const checkRange = worksheet.getRange(params.range);\n    checkRange.load([\"rowIndex\", \"rowCount\", \"columnIndex\", \"values\", \"address\"]);\n    await context.sync();\n    \n    console.log('Compress range:', {\n      address: checkRange.address,\n      rowIndex: checkRange.rowIndex,\n      rowCount: checkRange.rowCount,\n      columnIndex: checkRange.columnIndex\n    });\n    \n    // Find empty rows in the specified column\n    const emptyRows = [];\n    const values = checkRange.values;\n    \n    // Check each row in the range\n    for (let i = 0; i < values.length; i++) {\n      const cellValue = values[i][0]; // First column of the range\n      if (cellValue === null || cellValue === undefined || cellValue === '' || \n          (typeof cellValue === 'string' && cellValue.trim() === '')) {\n        // This row is empty in the specified column\n        // Store the actual row index (rowIndex + i)\n        emptyRows.push(checkRange.rowIndex + i);\n      }\n    }\n    \n    console.log('Found empty rows:', emptyRows.length, 'rows at indices:', emptyRows);\n    \n    if (emptyRows.length === 0) {\n      return {\n        success: true,\n        message: '제거할 빈 행이 없습니다.'\n      };\n    }\n    \n    // IMPORTANT: Only delete rows that are within the specified range\n    // This prevents accidentally deleting rows outside the range (like A1)\n    const minRowIndex = checkRange.rowIndex;\n    const maxRowIndex = checkRange.rowIndex + checkRange.rowCount - 1;\n    \n    // Filter out any row indices that are outside the specified range\n    const rowsToDelete = emptyRows.filter(rowIdx => rowIdx >= minRowIndex && rowIdx <= maxRowIndex);\n    \n    console.log('Rows to delete (filtered):', rowsToDelete);\n    \n    // Delete rows from bottom to top to avoid index shifting\n    rowsToDelete.sort((a, b) => b - a); // Sort in descending order\n    \n    for (const rowIndex of rowsToDelete) {\n      console.log('Deleting row:', rowIndex + 1); // Display 1-based for user\n      // Get the entire row using a fixed large column count to avoid getUsedRange() issues\n      const rowToDelete = worksheet.getRangeByIndexes(rowIndex, 0, 1, 1000);\n      rowToDelete.delete(Excel.DeleteShiftDirection.up);\n      await context.sync();\n    }\n    \n    return {\n      success: true,\n      message: `${rowsToDelete.length}개의 빈 행이 제거되었습니다.`\n    };\n    \n  } catch (error) {\n    console.error('Error in executeCompress:', error);\n    return {\n      success: false,\n      error: `빈 행 제거 중 오류 발생: ${error.message}`\n    };\n  }\n}\n\nasync function executeFilter(context, params) {\n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  const range = params.range ? worksheet.getRange(params.range) : worksheet.getUsedRange();\n  \n  // Apply autofilter\n  range.worksheet.autoFilter.apply(range);\n  \n  await context.sync();\n  \n  return {\n    success: true,\n    message: '필터가 적용되었습니다.'\n  };\n}\n\nasync function executeInsert(context, params) {\n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  const type = params.type || 'row';\n  const position = params.position || 1;\n  const count = params.count || 1;\n  \n  if (type === 'row') {\n    const range = worksheet.getRangeByIndexes(position - 1, 0, count, 1);\n    range.insert(Excel.InsertShiftDirection.down);\n  } else {\n    const range = worksheet.getRangeByIndexes(0, position - 1, 1, count);\n    range.insert(Excel.InsertShiftDirection.right);\n  }\n  \n  await context.sync();\n  \n  return {\n    success: true,\n    message: `${count}개의 ${type === 'row' ? '행' : '열'}이 삽입되었습니다.`\n  };\n}\n\nasync function executeDelete(context, params) {\n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  const type = params.type || 'row';\n  const position = params.position || 1;\n  const count = params.count || 1;\n  \n  if (type === 'row') {\n    const range = worksheet.getRangeByIndexes(position - 1, 0, count, 1);\n    range.delete(Excel.DeleteShiftDirection.up);\n  } else {\n    const range = worksheet.getRangeByIndexes(0, position - 1, 1, count);\n    range.delete(Excel.DeleteShiftDirection.left);\n  }\n  \n  await context.sync();\n  \n  return {\n    success: true,\n    message: `${count}개의 ${type === 'row' ? '행' : '열'}이 삭제되었습니다.`\n  };\n}\n\nasync function executeFormula(context, params) {\n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  const range = params.range ? worksheet.getRange(params.range) : context.workbook.getSelectedRange();\n  \n  if (!params.formula) {\n    return { success: false, error: '수식을 지정해주세요.' };\n  }\n  \n  range.formulas = [[params.formula]];\n  await context.sync();\n  \n  return {\n    success: true,\n    message: '수식이 적용되었습니다.'\n  };\n}\n\nasync function executeRetryTranslation(context, params) {\n  // Implementation would be similar to Google Sheets version\n  // but using Excel JavaScript API\n  return {\n    success: false,\n    error: '이 기능은 현재 구현 중입니다.'\n  };\n}\n\nasync function executeRemoveBorder(context, params) {\n  console.log('executeRemoveBorder called with params:', params);\n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  \n  try {\n    let targetRanges = [];\n    \n    // Determine the range to apply border removal\n    if (params.range) {\n      // Handle special case for entire sheet\n      if (params.range === 'all' || params.range === '전체') {\n        console.log('Removing borders from entire sheet');\n        // Use getUsedRangeOrNullObject to get the actual used range\n        const usedRange = worksheet.getUsedRangeOrNullObject();\n        usedRange.load(\"isNullObject\");\n        await context.sync();\n        \n        if (usedRange.isNullObject) {\n          console.log('No used range in the sheet, nothing to remove borders from');\n          return { success: true, message: '시트에 데이터가 없어 테두리를 제거할 필요가 없습니다.' };\n        } else {\n          // Expand the used range to ensure we get all cells that might have borders\n          usedRange.load([\"rowCount\", \"columnCount\", \"rowIndex\", \"columnIndex\"]);\n          await context.sync();\n          \n          // Get a slightly larger range to ensure we capture all borders\n          const expandedRows = Math.min(usedRange.rowCount + 100, 1048576);\n          const expandedCols = Math.min(usedRange.columnCount + 20, 16384);\n          targetRanges.push(worksheet.getRangeByIndexes(0, 0, expandedRows, expandedCols));\n        }\n      } else if (params.range.match(/^[A-Z]+:[A-Z]+$/)) {\n        // Handle column ranges like \"C:C\"\n        console.log('Handling column range:', params.range);\n        const usedRange = worksheet.getUsedRange();\n        if (!usedRange) {\n          return { success: false, error: '데이터가 없습니다.' };\n        }\n        \n        usedRange.load([\"rowCount\", \"columnCount\"]);\n        await context.sync();\n        \n        // Get the column letter from the range (e.g., \"C\" from \"C:C\")\n        const columnLetter = params.range.split(':')[0];\n        const columnIndex = columnLetter.charCodeAt(0) - 65;\n        \n        // Get the entire used portion of the column\n        targetRanges.push(worksheet.getRangeByIndexes(0, columnIndex, usedRange.rowCount, 1));\n      } else {\n        // Handle specific ranges like \"A1:B10\"\n        targetRanges.push(worksheet.getRange(params.range));\n      }\n    } else {\n      // If no range specified, handle multiple selections\n      try {\n        const selectedRanges = context.workbook.getSelectedRanges();\n        selectedRanges.load([\"areas\", \"areaCount\"]);\n        await context.sync();\n        \n        if (selectedRanges.areaCount > 1) {\n          // Multiple non-contiguous ranges selected\n          for (let i = 0; i < selectedRanges.areas.items.length; i++) {\n            targetRanges.push(selectedRanges.areas.items[i]);\n          }\n        } else {\n          // Single contiguous range\n          targetRanges.push(context.workbook.getSelectedRange());\n        }\n      } catch (error) {\n        console.log('Error getting selected ranges for border format/removal:', error);\n        return { success: false, error: '선택한 범위를 처리할 수 없습니다. 연속된 범위를 선택해주세요.' };\n      }\n    }\n    \n    // Load all ranges\n    for (const range of targetRanges) {\n      range.load([\"address\", \"rowCount\", \"columnCount\"]);\n    }\n    await context.sync();\n    \n    console.log('Target ranges for border removal:', targetRanges.length);\n    for (let i = 0; i < targetRanges.length; i++) {\n      console.log(`Range ${i + 1}:`, {\n        address: targetRanges[i].address,\n        rowCount: targetRanges[i].rowCount,\n        columnCount: targetRanges[i].columnCount\n      });\n    }\n    \n    // Determine which borders to remove\n    const borderType = params.borderType || 'all';\n    \n    // Apply border removal to all selected ranges\n    for (const targetRange of targetRanges) {\n      if (borderType === 'all') {\n        // Remove all borders\n        targetRange.format.borders.getItem(Excel.BorderIndex.edgeLeft).style = Excel.BorderLineStyle.none;\n        targetRange.format.borders.getItem(Excel.BorderIndex.edgeRight).style = Excel.BorderLineStyle.none;\n        targetRange.format.borders.getItem(Excel.BorderIndex.edgeTop).style = Excel.BorderLineStyle.none;\n        targetRange.format.borders.getItem(Excel.BorderIndex.edgeBottom).style = Excel.BorderLineStyle.none;\n        targetRange.format.borders.getItem(Excel.BorderIndex.insideHorizontal).style = Excel.BorderLineStyle.none;\n        targetRange.format.borders.getItem(Excel.BorderIndex.insideVertical).style = Excel.BorderLineStyle.none;\n      } else {\n        // Remove specific border\n        switch (borderType) {\n          case 'right':\n            targetRange.format.borders.getItem(Excel.BorderIndex.edgeRight).style = Excel.BorderLineStyle.none;\n            break;\n          case 'left':\n            targetRange.format.borders.getItem(Excel.BorderIndex.edgeLeft).style = Excel.BorderLineStyle.none;\n            break;\n          case 'top':\n            targetRange.format.borders.getItem(Excel.BorderIndex.edgeTop).style = Excel.BorderLineStyle.none;\n            break;\n          case 'bottom':\n            targetRange.format.borders.getItem(Excel.BorderIndex.edgeBottom).style = Excel.BorderLineStyle.none;\n            break;\n          default:\n            return { success: false, error: `알 수 없는 테두리 유형: ${borderType}` };\n        }\n      }\n    }\n    \n    await context.sync();\n    \n    return {\n      success: true,\n      message: `${borderType === 'all' ? '모든' : borderType} 테두리가 제거되었습니다.`\n    };\n    \n  } catch (error) {\n    console.error('Error in executeRemoveBorder:', error);\n    return {\n      success: false,\n      error: `테두리 제거 중 오류 발생: ${error.message}`\n    };\n  }\n}"],"names":["__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","m","g","globalThis","this","Function","e","window","o","obj","prop","Object","prototype","hasOwnProperty","call","scriptUrl","importScripts","location","document","currentScript","tagName","toUpperCase","src","scripts","getElementsByTagName","length","i","test","Error","replace","p","b","baseURI","self","href","URL","t","r","Symbol","n","iterator","toStringTag","c","Generator","u","create","_regeneratorDefine2","f","y","G","v","a","d","bind","l","TypeError","done","value","return","GeneratorFunction","GeneratorFunctionPrototype","getPrototypeOf","setPrototypeOf","__proto__","displayName","_regenerator","w","defineProperty","_invoke","enumerable","configurable","writable","asyncGeneratorStep","Promise","resolve","then","_asyncToGenerator","arguments","apply","_next","_throw","recognition","isListening","API_PROXY_URL","process","Office","onReady","info","host","HostType","Excel","_testBackendConnection","testBackendConnection","getElementById","onclick","executeCommand","clearInput","protocol","hostname","includes","showStatus","textContent","stop","start","error","console","message","toggleVoiceRecognition","showSettings","querySelectorAll","forEach","item","command","getAttribute","focus","addEventListener","event","key","shiftKey","preventDefault","log","voiceButton","voiceStatus","disabled","style","opacity","cursor","color","title","SpeechRecognition","webkitSpeechRecognition","lang","continuous","interimResults","maxAlternatives","onstart","classList","add","onresult","transcript","results","isFinal","onerror","remove","errorMessage","isWebEnvironment","onend","trim","initializeSpeechRecognition","isExecuting","_executeCommand","_callee2","button","originalText","_t2","_context2","innerHTML","run","_ref","_callee","context","worksheet","activeRangeInfo","selectedRanges","firstRange","rangeAddresses","_i","range","usedRange","sheetContext","headerRow","_i2","interpretation","result","_t","_context","workbook","worksheets","getActiveWorksheet","getSelectedRanges","load","sync","areaCount","areas","items","push","address","join","row","rowIndex","column","columnIndex","numRows","rowCount","numColumns","columnCount","isMultipleRanges","getUsedRange","sheetName","name","activeRange","lastRow","lastColumn","headers","dataRange","values","isLargeSheet","columnLetter","getColumnLetter","label","toString","callOpenAI","success","executeInterpretedCommand","data","setTimeout","_x45","stack","_x","_x2","_callOpenAI","_callee3","response","errorData","_t3","_context3","fetch","method","body","JSON","stringify","ok","json","concat","status","_x5","_x6","_executeInterpretedCommand","_callee5","commandData","successCount","_iterator","_step","op","_t6","_context5","operations","Array","isArray","_createForOfIteratorHelper","s","executeSingleOperation","operation","parameters","_x7","_x8","_x9","_executeSingleOperation","_callee6","params","_t7","_t8","_context6","Date","toISOString","executeMerge","executeSum","executeAverage","executeCount","executeFormat","executeSort","executeFilter","executeInsert","executeDelete","executeFormula","executeChart","executeConditionalFormat","executeTranslate","executeCompress","executeRetryTranslation","executeRemoveBorder","executeBorderFormat","_x0","_x1","_executeMerge","_callee7","rangeAddress","_context7","getRange","getSelectedRange","merge","_x10","_x11","_executeSum","_callee8","lastDataRow","sumCell","sourceRange","sumFormula","_i3","_i4","_selectedRanges","_rangeAddresses","_i5","_i6","newCell","targetCell","_column","_lastRow","_newCell","_t9","_t0","_context8","columnName","sumType","match","charCodeAt","toLowerCase","getCell","formulas","formatNumber","addNewRow","_x12","_x13","_executeAverage","_callee9","rangeDescription","averageFormula","columnInfo","_usedRange","_usedRange2","_i7","_selectedRanges2","_rangeAddresses2","_i8","_i9","_t1","_t10","_t11","_context9","averageType","getRangeByIndexes","getHeaders","find","h","numberFormat","_x14","_x15","_executeCount","_callee0","formula","criteria","resultCell","lastCol","_context0","countType","condition","operator","_x16","_x17","_executeFormat","_callee1","ranges","_i0","_ranges","_i1","_ranges2","_range","format","_t12","_context1","bold","font","italic","fontSize","size","fontColor","backgroundColor","fill","horizontalAlignment","_x18","_x19","_executeSort","_callee10","ascending","_context10","sort","_x20","_x21","_executeChart","_callee11","sourceData","dataAddress","chartType","chart","_t13","_context11","ChartType","columnClustered","line","pie","xyscatter","charts","ChartSeriesBy","auto","text","height","width","left","offsetX","top","offsetY","legend","position","ChartLegendPosition","bottom","visible","_x22","_x23","_executeConditionalFormat","_callee12","singleRange","_i10","_ranges3","conditionalFormat","_context12","isNullObject","conditionalFormats","ConditionalFormatType","cellValue","rule","formula1","ConditionalCellValueOperator","greaterThan","lessThan","equalTo","containsText","_x24","_x25","_executeTranslate","_callee13","targetColumnIndex","targetColumnLetter","_targetColumnLetter","_columnIndex","_usedRange3","sourceValues","translations","batchSize","batch","batchTexts","translatedBatch","j","translationIndex","_j","translatedText","_j2","_i11","targetRange","stringTranslations","errorRows","_i12","translation","_iterator2","_step2","errorCell","isEmpty","_i13","cellRow","cellCol","cell","headerCell","sourceHeaderCell","_context13","targetLanguage","split","sourceColumnIndex","sourceColumn","targetColumn","slice","Math","min","map","filter","translateBatch","sourceLanguage","batchLength","translatedBatchLength","sampleTranslations","firstTranslation","translationType","_typeof","rawData","isError","round","translationsCount","first","second","third","clear","ClearApplyTo","contents","translationsLength","is2DArray","String","err","valueTypes","actualFirstValue","firstThreeValues","firstValue","firstValueLength","_x26","_x27","_x28","_translateBatch","_callee14","texts","_t15","_context14","tempIndex","fromCharCode","floor","Number","isInteger","toLocaleString","minimumFractionDigits","maximumFractionDigits","type","className","display","statusTimeout","clearTimeout","_callee15","_t16","_context15","_x29","_x30","_executeBorderFormat","_callee16","targetRanges","_i14","_targetRanges","_i15","borderType","excelStyle","_i16","_targetRanges2","_i17","_borderItems","borderItem","border","insideV","insideH","borderName","_border","_t17","_t18","_context16","getUsedRangeOrNullObject","borders","getItem","weight","_x31","_x32","_executeCompress","_callee17","checkRange","emptyRows","minRowIndex","maxRowIndex","rowsToDelete","_iterator3","_step3","_t19","_t20","_context17","rowIdx","delete","DeleteShiftDirection","up","_x33","_x34","_executeFilter","_callee18","_context18","autoFilter","_x35","_x36","_executeInsert","_callee19","count","_context19","insert","InsertShiftDirection","down","right","_x37","_x38","_executeDelete","_callee20","_context20","_x39","_x40","_executeFormula","_callee21","_context21","_x41","_x42","_executeRetryTranslation","_callee22","_context22","_x43","_x44","_executeRemoveBorder","_callee23","expandedRows","expandedCols","_usedRange4","_i18","_targetRanges3","_i19","_i20","_targetRanges4","_t21","_t22","_t23","_context23","BorderIndex","edgeLeft","BorderLineStyle","none","edgeRight","edgeTop","edgeBottom","insideHorizontal","insideVertical"],"sourceRoot":""}