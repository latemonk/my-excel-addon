{"version":3,"file":"taskpane.js","mappings":"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","sources":["webpack://worksai-excel-addon/webpack/bootstrap","webpack://worksai-excel-addon/webpack/runtime/global","webpack://worksai-excel-addon/webpack/runtime/hasOwnProperty shorthand","webpack://worksai-excel-addon/webpack/runtime/publicPath","webpack://worksai-excel-addon/webpack/runtime/jsonp chunk loading","webpack://worksai-excel-addon/./src/taskpane/taskpane.html","webpack://worksai-excel-addon/./src/taskpane/taskpane.js"],"sourcesContent":["// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript && document.currentScript.tagName.toUpperCase() === 'SCRIPT')\n\t\tscriptUrl = document.currentScript.src;\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) {\n\t\t\tvar i = scripts.length - 1;\n\t\t\twhile (i > -1 && (!scriptUrl || !/^http(s?):/.test(scriptUrl))) scriptUrl = scripts[i--].src;\n\t\t}\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/^blob:/, \"\").replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","__webpack_require__.b = document.baseURI || self.location.href;\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t926: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n// no on chunks loaded\n\n// no jsonp function","// Imports\nvar ___HTML_LOADER_IMPORT_0___ = new URL(\"./taskpane.css\", import.meta.url);\n// Module\nvar code = \"<!DOCTYPE html> <html> <head> <meta charset=\\\"UTF-8\\\"/> <meta http-equiv=\\\"X-UA-Compatible\\\" content=\\\"IE=Edge\\\"/> <meta name=\\\"viewport\\\" content=\\\"width=device-width,initial-scale=1\\\"> <title>웍스AI 엑셀 도우미</title> <\" + \"script src=\\\"https://appsforoffice.microsoft.com/lib/1.1/hosted/office.js\\\"><\" + \"/script> <link rel=\\\"stylesheet\\\" href=\\\"https://static2.sharepointonline.com/files/fabric/office-ui-fabric-js/1.4.0/css/fabric.min.css\\\"/> <link rel=\\\"stylesheet\\\" href=\\\"https://static2.sharepointonline.com/files/fabric/office-ui-fabric-js/1.4.0/css/fabric.components.min.css\\\"/> <link href=\\\"\" + ___HTML_LOADER_IMPORT_0___ + \"\\\" rel=\\\"stylesheet\\\"/> </head> <body class=\\\"ms-font-m ms-welcome ms-Fabric\\\"> <main id=\\\"app-body\\\" class=\\\"ms-welcome__main\\\"> <div class=\\\"container\\\"> <div class=\\\"header-section\\\"> <h2 class=\\\"ms-font-xl\\\" style=\\\"font-weight:700\\\">웍스AI 엑셀 도우미</h2> <p class=\\\"help-text\\\">자연어로 Excel 작업을 요청하세요. (대용량 번역 지원)</p> </div> <div class=\\\"voice-section\\\"> <button id=\\\"voiceButton\\\" class=\\\"voice-button\\\"> <svg width=\\\"24\\\" height=\\\"24\\\" viewBox=\\\"0 0 24 24\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"> <path d=\\\"M12 14c1.66 0 3-1.34 3-3V5c0-1.66-1.34-3-3-3S9 3.34 9 5v6c0 1.66 1.34 3 3 3z\\\"/> <path d=\\\"M17 11c0 2.76-2.24 5-5 5s-5-2.24-5-5H5c0 3.53 2.61 6.43 6 6.92V21h2v-3.08c3.39-.49 6-3.39 6-6.92h-2z\\\"/> </svg> </button> <div class=\\\"voice-status\\\" id=\\\"voiceStatus\\\">음성 인식 준비</div> </div> <div class=\\\"input-container\\\"> <textarea id=\\\"commandInput\\\" placeholder=\\\"예: A1부터 A10까지 합계를 구해줘\\\" rows=\\\"3\\\"></textarea> <div class=\\\"button-container\\\"> <button id=\\\"executeButton\\\" class=\\\"ms-Button ms-Button--primary\\\"> <span class=\\\"ms-Button-label\\\">실행</span> </button> <button id=\\\"clearButton\\\" class=\\\"ms-Button\\\"> <span class=\\\"ms-Button-label\\\">지우기</span> </button> </div> </div> <div id=\\\"status\\\" class=\\\"status-message\\\"></div> <div class=\\\"examples\\\"> <h3>예제 명령어</h3> <div class=\\\"example-list\\\"> <div class=\\\"example-item\\\" data-command=\\\"A1:B5 셀을 병합해줘\\\"> <strong>셀 병합:</strong> A1:B5 셀을 병합해줘 </div> <div class=\\\"example-item\\\" data-command=\\\"A열의 합계를 구해줘\\\"> <strong>합계 계산:</strong> A열의 합계를 구해줘 </div> <div class=\\\"example-item\\\" data-command=\\\"Name 열의 합계를 구해줘\\\"> <strong>레이블로 합계:</strong> Name 열의 합계를 구해줘 </div> <div class=\\\"example-item\\\" data-command=\\\"C열 평균을 구해줘\\\"> <strong>열 평균:</strong> C열 평균을 구해줘 </div> <div class=\\\"example-item\\\" data-command=\\\"3행 평균을 계산해줘\\\"> <strong>행 평균:</strong> 3행 평균을 계산해줘 </div> <div class=\\\"example-item\\\" data-command=\\\"선택한 셀을 굵게 만들고 파란색으로 바꿔줘\\\"> <strong>서식 지정:</strong> 선택한 셀을 굵게 만들고 파란색으로 바꿔줘 </div> <div class=\\\"example-item\\\" data-command=\\\"B열 기준으로 내림차순 정렬해줘\\\"> <strong>정렬:</strong> B열 기준으로 내림차순 정렬해줘 </div> <div class=\\\"example-item\\\" data-command=\\\"값이 100보다 큰 셀은 녹색 배경으로 표시해줘\\\"> <strong>조건부 서식:</strong> 값이 100보다 큰 셀은 녹색 배경으로 표시해줘 </div> <div class=\\\"example-item\\\" data-command=\\\"A1:B10 데이터로 막대 차트를 만들어줘\\\"> <strong>차트 생성:</strong> A1:B10 데이터로 막대 차트를 만들어줘 </div> <div class=\\\"example-item\\\" data-command=\\\"D열을 중국어로 번역해서 다음 열에 추가해줘\\\"> <strong>번역:</strong> D열을 중국어로 번역해서 다음 열에 추가해줘 </div> <div class=\\\"example-item\\\" data-command=\\\"A열의 10000개 행을 영어로 번역해줘\\\"> <strong>대용량 번역:</strong> A열의 10000개 행을 영어로 번역해줘 </div> <div class=\\\"example-item\\\" data-command=\\\"D2:D170 사이의 빈 행을 제거해줘\\\"> <strong>빈 행 제거:</strong> D2:D170 사이의 빈 행을 제거해줘 </div> <div class=\\\"example-item\\\" data-command=\\\"C열의 오른쪽 테두리를 없애줘\\\"> <strong>테두리 제거:</strong> C열의 오른쪽 테두리를 없애줘 </div> </div> </div> <div class=\\\"settings-section\\\"> <button id=\\\"settingsButton\\\" class=\\\"settings-link\\\">설정</button> </div> </div> </main> </body> </html>\";\n// Exports\nexport default code;","/*\n * Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n * See LICENSE in the project root for license information.\n */\n\n/* global document, Office, Excel */\n\n// Voice recognition variables\nlet recognition = null;\nlet isListening = false;\n\n// Backend API URL - Vercel 배포 후 실제 URL로 변경해주세요\n// 디버그용 URL 사용 중 (CORS 문제 해결 후 원래 URL로 변경 필요)\nconst API_PROXY_URL = process.env.API_PROXY_URL || 'https://excel-addon-backend.vercel.app/api/openai-proxy-debug';\n\nOffice.onReady((info) => {\n  if (info.host === Office.HostType.Excel) {\n    // Test backend connection\n    testBackendConnection();\n    \n    // Assign event handlers\n    document.getElementById(\"executeButton\").onclick = executeCommand;\n    document.getElementById(\"clearButton\").onclick = clearInput;\n    document.getElementById(\"voiceButton\").onclick = () => toggleVoiceRecognition();\n    document.getElementById(\"settingsButton\").onclick = showSettings;\n\n    // Handle example clicks\n    const exampleItems = document.querySelectorAll('.example-item');\n    exampleItems.forEach(item => {\n      item.onclick = function() {\n        setCommand(this.getAttribute('data-command'));\n      };\n    });\n\n    // Handle Enter key\n    document.getElementById('commandInput').addEventListener('keydown', function(event) {\n      if (event.key === 'Enter' && !event.shiftKey) {\n        event.preventDefault();\n        executeCommand();\n      }\n    });\n\n    // Initialize speech recognition\n    initializeSpeechRecognition();\n  }\n});\n\n// Initialize speech recognition\nfunction initializeSpeechRecognition() {\n  // Check if we're in a web environment (Excel Online) - disable voice feature\n  const isWebEnvironment = window.location.protocol === 'https:' && \n                          !window.location.hostname.includes('localhost');\n  \n  if (isWebEnvironment) {\n    console.log('Voice recognition disabled in web environment');\n    const voiceButton = document.getElementById('voiceButton');\n    const voiceStatus = document.getElementById('voiceStatus');\n    \n    voiceButton.disabled = true;\n    voiceButton.style.opacity = '0.5';\n    voiceButton.style.cursor = 'not-allowed';\n    voiceStatus.textContent = '웹 환경에서는 음성 인식 미지원';\n    voiceStatus.style.color = '#666';\n    \n    // Add tooltip\n    voiceButton.title = 'Excel Online에서는 보안상 음성 인식을 사용할 수 없습니다. 데스크톱 Excel을 사용해주세요.';\n    \n    return null;\n  }\n  \n  const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n  \n  if (!SpeechRecognition) {\n    showStatus('음성 인식이 지원되지 않는 브라우저입니다.', 'error');\n    document.getElementById('voiceButton').disabled = true;\n    document.getElementById('voiceStatus').textContent = '음성 인식 미지원';\n    return null;\n  }\n  \n  recognition = new SpeechRecognition();\n  recognition.lang = 'ko-KR';\n  recognition.continuous = false;\n  recognition.interimResults = true;\n  recognition.maxAlternatives = 1;\n  \n  recognition.onstart = function() {\n    isListening = true;\n    document.getElementById('voiceButton').classList.add('listening');\n    document.getElementById('voiceStatus').textContent = '듣고 있습니다... 말씀해주세요';\n    document.getElementById('voiceStatus').classList.add('listening');\n  };\n  \n  recognition.onresult = function(event) {\n    const transcript = event.results[0][0].transcript;\n    document.getElementById('commandInput').value = transcript;\n    \n    if (event.results[0].isFinal) {\n      document.getElementById('voiceStatus').textContent = '음성 인식 완료';\n    } else {\n      document.getElementById('voiceStatus').textContent = '인식중: ' + transcript;\n    }\n  };\n  \n  recognition.onerror = function(event) {\n    console.log('Speech recognition error:', event.error, 'Location:', window.location.hostname);\n    isListening = false;\n    document.getElementById('voiceButton').classList.remove('listening');\n    document.getElementById('voiceStatus').classList.remove('listening');\n    \n    let errorMessage = '음성 인식 오류';\n    \n    // Check if we're in a web environment - use broader detection\n    const isWebEnvironment = window.location.protocol === 'https:' && \n                            !window.location.hostname.includes('localhost');\n    \n    switch(event.error) {\n      case 'no-speech':\n        errorMessage = '음성이 감지되지 않았습니다.';\n        break;\n      case 'audio-capture':\n        errorMessage = '마이크를 찾을 수 없습니다.';\n        break;\n      case 'not-allowed':\n        // Always show web environment message for not-allowed in HTTPS contexts\n        if (isWebEnvironment) {\n          errorMessage = 'Excel Online에서는 보안 정책상 음성 인식을 사용할 수 없습니다. 데스크톱 Excel에서 이용해주세요.';\n          document.getElementById('voiceStatus').textContent = '웹 버전 미지원';\n        } else {\n          errorMessage = '마이크 권한이 거부되었습니다. 브라우저 설정을 확인해주세요.';\n        }\n        break;\n      case 'network':\n        errorMessage = '네트워크 오류가 발생했습니다.';\n        break;\n      default:\n        // For any other error in web environment, show the web limitation message\n        if (isWebEnvironment && event.error) {\n          errorMessage = 'Excel Online에서는 보안 정책상 음성 인식을 사용할 수 없습니다. 데스크톱 Excel에서 이용해주세요.';\n          document.getElementById('voiceStatus').textContent = '웹 버전 미지원';\n        }\n        break;\n    }\n    \n    // Override the status text display for web environment\n    if (isWebEnvironment && event.error === 'not-allowed') {\n      document.getElementById('voiceStatus').textContent = '웹 버전 미지원';\n    } else {\n      document.getElementById('voiceStatus').textContent = errorMessage;\n    }\n    \n    showStatus(errorMessage, 'error');\n  };\n  \n  recognition.onend = function() {\n    isListening = false;\n    document.getElementById('voiceButton').classList.remove('listening');\n    document.getElementById('voiceStatus').classList.remove('listening');\n    \n    const command = document.getElementById('commandInput').value.trim();\n    if (command) {\n      document.getElementById('voiceStatus').textContent = '음성 인식 완료. 실행 버튼을 눌러주세요.';\n      document.getElementById('executeButton').focus();\n    } else {\n      document.getElementById('voiceStatus').textContent = '음성 인식 준비';\n    }\n  };\n  \n  return recognition;\n}\n\n// Toggle voice recognition\nfunction toggleVoiceRecognition() {\n  // Check if we're in Excel Online/web environment\n  const isWebEnvironment = window.location.protocol === 'https:' && \n                          !window.location.hostname.includes('localhost');\n  \n  if (isWebEnvironment) {\n    showStatus('Excel Online에서는 보안 정책상 음성 인식을 사용할 수 없습니다. 데스크톱 Excel에서 이용해주세요.', 'error');\n    document.getElementById('voiceStatus').textContent = '웹 버전 미지원';\n    return;\n  }\n  \n  if (!recognition) {\n    // Recognition would be null if unsupported browser\n    showStatus('이 브라우저는 음성 인식을 지원하지 않습니다.', 'error');\n    return;\n  }\n  \n  if (isListening) {\n    recognition.stop();\n  } else {\n    try {\n      recognition.start();\n    } catch (error) {\n      console.error('Voice recognition start error:', error);\n      \n      // More user-friendly error messages\n      if (error.message && error.message.includes('not-allowed')) {\n        showStatus('마이크 권한이 필요합니다. 브라우저 설정에서 마이크 접근을 허용해주세요.', 'error');\n      } else {\n        showStatus('음성 인식을 시작할 수 없습니다.', 'error');\n      }\n    }\n  }\n}\n\n// Execute command\n// Add flag to prevent duplicate execution\nlet isExecuting = false;\n\nasync function executeCommand() {\n  // Prevent duplicate execution\n  if (isExecuting) {\n    console.log('Command already executing, ignoring duplicate call');\n    return;\n  }\n  \n  const command = document.getElementById('commandInput').value.trim();\n  \n  if (!command) {\n    showStatus('명령어를 입력해주세요.', 'error');\n    return;\n  }\n  \n  isExecuting = true;\n  \n  const button = document.getElementById('executeButton');\n  const originalText = '<span class=\"ms-Button-label\">실행</span>';\n  \n  // Show loading state\n  button.disabled = true;\n  button.innerHTML = '<span class=\"loading\"></span><span>처리중...</span>';\n  showStatus('명령을 처리하고 있습니다...', 'info');\n  \n  try {\n    await Excel.run(async (context) => {\n      console.log('Starting Excel.run for command execution');\n      // Get current worksheet context\n      const worksheet = context.workbook.worksheets.getActiveWorksheet();\n      const range = context.workbook.getSelectedRange();\n      \n      // Load necessary properties\n      worksheet.load(\"name\");\n      range.load([\"address\", \"rowIndex\", \"columnIndex\", \"rowCount\", \"columnCount\"]);\n      \n      // Get sheet data for context\n      const usedRange = worksheet.getUsedRange();\n      usedRange.load([\"rowCount\", \"columnCount\", \"values\"]);\n      \n      await context.sync();\n      \n      // Build sheet context\n      const sheetContext = {\n        sheetName: worksheet.name,\n        activeRange: {\n          address: range.address,\n          row: range.rowIndex + 1,\n          column: range.columnIndex + 1,\n          numRows: range.rowCount,\n          numColumns: range.columnCount\n        },\n        lastRow: usedRange ? usedRange.rowCount : 0,\n        lastColumn: usedRange ? usedRange.columnCount : 0,\n        headers: [],\n        dataRange: usedRange ? usedRange.values : [],\n        isLargeSheet: usedRange && usedRange.rowCount > 1000\n      };\n      \n      // Extract headers\n      if (usedRange && usedRange.rowCount > 0) {\n        const headerRow = usedRange.values[0];\n        for (let i = 0; i < headerRow.length; i++) {\n          sheetContext.headers.push({\n            column: i + 1,\n            columnLetter: getColumnLetter(i),\n            label: headerRow[i] ? headerRow[i].toString() : ''\n          });\n        }\n      }\n      \n      // Call OpenAI API to interpret the command\n      const interpretation = await callOpenAI(command, sheetContext);\n      \n      if (!interpretation.success) {\n        throw new Error(interpretation.error);\n      }\n      \n      // Execute the interpreted command\n      console.log('Executing interpreted command...');\n      const result = await executeInterpretedCommand(context, interpretation.data);\n      console.log('Command execution result:', result);\n      \n      // Reset button and show success\n      button.disabled = false;\n      button.innerHTML = originalText;\n      \n      if (result.success) {\n        console.log('Operation completed successfully:', result);\n        showStatus(result.message || '명령이 성공적으로 실행되었습니다.', 'success');\n        setTimeout(() => {\n          document.getElementById('commandInput').value = '';\n        }, 1000);\n      } else {\n        console.error('Operation failed:', result);\n        showStatus(result.error || '명령 실행에 실패했습니다.', 'error');\n      }\n      \n      console.log('Excel.run completing...');\n    });\n    console.log('Excel.run completed');\n  } catch (error) {\n    console.error('Error in executeCommand:', error);\n    console.error('Error stack:', error.stack);\n    button.disabled = false;\n    button.innerHTML = originalText;\n    showStatus('오류가 발생했습니다: ' + error.message, 'error');\n  } finally {\n    // Reset execution flag\n    isExecuting = false;\n  }\n}\n\n// Call OpenAI API through proxy\nasync function callOpenAI(command, sheetContext) {\n  try {\n    const response = await fetch(API_PROXY_URL, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        command: command,\n        sheetContext: sheetContext\n      })\n    });\n    \n    if (!response.ok) {\n      const errorData = await response.json();\n      return {\n        success: false,\n        error: errorData.error || `서버 오류 (${response.status})`\n      };\n    }\n    \n    return await response.json();\n    \n  } catch (error) {\n    console.error('Proxy API Error:', error);\n    return {\n      success: false,\n      error: `API 요청 오류: ${error.toString()}`\n    };\n  }\n}\n\n// Original OpenAI API call (no longer used)\nasync function callOpenAIDirectly(command, sheetContext) {\n  const systemPrompt = `You are an Excel assistant that interprets natural language commands and returns JSON instructions for Excel operations.\n  \nAvailable operations:\n1. merge: Merge cells\n2. sum: Sum values in a range or column\n3. average: Calculate average\n4. count: Count cells (can count all, numbers only, or based on conditions)\n5. format: Format cells (bold, italic, font color, background color, etc.)\n6. sort: Sort data\n7. filter: Filter data\n8. insert: Insert rows/columns\n9. delete: Delete rows/columns\n10. formula: Add custom formula\n11. chart: Create chart\n12. conditional_format: Add conditional formatting\n13. translate: Translate cell contents to another language\n14. compress: Remove empty rows in a specific column range\n15. retry_translation: Retry translation for failed items marked as [번역 실패]\n\nFor sum operation:\n- If user mentions a column by header name (e.g., \"totalToken 열의 합\", \"totalToken 합산\"), return: { \"sumType\": \"column\", \"columnName\": \"totalToken\" }\n- The system will automatically find the column, determine the data range, and place the sum in the first empty cell below the data\n- For specific range sum, use: { \"sourceRange\": \"A2:A10\" }\n- For adding sum below selection, use: { \"addNewRow\": true }\n\nCurrent sheet context:\n- Active range: ${sheetContext.activeRange.address}\n- Sheet dimensions: ${sheetContext.lastRow} rows x ${sheetContext.lastColumn} columns\n- Headers: ${sheetContext.headers.map(h => `Column ${h.columnLetter}: \"${h.label}\"`).join(', ')}\n\nReturn JSON in this format:\n{\n  \"operation\": \"operation_name\",\n  \"parameters\": {\n    // operation-specific parameters\n  }\n}`;\n\n  const url = 'https://api.openai.com/v1/chat/completions';\n  \n  const payload = {\n    model: 'gpt-4.1-2025-04-14',\n    messages: [\n      { role: 'system', content: systemPrompt },\n      { role: 'user', content: `Current Excel state:\nHeaders: ${sheetContext.headers.map(h => `Column ${h.columnLetter}: \"${h.label}\"`).join(', ')}\nActive sheet: ${sheetContext.sheetName}\n\nUser command: ${command}` }\n    ],\n    temperature: 0.3,\n    max_tokens: 500\n  };\n  \n  try {\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${OPENAI_API_KEY}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(payload)\n    });\n    \n    if (!response.ok) {\n      const errorData = await response.json();\n      if (response.status === 429) {\n        return {\n          success: false,\n          error: 'API 요청 한도를 초과했습니다. 잠시 후 다시 시도해주세요.'\n        };\n      } else if (response.status === 401) {\n        return {\n          success: false,\n          error: 'API 키가 유효하지 않습니다. API 키를 확인해주세요.'\n        };\n      }\n      return {\n        success: false,\n        error: `API 오류 (${response.status}): ${errorData.error?.message || '알 수 없는 오류'}`\n      };\n    }\n    \n    const result = await response.json();\n    \n    if (result.choices && result.choices[0]) {\n      const content = result.choices[0].message.content;\n      try {\n        const parsedCommand = JSON.parse(content);\n        return {\n          success: true,\n          data: parsedCommand\n        };\n      } catch (parseError) {\n        console.error('Failed to parse AI response:', content);\n        return {\n          success: false,\n          error: 'AI 응답을 해석할 수 없습니다. 다시 시도해주세요.'\n        };\n      }\n    } else {\n      return {\n        success: false,\n        error: 'OpenAI API 응답을 파싱할 수 없습니다.'\n      };\n    }\n  } catch (error) {\n    console.error('OpenAI API Error:', error);\n    return {\n      success: false,\n      error: `OpenAI API 오류: ${error.toString()}`\n    };\n  }\n}\n\n// Execute the interpreted command\nasync function executeInterpretedCommand(context, commandData) {\n  // Check if multiple operations\n  if (commandData.operations && Array.isArray(commandData.operations)) {\n    console.log('Executing multiple operations:', commandData.operations.length);\n    const results = [];\n    let successCount = 0;\n    \n    for (const op of commandData.operations) {\n      const result = await executeSingleOperation(context, op.operation, op.parameters || {});\n      results.push(result);\n      if (result.success) successCount++;\n    }\n    \n    return {\n      success: successCount === commandData.operations.length,\n      message: `${successCount}/${commandData.operations.length} 작업이 완료되었습니다.`,\n      results: results\n    };\n  }\n  \n  // Single operation\n  return await executeSingleOperation(context, commandData.operation, commandData.parameters || {});\n}\n\n// Execute a single operation\nasync function executeSingleOperation(context, operation, params) {\n  console.log(`[${new Date().toISOString()}] Executing operation: ${operation} with params:`, params);\n  \n  try {\n    switch (operation) {\n      case 'merge':\n        return await executeMerge(context, params);\n      \n      case 'sum':\n        return await executeSum(context, params);\n      \n      case 'average':\n        return await executeAverage(context, params);\n      \n      case 'count':\n        return await executeCount(context, params);\n      \n      case 'format':\n        return await executeFormat(context, params);\n      \n      case 'sort':\n        return await executeSort(context, params);\n      \n      case 'filter':\n        return await executeFilter(context, params);\n      \n      case 'insert':\n        return await executeInsert(context, params);\n      \n      case 'delete':\n        return await executeDelete(context, params);\n      \n      case 'formula':\n        return await executeFormula(context, params);\n      \n      case 'chart':\n        return await executeChart(context, params);\n      \n      case 'conditional_format':\n        return await executeConditionalFormat(context, params);\n      \n      case 'translate':\n        return await executeTranslate(context, params);\n      \n      case 'compress':\n        return await executeCompress(context, params);\n      \n      case 'retry_translation':\n        return await executeRetryTranslation(context, params);\n      \n      case 'remove_border':\n        return await executeRemoveBorder(context, params);\n      \n      case 'border_format':\n        return await executeBorderFormat(context, params);\n      \n      default:\n        return {\n          success: false,\n          error: `알 수 없는 작업: ${operation}`\n        };\n    }\n  } catch (error) {\n    console.error('Error in executeInterpretedCommand:', error);\n    return {\n      success: false,\n      error: `작업 실행 중 오류: ${error.message || error.toString()}`\n    };\n  }\n}\n\n// Merge cells\nasync function executeMerge(context, params) {\n  console.log('executeMerge started with params:', params);\n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  const range = params.range ? worksheet.getRange(params.range) : context.workbook.getSelectedRange();\n  \n  console.log('Loading range address...');\n  // Load address property before using it\n  range.load('address');\n  await context.sync();\n  \n  console.log('Range address loaded:', range.address);\n  const rangeAddress = range.address;\n  \n  console.log('Merging range...');\n  range.merge();\n  await context.sync();\n  \n  console.log('Merge completed successfully');\n  return {\n    success: true,\n    message: `${rangeAddress} 범위가 병합되었습니다.`\n  };\n}\n\n// Sum values\nasync function executeSum(context, params) {\n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  \n  // If column name is provided, find the column and create range\n  if (params.columnName || params.sumType === 'column') {\n    console.log('Sum by column name:', params.columnName);\n    \n    // Get sheet context to find column by name\n    const usedRange = worksheet.getUsedRange();\n    usedRange.load([\"values\", \"rowCount\", \"columnCount\"]);\n    await context.sync();\n    \n    if (!usedRange || usedRange.rowCount === 0) {\n      return {\n        success: false,\n        error: '시트에 데이터가 없습니다.'\n      };\n    }\n    \n    let columnIndex = -1;\n    let columnLetter = '';\n    \n    // Check if columnName is a single letter (column letter like \"D\")\n    if (params.columnName && params.columnName.match(/^[A-Z]$/)) {\n      // Direct column letter reference\n      columnLetter = params.columnName;\n      columnIndex = columnLetter.charCodeAt(0) - 65;\n      console.log('Column letter specified:', columnLetter, 'index:', columnIndex);\n    } else {\n      // Find column by header name\n      const headers = usedRange.values[0];\n      \n      for (let i = 0; i < headers.length; i++) {\n        if (headers[i] && headers[i].toString().toLowerCase() === (params.columnName || '').toLowerCase()) {\n          columnIndex = i;\n          columnLetter = getColumnLetter(i);\n          break;\n        }\n      }\n    }\n    \n    if (columnIndex === -1) {\n      return {\n        success: false,\n        error: `\"${params.columnName}\" 열을 찾을 수 없습니다.`\n      };\n    }\n    \n    // Find last row with data in this column\n    let lastDataRow = 1; // Start from row 2 (after header)\n    for (let row = 1; row < usedRange.rowCount; row++) {\n      if (usedRange.values[row][columnIndex] !== null && \n          usedRange.values[row][columnIndex] !== undefined && \n          usedRange.values[row][columnIndex] !== '') {\n        lastDataRow = row + 1; // +1 because Excel rows are 1-indexed\n      }\n    }\n    \n    // Create range from row 2 to last data row\n    const rangeAddress = `${columnLetter}2:${columnLetter}${lastDataRow}`;\n    const sumCell = worksheet.getCell(lastDataRow, columnIndex); // This will place sum in row lastDataRow+1 (0-based index)\n    \n    console.log(`Summing range: ${rangeAddress}, placing result in row ${lastDataRow + 1}`);\n    \n    sumCell.formulas = [[`=SUM(${rangeAddress})`]];\n    await context.sync();\n    \n    sumCell.load([\"values\", \"address\"]);\n    await context.sync();\n    \n    return {\n      success: true,\n      message: `${params.columnName} 열의 합계를 ${sumCell.address}에 계산했습니다: ${formatNumber(sumCell.values[0][0])}`,\n      value: sumCell.values[0][0]\n    };\n  }\n  \n  // Original logic for range-based sum - handle multiple selections\n  let sourceRange;\n  let sumFormula;\n  \n  if (params.sourceRange) {\n    sourceRange = worksheet.getRange(params.sourceRange);\n    sourceRange.load([\"columnIndex\", \"rowIndex\", \"rowCount\", \"address\"]);\n    await context.sync();\n    sumFormula = `=SUM(${sourceRange.address})`;\n  } else {\n    // Handle multiple selections\n    try {\n      const selectedRanges = context.workbook.getSelectedRanges();\n      selectedRanges.load([\"areas\", \"areaCount\"]);\n      await context.sync();\n      \n      if (selectedRanges.areaCount > 1) {\n        // Multiple non-contiguous ranges selected\n        const rangeAddresses = [];\n        \n        for (let i = 0; i < selectedRanges.areas.items.length; i++) {\n          const area = selectedRanges.areas.items[i];\n          area.load(\"address\");\n        }\n        await context.sync();\n        \n        for (let i = 0; i < selectedRanges.areas.items.length; i++) {\n          rangeAddresses.push(selectedRanges.areas.items[i].address);\n        }\n        \n        sumFormula = `=SUM(${rangeAddresses.join(',')})`;\n        sourceRange = selectedRanges.areas.items[0];\n        sourceRange.load([\"columnIndex\", \"rowIndex\", \"rowCount\"]);\n        await context.sync();\n      } else {\n        // Single contiguous range\n        sourceRange = context.workbook.getSelectedRange();\n        sourceRange.load([\"columnIndex\", \"rowIndex\", \"rowCount\", \"address\"]);\n        await context.sync();\n        sumFormula = `=SUM(${sourceRange.address})`;\n      }\n    } catch (error) {\n      console.log('Error getting selected ranges, trying fallback:', error);\n      // For non-contiguous selections, getSelectedRange() fails\n      // Try to get selected ranges differently\n      try {\n        const selectedRanges = context.workbook.getSelectedRanges();\n        selectedRanges.load([\"areas\", \"areaCount\"]);\n        await context.sync();\n        \n        if (selectedRanges.areas.items.length > 0) {\n          const rangeAddresses = [];\n          for (let i = 0; i < selectedRanges.areas.items.length; i++) {\n            const area = selectedRanges.areas.items[i];\n            area.load(\"address\");\n          }\n          await context.sync();\n          \n          for (let i = 0; i < selectedRanges.areas.items.length; i++) {\n            rangeAddresses.push(selectedRanges.areas.items[i].address);\n          }\n          \n          sumFormula = `=SUM(${rangeAddresses.join(',')})`;\n          sourceRange = selectedRanges.areas.items[0];\n          sourceRange.load([\"columnIndex\", \"rowIndex\", \"rowCount\"]);\n          await context.sync();\n        } else {\n          throw new Error('No ranges selected');\n        }\n      } catch (fallbackError) {\n        console.error('Fallback also failed:', fallbackError);\n        return { success: false, error: '선택한 범위를 처리할 수 없습니다. 연속된 범위를 선택해주세요.' };\n      }\n    }\n  }\n  \n  if (params.addNewRow === true) {\n    // Add new row for sum\n    const column = sourceRange.columnIndex;\n    const lastRow = sourceRange.rowIndex + sourceRange.rowCount;\n    const newCell = worksheet.getCell(lastRow, column);\n    \n    newCell.formulas = [[sumFormula]];\n    await context.sync();\n    \n    newCell.load([\"values\", \"address\"]);\n    await context.sync();\n    \n    return {\n      success: true,\n      message: `${newCell.address}에 합계를 계산했습니다: ${formatNumber(newCell.values[0][0])}`,\n      value: newCell.values[0][0]\n    };\n  } else if (params.targetCell) {\n    // Sum to specific cell\n    const targetCell = worksheet.getRange(params.targetCell);\n    targetCell.formulas = [[sumFormula]];\n    await context.sync();\n    \n    targetCell.load([\"values\", \"address\"]);\n    await context.sync();\n    \n    return {\n      success: true,\n      message: `${targetCell.address}에 합계를 계산했습니다: ${formatNumber(targetCell.values[0][0])}`,\n      value: targetCell.values[0][0]\n    };\n  } else {\n    // Default: add sum below the range\n    const column = sourceRange.columnIndex;\n    const lastRow = sourceRange.rowIndex + sourceRange.rowCount;\n    const newCell = worksheet.getCell(lastRow, column);\n    \n    newCell.formulas = [[sumFormula]];\n    await context.sync();\n    \n    newCell.load([\"values\", \"address\"]);\n    await context.sync();\n    \n    return {\n      success: true,\n      message: `${newCell.address}에 합계를 계산했습니다: ${formatNumber(newCell.values[0][0])}`,\n      value: newCell.values[0][0]\n    };\n  }\n}\n\n// Calculate average\nasync function executeAverage(context, params) {\n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  let sourceRange;\n  let rangeDescription = '';\n  let averageFormula = '';\n  \n  try {\n    // Handle different average types\n    if (params.averageType === 'column') {\n      if (params.column) {\n        // Column specified by letter (e.g., \"C\")\n        const usedRange = worksheet.getUsedRange();\n        if (!usedRange) {\n          return { success: false, error: '데이터가 없습니다.' };\n        }\n        \n        usedRange.load([\"rowCount\", \"columnCount\"]);\n        await context.sync();\n        \n        const columnIndex = params.column.charCodeAt(0) - 65;\n        if (columnIndex < 0 || columnIndex >= usedRange.columnCount) {\n          return { success: false, error: '유효하지 않은 열입니다.' };\n        }\n        \n        // Get column data starting from row 2 (skip header)\n        if (usedRange.rowCount > 1) {\n          sourceRange = worksheet.getRangeByIndexes(1, columnIndex, usedRange.rowCount - 1, 1);\n          rangeDescription = `${params.column}열`;\n        } else {\n          return { success: false, error: '평균을 계산할 데이터가 없습니다.' };\n        }\n        \n        sourceRange.load([\"address\"]);\n        await context.sync();\n        averageFormula = `=AVERAGE(${sourceRange.address})`;\n        \n      } else if (params.columnName) {\n        // Column specified by header name\n        const headers = await getHeaders(context);\n        const columnInfo = headers.find(h => h.label === params.columnName);\n        \n        if (!columnInfo) {\n          return { success: false, error: `\"${params.columnName}\" 열을 찾을 수 없습니다.` };\n        }\n        \n        const usedRange = worksheet.getUsedRange();\n        usedRange.load([\"rowCount\"]);\n        await context.sync();\n        \n        if (usedRange.rowCount > 1) {\n          sourceRange = worksheet.getRangeByIndexes(1, columnInfo.column - 1, usedRange.rowCount - 1, 1);\n          rangeDescription = `\"${params.columnName}\" 열`;\n        } else {\n          return { success: false, error: '평균을 계산할 데이터가 없습니다.' };\n        }\n        \n        sourceRange.load([\"address\"]);\n        await context.sync();\n        averageFormula = `=AVERAGE(${sourceRange.address})`;\n      }\n    } else if (params.averageType === 'row') {\n      // Row average (e.g., \"3행 평균\")\n      const usedRange = worksheet.getUsedRange();\n      if (!usedRange) {\n        return { success: false, error: '데이터가 없습니다.' };\n      }\n      \n      usedRange.load([\"rowCount\", \"columnCount\"]);\n      await context.sync();\n      \n      const rowIndex = params.row - 1; // Convert to 0-based\n      if (rowIndex < 0 || rowIndex >= usedRange.rowCount) {\n        return { success: false, error: '유효하지 않은 행입니다.' };\n      }\n      \n      // Get entire row data\n      sourceRange = worksheet.getRangeByIndexes(rowIndex, 0, 1, usedRange.columnCount);\n      rangeDescription = `${params.row}행`;\n      \n      sourceRange.load([\"address\"]);\n      await context.sync();\n      averageFormula = `=AVERAGE(${sourceRange.address})`;\n      \n    } else if (params.sourceRange) {\n      // Specific range (e.g., \"C1:C100\")\n      sourceRange = worksheet.getRange(params.sourceRange);\n      rangeDescription = params.sourceRange;\n      \n      sourceRange.load([\"address\"]);\n      await context.sync();\n      averageFormula = `=AVERAGE(${sourceRange.address})`;\n      \n    } else {\n      // Default: use selected range(s) - handle multiple selections\n      try {\n        // Try to get multiple selected ranges (for non-contiguous selections)\n        const selectedRanges = context.workbook.getSelectedRanges();\n        selectedRanges.load([\"areas\", \"areaCount\"]);\n        await context.sync();\n        \n        if (selectedRanges.areaCount > 1) {\n          // Multiple non-contiguous ranges selected\n          const rangeAddresses = [];\n          \n          for (let i = 0; i < selectedRanges.areas.items.length; i++) {\n            const area = selectedRanges.areas.items[i];\n            area.load(\"address\");\n          }\n          await context.sync();\n          \n          for (let i = 0; i < selectedRanges.areas.items.length; i++) {\n            rangeAddresses.push(selectedRanges.areas.items[i].address);\n          }\n          \n          averageFormula = `=AVERAGE(${rangeAddresses.join(',')})`;\n          rangeDescription = '선택한 셀';\n          \n          // Use the first selected range for positioning\n          sourceRange = selectedRanges.areas.items[0];\n          sourceRange.load([\"columnIndex\", \"rowIndex\", \"rowCount\", \"columnCount\"]);\n          await context.sync();\n          \n        } else {\n          // Single contiguous range\n          sourceRange = context.workbook.getSelectedRange();\n          rangeDescription = '선택한 범위';\n          \n          sourceRange.load([\"columnIndex\", \"rowIndex\", \"rowCount\", \"columnCount\", \"address\"]);\n          await context.sync();\n          averageFormula = `=AVERAGE(${sourceRange.address})`;\n        }\n        \n      } catch (error) {\n        console.log('Error getting selected ranges for average, trying fallback:', error);\n        // For non-contiguous selections, getSelectedRange() fails\n        try {\n          const selectedRanges = context.workbook.getSelectedRanges();\n          selectedRanges.load([\"areas\", \"areaCount\"]);\n          await context.sync();\n          \n          if (selectedRanges.areas.items.length > 0) {\n            const rangeAddresses = [];\n            for (let i = 0; i < selectedRanges.areas.items.length; i++) {\n              const area = selectedRanges.areas.items[i];\n              area.load(\"address\");\n            }\n            await context.sync();\n            \n            for (let i = 0; i < selectedRanges.areas.items.length; i++) {\n              rangeAddresses.push(selectedRanges.areas.items[i].address);\n            }\n            \n            averageFormula = `=AVERAGE(${rangeAddresses.join(',')})`;\n            rangeDescription = '선택한 셀';\n            sourceRange = selectedRanges.areas.items[0];\n            sourceRange.load([\"columnIndex\", \"rowIndex\", \"rowCount\", \"columnCount\"]);\n            await context.sync();\n          } else {\n            throw new Error('No ranges selected');\n          }\n        } catch (fallbackError) {\n          console.error('Average fallback also failed:', fallbackError);\n          return { success: false, error: '선택한 범위를 처리할 수 없습니다. 연속된 범위를 선택해주세요.' };\n        }\n      }\n    }\n    \n    // Determine where to place the result\n    let targetCell;\n    if (params.targetCell) {\n      targetCell = worksheet.getRange(params.targetCell);\n    } else if (params.averageType === 'row') {\n      // For row average, place result at the end of the row\n      const lastColumn = sourceRange.columnIndex + sourceRange.columnCount;\n      targetCell = worksheet.getCell(sourceRange.rowIndex, lastColumn);\n    } else {\n      // For column average or range, place result below the first selected range\n      const lastRow = sourceRange.rowIndex + sourceRange.rowCount;\n      targetCell = worksheet.getCell(lastRow, sourceRange.columnIndex);\n    }\n    \n    // Apply AVERAGE formula\n    targetCell.formulas = [[averageFormula]];\n    targetCell.numberFormat = [[\"#,##0.00\"]]; // Format as number with 2 decimal places\n    await context.sync();\n    \n    targetCell.load([\"values\", \"address\"]);\n    await context.sync();\n    \n    return {\n      success: true,\n      message: `${rangeDescription}의 평균을 ${targetCell.address}에 계산했습니다: ${formatNumber(targetCell.values[0][0])}`,\n      value: targetCell.values[0][0]\n    };\n    \n  } catch (error) {\n    console.error('Error in executeAverage:', error);\n    return {\n      success: false,\n      error: `평균 계산 중 오류 발생: ${error.message}`\n    };\n  }\n}\n\n// Count cells\nasync function executeCount(context, params) {\n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  const sourceRange = params.sourceRange ? worksheet.getRange(params.sourceRange) : context.workbook.getSelectedRange();\n  \n  sourceRange.load([\"address\"]);\n  await context.sync();\n  \n  let formula;\n  if (params.countType === 'countif' && params.condition !== undefined) {\n    let criteria;\n    if (params.operator === 'contains') {\n      criteria = `\"*${params.condition}*\"`;\n    } else if (params.operator === 'equals') {\n      criteria = typeof params.condition === 'string' ? `\"${params.condition}\"` : params.condition;\n    } else if (params.operator && ['>', '<', '>=', '<=', '<>'].includes(params.operator)) {\n      criteria = `\"${params.operator}${params.condition}\"`;\n    } else {\n      if (typeof params.condition === 'string') {\n        criteria = `\"*${params.condition}*\"`;\n      } else {\n        criteria = params.condition;\n      }\n    }\n    formula = `=COUNTIF(${sourceRange.address}, ${criteria})`;\n  } else if (params.countType === 'counta') {\n    formula = `=COUNTA(${sourceRange.address})`;\n  } else {\n    formula = `=COUNT(${sourceRange.address})`;\n  }\n  \n  let resultCell;\n  if (params.targetCell) {\n    resultCell = worksheet.getRange(params.targetCell);\n  } else {\n    const usedRange = worksheet.getUsedRange();\n    await context.sync();\n    \n    const lastRow = usedRange ? usedRange.rowCount : 1;\n    const lastCol = usedRange ? usedRange.columnCount : 1;\n    resultCell = worksheet.getCell(lastRow, lastCol);\n  }\n  \n  resultCell.formulas = [[formula]];\n  await context.sync();\n  \n  resultCell.load(\"values\");\n  await context.sync();\n  \n  return {\n    success: true,\n    message: params.countType === 'countif' ? \n      `\"${params.condition}\"을(를) 포함하는 셀의 개수: ${formatNumber(resultCell.values[0][0])}개` :\n      `개수를 계산했습니다: ${formatNumber(resultCell.values[0][0])}개`,\n    value: resultCell.values[0][0]\n  };\n}\n\n// Format cells\nasync function executeFormat(context, params) {\n  console.log('executeFormat called with params:', params);\n  \n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  let ranges = [];\n  \n  if (params.range) {\n    ranges.push(worksheet.getRange(params.range));\n  } else {\n    // Handle multiple selections\n    try {\n      const selectedRanges = context.workbook.getSelectedRanges();\n      selectedRanges.load([\"areas\", \"areaCount\"]);\n      await context.sync();\n      \n      if (selectedRanges.areaCount > 1) {\n        // Multiple non-contiguous ranges selected\n        for (let i = 0; i < selectedRanges.areas.items.length; i++) {\n          ranges.push(selectedRanges.areas.items[i]);\n        }\n      } else {\n        // Single contiguous range\n        ranges.push(context.workbook.getSelectedRange());\n      }\n    } catch (error) {\n      console.log('Error getting selected ranges for format:', error);\n      return { success: false, error: '선택한 범위를 처리할 수 없습니다. 연속된 범위를 선택해주세요.' };\n    }\n  }\n  \n  // Load format for all ranges\n  for (const range of ranges) {\n    range.load(\"format\");\n  }\n  await context.sync();\n  \n  // Apply formatting to all ranges\n  for (const range of ranges) {\n    if (params.bold !== undefined) {\n      range.format.font.bold = params.bold;\n    }\n    \n    if (params.italic !== undefined) {\n      range.format.font.italic = params.italic;\n    }\n    \n    if (params.fontSize) {\n      range.format.font.size = params.fontSize;\n    }\n    \n    if (params.fontColor) {\n      range.format.font.color = params.fontColor;\n    }\n    \n    if (params.backgroundColor) {\n      range.format.fill.color = params.backgroundColor;\n    }\n    \n    if (params.horizontalAlignment) {\n      range.format.horizontalAlignment = params.horizontalAlignment === 'left' ? 'Left' :\n                                       params.horizontalAlignment === 'center' ? 'Center' :\n                                       params.horizontalAlignment === 'right' ? 'Right' : 'General';\n    }\n    \n    if (params.numberFormat) {\n      // Handle specific format types\n      let format = params.numberFormat;\n      if (format === 'number' || format === '숫자') {\n        format = '#,##0';\n      } else if (format === 'currency' || format === '원화' || format === 'won' || format === '통화') {\n        format = '₩#,##0';\n      } else if (format === 'currency_decimal' || format === '원화_소수') {\n        format = '₩#,##0.00';\n      } else if (format === 'percentage' || format === '퍼센트' || format === '백분율') {\n        format = '0%';\n      } else if (format === 'percentage_decimal' || format === '퍼센트_소수') {\n        format = '0.00%';\n      } else if (format === 'date' || format === '날짜') {\n        format = 'yyyy-mm-dd';\n      } else if (format === 'time' || format === '시간') {\n        format = 'hh:mm:ss';\n      } else if (format === 'text' || format === '텍스트') {\n        format = '@';\n      } else if (format === 'general' || format === '일반') {\n        format = 'General';\n      }\n      \n      // Set number format for the range\n      range.numberFormat = format;\n    }\n  }\n  \n  await context.sync();\n  \n  return {\n    success: true,\n    message: '서식이 적용되었습니다.'\n  };\n}\n\n// Sort data\nasync function executeSort(context, params) {\n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  const range = params.range ? worksheet.getRange(params.range) : worksheet.getUsedRange();\n  \n  const column = params.column || 1;\n  const ascending = params.ascending !== undefined ? params.ascending : true;\n  \n  range.sort.apply([\n    {\n      key: column - 1, // Excel API uses 0-based index\n      ascending: ascending\n    }\n  ]);\n  \n  await context.sync();\n  \n  const columnLetter = getColumnLetter(column - 1);\n  \n  return {\n    success: true,\n    message: `${columnLetter}열 기준으로 ${ascending ? '오름차순' : '내림차순'} 정렬되었습니다.`\n  };\n}\n\n// Create chart\nasync function executeChart(context, params) {\n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  let sourceData;\n  let dataAddress = '';\n  \n  console.log('Creating chart with params:', params);\n  \n  if (params.range) {\n    sourceData = worksheet.getRange(params.range);\n    sourceData.load([\"address\", \"values\"]);\n    await context.sync();\n    dataAddress = sourceData.address;\n  } else {\n    // Handle multiple selections for chart data\n    try {\n      const selectedRanges = context.workbook.getSelectedRanges();\n      selectedRanges.load([\"areas\", \"areaCount\"]);\n      await context.sync();\n      \n      if (selectedRanges.areaCount > 1) {\n        // For charts, we need to combine ranges into a union range\n        // Excel charts work better with contiguous data, so we'll use the first area\n        sourceData = selectedRanges.areas.items[0];\n        sourceData.load([\"address\", \"values\"]);\n        await context.sync();\n        dataAddress = sourceData.address;\n        \n        // Note: Charts typically work best with contiguous data\n        console.log('Multiple ranges selected, using first range for chart:', dataAddress);\n      } else {\n        // Single contiguous range\n        sourceData = context.workbook.getSelectedRange();\n        sourceData.load([\"address\", \"values\"]);\n        await context.sync();\n        dataAddress = sourceData.address;\n      }\n    } catch (error) {\n      console.log('Error getting selected ranges for chart:', error);\n      return { success: false, error: '선택한 범위를 처리할 수 없습니다. 연속된 범위를 선택해주세요.' };\n    }\n  }\n  \n  console.log('Chart data range:', dataAddress);\n  \n  // Determine chart type\n  let chartType;\n  if (params.chartType === 'bar' || params.chartType === '막대') {\n    chartType = Excel.ChartType.columnClustered;\n  } else if (params.chartType === 'line' || params.chartType === '선') {\n    chartType = Excel.ChartType.line;\n  } else if (params.chartType === 'pie' || params.chartType === '원') {\n    chartType = Excel.ChartType.pie;\n  } else if (params.chartType === 'scatter' || params.chartType === '분산형') {\n    chartType = Excel.ChartType.xyscatter;\n  } else {\n    // Default to column chart\n    chartType = Excel.ChartType.columnClustered;\n  }\n  \n  // Create the chart\n  const chart = worksheet.charts.add(chartType, sourceData, Excel.ChartSeriesBy.auto);\n  \n  // Set chart properties\n  chart.title.text = params.title || '차트';\n  chart.height = 300;\n  chart.width = 400;\n  \n  // Position the chart\n  chart.left = params.offsetX || 100;\n  chart.top = params.offsetY || 100;\n  \n  // Set legend position\n  chart.legend.position = Excel.ChartLegendPosition.bottom;\n  chart.legend.visible = true;\n  \n  await context.sync();\n  \n  return {\n    success: true,\n    message: `${dataAddress} 범위로 ${params.chartType || '막대'} 차트가 생성되었습니다.`\n  };\n}\n\n// Add conditional formatting\nasync function executeConditionalFormat(context, params) {\n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  let ranges = [];\n  \n  console.log('Applying conditional format with params:', params);\n  \n  if (params.range) {\n    ranges.push(worksheet.getRange(params.range));\n  } else {\n    // Handle multiple selections\n    try {\n      const selectedRanges = context.workbook.getSelectedRanges();\n      selectedRanges.load([\"areas\", \"areaCount\"]);\n      await context.sync();\n      \n      if (selectedRanges.areaCount > 1) {\n        // Multiple non-contiguous ranges selected\n        for (let i = 0; i < selectedRanges.areas.items.length; i++) {\n          ranges.push(selectedRanges.areas.items[i]);\n        }\n      } else {\n        // Single contiguous range - use entire used range if no selection\n        const singleRange = context.workbook.getSelectedRange();\n        singleRange.load(\"isNullObject\");\n        await context.sync();\n        \n        if (singleRange.isNullObject) {\n          ranges.push(worksheet.getUsedRange());\n        } else {\n          ranges.push(singleRange);\n        }\n      }\n    } catch (error) {\n      // Fallback to used range\n      ranges.push(worksheet.getUsedRange());\n    }\n  }\n  \n  // Apply conditional formatting to all ranges\n  for (const range of ranges) {\n    // Simply apply conditional format to the entire range\n    // Excel will automatically skip non-numeric cells for numeric comparisons\n    const conditionalFormat = range.conditionalFormats.add(Excel.ConditionalFormatType.cellValue);\n    \n    // Set the rule based on condition\n    if (params.condition === 'greater_than' && params.value !== undefined) {\n      conditionalFormat.cellValue.rule = {\n        formula1: params.value.toString(),\n        operator: Excel.ConditionalCellValueOperator.greaterThan\n      };\n    } else if (params.condition === 'less_than' && params.value !== undefined) {\n      conditionalFormat.cellValue.rule = {\n        formula1: params.value.toString(),\n        operator: Excel.ConditionalCellValueOperator.lessThan\n      };\n    } else if (params.condition === 'equal_to' && params.value !== undefined) {\n      conditionalFormat.cellValue.rule = {\n        formula1: params.value.toString(),\n        operator: Excel.ConditionalCellValueOperator.equalTo\n      };\n    } else if (params.condition === 'text_contains' && params.value !== undefined) {\n      conditionalFormat.cellValue.rule = {\n        formula1: params.value.toString(),\n        operator: Excel.ConditionalCellValueOperator.containsText\n      };\n    } else {\n      // Default to greater than\n      conditionalFormat.cellValue.rule = {\n        formula1: (params.value || 0).toString(),\n        operator: Excel.ConditionalCellValueOperator.greaterThan\n      };\n    }\n    \n    // Set the format\n    conditionalFormat.cellValue.format.fill.color = params.backgroundColor || \"#00FF00\";\n    if (params.fontColor) {\n      conditionalFormat.cellValue.format.font.color = params.fontColor;\n    }\n    if (params.bold) {\n      conditionalFormat.cellValue.format.font.bold = true;\n    }\n  }\n  \n  await context.sync();\n  \n  return {\n    success: true,\n    message: `조건부 서식이 적용되었습니다. (${params.condition} ${params.value || ''})`\n  };\n}\n\n// Translate column contents\nasync function executeTranslate(context, params) {\n  console.log('executeTranslate called with params:', params);\n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  \n  if (!params.targetLanguage) {\n    return { success: false, error: '대상 언어를 지정해주세요.' };\n  }\n  \n  let sourceRange;\n  let targetColumnIndex;\n  \n  if (params.sourceRange) {\n    // Handle column ranges like \"C:C\" by intersecting with used range\n    if (params.sourceRange.match(/^[A-Z]+:[A-Z]+$/)) {\n      console.log('Handling column range:', params.sourceRange);\n      const usedRange = worksheet.getUsedRange();\n      if (!usedRange) {\n        return { success: false, error: '번역할 데이터가 없습니다.' };\n      }\n      \n      usedRange.load([\"rowCount\", \"columnCount\"]);\n      await context.sync();\n      \n      console.log('Used range:', {\n        rowCount: usedRange.rowCount,\n        columnCount: usedRange.columnCount\n      });\n      \n      // Get the column letter from the range (e.g., \"C\" from \"C:C\")\n      const columnLetter = params.sourceRange.split(':')[0];\n      const columnIndex = columnLetter.charCodeAt(0) - 65;\n      \n      // Get only the used portion of the column, starting from row 2 (skip header)\n      if (usedRange.rowCount > 1) {\n        sourceRange = worksheet.getRangeByIndexes(1, columnIndex, usedRange.rowCount - 1, 1);\n      } else {\n        return { success: false, error: '번역할 데이터가 없습니다.' };\n      }\n      \n      // Handle target range similarly\n      if (params.targetRange && params.targetRange.match(/^[A-Z]+:[A-Z]+$/)) {\n        const targetColumnLetter = params.targetRange.split(':')[0];\n        targetColumnIndex = targetColumnLetter.charCodeAt(0) - 65;\n        console.log('Target column calculation:', {\n          targetRange: params.targetRange,\n          targetColumnLetter,\n          targetColumnIndex\n        });\n      } else {\n        // If no target specified, use next column\n        targetColumnIndex = columnIndex + 1;\n        console.log('Using next column as target:', {\n          sourceColumnIndex: columnIndex,\n          targetColumnIndex\n        });\n      }\n    } else {\n      // Handle specific ranges like \"B2:B40\"\n      sourceRange = worksheet.getRange(params.sourceRange);\n      \n      // Parse target column if specified\n      if (params.targetRange) {\n        if (params.targetRange.match(/^[A-Z]+:[A-Z]+$/)) {\n          // Extract column letter from targetRange like \"E:E\"\n          const targetColumnLetter = params.targetRange.split(':')[0];\n          targetColumnIndex = targetColumnLetter.charCodeAt(0) - 65;\n          console.log('Target column parsed from targetRange:', {\n            targetRange: params.targetRange,\n            targetColumnLetter,\n            targetColumnIndex\n          });\n        }\n      }\n    }\n  } else if (params.sourceColumn) {\n    const columnIndex = params.sourceColumn.charCodeAt(0) - 65;\n    const usedRange = worksheet.getUsedRange();\n    usedRange.load([\"rowCount\"]);\n    await context.sync();\n    \n    if (usedRange.rowCount > 1) {\n      sourceRange = worksheet.getRangeByIndexes(1, columnIndex, usedRange.rowCount - 1, 1);\n    } else {\n      return { success: false, error: '번역할 데이터가 없습니다.' };\n    }\n    \n    targetColumnIndex = params.targetColumn === 'next' ? columnIndex + 1 :\n                       params.targetColumn ? params.targetColumn.charCodeAt(0) - 65 : columnIndex + 1;\n  } else {\n    return { success: false, error: '번역할 열을 지정해주세요.' };\n  }\n  \n  sourceRange.load([\"values\", \"rowIndex\", \"columnIndex\", \"rowCount\"]);\n  await context.sync();\n  \n  console.log('Source range loaded:', {\n    rowIndex: sourceRange.rowIndex,\n    columnIndex: sourceRange.columnIndex,\n    rowCount: sourceRange.rowCount,\n    values: sourceRange.values ? `${sourceRange.values.length} rows` : 'null'\n  });\n  \n  const sourceValues = sourceRange.values;\n  if (!sourceValues || sourceValues.length === 0) {\n    return { success: false, error: '번역할 데이터가 없습니다.' };\n  }\n  \n  const translations = [];\n  const batchSize = 20;\n  \n  // Translate in batches\n  for (let i = 0; i < sourceValues.length; i += batchSize) {\n    const batch = sourceValues.slice(i, Math.min(i + batchSize, sourceValues.length));\n    const batchTexts = batch.map(row => row[0]).filter(text => text);\n    \n    if (batchTexts.length > 0) {\n      const translatedBatch = await translateBatch(batchTexts, params.targetLanguage, params.sourceLanguage);\n      \n      // Check if translatedBatch is valid\n      if (!translatedBatch || !Array.isArray(translatedBatch)) {\n        console.error('Invalid translation batch received:', translatedBatch);\n        // Mark all as translation failed\n        for (let j = 0; j < batch.length; j++) {\n          if (batch[j][0]) {\n            translations.push([{ text: '번역 실패', isError: true }]);\n          } else {\n            translations.push([{ text: '', isError: false }]);\n          }\n        }\n      } else {\n        console.log('Processing translation batch:', {\n          batchLength: batch.length,\n          translatedBatchLength: translatedBatch.length,\n          sampleTranslations: translatedBatch.slice(0, 3),\n          firstTranslation: translatedBatch[0],\n          translationType: typeof translatedBatch[0],\n          rawData: JSON.stringify(translatedBatch.slice(0, 3))\n        });\n        \n        let translationIndex = 0;\n        for (let j = 0; j < batch.length; j++) {\n          if (batch[j][0]) {\n            const translatedText = translatedBatch[translationIndex] || '';\n            // Check if translation is empty or failed\n            if (!translatedText || translatedText.trim() === '') {\n              translations.push([{ text: '번역 실패', isError: true }]);\n            } else {\n              translations.push([{ text: translatedText, isError: false }]);\n            }\n            if (j < 3) {\n              console.log(`Translation ${j}: \"${batch[j][0]}\" -> \"${translatedText}\"`);\n            }\n            translationIndex++;\n          } else {\n            // Keep empty rows as empty\n            translations.push([{ text: '', isError: false }]);\n          }\n        }\n      }\n    } else {\n      for (let j = 0; j < batch.length; j++) {\n        translations.push([{ text: '', isError: false }]);\n      }\n    }\n    \n    // Show progress\n    if (i % 100 === 0 && i > 0) {\n      showStatus(`번역 중... ${Math.round((i / sourceValues.length) * 100)}%`, 'info');\n    }\n  }\n  \n  // Write translations\n  console.log('Writing translations to target column:', {\n    rowIndex: sourceRange.rowIndex,\n    targetColumnIndex: targetColumnIndex || sourceRange.columnIndex + 1,\n    translationsCount: translations.length,\n    sampleTranslations: translations.slice(0, 3).map(t => t[0])\n  });\n  console.log('First 5 translations raw:', JSON.stringify(translations.slice(0, 5)));\n  console.log('Translation content check:', {\n    first: translations[0] ? translations[0][0] : 'null',\n    second: translations[1] ? translations[1][0] : 'null',\n    third: translations[2] ? translations[2][0] : 'null',\n    isEmpty: translations[0] && translations[0][0] === ''\n  });\n  \n  // DEBUG: Check if translations contain original text instead of translations\n  console.log('DEBUG: Comparing source and translations:');\n  for (let i = 0; i < Math.min(5, translations.length); i++) {\n    console.log(`  [${i}] Source: \"${sourceValues[i][0]}\" -> Translation: \"${translations[i][0]}\"`);\n  }\n  \n  // Ensure targetColumnIndex is set correctly\n  if (targetColumnIndex === undefined) {\n    // If no target column specified, use the next column after source\n    targetColumnIndex = sourceRange.columnIndex + 1;\n    console.log('No target column specified, using next column:', targetColumnIndex);\n  }\n  \n  const targetRange = worksheet.getRangeByIndexes(\n    sourceRange.rowIndex,\n    targetColumnIndex,\n    translations.length,\n    1\n  );\n  \n  targetRange.load([\"address\", \"values\"]);\n  await context.sync();\n  console.log('Target range address:', targetRange.address);\n  console.log('Existing target values (first 3):', targetRange.values.slice(0, 3));\n  \n  // Clear existing values first\n  targetRange.clear(Excel.ClearApplyTo.contents);\n  await context.sync();\n  console.log('Target range cleared');\n  \n  // Ensure translations are properly formatted as 2D array\n  console.log('Setting target range values:', {\n    translationsLength: translations.length,\n    firstTranslation: translations[0],\n    isArray: Array.isArray(translations),\n    is2DArray: Array.isArray(translations[0])\n  });\n  \n  // Process translations and prepare values\n  const stringTranslations = [];\n  const errorRows = [];\n  \n  for (let i = 0; i < translations.length; i++) {\n    const translation = translations[i][0];\n    if (translation && typeof translation === 'object') {\n      stringTranslations.push([translation.text]);\n      if (translation.isError) {\n        errorRows.push(i);\n      }\n    } else {\n      // Handle legacy format\n      stringTranslations.push([String(translation || '')]);\n    }\n  }\n  \n  console.log('String translations (first 3):', stringTranslations.slice(0, 3));\n  console.log('Error rows:', errorRows.length, 'rows marked as errors');\n  \n  // Set the values\n  targetRange.values = stringTranslations;\n  await context.sync();\n  \n  // Apply error styling to failed translations\n  if (errorRows.length > 0) {\n    for (const rowIndex of errorRows) {\n      const errorCell = targetRange.getCell(rowIndex, 0);\n      errorCell.format.fill.color = \"#FFE6E6\"; // Light red background\n      errorCell.format.font.color = \"#CC0000\"; // Dark red text\n      errorCell.format.font.bold = true;\n    }\n    await context.sync();\n  }\n  \n  console.log('Translations written to Excel with error styling applied');\n  \n  // Verify the values were actually written\n  targetRange.load([\"values\", \"text\", \"valueTypes\"]);\n  await context.sync();\n  console.log('Verification - Target range:', {\n    address: targetRange.address,\n    values: targetRange.values.slice(0, 3),\n    text: targetRange.text.slice(0, 3),\n    valueTypes: targetRange.valueTypes.slice(0, 3),\n    actualFirstValue: targetRange.values[0] ? targetRange.values[0][0] : 'null',\n    firstThreeValues: [\n      targetRange.values[0] ? targetRange.values[0][0] : 'empty',\n      targetRange.values[1] ? targetRange.values[1][0] : 'empty',\n      targetRange.values[2] ? targetRange.values[2][0] : 'empty'\n    ]\n  });\n  \n  // Try alternative method - set each cell individually for debugging\n  if (translations.length > 0) {\n    const isEmpty = !targetRange.values[0] || !targetRange.values[0][0] || targetRange.values[0][0] === '';\n    console.log('Checking if values are empty:', {\n      isEmpty,\n      firstValue: targetRange.values[0] ? targetRange.values[0][0] : 'null',\n      firstValueLength: targetRange.values[0] && targetRange.values[0][0] ? targetRange.values[0][0].length : 0\n    });\n    \n    if (isEmpty) {\n      console.log('Values not visible, trying individual cell approach...');\n      // Try setting just the first few cells individually\n      for (let i = 0; i < Math.min(3, translations.length); i++) {\n        const cellRow = sourceRange.rowIndex + i;\n        const cellCol = targetColumnIndex || sourceRange.columnIndex + 1;\n        const cell = worksheet.getCell(cellRow, cellCol);\n        const cellValue = stringTranslations[i][0];\n        \n        console.log(`Setting cell (${cellRow},${cellCol}) to: \"${cellValue}\"`);\n        cell.values = [[cellValue]];\n        \n        await context.sync();\n        \n        // Verify it was set\n        cell.load(\"values\");\n        await context.sync();\n        console.log(`Cell ${i} after setting:`, cell.values[0][0]);\n      }\n    }\n  }\n  \n  // Add header\n  const headerCell = worksheet.getCell(0, targetColumnIndex || sourceRange.columnIndex + 1);\n  const sourceHeaderCell = worksheet.getCell(0, sourceRange.columnIndex);\n  sourceHeaderCell.load(\"values\");\n  await context.sync();\n  \n  headerCell.values = [[`${sourceHeaderCell.values[0][0]} (${params.targetLanguage})`]];\n  await context.sync();\n  \n  return {\n    success: true,\n    message: `번역이 완료되었습니다. (${sourceValues.length}개 항목)`\n  };\n}\n\n// Translate a batch of texts through proxy\nasync function translateBatch(texts, targetLanguage, sourceLanguage) {\n  try {\n    console.log('translateBatch called with', texts.length, 'texts');\n    const response = await fetch(API_PROXY_URL, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        command: `Translate these items to ${targetLanguage}: ${texts.join(', ')}`,\n        sheetContext: {\n          operation: 'translate_batch',\n          texts: texts,\n          targetLanguage: targetLanguage,\n          sourceLanguage: sourceLanguage\n        }\n      })\n    });\n    \n    console.log('Translation response status:', response.status);\n    \n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    \n    const result = await response.json();\n    console.log('Translation result:', result);\n    \n    if (result.success && result.data && result.data.translations) {\n      console.log('Translations received:', result.data.translations.length);\n      console.log('First 3 translations from API:', result.data.translations.slice(0, 3));\n      console.log('Raw translations data:', JSON.stringify(result.data.translations.slice(0, 5)));\n      return result.data.translations;\n    } else if (result.error) {\n      console.error('Translation API error:', result.error);\n      throw new Error(result.error);\n    } else {\n      console.error('Invalid translation response structure:', result);\n      throw new Error('번역 응답을 받을 수 없습니다.');\n    }\n  } catch (error) {\n    console.error('Translation error:', error);\n    return texts.map(() => '');\n  }\n}\n\n// Helper functions\nfunction getColumnLetter(columnIndex) {\n  let columnLetter = '';\n  let tempIndex = columnIndex;\n  \n  while (tempIndex >= 0) {\n    columnLetter = String.fromCharCode((tempIndex % 26) + 65) + columnLetter;\n    tempIndex = Math.floor(tempIndex / 26) - 1;\n  }\n  \n  return columnLetter;\n}\n\nfunction formatNumber(value) {\n  if (typeof value === 'number') {\n    if (Number.isInteger(value)) {\n      return value.toLocaleString('ko-KR');\n    } else {\n      return value.toLocaleString('ko-KR', { minimumFractionDigits: 0, maximumFractionDigits: 2 });\n    }\n  }\n  return value;\n}\n\nfunction showStatus(message, type) {\n  const status = document.getElementById('status');\n  status.textContent = message;\n  status.className = 'status-message ' + type;\n  status.style.display = 'block';\n  \n  if (window.statusTimeout) {\n    clearTimeout(window.statusTimeout);\n  }\n  \n  if (type === 'success') {\n    window.statusTimeout = setTimeout(() => {\n      status.style.display = 'none';\n    }, 5000);\n  }\n}\n\nfunction clearInput() {\n  document.getElementById('commandInput').value = '';\n  document.getElementById('status').style.display = 'none';\n}\n\nfunction setCommand(command) {\n  document.getElementById('commandInput').value = command;\n  document.getElementById('commandInput').focus();\n}\n\nfunction showSettings() {\n  showStatus('이 애드인은 보안 서버를 통해 AI 기능을 제공합니다. 별도의 API 키 설정이 필요하지 않습니다.', 'info');\n}\n\n// Test backend connection\nasync function testBackendConnection() {\n  try {\n    console.log('Testing backend connection...');\n    const testUrl = 'https://excel-addon-backend.vercel.app/api/test';\n    \n    const response = await fetch(testUrl, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({ test: true })\n    });\n    \n    console.log('Test response status:', response.status);\n    console.log('Test response headers:', response.headers);\n    \n    const data = await response.json();\n    console.log('Test response data:', data);\n    \n    showStatus('백엔드 연결 테스트 성공', 'success');\n  } catch (error) {\n    console.error('Backend test error:', error);\n    showStatus('백엔드 연결 테스트 실패: ' + error.message, 'error');\n  }\n}\n\n// Format cell borders\nasync function executeBorderFormat(context, params) {\n  console.log('executeBorderFormat called with params:', params);\n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  \n  try {\n    let targetRanges = [];\n    \n    // Determine the range based on params\n    if (!params.range) {\n      // No range specified - handle multiple selections\n      try {\n        const selectedRanges = context.workbook.getSelectedRanges();\n        selectedRanges.load([\"areas\", \"areaCount\"]);\n        await context.sync();\n        \n        if (selectedRanges.areaCount > 1) {\n          // Multiple non-contiguous ranges selected\n          for (let i = 0; i < selectedRanges.areas.items.length; i++) {\n            targetRanges.push(selectedRanges.areas.items[i]);\n          }\n        } else {\n          // Single contiguous range\n          targetRanges.push(context.workbook.getSelectedRange());\n        }\n      } catch (error) {\n        console.log('Error getting selected ranges for border format/removal:', error);\n        return { success: false, error: '선택한 범위를 처리할 수 없습니다. 연속된 범위를 선택해주세요.' };\n      }\n    } else if (params.range === 'all' || params.range === '전체') {\n      // Entire sheet\n      const usedRange = worksheet.getUsedRangeOrNullObject();\n      usedRange.load(\"isNullObject\");\n      await context.sync();\n      \n      if (usedRange.isNullObject) {\n        return { success: false, error: '시트에 데이터가 없습니다.' };\n      } else {\n        targetRanges.push(usedRange);\n      }\n    } else {\n      // Specific range provided\n      targetRanges.push(worksheet.getRange(params.range));\n    }\n    \n    // Load all ranges\n    for (const range of targetRanges) {\n      range.load([\"address\", \"rowCount\", \"columnCount\"]);\n    }\n    await context.sync();\n    \n    console.log('Target ranges for border format:', targetRanges.length);\n    for (let i = 0; i < targetRanges.length; i++) {\n      console.log(`Range ${i + 1}:`, {\n        address: targetRanges[i].address,\n        rowCount: targetRanges[i].rowCount,\n        columnCount: targetRanges[i].columnCount\n      });\n    }\n    \n    // Determine which borders to format\n    const borderType = params.borderType || 'all';\n    const color = params.color || '#000000';\n    const style = params.style || 'Continuous';\n    \n    // Map style names to Excel constants\n    const styleMap = {\n      'continuous': 'Continuous',\n      'dash': 'Dash',\n      'dashdot': 'DashDot',\n      'double': 'Double',\n      'dot': 'Dot',\n      'dashdotdot': 'DashDotDot',\n      'slantdashdot': 'SlantDashDot'\n    };\n    \n    const excelStyle = styleMap[style.toLowerCase()] || 'Continuous';\n    \n    // Apply border formatting to all selected ranges\n    for (const targetRange of targetRanges) {\n      if (borderType === 'all') {\n        // Format all borders\n        const borderItems = ['EdgeTop', 'EdgeBottom', 'EdgeLeft', 'EdgeRight', 'InsideVertical', 'InsideHorizontal'];\n        \n        for (const borderItem of borderItems) {\n          try {\n            const border = targetRange.format.borders.getItem(borderItem);\n            border.style = excelStyle;\n            border.color = color;\n            border.weight = 'Thin';\n          } catch (e) {\n            // Some border items might not be applicable (e.g., InsideVertical for single cell)\n            console.log(`Skipping ${borderItem}:`, e.message);\n          }\n        }\n      } else if (borderType === 'inside') {\n        // Format only inside borders\n        try {\n          const insideV = targetRange.format.borders.getItem('InsideVertical');\n          insideV.style = excelStyle;\n          insideV.color = color;\n          insideV.weight = 'Thin';\n        } catch (e) {\n          console.log('No inside vertical borders');\n        }\n        \n        try {\n          const insideH = targetRange.format.borders.getItem('InsideHorizontal');\n          insideH.style = excelStyle;\n          insideH.color = color;\n          insideH.weight = 'Thin';\n        } catch (e) {\n          console.log('No inside horizontal borders');\n        }\n      } else {\n        // Format specific border\n        const borderMap = {\n          'top': 'EdgeTop',\n          'bottom': 'EdgeBottom',\n          'left': 'EdgeLeft',\n          'right': 'EdgeRight'\n        };\n        \n        const borderName = borderMap[borderType.toLowerCase()];\n        if (borderName) {\n          const border = targetRange.format.borders.getItem(borderName);\n          border.style = excelStyle;\n          border.color = color;\n          border.weight = 'Thin';\n        }\n      }\n    }\n    \n    await context.sync();\n    \n    return {\n      success: true,\n      message: '테두리 서식이 적용되었습니다.'\n    };\n    \n  } catch (error) {\n    console.error('Error in executeBorderFormat:', error);\n    return {\n      success: false,\n      error: `테두리 서식 적용 중 오류 발생: ${error.message}`\n    };\n  }\n}\n\n// Additional operations (compress, filter, insert, delete, formula, retry_translation)\n// These would need to be implemented based on Excel JavaScript API capabilities\n\nasync function executeCompress(context, params) {\n  console.log('executeCompress called with params:', params);\n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  \n  try {\n    if (!params.range) {\n      return { success: false, error: '범위를 지정해주세요.' };\n    }\n    \n    // Get the specified range\n    const checkRange = worksheet.getRange(params.range);\n    checkRange.load([\"rowIndex\", \"rowCount\", \"columnIndex\", \"values\", \"address\"]);\n    await context.sync();\n    \n    console.log('Compress range:', {\n      address: checkRange.address,\n      rowIndex: checkRange.rowIndex,\n      rowCount: checkRange.rowCount,\n      columnIndex: checkRange.columnIndex\n    });\n    \n    // Find empty rows in the specified column\n    const emptyRows = [];\n    const values = checkRange.values;\n    \n    // Check each row in the range\n    for (let i = 0; i < values.length; i++) {\n      const cellValue = values[i][0]; // First column of the range\n      if (cellValue === null || cellValue === undefined || cellValue === '' || \n          (typeof cellValue === 'string' && cellValue.trim() === '')) {\n        // This row is empty in the specified column\n        // Store the actual row index (rowIndex + i)\n        emptyRows.push(checkRange.rowIndex + i);\n      }\n    }\n    \n    console.log('Found empty rows:', emptyRows.length, 'rows at indices:', emptyRows);\n    \n    if (emptyRows.length === 0) {\n      return {\n        success: true,\n        message: '제거할 빈 행이 없습니다.'\n      };\n    }\n    \n    // IMPORTANT: Only delete rows that are within the specified range\n    // This prevents accidentally deleting rows outside the range (like A1)\n    const minRowIndex = checkRange.rowIndex;\n    const maxRowIndex = checkRange.rowIndex + checkRange.rowCount - 1;\n    \n    // Filter out any row indices that are outside the specified range\n    const rowsToDelete = emptyRows.filter(rowIdx => rowIdx >= minRowIndex && rowIdx <= maxRowIndex);\n    \n    console.log('Rows to delete (filtered):', rowsToDelete);\n    \n    // Delete rows from bottom to top to avoid index shifting\n    rowsToDelete.sort((a, b) => b - a); // Sort in descending order\n    \n    for (const rowIndex of rowsToDelete) {\n      console.log('Deleting row:', rowIndex + 1); // Display 1-based for user\n      // Get the entire row using a fixed large column count to avoid getUsedRange() issues\n      const rowToDelete = worksheet.getRangeByIndexes(rowIndex, 0, 1, 1000);\n      rowToDelete.delete(Excel.DeleteShiftDirection.up);\n      await context.sync();\n    }\n    \n    return {\n      success: true,\n      message: `${rowsToDelete.length}개의 빈 행이 제거되었습니다.`\n    };\n    \n  } catch (error) {\n    console.error('Error in executeCompress:', error);\n    return {\n      success: false,\n      error: `빈 행 제거 중 오류 발생: ${error.message}`\n    };\n  }\n}\n\nasync function executeFilter(context, params) {\n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  const range = params.range ? worksheet.getRange(params.range) : worksheet.getUsedRange();\n  \n  // Apply autofilter\n  range.worksheet.autoFilter.apply(range);\n  \n  await context.sync();\n  \n  return {\n    success: true,\n    message: '필터가 적용되었습니다.'\n  };\n}\n\nasync function executeInsert(context, params) {\n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  const type = params.type || 'row';\n  const position = params.position || 1;\n  const count = params.count || 1;\n  \n  if (type === 'row') {\n    const range = worksheet.getRangeByIndexes(position - 1, 0, count, 1);\n    range.insert(Excel.InsertShiftDirection.down);\n  } else {\n    const range = worksheet.getRangeByIndexes(0, position - 1, 1, count);\n    range.insert(Excel.InsertShiftDirection.right);\n  }\n  \n  await context.sync();\n  \n  return {\n    success: true,\n    message: `${count}개의 ${type === 'row' ? '행' : '열'}이 삽입되었습니다.`\n  };\n}\n\nasync function executeDelete(context, params) {\n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  const type = params.type || 'row';\n  const position = params.position || 1;\n  const count = params.count || 1;\n  \n  if (type === 'row') {\n    const range = worksheet.getRangeByIndexes(position - 1, 0, count, 1);\n    range.delete(Excel.DeleteShiftDirection.up);\n  } else {\n    const range = worksheet.getRangeByIndexes(0, position - 1, 1, count);\n    range.delete(Excel.DeleteShiftDirection.left);\n  }\n  \n  await context.sync();\n  \n  return {\n    success: true,\n    message: `${count}개의 ${type === 'row' ? '행' : '열'}이 삭제되었습니다.`\n  };\n}\n\nasync function executeFormula(context, params) {\n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  const range = params.range ? worksheet.getRange(params.range) : context.workbook.getSelectedRange();\n  \n  if (!params.formula) {\n    return { success: false, error: '수식을 지정해주세요.' };\n  }\n  \n  range.formulas = [[params.formula]];\n  await context.sync();\n  \n  return {\n    success: true,\n    message: '수식이 적용되었습니다.'\n  };\n}\n\nasync function executeRetryTranslation(context, params) {\n  // Implementation would be similar to Google Sheets version\n  // but using Excel JavaScript API\n  return {\n    success: false,\n    error: '이 기능은 현재 구현 중입니다.'\n  };\n}\n\nasync function executeRemoveBorder(context, params) {\n  console.log('executeRemoveBorder called with params:', params);\n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  \n  try {\n    let targetRanges = [];\n    \n    // Determine the range to apply border removal\n    if (params.range) {\n      // Handle special case for entire sheet\n      if (params.range === 'all' || params.range === '전체') {\n        console.log('Removing borders from entire sheet');\n        // Use getUsedRangeOrNullObject to get the actual used range\n        const usedRange = worksheet.getUsedRangeOrNullObject();\n        usedRange.load(\"isNullObject\");\n        await context.sync();\n        \n        if (usedRange.isNullObject) {\n          console.log('No used range in the sheet, nothing to remove borders from');\n          return { success: true, message: '시트에 데이터가 없어 테두리를 제거할 필요가 없습니다.' };\n        } else {\n          // Expand the used range to ensure we get all cells that might have borders\n          usedRange.load([\"rowCount\", \"columnCount\", \"rowIndex\", \"columnIndex\"]);\n          await context.sync();\n          \n          // Get a slightly larger range to ensure we capture all borders\n          const expandedRows = Math.min(usedRange.rowCount + 100, 1048576);\n          const expandedCols = Math.min(usedRange.columnCount + 20, 16384);\n          targetRanges.push(worksheet.getRangeByIndexes(0, 0, expandedRows, expandedCols));\n        }\n      } else if (params.range.match(/^[A-Z]+:[A-Z]+$/)) {\n        // Handle column ranges like \"C:C\"\n        console.log('Handling column range:', params.range);\n        const usedRange = worksheet.getUsedRange();\n        if (!usedRange) {\n          return { success: false, error: '데이터가 없습니다.' };\n        }\n        \n        usedRange.load([\"rowCount\", \"columnCount\"]);\n        await context.sync();\n        \n        // Get the column letter from the range (e.g., \"C\" from \"C:C\")\n        const columnLetter = params.range.split(':')[0];\n        const columnIndex = columnLetter.charCodeAt(0) - 65;\n        \n        // Get the entire used portion of the column\n        targetRanges.push(worksheet.getRangeByIndexes(0, columnIndex, usedRange.rowCount, 1));\n      } else {\n        // Handle specific ranges like \"A1:B10\"\n        targetRanges.push(worksheet.getRange(params.range));\n      }\n    } else {\n      // If no range specified, handle multiple selections\n      try {\n        const selectedRanges = context.workbook.getSelectedRanges();\n        selectedRanges.load([\"areas\", \"areaCount\"]);\n        await context.sync();\n        \n        if (selectedRanges.areaCount > 1) {\n          // Multiple non-contiguous ranges selected\n          for (let i = 0; i < selectedRanges.areas.items.length; i++) {\n            targetRanges.push(selectedRanges.areas.items[i]);\n          }\n        } else {\n          // Single contiguous range\n          targetRanges.push(context.workbook.getSelectedRange());\n        }\n      } catch (error) {\n        console.log('Error getting selected ranges for border format/removal:', error);\n        return { success: false, error: '선택한 범위를 처리할 수 없습니다. 연속된 범위를 선택해주세요.' };\n      }\n    }\n    \n    // Load all ranges\n    for (const range of targetRanges) {\n      range.load([\"address\", \"rowCount\", \"columnCount\"]);\n    }\n    await context.sync();\n    \n    console.log('Target ranges for border removal:', targetRanges.length);\n    for (let i = 0; i < targetRanges.length; i++) {\n      console.log(`Range ${i + 1}:`, {\n        address: targetRanges[i].address,\n        rowCount: targetRanges[i].rowCount,\n        columnCount: targetRanges[i].columnCount\n      });\n    }\n    \n    // Determine which borders to remove\n    const borderType = params.borderType || 'all';\n    \n    // Apply border removal to all selected ranges\n    for (const targetRange of targetRanges) {\n      if (borderType === 'all') {\n        // Remove all borders\n        targetRange.format.borders.getItem(Excel.BorderIndex.edgeLeft).style = Excel.BorderLineStyle.none;\n        targetRange.format.borders.getItem(Excel.BorderIndex.edgeRight).style = Excel.BorderLineStyle.none;\n        targetRange.format.borders.getItem(Excel.BorderIndex.edgeTop).style = Excel.BorderLineStyle.none;\n        targetRange.format.borders.getItem(Excel.BorderIndex.edgeBottom).style = Excel.BorderLineStyle.none;\n        targetRange.format.borders.getItem(Excel.BorderIndex.insideHorizontal).style = Excel.BorderLineStyle.none;\n        targetRange.format.borders.getItem(Excel.BorderIndex.insideVertical).style = Excel.BorderLineStyle.none;\n      } else {\n        // Remove specific border\n        switch (borderType) {\n          case 'right':\n            targetRange.format.borders.getItem(Excel.BorderIndex.edgeRight).style = Excel.BorderLineStyle.none;\n            break;\n          case 'left':\n            targetRange.format.borders.getItem(Excel.BorderIndex.edgeLeft).style = Excel.BorderLineStyle.none;\n            break;\n          case 'top':\n            targetRange.format.borders.getItem(Excel.BorderIndex.edgeTop).style = Excel.BorderLineStyle.none;\n            break;\n          case 'bottom':\n            targetRange.format.borders.getItem(Excel.BorderIndex.edgeBottom).style = Excel.BorderLineStyle.none;\n            break;\n          default:\n            return { success: false, error: `알 수 없는 테두리 유형: ${borderType}` };\n        }\n      }\n    }\n    \n    await context.sync();\n    \n    return {\n      success: true,\n      message: `${borderType === 'all' ? '모든' : borderType} 테두리가 제거되었습니다.`\n    };\n    \n  } catch (error) {\n    console.error('Error in executeRemoveBorder:', error);\n    return {\n      success: false,\n      error: `테두리 제거 중 오류 발생: ${error.message}`\n    };\n  }\n}"],"names":["__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","m","g","globalThis","this","Function","e","window","o","obj","prop","Object","prototype","hasOwnProperty","call","scriptUrl","importScripts","location","document","currentScript","tagName","toUpperCase","src","scripts","getElementsByTagName","length","i","test","Error","replace","p","b","baseURI","self","href","URL","t","r","Symbol","n","iterator","toStringTag","c","Generator","u","create","_regeneratorDefine2","f","y","G","v","a","d","bind","l","TypeError","done","value","return","GeneratorFunction","GeneratorFunctionPrototype","getPrototypeOf","setPrototypeOf","__proto__","displayName","_regenerator","w","defineProperty","_invoke","enumerable","configurable","writable","asyncGeneratorStep","Promise","resolve","then","_asyncToGenerator","arguments","apply","_next","_throw","recognition","isListening","API_PROXY_URL","process","Office","onReady","info","host","HostType","Excel","_testBackendConnection","testBackendConnection","getElementById","onclick","executeCommand","clearInput","protocol","hostname","includes","showStatus","textContent","stop","start","error","console","message","toggleVoiceRecognition","showSettings","querySelectorAll","forEach","item","command","getAttribute","focus","addEventListener","event","key","shiftKey","preventDefault","log","voiceButton","voiceStatus","disabled","style","opacity","cursor","color","title","SpeechRecognition","webkitSpeechRecognition","lang","continuous","interimResults","maxAlternatives","onstart","classList","add","onresult","transcript","results","isFinal","onerror","remove","errorMessage","isWebEnvironment","onend","trim","initializeSpeechRecognition","isExecuting","_executeCommand","_callee2","button","originalText","_t","_context2","innerHTML","run","_ref","_callee","context","worksheet","range","usedRange","sheetContext","headerRow","interpretation","result","_context","workbook","worksheets","getActiveWorksheet","getSelectedRange","load","getUsedRange","sync","sheetName","name","activeRange","address","row","rowIndex","column","columnIndex","numRows","rowCount","numColumns","columnCount","lastRow","lastColumn","headers","dataRange","values","isLargeSheet","push","columnLetter","getColumnLetter","label","toString","callOpenAI","success","executeInterpretedCommand","data","setTimeout","_x45","stack","_x","_x2","_callOpenAI","_callee3","response","errorData","_t2","_context3","fetch","method","body","JSON","stringify","ok","json","concat","status","_x5","_x6","_executeInterpretedCommand","_callee5","commandData","successCount","_iterator","_step","op","_t5","_context5","operations","Array","isArray","_createForOfIteratorHelper","s","executeSingleOperation","operation","parameters","_x7","_x8","_x9","_executeSingleOperation","_callee6","params","_t6","_t7","_context6","Date","toISOString","executeMerge","executeSum","executeAverage","executeCount","executeFormat","executeSort","executeFilter","executeInsert","executeDelete","executeFormula","executeChart","executeConditionalFormat","executeTranslate","executeCompress","executeRetryTranslation","executeRemoveBorder","executeBorderFormat","_x0","_x1","_executeMerge","_callee7","rangeAddress","_context7","getRange","merge","_x10","_x11","_executeSum","_callee8","lastDataRow","sumCell","sourceRange","sumFormula","selectedRanges","rangeAddresses","_i","_i2","_selectedRanges","_rangeAddresses","_i3","_i4","newCell","targetCell","_column","_lastRow","_newCell","_t8","_t9","_context8","columnName","sumType","match","charCodeAt","toLowerCase","getCell","formulas","formatNumber","getSelectedRanges","areaCount","areas","items","join","addNewRow","_x12","_x13","_executeAverage","_callee9","rangeDescription","averageFormula","columnInfo","_usedRange","_usedRange2","_i5","_selectedRanges2","_rangeAddresses2","_i6","_i7","_t0","_t1","_t10","_context9","averageType","getRangeByIndexes","getHeaders","find","h","numberFormat","_x14","_x15","_executeCount","_callee0","formula","criteria","resultCell","lastCol","_context0","countType","condition","operator","_x16","_x17","_executeFormat","_callee1","ranges","_i8","_ranges","_i9","_ranges2","_range","format","_t11","_context1","bold","font","italic","fontSize","size","fontColor","backgroundColor","fill","horizontalAlignment","_x18","_x19","_executeSort","_callee10","ascending","_context10","sort","_x20","_x21","_executeChart","_callee11","sourceData","dataAddress","chartType","chart","_t12","_context11","ChartType","columnClustered","line","pie","xyscatter","charts","ChartSeriesBy","auto","text","height","width","left","offsetX","top","offsetY","legend","position","ChartLegendPosition","bottom","visible","_x22","_x23","_executeConditionalFormat","_callee12","singleRange","_i0","_ranges3","conditionalFormat","_context12","isNullObject","conditionalFormats","ConditionalFormatType","cellValue","rule","formula1","ConditionalCellValueOperator","greaterThan","lessThan","equalTo","containsText","_x24","_x25","_executeTranslate","_callee13","targetColumnIndex","targetColumnLetter","_targetColumnLetter","_columnIndex","_usedRange3","sourceValues","translations","batchSize","batch","batchTexts","translatedBatch","j","translationIndex","_j","translatedText","_j2","_i1","targetRange","stringTranslations","errorRows","_i10","translation","_iterator2","_step2","errorCell","isEmpty","_i11","cellRow","cellCol","cell","headerCell","sourceHeaderCell","_context13","targetLanguage","split","sourceColumnIndex","sourceColumn","targetColumn","slice","Math","min","map","filter","translateBatch","sourceLanguage","batchLength","translatedBatchLength","sampleTranslations","firstTranslation","translationType","_typeof","rawData","isError","round","translationsCount","first","second","third","clear","ClearApplyTo","contents","translationsLength","is2DArray","String","err","valueTypes","actualFirstValue","firstThreeValues","firstValue","firstValueLength","_x26","_x27","_x28","_translateBatch","_callee14","texts","_t14","_context14","tempIndex","fromCharCode","floor","Number","isInteger","toLocaleString","minimumFractionDigits","maximumFractionDigits","type","className","display","statusTimeout","clearTimeout","_callee15","_t15","_context15","_x29","_x30","_executeBorderFormat","_callee16","targetRanges","_i12","_targetRanges","_i13","borderType","excelStyle","_i14","_targetRanges2","_i15","_borderItems","borderItem","border","insideV","insideH","borderName","_border","_t16","_t17","_context16","getUsedRangeOrNullObject","borders","getItem","weight","_x31","_x32","_executeCompress","_callee17","checkRange","emptyRows","minRowIndex","maxRowIndex","rowsToDelete","_iterator3","_step3","_t18","_t19","_context17","rowIdx","delete","DeleteShiftDirection","up","_x33","_x34","_executeFilter","_callee18","_context18","autoFilter","_x35","_x36","_executeInsert","_callee19","count","_context19","insert","InsertShiftDirection","down","right","_x37","_x38","_executeDelete","_callee20","_context20","_x39","_x40","_executeFormula","_callee21","_context21","_x41","_x42","_executeRetryTranslation","_callee22","_context22","_x43","_x44","_executeRemoveBorder","_callee23","expandedRows","expandedCols","_usedRange4","_i16","_targetRanges3","_i17","_i18","_targetRanges4","_t20","_t21","_t22","_context23","BorderIndex","edgeLeft","BorderLineStyle","none","edgeRight","edgeTop","edgeBottom","insideHorizontal","insideVertical"],"sourceRoot":""}