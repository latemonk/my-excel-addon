{"version":3,"file":"taskpane.js","mappings":"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","sources":["webpack://worksai-excel-addon/webpack/bootstrap","webpack://worksai-excel-addon/webpack/runtime/global","webpack://worksai-excel-addon/webpack/runtime/hasOwnProperty shorthand","webpack://worksai-excel-addon/webpack/runtime/publicPath","webpack://worksai-excel-addon/webpack/runtime/jsonp chunk loading","webpack://worksai-excel-addon/./src/taskpane/taskpane.html","webpack://worksai-excel-addon/./src/taskpane/taskpane.js"],"sourcesContent":["// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript && document.currentScript.tagName.toUpperCase() === 'SCRIPT')\n\t\tscriptUrl = document.currentScript.src;\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) {\n\t\t\tvar i = scripts.length - 1;\n\t\t\twhile (i > -1 && (!scriptUrl || !/^http(s?):/.test(scriptUrl))) scriptUrl = scripts[i--].src;\n\t\t}\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/^blob:/, \"\").replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","__webpack_require__.b = document.baseURI || self.location.href;\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t926: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n// no on chunks loaded\n\n// no jsonp function","// Imports\nvar ___HTML_LOADER_IMPORT_0___ = new URL(\"./taskpane.css\", import.meta.url);\n// Module\nvar code = \"<!DOCTYPE html> <html> <head> <meta charset=\\\"UTF-8\\\"/> <meta http-equiv=\\\"X-UA-Compatible\\\" content=\\\"IE=Edge\\\"/> <meta name=\\\"viewport\\\" content=\\\"width=device-width,initial-scale=1\\\"> <title>웍스AI 엑셀 도우미</title> <\" + \"script src=\\\"https://appsforoffice.microsoft.com/lib/1.1/hosted/office.js\\\"><\" + \"/script> <link rel=\\\"stylesheet\\\" href=\\\"https://static2.sharepointonline.com/files/fabric/office-ui-fabric-js/1.4.0/css/fabric.min.css\\\"/> <link rel=\\\"stylesheet\\\" href=\\\"https://static2.sharepointonline.com/files/fabric/office-ui-fabric-js/1.4.0/css/fabric.components.min.css\\\"/> <link href=\\\"\" + ___HTML_LOADER_IMPORT_0___ + \"\\\" rel=\\\"stylesheet\\\"/> </head> <body class=\\\"ms-font-m ms-welcome ms-Fabric\\\"> <main id=\\\"app-body\\\" class=\\\"ms-welcome__main\\\"> <div class=\\\"container\\\"> <div class=\\\"header-section\\\"> <h2 class=\\\"ms-font-xl\\\">웍스AI 엑셀 도우미</h2> <p class=\\\"help-text\\\">자연어로 Excel 작업을 요청하세요. (대용량 번역 지원)</p> </div> <div class=\\\"voice-section\\\"> <button id=\\\"voiceButton\\\" class=\\\"voice-button\\\"> <svg width=\\\"24\\\" height=\\\"24\\\" viewBox=\\\"0 0 24 24\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"> <path d=\\\"M12 14c1.66 0 3-1.34 3-3V5c0-1.66-1.34-3-3-3S9 3.34 9 5v6c0 1.66 1.34 3 3 3z\\\"/> <path d=\\\"M17 11c0 2.76-2.24 5-5 5s-5-2.24-5-5H5c0 3.53 2.61 6.43 6 6.92V21h2v-3.08c3.39-.49 6-3.39 6-6.92h-2z\\\"/> </svg> </button> <div class=\\\"voice-status\\\" id=\\\"voiceStatus\\\">음성 인식 준비</div> </div> <div class=\\\"input-container\\\"> <textarea id=\\\"commandInput\\\" placeholder=\\\"예: A1부터 A10까지 합계를 구해줘\\\" rows=\\\"3\\\"></textarea> <div class=\\\"button-container\\\"> <button id=\\\"executeButton\\\" class=\\\"ms-Button ms-Button--primary\\\"> <span class=\\\"ms-Button-label\\\">실행</span> </button> <button id=\\\"clearButton\\\" class=\\\"ms-Button\\\"> <span class=\\\"ms-Button-label\\\">지우기</span> </button> </div> </div> <div id=\\\"status\\\" class=\\\"status-message\\\"></div> <div class=\\\"examples\\\"> <h3>예제 명령어</h3> <div class=\\\"example-list\\\"> <div class=\\\"example-item\\\" data-command=\\\"A1:B5 셀을 병합해줘\\\"> <strong>셀 병합:</strong> A1:B5 셀을 병합해줘 </div> <div class=\\\"example-item\\\" data-command=\\\"A열의 합계를 구해줘\\\"> <strong>합계 계산:</strong> A열의 합계를 구해줘 </div> <div class=\\\"example-item\\\" data-command=\\\"Name 열의 합계를 구해줘\\\"> <strong>레이블로 합계:</strong> Name 열의 합계를 구해줘 </div> <div class=\\\"example-item\\\" data-command=\\\"C열 평균을 구해줘\\\"> <strong>열 평균:</strong> C열 평균을 구해줘 </div> <div class=\\\"example-item\\\" data-command=\\\"3행 평균을 계산해줘\\\"> <strong>행 평균:</strong> 3행 평균을 계산해줘 </div> <div class=\\\"example-item\\\" data-command=\\\"선택한 셀을 굵게 만들고 파란색으로 바꿔줘\\\"> <strong>서식 지정:</strong> 선택한 셀을 굵게 만들고 파란색으로 바꿔줘 </div> <div class=\\\"example-item\\\" data-command=\\\"B열 기준으로 내림차순 정렬해줘\\\"> <strong>정렬:</strong> B열 기준으로 내림차순 정렬해줘 </div> <div class=\\\"example-item\\\" data-command=\\\"값이 100보다 큰 셀은 녹색 배경으로 표시해줘\\\"> <strong>조건부 서식:</strong> 값이 100보다 큰 셀은 녹색 배경으로 표시해줘 </div> <div class=\\\"example-item\\\" data-command=\\\"A1:B10 데이터로 막대 차트를 만들어줘\\\"> <strong>차트 생성:</strong> A1:B10 데이터로 막대 차트를 만들어줘 </div> <div class=\\\"example-item\\\" data-command=\\\"D열을 중국어로 번역해서 다음 열에 추가해줘\\\"> <strong>번역:</strong> D열을 중국어로 번역해서 다음 열에 추가해줘 </div> <div class=\\\"example-item\\\" data-command=\\\"A열의 10000개 행을 영어로 번역해줘\\\"> <strong>대용량 번역:</strong> A열의 10000개 행을 영어로 번역해줘 </div> <div class=\\\"example-item\\\" data-command=\\\"D2:D170 사이의 빈 행을 제거해줘\\\"> <strong>빈 행 제거:</strong> D2:D170 사이의 빈 행을 제거해줘 </div> <div class=\\\"example-item\\\" data-command=\\\"C열의 오른쪽 테두리를 없애줘\\\"> <strong>테두리 제거:</strong> C열의 오른쪽 테두리를 없애줘 </div> </div> </div> <div class=\\\"settings-section\\\"> <button id=\\\"settingsButton\\\" class=\\\"settings-link\\\">설정</button> </div> </div> </main> </body> </html>\";\n// Exports\nexport default code;","/*\n * Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n * See LICENSE in the project root for license information.\n */\n\n/* global document, Office, Excel */\n\n// Voice recognition variables\nlet recognition = null;\nlet isListening = false;\n\n// Backend API URL - Vercel 배포 후 실제 URL로 변경해주세요\n// 디버그용 URL 사용 중 (CORS 문제 해결 후 원래 URL로 변경 필요)\nconst API_PROXY_URL = process.env.API_PROXY_URL || 'https://excel-addon-backend.vercel.app/api/openai-proxy-debug';\n\nOffice.onReady((info) => {\n  if (info.host === Office.HostType.Excel) {\n    // Test backend connection\n    testBackendConnection();\n    \n    // Assign event handlers\n    document.getElementById(\"executeButton\").onclick = executeCommand;\n    document.getElementById(\"clearButton\").onclick = clearInput;\n    document.getElementById(\"voiceButton\").onclick = toggleVoiceRecognition;\n    document.getElementById(\"settingsButton\").onclick = showSettings;\n\n    // Handle example clicks\n    const exampleItems = document.querySelectorAll('.example-item');\n    exampleItems.forEach(item => {\n      item.onclick = function() {\n        setCommand(this.getAttribute('data-command'));\n      };\n    });\n\n    // Handle Enter key\n    document.getElementById('commandInput').addEventListener('keydown', function(event) {\n      if (event.key === 'Enter' && !event.shiftKey) {\n        event.preventDefault();\n        executeCommand();\n      }\n    });\n\n    // Initialize speech recognition\n    initializeSpeechRecognition();\n  }\n});\n\n// Initialize speech recognition\nfunction initializeSpeechRecognition() {\n  const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n  \n  if (!SpeechRecognition) {\n    showStatus('음성 인식이 지원되지 않는 브라우저입니다.', 'error');\n    document.getElementById('voiceButton').disabled = true;\n    document.getElementById('voiceStatus').textContent = '음성 인식 미지원';\n    return null;\n  }\n  \n  recognition = new SpeechRecognition();\n  recognition.lang = 'ko-KR';\n  recognition.continuous = false;\n  recognition.interimResults = true;\n  recognition.maxAlternatives = 1;\n  \n  recognition.onstart = function() {\n    isListening = true;\n    document.getElementById('voiceButton').classList.add('listening');\n    document.getElementById('voiceStatus').textContent = '듣고 있습니다... 말씀해주세요';\n    document.getElementById('voiceStatus').classList.add('listening');\n  };\n  \n  recognition.onresult = function(event) {\n    const transcript = event.results[0][0].transcript;\n    document.getElementById('commandInput').value = transcript;\n    \n    if (event.results[0].isFinal) {\n      document.getElementById('voiceStatus').textContent = '음성 인식 완료';\n    } else {\n      document.getElementById('voiceStatus').textContent = '인식중: ' + transcript;\n    }\n  };\n  \n  recognition.onerror = function(event) {\n    isListening = false;\n    document.getElementById('voiceButton').classList.remove('listening');\n    document.getElementById('voiceStatus').classList.remove('listening');\n    \n    let errorMessage = '음성 인식 오류';\n    switch(event.error) {\n      case 'no-speech':\n        errorMessage = '음성이 감지되지 않았습니다.';\n        break;\n      case 'audio-capture':\n        errorMessage = '마이크를 찾을 수 없습니다.';\n        break;\n      case 'not-allowed':\n        errorMessage = '마이크 권한이 거부되었습니다.';\n        break;\n      case 'network':\n        errorMessage = '네트워크 오류가 발생했습니다.';\n        break;\n    }\n    \n    document.getElementById('voiceStatus').textContent = errorMessage;\n    showStatus(errorMessage, 'error');\n  };\n  \n  recognition.onend = function() {\n    isListening = false;\n    document.getElementById('voiceButton').classList.remove('listening');\n    document.getElementById('voiceStatus').classList.remove('listening');\n    \n    const command = document.getElementById('commandInput').value.trim();\n    if (command) {\n      document.getElementById('voiceStatus').textContent = '음성 인식 완료. 실행 버튼을 눌러주세요.';\n      document.getElementById('executeButton').focus();\n    } else {\n      document.getElementById('voiceStatus').textContent = '음성 인식 준비';\n    }\n  };\n  \n  return recognition;\n}\n\n// Toggle voice recognition\nfunction toggleVoiceRecognition() {\n  if (!recognition) {\n    recognition = initializeSpeechRecognition();\n    if (!recognition) return;\n  }\n  \n  if (isListening) {\n    recognition.stop();\n  } else {\n    recognition.start();\n  }\n}\n\n// Execute command\n// Add flag to prevent duplicate execution\nlet isExecuting = false;\n\nasync function executeCommand() {\n  // Prevent duplicate execution\n  if (isExecuting) {\n    console.log('Command already executing, ignoring duplicate call');\n    return;\n  }\n  \n  const command = document.getElementById('commandInput').value.trim();\n  \n  if (!command) {\n    showStatus('명령어를 입력해주세요.', 'error');\n    return;\n  }\n  \n  isExecuting = true;\n  \n  const button = document.getElementById('executeButton');\n  const originalText = '<span class=\"ms-Button-label\">실행</span>';\n  \n  // Show loading state\n  button.disabled = true;\n  button.innerHTML = '<span class=\"loading\"></span><span>처리중...</span>';\n  showStatus('명령을 처리하고 있습니다...', 'info');\n  \n  try {\n    await Excel.run(async (context) => {\n      console.log('Starting Excel.run for command execution');\n      // Get current worksheet context\n      const worksheet = context.workbook.worksheets.getActiveWorksheet();\n      const range = context.workbook.getSelectedRange();\n      \n      // Load necessary properties\n      worksheet.load(\"name\");\n      range.load([\"address\", \"rowIndex\", \"columnIndex\", \"rowCount\", \"columnCount\"]);\n      \n      // Get sheet data for context\n      const usedRange = worksheet.getUsedRange();\n      usedRange.load([\"rowCount\", \"columnCount\", \"values\"]);\n      \n      await context.sync();\n      \n      // Build sheet context\n      const sheetContext = {\n        sheetName: worksheet.name,\n        activeRange: {\n          address: range.address,\n          row: range.rowIndex + 1,\n          column: range.columnIndex + 1,\n          numRows: range.rowCount,\n          numColumns: range.columnCount\n        },\n        lastRow: usedRange ? usedRange.rowCount : 0,\n        lastColumn: usedRange ? usedRange.columnCount : 0,\n        headers: [],\n        dataRange: usedRange ? usedRange.values : [],\n        isLargeSheet: usedRange && usedRange.rowCount > 1000\n      };\n      \n      // Extract headers\n      if (usedRange && usedRange.rowCount > 0) {\n        const headerRow = usedRange.values[0];\n        for (let i = 0; i < headerRow.length; i++) {\n          sheetContext.headers.push({\n            column: i + 1,\n            columnLetter: getColumnLetter(i),\n            label: headerRow[i] ? headerRow[i].toString() : ''\n          });\n        }\n      }\n      \n      // Call OpenAI API to interpret the command\n      const interpretation = await callOpenAI(command, sheetContext);\n      \n      if (!interpretation.success) {\n        throw new Error(interpretation.error);\n      }\n      \n      // Execute the interpreted command\n      console.log('Executing interpreted command...');\n      const result = await executeInterpretedCommand(context, interpretation.data);\n      console.log('Command execution result:', result);\n      \n      // Reset button and show success\n      button.disabled = false;\n      button.innerHTML = originalText;\n      \n      if (result.success) {\n        console.log('Operation completed successfully:', result);\n        showStatus(result.message || '명령이 성공적으로 실행되었습니다.', 'success');\n        setTimeout(() => {\n          document.getElementById('commandInput').value = '';\n        }, 1000);\n      } else {\n        console.error('Operation failed:', result);\n        showStatus(result.error || '명령 실행에 실패했습니다.', 'error');\n      }\n      \n      console.log('Excel.run completing...');\n    });\n    console.log('Excel.run completed');\n  } catch (error) {\n    console.error('Error in executeCommand:', error);\n    console.error('Error stack:', error.stack);\n    button.disabled = false;\n    button.innerHTML = originalText;\n    showStatus('오류가 발생했습니다: ' + error.message, 'error');\n  } finally {\n    // Reset execution flag\n    isExecuting = false;\n  }\n}\n\n// Call OpenAI API through proxy\nasync function callOpenAI(command, sheetContext) {\n  try {\n    const response = await fetch(API_PROXY_URL, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        command: command,\n        sheetContext: sheetContext\n      })\n    });\n    \n    if (!response.ok) {\n      const errorData = await response.json();\n      return {\n        success: false,\n        error: errorData.error || `서버 오류 (${response.status})`\n      };\n    }\n    \n    return await response.json();\n    \n  } catch (error) {\n    console.error('Proxy API Error:', error);\n    return {\n      success: false,\n      error: `API 요청 오류: ${error.toString()}`\n    };\n  }\n}\n\n// Original OpenAI API call (no longer used)\nasync function callOpenAIDirectly(command, sheetContext) {\n  const systemPrompt = `You are an Excel assistant that interprets natural language commands and returns JSON instructions for Excel operations.\n  \nAvailable operations:\n1. merge: Merge cells\n2. sum: Sum values in a range or column\n3. average: Calculate average\n4. count: Count cells (can count all, numbers only, or based on conditions)\n5. format: Format cells (bold, italic, font color, background color, etc.)\n6. sort: Sort data\n7. filter: Filter data\n8. insert: Insert rows/columns\n9. delete: Delete rows/columns\n10. formula: Add custom formula\n11. chart: Create chart\n12. conditional_format: Add conditional formatting\n13. translate: Translate cell contents to another language\n14. compress: Remove empty rows in a specific column range\n15. retry_translation: Retry translation for failed items marked as [번역 실패]\n\nFor sum operation:\n- If user mentions a column by header name (e.g., \"totalToken 열의 합\", \"totalToken 합산\"), return: { \"sumType\": \"column\", \"columnName\": \"totalToken\" }\n- The system will automatically find the column, determine the data range, and place the sum in the first empty cell below the data\n- For specific range sum, use: { \"sourceRange\": \"A2:A10\" }\n- For adding sum below selection, use: { \"addNewRow\": true }\n\nCurrent sheet context:\n- Active range: ${sheetContext.activeRange.address}\n- Sheet dimensions: ${sheetContext.lastRow} rows x ${sheetContext.lastColumn} columns\n- Headers: ${sheetContext.headers.map(h => `Column ${h.columnLetter}: \"${h.label}\"`).join(', ')}\n\nReturn JSON in this format:\n{\n  \"operation\": \"operation_name\",\n  \"parameters\": {\n    // operation-specific parameters\n  }\n}`;\n\n  const url = 'https://api.openai.com/v1/chat/completions';\n  \n  const payload = {\n    model: 'gpt-4.1-2025-04-14',\n    messages: [\n      { role: 'system', content: systemPrompt },\n      { role: 'user', content: `Current Excel state:\nHeaders: ${sheetContext.headers.map(h => `Column ${h.columnLetter}: \"${h.label}\"`).join(', ')}\nActive sheet: ${sheetContext.sheetName}\n\nUser command: ${command}` }\n    ],\n    temperature: 0.3,\n    max_tokens: 500\n  };\n  \n  try {\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${OPENAI_API_KEY}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(payload)\n    });\n    \n    if (!response.ok) {\n      const errorData = await response.json();\n      if (response.status === 429) {\n        return {\n          success: false,\n          error: 'API 요청 한도를 초과했습니다. 잠시 후 다시 시도해주세요.'\n        };\n      } else if (response.status === 401) {\n        return {\n          success: false,\n          error: 'API 키가 유효하지 않습니다. API 키를 확인해주세요.'\n        };\n      }\n      return {\n        success: false,\n        error: `API 오류 (${response.status}): ${errorData.error?.message || '알 수 없는 오류'}`\n      };\n    }\n    \n    const result = await response.json();\n    \n    if (result.choices && result.choices[0]) {\n      const content = result.choices[0].message.content;\n      try {\n        const parsedCommand = JSON.parse(content);\n        return {\n          success: true,\n          data: parsedCommand\n        };\n      } catch (parseError) {\n        console.error('Failed to parse AI response:', content);\n        return {\n          success: false,\n          error: 'AI 응답을 해석할 수 없습니다. 다시 시도해주세요.'\n        };\n      }\n    } else {\n      return {\n        success: false,\n        error: 'OpenAI API 응답을 파싱할 수 없습니다.'\n      };\n    }\n  } catch (error) {\n    console.error('OpenAI API Error:', error);\n    return {\n      success: false,\n      error: `OpenAI API 오류: ${error.toString()}`\n    };\n  }\n}\n\n// Execute the interpreted command\nasync function executeInterpretedCommand(context, commandData) {\n  const operation = commandData.operation;\n  const params = commandData.parameters || {};\n  \n  console.log(`[${new Date().toISOString()}] Executing operation: ${operation} with params:`, params);\n  \n  try {\n    switch (operation) {\n      case 'merge':\n        return await executeMerge(context, params);\n      \n      case 'sum':\n        return await executeSum(context, params);\n      \n      case 'average':\n        return await executeAverage(context, params);\n      \n      case 'count':\n        return await executeCount(context, params);\n      \n      case 'format':\n        return await executeFormat(context, params);\n      \n      case 'sort':\n        return await executeSort(context, params);\n      \n      case 'filter':\n        return await executeFilter(context, params);\n      \n      case 'insert':\n        return await executeInsert(context, params);\n      \n      case 'delete':\n        return await executeDelete(context, params);\n      \n      case 'formula':\n        return await executeFormula(context, params);\n      \n      case 'chart':\n        return await executeChart(context, params);\n      \n      case 'conditional_format':\n        return await executeConditionalFormat(context, params);\n      \n      case 'translate':\n        return await executeTranslate(context, params);\n      \n      case 'compress':\n        return await executeCompress(context, params);\n      \n      case 'retry_translation':\n        return await executeRetryTranslation(context, params);\n      \n      case 'remove_border':\n        return await executeRemoveBorder(context, params);\n      \n      default:\n        return {\n          success: false,\n          error: `알 수 없는 작업: ${operation}`\n        };\n    }\n  } catch (error) {\n    console.error('Error in executeInterpretedCommand:', error);\n    return {\n      success: false,\n      error: `작업 실행 중 오류: ${error.message || error.toString()}`\n    };\n  }\n}\n\n// Merge cells\nasync function executeMerge(context, params) {\n  console.log('executeMerge started with params:', params);\n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  const range = params.range ? worksheet.getRange(params.range) : context.workbook.getSelectedRange();\n  \n  console.log('Loading range address...');\n  // Load address property before using it\n  range.load('address');\n  await context.sync();\n  \n  console.log('Range address loaded:', range.address);\n  const rangeAddress = range.address;\n  \n  console.log('Merging range...');\n  range.merge();\n  await context.sync();\n  \n  console.log('Merge completed successfully');\n  return {\n    success: true,\n    message: `${rangeAddress} 범위가 병합되었습니다.`\n  };\n}\n\n// Sum values\nasync function executeSum(context, params) {\n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  \n  // If column name is provided, find the column and create range\n  if (params.columnName || params.sumType === 'column') {\n    console.log('Sum by column name:', params.columnName);\n    \n    // Get sheet context to find column by name\n    const usedRange = worksheet.getUsedRange();\n    usedRange.load([\"values\", \"rowCount\", \"columnCount\"]);\n    await context.sync();\n    \n    if (!usedRange || usedRange.rowCount === 0) {\n      return {\n        success: false,\n        error: '시트에 데이터가 없습니다.'\n      };\n    }\n    \n    // Find column by header name\n    const headers = usedRange.values[0];\n    let columnIndex = -1;\n    let columnLetter = '';\n    \n    for (let i = 0; i < headers.length; i++) {\n      if (headers[i] && headers[i].toString().toLowerCase() === (params.columnName || '').toLowerCase()) {\n        columnIndex = i;\n        columnLetter = getColumnLetter(i);\n        break;\n      }\n    }\n    \n    if (columnIndex === -1) {\n      return {\n        success: false,\n        error: `\"${params.columnName}\" 열을 찾을 수 없습니다.`\n      };\n    }\n    \n    // Find last row with data in this column\n    let lastDataRow = 1; // Start from row 2 (after header)\n    for (let row = 1; row < usedRange.rowCount; row++) {\n      if (usedRange.values[row][columnIndex] !== null && \n          usedRange.values[row][columnIndex] !== undefined && \n          usedRange.values[row][columnIndex] !== '') {\n        lastDataRow = row + 1; // +1 because Excel rows are 1-indexed\n      }\n    }\n    \n    // Create range from row 2 to last data row\n    const rangeAddress = `${columnLetter}2:${columnLetter}${lastDataRow}`;\n    const sumCell = worksheet.getCell(lastDataRow, columnIndex); // getCell uses 0-based row index\n    \n    console.log(`Summing range: ${rangeAddress}, placing result in row ${lastDataRow + 1}`);\n    \n    sumCell.formulas = [[`=SUM(${rangeAddress})`]];\n    await context.sync();\n    \n    sumCell.load([\"values\", \"address\"]);\n    await context.sync();\n    \n    return {\n      success: true,\n      message: `${params.columnName} 열의 합계를 ${sumCell.address}에 계산했습니다: ${formatNumber(sumCell.values[0][0])}`,\n      value: sumCell.values[0][0]\n    };\n  }\n  \n  // Original logic for range-based sum\n  const sourceRange = params.sourceRange ? worksheet.getRange(params.sourceRange) : context.workbook.getSelectedRange();\n  \n  sourceRange.load([\"columnIndex\", \"rowIndex\", \"rowCount\", \"address\"]);\n  await context.sync();\n  \n  if (params.addNewRow === true) {\n    // Add new row for sum\n    const column = sourceRange.columnIndex;\n    const lastRow = sourceRange.rowIndex + sourceRange.rowCount;\n    const newCell = worksheet.getCell(lastRow, column);\n    \n    newCell.formulas = [[`=SUM(${sourceRange.address})`]];\n    await context.sync();\n    \n    newCell.load([\"values\", \"address\"]);\n    await context.sync();\n    \n    return {\n      success: true,\n      message: `${newCell.address}에 합계를 계산했습니다: ${formatNumber(newCell.values[0][0])}`,\n      value: newCell.values[0][0]\n    };\n  } else if (params.targetCell) {\n    // Sum to specific cell\n    const targetCell = worksheet.getRange(params.targetCell);\n    targetCell.formulas = [[`=SUM(${sourceRange.address})`]];\n    await context.sync();\n    \n    targetCell.load([\"values\", \"address\"]);\n    await context.sync();\n    \n    return {\n      success: true,\n      message: `${targetCell.address}에 합계를 계산했습니다: ${formatNumber(targetCell.values[0][0])}`,\n      value: targetCell.values[0][0]\n    };\n  } else {\n    // Default: add sum below the range\n    const column = sourceRange.columnIndex;\n    const lastRow = sourceRange.rowIndex + sourceRange.rowCount;\n    const newCell = worksheet.getCell(lastRow, column);\n    \n    newCell.formulas = [[`=SUM(${sourceRange.address})`]];\n    await context.sync();\n    \n    newCell.load([\"values\", \"address\"]);\n    await context.sync();\n    \n    return {\n      success: true,\n      message: `${newCell.address}에 합계를 계산했습니다: ${formatNumber(newCell.values[0][0])}`,\n      value: newCell.values[0][0]\n    };\n  }\n}\n\n// Calculate average\nasync function executeAverage(context, params) {\n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  let sourceRange;\n  let rangeDescription = '';\n  \n  try {\n    // Handle different average types\n    if (params.averageType === 'column') {\n      if (params.column) {\n        // Column specified by letter (e.g., \"C\")\n        const usedRange = worksheet.getUsedRange();\n        if (!usedRange) {\n          return { success: false, error: '데이터가 없습니다.' };\n        }\n        \n        usedRange.load([\"rowCount\", \"columnCount\"]);\n        await context.sync();\n        \n        const columnIndex = params.column.charCodeAt(0) - 65;\n        if (columnIndex < 0 || columnIndex >= usedRange.columnCount) {\n          return { success: false, error: '유효하지 않은 열입니다.' };\n        }\n        \n        // Get column data starting from row 2 (skip header)\n        if (usedRange.rowCount > 1) {\n          sourceRange = worksheet.getRangeByIndexes(1, columnIndex, usedRange.rowCount - 1, 1);\n          rangeDescription = `${params.column}열`;\n        } else {\n          return { success: false, error: '평균을 계산할 데이터가 없습니다.' };\n        }\n      } else if (params.columnName) {\n        // Column specified by header name\n        const headers = await getHeaders(context);\n        const columnInfo = headers.find(h => h.label === params.columnName);\n        \n        if (!columnInfo) {\n          return { success: false, error: `\"${params.columnName}\" 열을 찾을 수 없습니다.` };\n        }\n        \n        const usedRange = worksheet.getUsedRange();\n        usedRange.load([\"rowCount\"]);\n        await context.sync();\n        \n        if (usedRange.rowCount > 1) {\n          sourceRange = worksheet.getRangeByIndexes(1, columnInfo.column - 1, usedRange.rowCount - 1, 1);\n          rangeDescription = `\"${params.columnName}\" 열`;\n        } else {\n          return { success: false, error: '평균을 계산할 데이터가 없습니다.' };\n        }\n      }\n    } else if (params.averageType === 'row') {\n      // Row average (e.g., \"3행 평균\")\n      const usedRange = worksheet.getUsedRange();\n      if (!usedRange) {\n        return { success: false, error: '데이터가 없습니다.' };\n      }\n      \n      usedRange.load([\"rowCount\", \"columnCount\"]);\n      await context.sync();\n      \n      const rowIndex = params.row - 1; // Convert to 0-based\n      if (rowIndex < 0 || rowIndex >= usedRange.rowCount) {\n        return { success: false, error: '유효하지 않은 행입니다.' };\n      }\n      \n      // Get entire row data\n      sourceRange = worksheet.getRangeByIndexes(rowIndex, 0, 1, usedRange.columnCount);\n      rangeDescription = `${params.row}행`;\n    } else if (params.sourceRange) {\n      // Specific range (e.g., \"C1:C100\")\n      sourceRange = worksheet.getRange(params.sourceRange);\n      rangeDescription = params.sourceRange;\n    } else {\n      // Default: use selected range\n      sourceRange = context.workbook.getSelectedRange();\n      rangeDescription = '선택한 범위';\n    }\n    \n    sourceRange.load([\"columnIndex\", \"rowIndex\", \"rowCount\", \"columnCount\", \"address\"]);\n    await context.sync();\n    \n    // Determine where to place the result\n    let targetCell;\n    if (params.targetCell) {\n      targetCell = worksheet.getRange(params.targetCell);\n    } else if (params.averageType === 'row') {\n      // For row average, place result at the end of the row\n      const lastColumn = sourceRange.columnIndex + sourceRange.columnCount;\n      targetCell = worksheet.getCell(sourceRange.rowIndex, lastColumn);\n    } else {\n      // For column average or range, place result below\n      const lastRow = sourceRange.rowIndex + sourceRange.rowCount;\n      targetCell = worksheet.getCell(lastRow, sourceRange.columnIndex);\n    }\n    \n    // Apply AVERAGE formula\n    targetCell.formulas = [[`=AVERAGE(${sourceRange.address})`]];\n    targetCell.numberFormat = [[\"#,##0.00\"]]; // Format as number with 2 decimal places\n    await context.sync();\n    \n    targetCell.load([\"values\", \"address\"]);\n    await context.sync();\n    \n    return {\n      success: true,\n      message: `${rangeDescription}의 평균을 ${targetCell.address}에 계산했습니다: ${formatNumber(targetCell.values[0][0])}`,\n      value: targetCell.values[0][0]\n    };\n    \n  } catch (error) {\n    console.error('Error in executeAverage:', error);\n    return {\n      success: false,\n      error: `평균 계산 중 오류 발생: ${error.message}`\n    };\n  }\n}\n\n// Count cells\nasync function executeCount(context, params) {\n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  const sourceRange = params.sourceRange ? worksheet.getRange(params.sourceRange) : context.workbook.getSelectedRange();\n  \n  sourceRange.load([\"address\"]);\n  await context.sync();\n  \n  let formula;\n  if (params.countType === 'countif' && params.condition !== undefined) {\n    let criteria;\n    if (params.operator === 'contains') {\n      criteria = `\"*${params.condition}*\"`;\n    } else if (params.operator === 'equals') {\n      criteria = typeof params.condition === 'string' ? `\"${params.condition}\"` : params.condition;\n    } else if (params.operator && ['>', '<', '>=', '<=', '<>'].includes(params.operator)) {\n      criteria = `\"${params.operator}${params.condition}\"`;\n    } else {\n      if (typeof params.condition === 'string') {\n        criteria = `\"*${params.condition}*\"`;\n      } else {\n        criteria = params.condition;\n      }\n    }\n    formula = `=COUNTIF(${sourceRange.address}, ${criteria})`;\n  } else if (params.countType === 'counta') {\n    formula = `=COUNTA(${sourceRange.address})`;\n  } else {\n    formula = `=COUNT(${sourceRange.address})`;\n  }\n  \n  let resultCell;\n  if (params.targetCell) {\n    resultCell = worksheet.getRange(params.targetCell);\n  } else {\n    const usedRange = worksheet.getUsedRange();\n    await context.sync();\n    \n    const lastRow = usedRange ? usedRange.rowCount : 1;\n    const lastCol = usedRange ? usedRange.columnCount : 1;\n    resultCell = worksheet.getCell(lastRow, lastCol);\n  }\n  \n  resultCell.formulas = [[formula]];\n  await context.sync();\n  \n  resultCell.load(\"values\");\n  await context.sync();\n  \n  return {\n    success: true,\n    message: params.countType === 'countif' ? \n      `\"${params.condition}\"을(를) 포함하는 셀의 개수: ${formatNumber(resultCell.values[0][0])}개` :\n      `개수를 계산했습니다: ${formatNumber(resultCell.values[0][0])}개`,\n    value: resultCell.values[0][0]\n  };\n}\n\n// Format cells\nasync function executeFormat(context, params) {\n  console.log('executeFormat called with params:', params);\n  \n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  const range = params.range ? worksheet.getRange(params.range) : context.workbook.getSelectedRange();\n  \n  range.load(\"format\");\n  await context.sync();\n  \n  if (params.bold !== undefined) {\n    range.format.font.bold = params.bold;\n  }\n  \n  if (params.italic !== undefined) {\n    range.format.font.italic = params.italic;\n  }\n  \n  if (params.fontSize) {\n    range.format.font.size = params.fontSize;\n  }\n  \n  if (params.fontColor) {\n    range.format.font.color = params.fontColor;\n  }\n  \n  if (params.backgroundColor) {\n    range.format.fill.color = params.backgroundColor;\n  }\n  \n  if (params.horizontalAlignment) {\n    range.format.horizontalAlignment = params.horizontalAlignment === 'left' ? 'Left' :\n                                     params.horizontalAlignment === 'center' ? 'Center' :\n                                     params.horizontalAlignment === 'right' ? 'Right' : 'General';\n  }\n  \n  if (params.numberFormat) {\n    // Handle specific format types\n    let format = params.numberFormat;\n    if (format === 'number' || format === '숫자') {\n      format = '#,##0';\n    } else if (format === 'currency' || format === '원화' || format === 'won' || format === '통화') {\n      format = '₩#,##0';\n    } else if (format === 'currency_decimal' || format === '원화_소수') {\n      format = '₩#,##0.00';\n    } else if (format === 'percentage' || format === '퍼센트' || format === '백분율') {\n      format = '0%';\n    } else if (format === 'percentage_decimal' || format === '퍼센트_소수') {\n      format = '0.00%';\n    } else if (format === 'date' || format === '날짜') {\n      format = 'yyyy-mm-dd';\n    } else if (format === 'time' || format === '시간') {\n      format = 'hh:mm:ss';\n    } else if (format === 'text' || format === '텍스트') {\n      format = '@';\n    } else if (format === 'general' || format === '일반') {\n      format = 'General';\n    }\n    \n    // Set number format for the range\n    range.numberFormat = format;\n  }\n  \n  await context.sync();\n  \n  return {\n    success: true,\n    message: '서식이 적용되었습니다.'\n  };\n}\n\n// Sort data\nasync function executeSort(context, params) {\n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  const range = params.range ? worksheet.getRange(params.range) : worksheet.getUsedRange();\n  \n  const column = params.column || 1;\n  const ascending = params.ascending !== undefined ? params.ascending : true;\n  \n  range.sort.apply([\n    {\n      key: column - 1, // Excel API uses 0-based index\n      ascending: ascending\n    }\n  ]);\n  \n  await context.sync();\n  \n  const columnLetter = getColumnLetter(column - 1);\n  \n  return {\n    success: true,\n    message: `${columnLetter}열 기준으로 ${ascending ? '오름차순' : '내림차순'} 정렬되었습니다.`\n  };\n}\n\n// Create chart\nasync function executeChart(context, params) {\n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  const sourceData = params.range ? worksheet.getRange(params.range) : context.workbook.getSelectedRange();\n  \n  console.log('Creating chart with params:', params);\n  \n  // Load the source data to ensure it's available\n  sourceData.load([\"address\", \"values\"]);\n  await context.sync();\n  \n  console.log('Chart data range:', sourceData.address);\n  \n  // Determine chart type\n  let chartType;\n  if (params.chartType === 'bar' || params.chartType === '막대') {\n    chartType = Excel.ChartType.columnClustered;\n  } else if (params.chartType === 'line' || params.chartType === '선') {\n    chartType = Excel.ChartType.line;\n  } else if (params.chartType === 'pie' || params.chartType === '원') {\n    chartType = Excel.ChartType.pie;\n  } else if (params.chartType === 'scatter' || params.chartType === '분산형') {\n    chartType = Excel.ChartType.xyscatter;\n  } else {\n    // Default to column chart\n    chartType = Excel.ChartType.columnClustered;\n  }\n  \n  // Create the chart\n  const chart = worksheet.charts.add(chartType, sourceData, Excel.ChartSeriesBy.auto);\n  \n  // Set chart properties\n  chart.title.text = params.title || '차트';\n  chart.height = 300;\n  chart.width = 400;\n  \n  // Position the chart\n  chart.left = params.offsetX || 100;\n  chart.top = params.offsetY || 100;\n  \n  // Set legend position\n  chart.legend.position = Excel.ChartLegendPosition.bottom;\n  chart.legend.visible = true;\n  \n  await context.sync();\n  \n  return {\n    success: true,\n    message: `${sourceData.address} 범위로 ${params.chartType || '막대'} 차트가 생성되었습니다.`\n  };\n}\n\n// Add conditional formatting\nasync function executeConditionalFormat(context, params) {\n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  const range = params.range ? worksheet.getRange(params.range) : worksheet.getUsedRange();\n  \n  console.log('Applying conditional format with params:', params);\n  \n  // Simply apply conditional format to the entire range\n  // Excel will automatically skip non-numeric cells for numeric comparisons\n  const conditionalFormat = range.conditionalFormats.add(Excel.ConditionalFormatType.cellValue);\n  \n  // Set the rule based on condition\n  if (params.condition === 'greater_than' && params.value !== undefined) {\n    conditionalFormat.cellValue.rule = {\n      formula1: params.value.toString(),\n      operator: Excel.ConditionalCellValueOperator.greaterThan\n    };\n  } else if (params.condition === 'less_than' && params.value !== undefined) {\n    conditionalFormat.cellValue.rule = {\n      formula1: params.value.toString(),\n      operator: Excel.ConditionalCellValueOperator.lessThan\n    };\n  } else if (params.condition === 'equal_to' && params.value !== undefined) {\n    conditionalFormat.cellValue.rule = {\n      formula1: params.value.toString(),\n      operator: Excel.ConditionalCellValueOperator.equalTo\n    };\n  } else if (params.condition === 'text_contains' && params.value !== undefined) {\n    conditionalFormat.cellValue.rule = {\n      formula1: params.value.toString(),\n      operator: Excel.ConditionalCellValueOperator.containsText\n    };\n  } else {\n    // Default to greater than\n    conditionalFormat.cellValue.rule = {\n      formula1: (params.value || 0).toString(),\n      operator: Excel.ConditionalCellValueOperator.greaterThan\n    };\n  }\n  \n  // Set the format\n  conditionalFormat.cellValue.format.fill.color = params.backgroundColor || \"#00FF00\";\n  if (params.fontColor) {\n    conditionalFormat.cellValue.format.font.color = params.fontColor;\n  }\n  if (params.bold) {\n    conditionalFormat.cellValue.format.font.bold = true;\n  }\n  \n  await context.sync();\n  \n  return {\n    success: true,\n    message: `조건부 서식이 적용되었습니다. (${params.condition} ${params.value || ''})`\n  };\n}\n\n// Translate column contents\nasync function executeTranslate(context, params) {\n  console.log('executeTranslate called with params:', params);\n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  \n  if (!params.targetLanguage) {\n    return { success: false, error: '대상 언어를 지정해주세요.' };\n  }\n  \n  let sourceRange;\n  let targetColumnIndex;\n  \n  if (params.sourceRange) {\n    // Handle column ranges like \"C:C\" by intersecting with used range\n    if (params.sourceRange.match(/^[A-Z]+:[A-Z]+$/)) {\n      console.log('Handling column range:', params.sourceRange);\n      const usedRange = worksheet.getUsedRange();\n      if (!usedRange) {\n        return { success: false, error: '번역할 데이터가 없습니다.' };\n      }\n      \n      usedRange.load([\"rowCount\", \"columnCount\"]);\n      await context.sync();\n      \n      console.log('Used range:', {\n        rowCount: usedRange.rowCount,\n        columnCount: usedRange.columnCount\n      });\n      \n      // Get the column letter from the range (e.g., \"C\" from \"C:C\")\n      const columnLetter = params.sourceRange.split(':')[0];\n      const columnIndex = columnLetter.charCodeAt(0) - 65;\n      \n      // Get only the used portion of the column, starting from row 2 (skip header)\n      if (usedRange.rowCount > 1) {\n        sourceRange = worksheet.getRangeByIndexes(1, columnIndex, usedRange.rowCount - 1, 1);\n      } else {\n        return { success: false, error: '번역할 데이터가 없습니다.' };\n      }\n      \n      // Handle target range similarly\n      if (params.targetRange && params.targetRange.match(/^[A-Z]+:[A-Z]+$/)) {\n        const targetColumnLetter = params.targetRange.split(':')[0];\n        targetColumnIndex = targetColumnLetter.charCodeAt(0) - 65;\n        console.log('Target column calculation:', {\n          targetRange: params.targetRange,\n          targetColumnLetter,\n          targetColumnIndex\n        });\n      } else {\n        // If no target specified, use next column\n        targetColumnIndex = columnIndex + 1;\n        console.log('Using next column as target:', {\n          sourceColumnIndex: columnIndex,\n          targetColumnIndex\n        });\n      }\n    } else {\n      // Handle specific ranges like \"B2:B40\"\n      sourceRange = worksheet.getRange(params.sourceRange);\n      \n      // Parse target column if specified\n      if (params.targetRange) {\n        if (params.targetRange.match(/^[A-Z]+:[A-Z]+$/)) {\n          // Extract column letter from targetRange like \"E:E\"\n          const targetColumnLetter = params.targetRange.split(':')[0];\n          targetColumnIndex = targetColumnLetter.charCodeAt(0) - 65;\n          console.log('Target column parsed from targetRange:', {\n            targetRange: params.targetRange,\n            targetColumnLetter,\n            targetColumnIndex\n          });\n        }\n      }\n    }\n  } else if (params.sourceColumn) {\n    const columnIndex = params.sourceColumn.charCodeAt(0) - 65;\n    const usedRange = worksheet.getUsedRange();\n    usedRange.load([\"rowCount\"]);\n    await context.sync();\n    \n    if (usedRange.rowCount > 1) {\n      sourceRange = worksheet.getRangeByIndexes(1, columnIndex, usedRange.rowCount - 1, 1);\n    } else {\n      return { success: false, error: '번역할 데이터가 없습니다.' };\n    }\n    \n    targetColumnIndex = params.targetColumn === 'next' ? columnIndex + 1 :\n                       params.targetColumn ? params.targetColumn.charCodeAt(0) - 65 : columnIndex + 1;\n  } else {\n    return { success: false, error: '번역할 열을 지정해주세요.' };\n  }\n  \n  sourceRange.load([\"values\", \"rowIndex\", \"columnIndex\", \"rowCount\"]);\n  await context.sync();\n  \n  console.log('Source range loaded:', {\n    rowIndex: sourceRange.rowIndex,\n    columnIndex: sourceRange.columnIndex,\n    rowCount: sourceRange.rowCount,\n    values: sourceRange.values ? `${sourceRange.values.length} rows` : 'null'\n  });\n  \n  const sourceValues = sourceRange.values;\n  if (!sourceValues || sourceValues.length === 0) {\n    return { success: false, error: '번역할 데이터가 없습니다.' };\n  }\n  \n  const translations = [];\n  const batchSize = 20;\n  \n  // Translate in batches\n  for (let i = 0; i < sourceValues.length; i += batchSize) {\n    const batch = sourceValues.slice(i, Math.min(i + batchSize, sourceValues.length));\n    const batchTexts = batch.map(row => row[0]).filter(text => text);\n    \n    if (batchTexts.length > 0) {\n      const translatedBatch = await translateBatch(batchTexts, params.targetLanguage, params.sourceLanguage);\n      \n      // Check if translatedBatch is valid\n      if (!translatedBatch || !Array.isArray(translatedBatch)) {\n        console.error('Invalid translation batch received:', translatedBatch);\n        // Mark all as translation failed\n        for (let j = 0; j < batch.length; j++) {\n          if (batch[j][0]) {\n            translations.push([{ text: '번역 실패', isError: true }]);\n          } else {\n            translations.push([{ text: '', isError: false }]);\n          }\n        }\n      } else {\n        console.log('Processing translation batch:', {\n          batchLength: batch.length,\n          translatedBatchLength: translatedBatch.length,\n          sampleTranslations: translatedBatch.slice(0, 3),\n          firstTranslation: translatedBatch[0],\n          translationType: typeof translatedBatch[0],\n          rawData: JSON.stringify(translatedBatch.slice(0, 3))\n        });\n        \n        let translationIndex = 0;\n        for (let j = 0; j < batch.length; j++) {\n          if (batch[j][0]) {\n            const translatedText = translatedBatch[translationIndex] || '';\n            // Check if translation is empty or failed\n            if (!translatedText || translatedText.trim() === '') {\n              translations.push([{ text: '번역 실패', isError: true }]);\n            } else {\n              translations.push([{ text: translatedText, isError: false }]);\n            }\n            if (j < 3) {\n              console.log(`Translation ${j}: \"${batch[j][0]}\" -> \"${translatedText}\"`);\n            }\n            translationIndex++;\n          } else {\n            // Keep empty rows as empty\n            translations.push([{ text: '', isError: false }]);\n          }\n        }\n      }\n    } else {\n      for (let j = 0; j < batch.length; j++) {\n        translations.push([{ text: '', isError: false }]);\n      }\n    }\n    \n    // Show progress\n    if (i % 100 === 0 && i > 0) {\n      showStatus(`번역 중... ${Math.round((i / sourceValues.length) * 100)}%`, 'info');\n    }\n  }\n  \n  // Write translations\n  console.log('Writing translations to target column:', {\n    rowIndex: sourceRange.rowIndex,\n    targetColumnIndex: targetColumnIndex || sourceRange.columnIndex + 1,\n    translationsCount: translations.length,\n    sampleTranslations: translations.slice(0, 3).map(t => t[0])\n  });\n  console.log('First 5 translations raw:', JSON.stringify(translations.slice(0, 5)));\n  console.log('Translation content check:', {\n    first: translations[0] ? translations[0][0] : 'null',\n    second: translations[1] ? translations[1][0] : 'null',\n    third: translations[2] ? translations[2][0] : 'null',\n    isEmpty: translations[0] && translations[0][0] === ''\n  });\n  \n  // DEBUG: Check if translations contain original text instead of translations\n  console.log('DEBUG: Comparing source and translations:');\n  for (let i = 0; i < Math.min(5, translations.length); i++) {\n    console.log(`  [${i}] Source: \"${sourceValues[i][0]}\" -> Translation: \"${translations[i][0]}\"`);\n  }\n  \n  // Ensure targetColumnIndex is set correctly\n  if (targetColumnIndex === undefined) {\n    // If no target column specified, use the next column after source\n    targetColumnIndex = sourceRange.columnIndex + 1;\n    console.log('No target column specified, using next column:', targetColumnIndex);\n  }\n  \n  const targetRange = worksheet.getRangeByIndexes(\n    sourceRange.rowIndex,\n    targetColumnIndex,\n    translations.length,\n    1\n  );\n  \n  targetRange.load([\"address\", \"values\"]);\n  await context.sync();\n  console.log('Target range address:', targetRange.address);\n  console.log('Existing target values (first 3):', targetRange.values.slice(0, 3));\n  \n  // Clear existing values first\n  targetRange.clear(Excel.ClearApplyTo.contents);\n  await context.sync();\n  console.log('Target range cleared');\n  \n  // Ensure translations are properly formatted as 2D array\n  console.log('Setting target range values:', {\n    translationsLength: translations.length,\n    firstTranslation: translations[0],\n    isArray: Array.isArray(translations),\n    is2DArray: Array.isArray(translations[0])\n  });\n  \n  // Process translations and prepare values\n  const stringTranslations = [];\n  const errorRows = [];\n  \n  for (let i = 0; i < translations.length; i++) {\n    const translation = translations[i][0];\n    if (translation && typeof translation === 'object') {\n      stringTranslations.push([translation.text]);\n      if (translation.isError) {\n        errorRows.push(i);\n      }\n    } else {\n      // Handle legacy format\n      stringTranslations.push([String(translation || '')]);\n    }\n  }\n  \n  console.log('String translations (first 3):', stringTranslations.slice(0, 3));\n  console.log('Error rows:', errorRows.length, 'rows marked as errors');\n  \n  // Set the values\n  targetRange.values = stringTranslations;\n  await context.sync();\n  \n  // Apply error styling to failed translations\n  if (errorRows.length > 0) {\n    for (const rowIndex of errorRows) {\n      const errorCell = targetRange.getCell(rowIndex, 0);\n      errorCell.format.fill.color = \"#FFE6E6\"; // Light red background\n      errorCell.format.font.color = \"#CC0000\"; // Dark red text\n      errorCell.format.font.bold = true;\n    }\n    await context.sync();\n  }\n  \n  console.log('Translations written to Excel with error styling applied');\n  \n  // Verify the values were actually written\n  targetRange.load([\"values\", \"text\", \"valueTypes\"]);\n  await context.sync();\n  console.log('Verification - Target range:', {\n    address: targetRange.address,\n    values: targetRange.values.slice(0, 3),\n    text: targetRange.text.slice(0, 3),\n    valueTypes: targetRange.valueTypes.slice(0, 3),\n    actualFirstValue: targetRange.values[0] ? targetRange.values[0][0] : 'null',\n    firstThreeValues: [\n      targetRange.values[0] ? targetRange.values[0][0] : 'empty',\n      targetRange.values[1] ? targetRange.values[1][0] : 'empty',\n      targetRange.values[2] ? targetRange.values[2][0] : 'empty'\n    ]\n  });\n  \n  // Try alternative method - set each cell individually for debugging\n  if (translations.length > 0) {\n    const isEmpty = !targetRange.values[0] || !targetRange.values[0][0] || targetRange.values[0][0] === '';\n    console.log('Checking if values are empty:', {\n      isEmpty,\n      firstValue: targetRange.values[0] ? targetRange.values[0][0] : 'null',\n      firstValueLength: targetRange.values[0] && targetRange.values[0][0] ? targetRange.values[0][0].length : 0\n    });\n    \n    if (isEmpty) {\n      console.log('Values not visible, trying individual cell approach...');\n      // Try setting just the first few cells individually\n      for (let i = 0; i < Math.min(3, translations.length); i++) {\n        const cellRow = sourceRange.rowIndex + i;\n        const cellCol = targetColumnIndex || sourceRange.columnIndex + 1;\n        const cell = worksheet.getCell(cellRow, cellCol);\n        const cellValue = stringTranslations[i][0];\n        \n        console.log(`Setting cell (${cellRow},${cellCol}) to: \"${cellValue}\"`);\n        cell.values = [[cellValue]];\n        \n        await context.sync();\n        \n        // Verify it was set\n        cell.load(\"values\");\n        await context.sync();\n        console.log(`Cell ${i} after setting:`, cell.values[0][0]);\n      }\n    }\n  }\n  \n  // Add header\n  const headerCell = worksheet.getCell(0, targetColumnIndex || sourceRange.columnIndex + 1);\n  const sourceHeaderCell = worksheet.getCell(0, sourceRange.columnIndex);\n  sourceHeaderCell.load(\"values\");\n  await context.sync();\n  \n  headerCell.values = [[`${sourceHeaderCell.values[0][0]} (${params.targetLanguage})`]];\n  await context.sync();\n  \n  return {\n    success: true,\n    message: `번역이 완료되었습니다. (${sourceValues.length}개 항목)`\n  };\n}\n\n// Translate a batch of texts through proxy\nasync function translateBatch(texts, targetLanguage, sourceLanguage) {\n  try {\n    console.log('translateBatch called with', texts.length, 'texts');\n    const response = await fetch(API_PROXY_URL, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        command: `Translate these items to ${targetLanguage}: ${texts.join(', ')}`,\n        sheetContext: {\n          operation: 'translate_batch',\n          texts: texts,\n          targetLanguage: targetLanguage,\n          sourceLanguage: sourceLanguage\n        }\n      })\n    });\n    \n    console.log('Translation response status:', response.status);\n    \n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    \n    const result = await response.json();\n    console.log('Translation result:', result);\n    \n    if (result.success && result.data && result.data.translations) {\n      console.log('Translations received:', result.data.translations.length);\n      console.log('First 3 translations from API:', result.data.translations.slice(0, 3));\n      console.log('Raw translations data:', JSON.stringify(result.data.translations.slice(0, 5)));\n      return result.data.translations;\n    } else if (result.error) {\n      console.error('Translation API error:', result.error);\n      throw new Error(result.error);\n    } else {\n      console.error('Invalid translation response structure:', result);\n      throw new Error('번역 응답을 받을 수 없습니다.');\n    }\n  } catch (error) {\n    console.error('Translation error:', error);\n    return texts.map(() => '');\n  }\n}\n\n// Helper functions\nfunction getColumnLetter(columnIndex) {\n  let columnLetter = '';\n  let tempIndex = columnIndex;\n  \n  while (tempIndex >= 0) {\n    columnLetter = String.fromCharCode((tempIndex % 26) + 65) + columnLetter;\n    tempIndex = Math.floor(tempIndex / 26) - 1;\n  }\n  \n  return columnLetter;\n}\n\nfunction formatNumber(value) {\n  if (typeof value === 'number') {\n    if (Number.isInteger(value)) {\n      return value.toLocaleString('ko-KR');\n    } else {\n      return value.toLocaleString('ko-KR', { minimumFractionDigits: 0, maximumFractionDigits: 2 });\n    }\n  }\n  return value;\n}\n\nfunction showStatus(message, type) {\n  const status = document.getElementById('status');\n  status.textContent = message;\n  status.className = 'status-message ' + type;\n  status.style.display = 'block';\n  \n  if (window.statusTimeout) {\n    clearTimeout(window.statusTimeout);\n  }\n  \n  if (type === 'success') {\n    window.statusTimeout = setTimeout(() => {\n      status.style.display = 'none';\n    }, 5000);\n  }\n}\n\nfunction clearInput() {\n  document.getElementById('commandInput').value = '';\n  document.getElementById('status').style.display = 'none';\n}\n\nfunction setCommand(command) {\n  document.getElementById('commandInput').value = command;\n  document.getElementById('commandInput').focus();\n}\n\nfunction showSettings() {\n  showStatus('이 애드인은 보안 서버를 통해 AI 기능을 제공합니다. 별도의 API 키 설정이 필요하지 않습니다.', 'info');\n}\n\n// Test backend connection\nasync function testBackendConnection() {\n  try {\n    console.log('Testing backend connection...');\n    const testUrl = 'https://excel-addon-backend.vercel.app/api/test';\n    \n    const response = await fetch(testUrl, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({ test: true })\n    });\n    \n    console.log('Test response status:', response.status);\n    console.log('Test response headers:', response.headers);\n    \n    const data = await response.json();\n    console.log('Test response data:', data);\n    \n    showStatus('백엔드 연결 테스트 성공', 'success');\n  } catch (error) {\n    console.error('Backend test error:', error);\n    showStatus('백엔드 연결 테스트 실패: ' + error.message, 'error');\n  }\n}\n\n// Additional operations (compress, filter, insert, delete, formula, retry_translation)\n// These would need to be implemented based on Excel JavaScript API capabilities\n\nasync function executeCompress(context, params) {\n  // Implementation would be similar to Google Sheets version\n  // but using Excel JavaScript API\n  return {\n    success: false,\n    error: '이 기능은 현재 구현 중입니다.'\n  };\n}\n\nasync function executeFilter(context, params) {\n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  const range = params.range ? worksheet.getRange(params.range) : worksheet.getUsedRange();\n  \n  // Apply autofilter\n  range.worksheet.autoFilter.apply(range);\n  \n  await context.sync();\n  \n  return {\n    success: true,\n    message: '필터가 적용되었습니다.'\n  };\n}\n\nasync function executeInsert(context, params) {\n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  const type = params.type || 'row';\n  const position = params.position || 1;\n  const count = params.count || 1;\n  \n  if (type === 'row') {\n    const range = worksheet.getRangeByIndexes(position - 1, 0, count, 1);\n    range.insert(Excel.InsertShiftDirection.down);\n  } else {\n    const range = worksheet.getRangeByIndexes(0, position - 1, 1, count);\n    range.insert(Excel.InsertShiftDirection.right);\n  }\n  \n  await context.sync();\n  \n  return {\n    success: true,\n    message: `${count}개의 ${type === 'row' ? '행' : '열'}이 삽입되었습니다.`\n  };\n}\n\nasync function executeDelete(context, params) {\n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  const type = params.type || 'row';\n  const position = params.position || 1;\n  const count = params.count || 1;\n  \n  if (type === 'row') {\n    const range = worksheet.getRangeByIndexes(position - 1, 0, count, 1);\n    range.delete(Excel.DeleteShiftDirection.up);\n  } else {\n    const range = worksheet.getRangeByIndexes(0, position - 1, 1, count);\n    range.delete(Excel.DeleteShiftDirection.left);\n  }\n  \n  await context.sync();\n  \n  return {\n    success: true,\n    message: `${count}개의 ${type === 'row' ? '행' : '열'}이 삭제되었습니다.`\n  };\n}\n\nasync function executeFormula(context, params) {\n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  const range = params.range ? worksheet.getRange(params.range) : context.workbook.getSelectedRange();\n  \n  if (!params.formula) {\n    return { success: false, error: '수식을 지정해주세요.' };\n  }\n  \n  range.formulas = [[params.formula]];\n  await context.sync();\n  \n  return {\n    success: true,\n    message: '수식이 적용되었습니다.'\n  };\n}\n\nasync function executeRetryTranslation(context, params) {\n  // Implementation would be similar to Google Sheets version\n  // but using Excel JavaScript API\n  return {\n    success: false,\n    error: '이 기능은 현재 구현 중입니다.'\n  };\n}\n\nasync function executeRemoveBorder(context, params) {\n  console.log('executeRemoveBorder called with params:', params);\n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  \n  try {\n    let targetRange;\n    \n    // Determine the range to apply border removal\n    if (params.range) {\n      // Handle special case for entire sheet\n      if (params.range === 'all' || params.range === '전체') {\n        console.log('Removing borders from entire sheet');\n        // Use getUsedRangeOrNullObject to get the actual used range\n        const usedRange = worksheet.getUsedRangeOrNullObject();\n        usedRange.load(\"isNullObject\");\n        await context.sync();\n        \n        if (usedRange.isNullObject) {\n          console.log('No used range in the sheet, nothing to remove borders from');\n          return { success: true, message: '시트에 데이터가 없어 테두리를 제거할 필요가 없습니다.' };\n        } else {\n          // Expand the used range to ensure we get all cells that might have borders\n          usedRange.load([\"rowCount\", \"columnCount\", \"rowIndex\", \"columnIndex\"]);\n          await context.sync();\n          \n          // Get a slightly larger range to ensure we capture all borders\n          const expandedRows = Math.min(usedRange.rowCount + 100, 1048576);\n          const expandedCols = Math.min(usedRange.columnCount + 20, 16384);\n          targetRange = worksheet.getRangeByIndexes(0, 0, expandedRows, expandedCols);\n        }\n      } else if (params.range.match(/^[A-Z]+:[A-Z]+$/)) {\n        // Handle column ranges like \"C:C\"\n        console.log('Handling column range:', params.range);\n        const usedRange = worksheet.getUsedRange();\n        if (!usedRange) {\n          return { success: false, error: '데이터가 없습니다.' };\n        }\n        \n        usedRange.load([\"rowCount\", \"columnCount\"]);\n        await context.sync();\n        \n        // Get the column letter from the range (e.g., \"C\" from \"C:C\")\n        const columnLetter = params.range.split(':')[0];\n        const columnIndex = columnLetter.charCodeAt(0) - 65;\n        \n        // Get the entire used portion of the column\n        targetRange = worksheet.getRangeByIndexes(0, columnIndex, usedRange.rowCount, 1);\n      } else {\n        // Handle specific ranges like \"A1:B10\"\n        targetRange = worksheet.getRange(params.range);\n      }\n    } else {\n      // If no range specified, use the selected range\n      targetRange = context.workbook.getSelectedRange();\n    }\n    \n    // Load the range\n    targetRange.load([\"address\", \"rowCount\", \"columnCount\"]);\n    await context.sync();\n    \n    console.log('Target range for border removal:', {\n      address: targetRange.address,\n      rowCount: targetRange.rowCount,\n      columnCount: targetRange.columnCount\n    });\n    \n    // Determine which borders to remove\n    const borderType = params.borderType || 'all';\n    \n    if (borderType === 'all') {\n      // Remove all borders\n      targetRange.format.borders.getItem(Excel.BorderIndex.edgeLeft).style = Excel.BorderLineStyle.none;\n      targetRange.format.borders.getItem(Excel.BorderIndex.edgeRight).style = Excel.BorderLineStyle.none;\n      targetRange.format.borders.getItem(Excel.BorderIndex.edgeTop).style = Excel.BorderLineStyle.none;\n      targetRange.format.borders.getItem(Excel.BorderIndex.edgeBottom).style = Excel.BorderLineStyle.none;\n      targetRange.format.borders.getItem(Excel.BorderIndex.insideHorizontal).style = Excel.BorderLineStyle.none;\n      targetRange.format.borders.getItem(Excel.BorderIndex.insideVertical).style = Excel.BorderLineStyle.none;\n    } else {\n      // Remove specific border\n      switch (borderType) {\n        case 'right':\n          targetRange.format.borders.getItem(Excel.BorderIndex.edgeRight).style = Excel.BorderLineStyle.none;\n          break;\n        case 'left':\n          targetRange.format.borders.getItem(Excel.BorderIndex.edgeLeft).style = Excel.BorderLineStyle.none;\n          break;\n        case 'top':\n          targetRange.format.borders.getItem(Excel.BorderIndex.edgeTop).style = Excel.BorderLineStyle.none;\n          break;\n        case 'bottom':\n          targetRange.format.borders.getItem(Excel.BorderIndex.edgeBottom).style = Excel.BorderLineStyle.none;\n          break;\n        default:\n          return { success: false, error: `알 수 없는 테두리 유형: ${borderType}` };\n      }\n    }\n    \n    await context.sync();\n    \n    return {\n      success: true,\n      message: `${targetRange.address} 범위의 ${borderType === 'all' ? '모든' : borderType} 테두리가 제거되었습니다.`\n    };\n    \n  } catch (error) {\n    console.error('Error in executeRemoveBorder:', error);\n    return {\n      success: false,\n      error: `테두리 제거 중 오류 발생: ${error.message}`\n    };\n  }\n}"],"names":["__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","m","g","globalThis","this","Function","e","window","o","obj","prop","Object","prototype","hasOwnProperty","call","scriptUrl","importScripts","location","document","currentScript","tagName","toUpperCase","src","scripts","getElementsByTagName","length","i","test","Error","replace","p","b","baseURI","self","href","URL","t","r","Symbol","n","iterator","toStringTag","c","Generator","u","create","_regeneratorDefine2","f","y","G","v","a","d","bind","l","TypeError","done","value","return","GeneratorFunction","GeneratorFunctionPrototype","getPrototypeOf","setPrototypeOf","__proto__","displayName","_regenerator","w","defineProperty","_invoke","enumerable","configurable","writable","asyncGeneratorStep","Promise","resolve","then","_asyncToGenerator","arguments","apply","_next","_throw","recognition","isListening","API_PROXY_URL","process","initializeSpeechRecognition","SpeechRecognition","webkitSpeechRecognition","lang","continuous","interimResults","maxAlternatives","onstart","getElementById","classList","add","textContent","onresult","event","transcript","results","isFinal","onerror","remove","errorMessage","error","showStatus","onend","trim","focus","disabled","toggleVoiceRecognition","stop","start","Office","onReady","info","host","HostType","Excel","_testBackendConnection","testBackendConnection","onclick","executeCommand","clearInput","showSettings","querySelectorAll","forEach","item","command","getAttribute","addEventListener","key","shiftKey","preventDefault","isExecuting","_executeCommand","_callee2","button","originalText","_t","_context2","console","log","innerHTML","run","_ref","_callee","context","worksheet","range","usedRange","sheetContext","headerRow","interpretation","result","_context","workbook","worksheets","getActiveWorksheet","getSelectedRange","load","getUsedRange","sync","sheetName","name","activeRange","address","row","rowIndex","column","columnIndex","numRows","rowCount","numColumns","columnCount","lastRow","lastColumn","headers","dataRange","values","isLargeSheet","push","columnLetter","getColumnLetter","label","toString","callOpenAI","success","executeInterpretedCommand","data","message","setTimeout","_x40","stack","_x","_x2","_callOpenAI","_callee3","response","errorData","_t2","_context3","fetch","method","body","JSON","stringify","ok","json","concat","status","_x5","_x6","_executeInterpretedCommand","_callee5","commandData","operation","params","_t5","_t6","_context5","parameters","Date","toISOString","executeMerge","executeSum","executeAverage","executeCount","executeFormat","executeSort","executeFilter","executeInsert","executeDelete","executeFormula","executeChart","executeConditionalFormat","executeTranslate","executeCompress","executeRetryTranslation","executeRemoveBorder","_x7","_x8","_executeMerge","_callee6","rangeAddress","_context6","getRange","merge","_x9","_x0","_executeSum","_callee7","lastDataRow","sumCell","sourceRange","newCell","targetCell","_column","_lastRow","_newCell","_context7","columnName","sumType","toLowerCase","getCell","formulas","formatNumber","addNewRow","_x1","_x10","_executeAverage","_callee8","rangeDescription","columnInfo","_usedRange","_usedRange2","_t7","_context8","averageType","charCodeAt","getRangeByIndexes","getHeaders","find","h","numberFormat","_x11","_x12","_executeCount","_callee9","formula","criteria","resultCell","lastCol","_context9","countType","condition","operator","includes","_x13","_x14","_executeFormat","_callee0","format","_context0","bold","font","italic","fontSize","size","fontColor","color","backgroundColor","fill","horizontalAlignment","_x15","_x16","_executeSort","_callee1","ascending","_context1","sort","_x17","_x18","_executeChart","_callee10","sourceData","chartType","chart","_context10","ChartType","columnClustered","line","pie","xyscatter","charts","ChartSeriesBy","auto","title","text","height","width","left","offsetX","top","offsetY","legend","position","ChartLegendPosition","bottom","visible","_x19","_x20","_executeConditionalFormat","_callee11","conditionalFormat","_context11","conditionalFormats","ConditionalFormatType","cellValue","rule","formula1","ConditionalCellValueOperator","greaterThan","lessThan","equalTo","containsText","_x21","_x22","_executeTranslate","_callee12","targetColumnIndex","targetColumnLetter","_targetColumnLetter","_columnIndex","_usedRange3","sourceValues","translations","batchSize","batch","batchTexts","translatedBatch","j","translationIndex","_j","translatedText","_j2","_i","targetRange","stringTranslations","errorRows","_i2","translation","_iterator","_step","errorCell","isEmpty","_i3","cellRow","cellCol","cell","headerCell","sourceHeaderCell","_context12","targetLanguage","match","split","sourceColumnIndex","sourceColumn","targetColumn","slice","Math","min","map","filter","translateBatch","sourceLanguage","Array","isArray","batchLength","translatedBatchLength","sampleTranslations","firstTranslation","translationType","_typeof","rawData","isError","round","translationsCount","first","second","third","clear","ClearApplyTo","contents","translationsLength","is2DArray","String","_createForOfIteratorHelper","s","err","valueTypes","actualFirstValue","firstThreeValues","firstValue","firstValueLength","_x23","_x24","_x25","_translateBatch","_callee13","texts","_t8","_context13","join","tempIndex","fromCharCode","floor","Number","isInteger","toLocaleString","minimumFractionDigits","maximumFractionDigits","type","className","style","display","statusTimeout","clearTimeout","_callee14","_t9","_context14","_x26","_x27","_executeCompress","_callee15","_context15","_x28","_x29","_executeFilter","_callee16","_context16","autoFilter","_x30","_x31","_executeInsert","_callee17","count","_context17","insert","InsertShiftDirection","down","right","_x32","_x33","_executeDelete","_callee18","_context18","delete","DeleteShiftDirection","up","_x34","_x35","_executeFormula","_callee19","_context19","_x36","_x37","_executeRetryTranslation","_callee20","_context20","_x38","_x39","_executeRemoveBorder","_callee21","expandedRows","expandedCols","_usedRange4","borderType","_t0","_t1","_context21","getUsedRangeOrNullObject","isNullObject","borders","getItem","BorderIndex","edgeLeft","BorderLineStyle","none","edgeRight","edgeTop","edgeBottom","insideHorizontal","insideVertical"],"sourceRoot":""}