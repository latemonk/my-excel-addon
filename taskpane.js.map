{"version":3,"file":"taskpane.js","mappings":"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","sources":["webpack://worksai-excel-addon/webpack/bootstrap","webpack://worksai-excel-addon/webpack/runtime/global","webpack://worksai-excel-addon/webpack/runtime/hasOwnProperty shorthand","webpack://worksai-excel-addon/webpack/runtime/publicPath","webpack://worksai-excel-addon/webpack/runtime/jsonp chunk loading","webpack://worksai-excel-addon/./src/taskpane/taskpane.html","webpack://worksai-excel-addon/./src/taskpane/taskpane.js"],"sourcesContent":["// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript && document.currentScript.tagName.toUpperCase() === 'SCRIPT')\n\t\tscriptUrl = document.currentScript.src;\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) {\n\t\t\tvar i = scripts.length - 1;\n\t\t\twhile (i > -1 && (!scriptUrl || !/^http(s?):/.test(scriptUrl))) scriptUrl = scripts[i--].src;\n\t\t}\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/^blob:/, \"\").replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","__webpack_require__.b = document.baseURI || self.location.href;\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t926: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n// no on chunks loaded\n\n// no jsonp function","// Imports\nvar ___HTML_LOADER_IMPORT_0___ = new URL(\"./taskpane.css\", import.meta.url);\n// Module\nvar code = \"<!DOCTYPE html> <html> <head> <meta charset=\\\"UTF-8\\\"/> <meta http-equiv=\\\"X-UA-Compatible\\\" content=\\\"IE=Edge\\\"/> <meta name=\\\"viewport\\\" content=\\\"width=device-width,initial-scale=1\\\"> <title>웍스AI 엑셀 도우미</title> <\" + \"script src=\\\"https://appsforoffice.microsoft.com/lib/1.1/hosted/office.js\\\"><\" + \"/script> <link rel=\\\"stylesheet\\\" href=\\\"https://static2.sharepointonline.com/files/fabric/office-ui-fabric-js/1.4.0/css/fabric.min.css\\\"/> <link rel=\\\"stylesheet\\\" href=\\\"https://static2.sharepointonline.com/files/fabric/office-ui-fabric-js/1.4.0/css/fabric.components.min.css\\\"/> <link href=\\\"\" + ___HTML_LOADER_IMPORT_0___ + \"\\\" rel=\\\"stylesheet\\\"/> </head> <body class=\\\"ms-font-m ms-welcome ms-Fabric\\\"> <main id=\\\"app-body\\\" class=\\\"ms-welcome__main\\\"> <div class=\\\"container\\\"> <div class=\\\"header-section\\\"> <h2 class=\\\"ms-font-xl\\\" style=\\\"font-weight:700\\\">웍스AI 엑셀 도우미</h2> <p class=\\\"help-text\\\">자연어로 Excel 작업을 요청하세요. (대용량 번역 지원)</p> </div> <div class=\\\"voice-section\\\"> <button id=\\\"voiceButton\\\" class=\\\"voice-button\\\"> <svg width=\\\"24\\\" height=\\\"24\\\" viewBox=\\\"0 0 24 24\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"> <path d=\\\"M12 14c1.66 0 3-1.34 3-3V5c0-1.66-1.34-3-3-3S9 3.34 9 5v6c0 1.66 1.34 3 3 3z\\\"/> <path d=\\\"M17 11c0 2.76-2.24 5-5 5s-5-2.24-5-5H5c0 3.53 2.61 6.43 6 6.92V21h2v-3.08c3.39-.49 6-3.39 6-6.92h-2z\\\"/> </svg> </button> <div class=\\\"voice-status\\\" id=\\\"voiceStatus\\\">음성 인식 준비</div> </div> <div class=\\\"input-container\\\"> <textarea id=\\\"commandInput\\\" placeholder=\\\"예: A1부터 A10까지 합계를 구해줘\\\" rows=\\\"3\\\"></textarea> <div class=\\\"button-container\\\"> <button id=\\\"executeButton\\\" class=\\\"ms-Button ms-Button--primary\\\"> <span class=\\\"ms-Button-label\\\">실행</span> </button> <button id=\\\"clearButton\\\" class=\\\"ms-Button\\\"> <span class=\\\"ms-Button-label\\\">지우기</span> </button> </div> </div> <div id=\\\"status\\\" class=\\\"status-message\\\"></div> <div class=\\\"examples\\\"> <h3>예제 명령어</h3> <div class=\\\"example-list\\\"> <div class=\\\"example-item\\\" data-command=\\\"A1:B5 셀을 병합해줘\\\"> <strong>셀 병합:</strong> A1:B5 셀을 병합해줘 </div> <div class=\\\"example-item\\\" data-command=\\\"A열의 합계를 구해줘\\\"> <strong>합계 계산:</strong> A열의 합계를 구해줘 </div> <div class=\\\"example-item\\\" data-command=\\\"Name 열의 합계를 구해줘\\\"> <strong>레이블로 합계:</strong> Name 열의 합계를 구해줘 </div> <div class=\\\"example-item\\\" data-command=\\\"C열 평균을 구해줘\\\"> <strong>열 평균:</strong> C열 평균을 구해줘 </div> <div class=\\\"example-item\\\" data-command=\\\"3행 평균을 계산해줘\\\"> <strong>행 평균:</strong> 3행 평균을 계산해줘 </div> <div class=\\\"example-item\\\" data-command=\\\"선택한 셀을 굵게 만들고 파란색으로 바꿔줘\\\"> <strong>서식 지정:</strong> 선택한 셀을 굵게 만들고 파란색으로 바꿔줘 </div> <div class=\\\"example-item\\\" data-command=\\\"B열 기준으로 내림차순 정렬해줘\\\"> <strong>정렬:</strong> B열 기준으로 내림차순 정렬해줘 </div> <div class=\\\"example-item\\\" data-command=\\\"값이 100보다 큰 셀은 녹색 배경으로 표시해줘\\\"> <strong>조건부 서식:</strong> 값이 100보다 큰 셀은 녹색 배경으로 표시해줘 </div> <div class=\\\"example-item\\\" data-command=\\\"A1:B10 데이터로 막대 차트를 만들어줘\\\"> <strong>차트 생성:</strong> A1:B10 데이터로 막대 차트를 만들어줘 </div> <div class=\\\"example-item\\\" data-command=\\\"D열을 중국어로 번역해서 다음 열에 추가해줘\\\"> <strong>번역:</strong> D열을 중국어로 번역해서 다음 열에 추가해줘 </div> <div class=\\\"example-item\\\" data-command=\\\"A열의 10000개 행을 영어로 번역해줘\\\"> <strong>대용량 번역:</strong> A열의 10000개 행을 영어로 번역해줘 </div> <div class=\\\"example-item\\\" data-command=\\\"D2:D170 사이의 빈 행을 제거해줘\\\"> <strong>빈 행 제거:</strong> D2:D170 사이의 빈 행을 제거해줘 </div> <div class=\\\"example-item\\\" data-command=\\\"C열의 오른쪽 테두리를 없애줘\\\"> <strong>테두리 제거:</strong> C열의 오른쪽 테두리를 없애줘 </div> </div> </div> <div class=\\\"settings-section\\\"> <button id=\\\"settingsButton\\\" class=\\\"settings-link\\\">설정</button> </div> </div> </main> </body> </html>\";\n// Exports\nexport default code;","/*\n * Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n * See LICENSE in the project root for license information.\n */\n\n/* global document, Office, Excel */\n\n// Voice recognition variables\nlet recognition = null;\nlet isListening = false;\n\n// Backend API URL - Vercel 배포 후 실제 URL로 변경해주세요\n// 디버그용 URL 사용 중 (CORS 문제 해결 후 원래 URL로 변경 필요)\nconst API_PROXY_URL = process.env.API_PROXY_URL || 'https://excel-addon-backend.vercel.app/api/openai-proxy-debug';\n\nOffice.onReady((info) => {\n  if (info.host === Office.HostType.Excel) {\n    // Test backend connection\n    testBackendConnection();\n    \n    // Assign event handlers\n    document.getElementById(\"executeButton\").onclick = executeCommand;\n    document.getElementById(\"clearButton\").onclick = clearInput;\n    document.getElementById(\"voiceButton\").onclick = () => toggleVoiceRecognition();\n    document.getElementById(\"settingsButton\").onclick = showSettings;\n\n    // Handle example clicks\n    const exampleItems = document.querySelectorAll('.example-item');\n    exampleItems.forEach(item => {\n      item.onclick = function() {\n        setCommand(this.getAttribute('data-command'));\n      };\n    });\n\n    // Handle Enter key\n    document.getElementById('commandInput').addEventListener('keydown', function(event) {\n      if (event.key === 'Enter' && !event.shiftKey) {\n        event.preventDefault();\n        executeCommand();\n      }\n    });\n\n    // Initialize speech recognition\n    initializeSpeechRecognition();\n  }\n});\n\n// Initialize speech recognition\nfunction initializeSpeechRecognition() {\n  const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n  \n  if (!SpeechRecognition) {\n    showStatus('음성 인식이 지원되지 않는 브라우저입니다.', 'error');\n    document.getElementById('voiceButton').disabled = true;\n    document.getElementById('voiceStatus').textContent = '음성 인식 미지원';\n    return null;\n  }\n  \n  recognition = new SpeechRecognition();\n  recognition.lang = 'ko-KR';\n  recognition.continuous = false;\n  recognition.interimResults = true;\n  recognition.maxAlternatives = 1;\n  \n  recognition.onstart = function() {\n    isListening = true;\n    document.getElementById('voiceButton').classList.add('listening');\n    document.getElementById('voiceStatus').textContent = '듣고 있습니다... 말씀해주세요';\n    document.getElementById('voiceStatus').classList.add('listening');\n  };\n  \n  recognition.onresult = function(event) {\n    const transcript = event.results[0][0].transcript;\n    document.getElementById('commandInput').value = transcript;\n    \n    if (event.results[0].isFinal) {\n      document.getElementById('voiceStatus').textContent = '음성 인식 완료';\n    } else {\n      document.getElementById('voiceStatus').textContent = '인식중: ' + transcript;\n    }\n  };\n  \n  recognition.onerror = function(event) {\n    isListening = false;\n    document.getElementById('voiceButton').classList.remove('listening');\n    document.getElementById('voiceStatus').classList.remove('listening');\n    \n    let errorMessage = '음성 인식 오류';\n    switch(event.error) {\n      case 'no-speech':\n        errorMessage = '음성이 감지되지 않았습니다.';\n        break;\n      case 'audio-capture':\n        errorMessage = '마이크를 찾을 수 없습니다.';\n        break;\n      case 'not-allowed':\n        errorMessage = '마이크 권한이 거부되었습니다.';\n        break;\n      case 'network':\n        errorMessage = '네트워크 오류가 발생했습니다.';\n        break;\n    }\n    \n    document.getElementById('voiceStatus').textContent = errorMessage;\n    showStatus(errorMessage, 'error');\n  };\n  \n  recognition.onend = function() {\n    isListening = false;\n    document.getElementById('voiceButton').classList.remove('listening');\n    document.getElementById('voiceStatus').classList.remove('listening');\n    \n    const command = document.getElementById('commandInput').value.trim();\n    if (command) {\n      document.getElementById('voiceStatus').textContent = '음성 인식 완료. 실행 버튼을 눌러주세요.';\n      document.getElementById('executeButton').focus();\n    } else {\n      document.getElementById('voiceStatus').textContent = '음성 인식 준비';\n    }\n  };\n  \n  return recognition;\n}\n\n// Toggle voice recognition\nasync function toggleVoiceRecognition() {\n  if (!recognition) {\n    recognition = initializeSpeechRecognition();\n    if (!recognition) return;\n  }\n  \n  if (isListening) {\n    recognition.stop();\n  } else {\n    try {\n      // For Excel add-ins, we need to handle permissions more carefully\n      // First, try to get microphone permission explicitly\n      if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n        try {\n          const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n          // Permission granted, stop the stream immediately as we only needed permission\n          stream.getTracks().forEach(track => track.stop());\n          // Now start speech recognition\n          recognition.start();\n        } catch (err) {\n          console.error('Microphone permission error:', err);\n          if (err.name === 'NotAllowedError' || err.name === 'PermissionDeniedError') {\n            showStatus('마이크 권한이 필요합니다. 브라우저 설정에서 마이크 권한을 허용해주세요.', 'error');\n            document.getElementById('voiceStatus').textContent = '마이크 권한 필요';\n          } else if (err.name === 'NotFoundError') {\n            showStatus('마이크를 찾을 수 없습니다. 마이크가 연결되어 있는지 확인해주세요.', 'error');\n            document.getElementById('voiceStatus').textContent = '마이크 없음';\n          } else {\n            showStatus('음성 인식을 시작할 수 없습니다: ' + err.message, 'error');\n            document.getElementById('voiceStatus').textContent = '오류 발생';\n          }\n        }\n      } else {\n        // Fallback for browsers without getUserMedia\n        recognition.start();\n      }\n    } catch (error) {\n      console.error('Voice recognition start error:', error);\n      showStatus('음성 인식 시작 중 오류가 발생했습니다.', 'error');\n    }\n  }\n}\n\n// Execute command\n// Add flag to prevent duplicate execution\nlet isExecuting = false;\n\nasync function executeCommand() {\n  // Prevent duplicate execution\n  if (isExecuting) {\n    console.log('Command already executing, ignoring duplicate call');\n    return;\n  }\n  \n  const command = document.getElementById('commandInput').value.trim();\n  \n  if (!command) {\n    showStatus('명령어를 입력해주세요.', 'error');\n    return;\n  }\n  \n  isExecuting = true;\n  \n  const button = document.getElementById('executeButton');\n  const originalText = '<span class=\"ms-Button-label\">실행</span>';\n  \n  // Show loading state\n  button.disabled = true;\n  button.innerHTML = '<span class=\"loading\"></span><span>처리중...</span>';\n  showStatus('명령을 처리하고 있습니다...', 'info');\n  \n  try {\n    await Excel.run(async (context) => {\n      console.log('Starting Excel.run for command execution');\n      // Get current worksheet context\n      const worksheet = context.workbook.worksheets.getActiveWorksheet();\n      const range = context.workbook.getSelectedRange();\n      \n      // Load necessary properties\n      worksheet.load(\"name\");\n      range.load([\"address\", \"rowIndex\", \"columnIndex\", \"rowCount\", \"columnCount\"]);\n      \n      // Get sheet data for context\n      const usedRange = worksheet.getUsedRange();\n      usedRange.load([\"rowCount\", \"columnCount\", \"values\"]);\n      \n      await context.sync();\n      \n      // Build sheet context\n      const sheetContext = {\n        sheetName: worksheet.name,\n        activeRange: {\n          address: range.address,\n          row: range.rowIndex + 1,\n          column: range.columnIndex + 1,\n          numRows: range.rowCount,\n          numColumns: range.columnCount\n        },\n        lastRow: usedRange ? usedRange.rowCount : 0,\n        lastColumn: usedRange ? usedRange.columnCount : 0,\n        headers: [],\n        dataRange: usedRange ? usedRange.values : [],\n        isLargeSheet: usedRange && usedRange.rowCount > 1000\n      };\n      \n      // Extract headers\n      if (usedRange && usedRange.rowCount > 0) {\n        const headerRow = usedRange.values[0];\n        for (let i = 0; i < headerRow.length; i++) {\n          sheetContext.headers.push({\n            column: i + 1,\n            columnLetter: getColumnLetter(i),\n            label: headerRow[i] ? headerRow[i].toString() : ''\n          });\n        }\n      }\n      \n      // Call OpenAI API to interpret the command\n      const interpretation = await callOpenAI(command, sheetContext);\n      \n      if (!interpretation.success) {\n        throw new Error(interpretation.error);\n      }\n      \n      // Execute the interpreted command\n      console.log('Executing interpreted command...');\n      const result = await executeInterpretedCommand(context, interpretation.data);\n      console.log('Command execution result:', result);\n      \n      // Reset button and show success\n      button.disabled = false;\n      button.innerHTML = originalText;\n      \n      if (result.success) {\n        console.log('Operation completed successfully:', result);\n        showStatus(result.message || '명령이 성공적으로 실행되었습니다.', 'success');\n        setTimeout(() => {\n          document.getElementById('commandInput').value = '';\n        }, 1000);\n      } else {\n        console.error('Operation failed:', result);\n        showStatus(result.error || '명령 실행에 실패했습니다.', 'error');\n      }\n      \n      console.log('Excel.run completing...');\n    });\n    console.log('Excel.run completed');\n  } catch (error) {\n    console.error('Error in executeCommand:', error);\n    console.error('Error stack:', error.stack);\n    button.disabled = false;\n    button.innerHTML = originalText;\n    showStatus('오류가 발생했습니다: ' + error.message, 'error');\n  } finally {\n    // Reset execution flag\n    isExecuting = false;\n  }\n}\n\n// Call OpenAI API through proxy\nasync function callOpenAI(command, sheetContext) {\n  try {\n    const response = await fetch(API_PROXY_URL, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        command: command,\n        sheetContext: sheetContext\n      })\n    });\n    \n    if (!response.ok) {\n      const errorData = await response.json();\n      return {\n        success: false,\n        error: errorData.error || `서버 오류 (${response.status})`\n      };\n    }\n    \n    return await response.json();\n    \n  } catch (error) {\n    console.error('Proxy API Error:', error);\n    return {\n      success: false,\n      error: `API 요청 오류: ${error.toString()}`\n    };\n  }\n}\n\n// Original OpenAI API call (no longer used)\nasync function callOpenAIDirectly(command, sheetContext) {\n  const systemPrompt = `You are an Excel assistant that interprets natural language commands and returns JSON instructions for Excel operations.\n  \nAvailable operations:\n1. merge: Merge cells\n2. sum: Sum values in a range or column\n3. average: Calculate average\n4. count: Count cells (can count all, numbers only, or based on conditions)\n5. format: Format cells (bold, italic, font color, background color, etc.)\n6. sort: Sort data\n7. filter: Filter data\n8. insert: Insert rows/columns\n9. delete: Delete rows/columns\n10. formula: Add custom formula\n11. chart: Create chart\n12. conditional_format: Add conditional formatting\n13. translate: Translate cell contents to another language\n14. compress: Remove empty rows in a specific column range\n15. retry_translation: Retry translation for failed items marked as [번역 실패]\n\nFor sum operation:\n- If user mentions a column by header name (e.g., \"totalToken 열의 합\", \"totalToken 합산\"), return: { \"sumType\": \"column\", \"columnName\": \"totalToken\" }\n- The system will automatically find the column, determine the data range, and place the sum in the first empty cell below the data\n- For specific range sum, use: { \"sourceRange\": \"A2:A10\" }\n- For adding sum below selection, use: { \"addNewRow\": true }\n\nCurrent sheet context:\n- Active range: ${sheetContext.activeRange.address}\n- Sheet dimensions: ${sheetContext.lastRow} rows x ${sheetContext.lastColumn} columns\n- Headers: ${sheetContext.headers.map(h => `Column ${h.columnLetter}: \"${h.label}\"`).join(', ')}\n\nReturn JSON in this format:\n{\n  \"operation\": \"operation_name\",\n  \"parameters\": {\n    // operation-specific parameters\n  }\n}`;\n\n  const url = 'https://api.openai.com/v1/chat/completions';\n  \n  const payload = {\n    model: 'gpt-4.1-2025-04-14',\n    messages: [\n      { role: 'system', content: systemPrompt },\n      { role: 'user', content: `Current Excel state:\nHeaders: ${sheetContext.headers.map(h => `Column ${h.columnLetter}: \"${h.label}\"`).join(', ')}\nActive sheet: ${sheetContext.sheetName}\n\nUser command: ${command}` }\n    ],\n    temperature: 0.3,\n    max_tokens: 500\n  };\n  \n  try {\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${OPENAI_API_KEY}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(payload)\n    });\n    \n    if (!response.ok) {\n      const errorData = await response.json();\n      if (response.status === 429) {\n        return {\n          success: false,\n          error: 'API 요청 한도를 초과했습니다. 잠시 후 다시 시도해주세요.'\n        };\n      } else if (response.status === 401) {\n        return {\n          success: false,\n          error: 'API 키가 유효하지 않습니다. API 키를 확인해주세요.'\n        };\n      }\n      return {\n        success: false,\n        error: `API 오류 (${response.status}): ${errorData.error?.message || '알 수 없는 오류'}`\n      };\n    }\n    \n    const result = await response.json();\n    \n    if (result.choices && result.choices[0]) {\n      const content = result.choices[0].message.content;\n      try {\n        const parsedCommand = JSON.parse(content);\n        return {\n          success: true,\n          data: parsedCommand\n        };\n      } catch (parseError) {\n        console.error('Failed to parse AI response:', content);\n        return {\n          success: false,\n          error: 'AI 응답을 해석할 수 없습니다. 다시 시도해주세요.'\n        };\n      }\n    } else {\n      return {\n        success: false,\n        error: 'OpenAI API 응답을 파싱할 수 없습니다.'\n      };\n    }\n  } catch (error) {\n    console.error('OpenAI API Error:', error);\n    return {\n      success: false,\n      error: `OpenAI API 오류: ${error.toString()}`\n    };\n  }\n}\n\n// Execute the interpreted command\nasync function executeInterpretedCommand(context, commandData) {\n  // Check if multiple operations\n  if (commandData.operations && Array.isArray(commandData.operations)) {\n    console.log('Executing multiple operations:', commandData.operations.length);\n    const results = [];\n    let successCount = 0;\n    \n    for (const op of commandData.operations) {\n      const result = await executeSingleOperation(context, op.operation, op.parameters || {});\n      results.push(result);\n      if (result.success) successCount++;\n    }\n    \n    return {\n      success: successCount === commandData.operations.length,\n      message: `${successCount}/${commandData.operations.length} 작업이 완료되었습니다.`,\n      results: results\n    };\n  }\n  \n  // Single operation\n  return await executeSingleOperation(context, commandData.operation, commandData.parameters || {});\n}\n\n// Execute a single operation\nasync function executeSingleOperation(context, operation, params) {\n  console.log(`[${new Date().toISOString()}] Executing operation: ${operation} with params:`, params);\n  \n  try {\n    switch (operation) {\n      case 'merge':\n        return await executeMerge(context, params);\n      \n      case 'sum':\n        return await executeSum(context, params);\n      \n      case 'average':\n        return await executeAverage(context, params);\n      \n      case 'count':\n        return await executeCount(context, params);\n      \n      case 'format':\n        return await executeFormat(context, params);\n      \n      case 'sort':\n        return await executeSort(context, params);\n      \n      case 'filter':\n        return await executeFilter(context, params);\n      \n      case 'insert':\n        return await executeInsert(context, params);\n      \n      case 'delete':\n        return await executeDelete(context, params);\n      \n      case 'formula':\n        return await executeFormula(context, params);\n      \n      case 'chart':\n        return await executeChart(context, params);\n      \n      case 'conditional_format':\n        return await executeConditionalFormat(context, params);\n      \n      case 'translate':\n        return await executeTranslate(context, params);\n      \n      case 'compress':\n        return await executeCompress(context, params);\n      \n      case 'retry_translation':\n        return await executeRetryTranslation(context, params);\n      \n      case 'remove_border':\n        return await executeRemoveBorder(context, params);\n      \n      default:\n        return {\n          success: false,\n          error: `알 수 없는 작업: ${operation}`\n        };\n    }\n  } catch (error) {\n    console.error('Error in executeInterpretedCommand:', error);\n    return {\n      success: false,\n      error: `작업 실행 중 오류: ${error.message || error.toString()}`\n    };\n  }\n}\n\n// Merge cells\nasync function executeMerge(context, params) {\n  console.log('executeMerge started with params:', params);\n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  const range = params.range ? worksheet.getRange(params.range) : context.workbook.getSelectedRange();\n  \n  console.log('Loading range address...');\n  // Load address property before using it\n  range.load('address');\n  await context.sync();\n  \n  console.log('Range address loaded:', range.address);\n  const rangeAddress = range.address;\n  \n  console.log('Merging range...');\n  range.merge();\n  await context.sync();\n  \n  console.log('Merge completed successfully');\n  return {\n    success: true,\n    message: `${rangeAddress} 범위가 병합되었습니다.`\n  };\n}\n\n// Sum values\nasync function executeSum(context, params) {\n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  \n  // If column name is provided, find the column and create range\n  if (params.columnName || params.sumType === 'column') {\n    console.log('Sum by column name:', params.columnName);\n    \n    // Get sheet context to find column by name\n    const usedRange = worksheet.getUsedRange();\n    usedRange.load([\"values\", \"rowCount\", \"columnCount\"]);\n    await context.sync();\n    \n    if (!usedRange || usedRange.rowCount === 0) {\n      return {\n        success: false,\n        error: '시트에 데이터가 없습니다.'\n      };\n    }\n    \n    let columnIndex = -1;\n    let columnLetter = '';\n    \n    // Check if columnName is a single letter (column letter like \"D\")\n    if (params.columnName && params.columnName.match(/^[A-Z]$/)) {\n      // Direct column letter reference\n      columnLetter = params.columnName;\n      columnIndex = columnLetter.charCodeAt(0) - 65;\n      console.log('Column letter specified:', columnLetter, 'index:', columnIndex);\n    } else {\n      // Find column by header name\n      const headers = usedRange.values[0];\n      \n      for (let i = 0; i < headers.length; i++) {\n        if (headers[i] && headers[i].toString().toLowerCase() === (params.columnName || '').toLowerCase()) {\n          columnIndex = i;\n          columnLetter = getColumnLetter(i);\n          break;\n        }\n      }\n    }\n    \n    if (columnIndex === -1) {\n      return {\n        success: false,\n        error: `\"${params.columnName}\" 열을 찾을 수 없습니다.`\n      };\n    }\n    \n    // Find last row with data in this column\n    let lastDataRow = 1; // Start from row 2 (after header)\n    for (let row = 1; row < usedRange.rowCount; row++) {\n      if (usedRange.values[row][columnIndex] !== null && \n          usedRange.values[row][columnIndex] !== undefined && \n          usedRange.values[row][columnIndex] !== '') {\n        lastDataRow = row + 1; // +1 because Excel rows are 1-indexed\n      }\n    }\n    \n    // Create range from row 2 to last data row\n    const rangeAddress = `${columnLetter}2:${columnLetter}${lastDataRow}`;\n    const sumCell = worksheet.getCell(lastDataRow, columnIndex); // This will place sum in row lastDataRow+1 (0-based index)\n    \n    console.log(`Summing range: ${rangeAddress}, placing result in row ${lastDataRow + 1}`);\n    \n    sumCell.formulas = [[`=SUM(${rangeAddress})`]];\n    await context.sync();\n    \n    sumCell.load([\"values\", \"address\"]);\n    await context.sync();\n    \n    return {\n      success: true,\n      message: `${params.columnName} 열의 합계를 ${sumCell.address}에 계산했습니다: ${formatNumber(sumCell.values[0][0])}`,\n      value: sumCell.values[0][0]\n    };\n  }\n  \n  // Original logic for range-based sum\n  const sourceRange = params.sourceRange ? worksheet.getRange(params.sourceRange) : context.workbook.getSelectedRange();\n  \n  sourceRange.load([\"columnIndex\", \"rowIndex\", \"rowCount\", \"address\"]);\n  await context.sync();\n  \n  if (params.addNewRow === true) {\n    // Add new row for sum\n    const column = sourceRange.columnIndex;\n    const lastRow = sourceRange.rowIndex + sourceRange.rowCount;\n    const newCell = worksheet.getCell(lastRow, column);\n    \n    newCell.formulas = [[`=SUM(${sourceRange.address})`]];\n    await context.sync();\n    \n    newCell.load([\"values\", \"address\"]);\n    await context.sync();\n    \n    return {\n      success: true,\n      message: `${newCell.address}에 합계를 계산했습니다: ${formatNumber(newCell.values[0][0])}`,\n      value: newCell.values[0][0]\n    };\n  } else if (params.targetCell) {\n    // Sum to specific cell\n    const targetCell = worksheet.getRange(params.targetCell);\n    targetCell.formulas = [[`=SUM(${sourceRange.address})`]];\n    await context.sync();\n    \n    targetCell.load([\"values\", \"address\"]);\n    await context.sync();\n    \n    return {\n      success: true,\n      message: `${targetCell.address}에 합계를 계산했습니다: ${formatNumber(targetCell.values[0][0])}`,\n      value: targetCell.values[0][0]\n    };\n  } else {\n    // Default: add sum below the range\n    const column = sourceRange.columnIndex;\n    const lastRow = sourceRange.rowIndex + sourceRange.rowCount;\n    const newCell = worksheet.getCell(lastRow, column);\n    \n    newCell.formulas = [[`=SUM(${sourceRange.address})`]];\n    await context.sync();\n    \n    newCell.load([\"values\", \"address\"]);\n    await context.sync();\n    \n    return {\n      success: true,\n      message: `${newCell.address}에 합계를 계산했습니다: ${formatNumber(newCell.values[0][0])}`,\n      value: newCell.values[0][0]\n    };\n  }\n}\n\n// Calculate average\nasync function executeAverage(context, params) {\n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  let sourceRange;\n  let rangeDescription = '';\n  \n  try {\n    // Handle different average types\n    if (params.averageType === 'column') {\n      if (params.column) {\n        // Column specified by letter (e.g., \"C\")\n        const usedRange = worksheet.getUsedRange();\n        if (!usedRange) {\n          return { success: false, error: '데이터가 없습니다.' };\n        }\n        \n        usedRange.load([\"rowCount\", \"columnCount\"]);\n        await context.sync();\n        \n        const columnIndex = params.column.charCodeAt(0) - 65;\n        if (columnIndex < 0 || columnIndex >= usedRange.columnCount) {\n          return { success: false, error: '유효하지 않은 열입니다.' };\n        }\n        \n        // Get column data starting from row 2 (skip header)\n        if (usedRange.rowCount > 1) {\n          sourceRange = worksheet.getRangeByIndexes(1, columnIndex, usedRange.rowCount - 1, 1);\n          rangeDescription = `${params.column}열`;\n        } else {\n          return { success: false, error: '평균을 계산할 데이터가 없습니다.' };\n        }\n      } else if (params.columnName) {\n        // Column specified by header name\n        const headers = await getHeaders(context);\n        const columnInfo = headers.find(h => h.label === params.columnName);\n        \n        if (!columnInfo) {\n          return { success: false, error: `\"${params.columnName}\" 열을 찾을 수 없습니다.` };\n        }\n        \n        const usedRange = worksheet.getUsedRange();\n        usedRange.load([\"rowCount\"]);\n        await context.sync();\n        \n        if (usedRange.rowCount > 1) {\n          sourceRange = worksheet.getRangeByIndexes(1, columnInfo.column - 1, usedRange.rowCount - 1, 1);\n          rangeDescription = `\"${params.columnName}\" 열`;\n        } else {\n          return { success: false, error: '평균을 계산할 데이터가 없습니다.' };\n        }\n      }\n    } else if (params.averageType === 'row') {\n      // Row average (e.g., \"3행 평균\")\n      const usedRange = worksheet.getUsedRange();\n      if (!usedRange) {\n        return { success: false, error: '데이터가 없습니다.' };\n      }\n      \n      usedRange.load([\"rowCount\", \"columnCount\"]);\n      await context.sync();\n      \n      const rowIndex = params.row - 1; // Convert to 0-based\n      if (rowIndex < 0 || rowIndex >= usedRange.rowCount) {\n        return { success: false, error: '유효하지 않은 행입니다.' };\n      }\n      \n      // Get entire row data\n      sourceRange = worksheet.getRangeByIndexes(rowIndex, 0, 1, usedRange.columnCount);\n      rangeDescription = `${params.row}행`;\n    } else if (params.sourceRange) {\n      // Specific range (e.g., \"C1:C100\")\n      sourceRange = worksheet.getRange(params.sourceRange);\n      rangeDescription = params.sourceRange;\n    } else {\n      // Default: use selected range\n      sourceRange = context.workbook.getSelectedRange();\n      rangeDescription = '선택한 범위';\n    }\n    \n    sourceRange.load([\"columnIndex\", \"rowIndex\", \"rowCount\", \"columnCount\", \"address\"]);\n    await context.sync();\n    \n    // Determine where to place the result\n    let targetCell;\n    if (params.targetCell) {\n      targetCell = worksheet.getRange(params.targetCell);\n    } else if (params.averageType === 'row') {\n      // For row average, place result at the end of the row\n      const lastColumn = sourceRange.columnIndex + sourceRange.columnCount;\n      targetCell = worksheet.getCell(sourceRange.rowIndex, lastColumn);\n    } else {\n      // For column average or range, place result below\n      const lastRow = sourceRange.rowIndex + sourceRange.rowCount;\n      targetCell = worksheet.getCell(lastRow, sourceRange.columnIndex);\n    }\n    \n    // Apply AVERAGE formula\n    targetCell.formulas = [[`=AVERAGE(${sourceRange.address})`]];\n    targetCell.numberFormat = [[\"#,##0.00\"]]; // Format as number with 2 decimal places\n    await context.sync();\n    \n    targetCell.load([\"values\", \"address\"]);\n    await context.sync();\n    \n    return {\n      success: true,\n      message: `${rangeDescription}의 평균을 ${targetCell.address}에 계산했습니다: ${formatNumber(targetCell.values[0][0])}`,\n      value: targetCell.values[0][0]\n    };\n    \n  } catch (error) {\n    console.error('Error in executeAverage:', error);\n    return {\n      success: false,\n      error: `평균 계산 중 오류 발생: ${error.message}`\n    };\n  }\n}\n\n// Count cells\nasync function executeCount(context, params) {\n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  const sourceRange = params.sourceRange ? worksheet.getRange(params.sourceRange) : context.workbook.getSelectedRange();\n  \n  sourceRange.load([\"address\"]);\n  await context.sync();\n  \n  let formula;\n  if (params.countType === 'countif' && params.condition !== undefined) {\n    let criteria;\n    if (params.operator === 'contains') {\n      criteria = `\"*${params.condition}*\"`;\n    } else if (params.operator === 'equals') {\n      criteria = typeof params.condition === 'string' ? `\"${params.condition}\"` : params.condition;\n    } else if (params.operator && ['>', '<', '>=', '<=', '<>'].includes(params.operator)) {\n      criteria = `\"${params.operator}${params.condition}\"`;\n    } else {\n      if (typeof params.condition === 'string') {\n        criteria = `\"*${params.condition}*\"`;\n      } else {\n        criteria = params.condition;\n      }\n    }\n    formula = `=COUNTIF(${sourceRange.address}, ${criteria})`;\n  } else if (params.countType === 'counta') {\n    formula = `=COUNTA(${sourceRange.address})`;\n  } else {\n    formula = `=COUNT(${sourceRange.address})`;\n  }\n  \n  let resultCell;\n  if (params.targetCell) {\n    resultCell = worksheet.getRange(params.targetCell);\n  } else {\n    const usedRange = worksheet.getUsedRange();\n    await context.sync();\n    \n    const lastRow = usedRange ? usedRange.rowCount : 1;\n    const lastCol = usedRange ? usedRange.columnCount : 1;\n    resultCell = worksheet.getCell(lastRow, lastCol);\n  }\n  \n  resultCell.formulas = [[formula]];\n  await context.sync();\n  \n  resultCell.load(\"values\");\n  await context.sync();\n  \n  return {\n    success: true,\n    message: params.countType === 'countif' ? \n      `\"${params.condition}\"을(를) 포함하는 셀의 개수: ${formatNumber(resultCell.values[0][0])}개` :\n      `개수를 계산했습니다: ${formatNumber(resultCell.values[0][0])}개`,\n    value: resultCell.values[0][0]\n  };\n}\n\n// Format cells\nasync function executeFormat(context, params) {\n  console.log('executeFormat called with params:', params);\n  \n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  const range = params.range ? worksheet.getRange(params.range) : context.workbook.getSelectedRange();\n  \n  range.load(\"format\");\n  await context.sync();\n  \n  if (params.bold !== undefined) {\n    range.format.font.bold = params.bold;\n  }\n  \n  if (params.italic !== undefined) {\n    range.format.font.italic = params.italic;\n  }\n  \n  if (params.fontSize) {\n    range.format.font.size = params.fontSize;\n  }\n  \n  if (params.fontColor) {\n    range.format.font.color = params.fontColor;\n  }\n  \n  if (params.backgroundColor) {\n    range.format.fill.color = params.backgroundColor;\n  }\n  \n  if (params.horizontalAlignment) {\n    range.format.horizontalAlignment = params.horizontalAlignment === 'left' ? 'Left' :\n                                     params.horizontalAlignment === 'center' ? 'Center' :\n                                     params.horizontalAlignment === 'right' ? 'Right' : 'General';\n  }\n  \n  if (params.numberFormat) {\n    // Handle specific format types\n    let format = params.numberFormat;\n    if (format === 'number' || format === '숫자') {\n      format = '#,##0';\n    } else if (format === 'currency' || format === '원화' || format === 'won' || format === '통화') {\n      format = '₩#,##0';\n    } else if (format === 'currency_decimal' || format === '원화_소수') {\n      format = '₩#,##0.00';\n    } else if (format === 'percentage' || format === '퍼센트' || format === '백분율') {\n      format = '0%';\n    } else if (format === 'percentage_decimal' || format === '퍼센트_소수') {\n      format = '0.00%';\n    } else if (format === 'date' || format === '날짜') {\n      format = 'yyyy-mm-dd';\n    } else if (format === 'time' || format === '시간') {\n      format = 'hh:mm:ss';\n    } else if (format === 'text' || format === '텍스트') {\n      format = '@';\n    } else if (format === 'general' || format === '일반') {\n      format = 'General';\n    }\n    \n    // Set number format for the range\n    range.numberFormat = format;\n  }\n  \n  await context.sync();\n  \n  return {\n    success: true,\n    message: '서식이 적용되었습니다.'\n  };\n}\n\n// Sort data\nasync function executeSort(context, params) {\n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  const range = params.range ? worksheet.getRange(params.range) : worksheet.getUsedRange();\n  \n  const column = params.column || 1;\n  const ascending = params.ascending !== undefined ? params.ascending : true;\n  \n  range.sort.apply([\n    {\n      key: column - 1, // Excel API uses 0-based index\n      ascending: ascending\n    }\n  ]);\n  \n  await context.sync();\n  \n  const columnLetter = getColumnLetter(column - 1);\n  \n  return {\n    success: true,\n    message: `${columnLetter}열 기준으로 ${ascending ? '오름차순' : '내림차순'} 정렬되었습니다.`\n  };\n}\n\n// Create chart\nasync function executeChart(context, params) {\n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  const sourceData = params.range ? worksheet.getRange(params.range) : context.workbook.getSelectedRange();\n  \n  console.log('Creating chart with params:', params);\n  \n  // Load the source data to ensure it's available\n  sourceData.load([\"address\", \"values\"]);\n  await context.sync();\n  \n  console.log('Chart data range:', sourceData.address);\n  \n  // Determine chart type\n  let chartType;\n  if (params.chartType === 'bar' || params.chartType === '막대') {\n    chartType = Excel.ChartType.columnClustered;\n  } else if (params.chartType === 'line' || params.chartType === '선') {\n    chartType = Excel.ChartType.line;\n  } else if (params.chartType === 'pie' || params.chartType === '원') {\n    chartType = Excel.ChartType.pie;\n  } else if (params.chartType === 'scatter' || params.chartType === '분산형') {\n    chartType = Excel.ChartType.xyscatter;\n  } else {\n    // Default to column chart\n    chartType = Excel.ChartType.columnClustered;\n  }\n  \n  // Create the chart\n  const chart = worksheet.charts.add(chartType, sourceData, Excel.ChartSeriesBy.auto);\n  \n  // Set chart properties\n  chart.title.text = params.title || '차트';\n  chart.height = 300;\n  chart.width = 400;\n  \n  // Position the chart\n  chart.left = params.offsetX || 100;\n  chart.top = params.offsetY || 100;\n  \n  // Set legend position\n  chart.legend.position = Excel.ChartLegendPosition.bottom;\n  chart.legend.visible = true;\n  \n  await context.sync();\n  \n  return {\n    success: true,\n    message: `${sourceData.address} 범위로 ${params.chartType || '막대'} 차트가 생성되었습니다.`\n  };\n}\n\n// Add conditional formatting\nasync function executeConditionalFormat(context, params) {\n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  const range = params.range ? worksheet.getRange(params.range) : worksheet.getUsedRange();\n  \n  console.log('Applying conditional format with params:', params);\n  \n  // Simply apply conditional format to the entire range\n  // Excel will automatically skip non-numeric cells for numeric comparisons\n  const conditionalFormat = range.conditionalFormats.add(Excel.ConditionalFormatType.cellValue);\n  \n  // Set the rule based on condition\n  if (params.condition === 'greater_than' && params.value !== undefined) {\n    conditionalFormat.cellValue.rule = {\n      formula1: params.value.toString(),\n      operator: Excel.ConditionalCellValueOperator.greaterThan\n    };\n  } else if (params.condition === 'less_than' && params.value !== undefined) {\n    conditionalFormat.cellValue.rule = {\n      formula1: params.value.toString(),\n      operator: Excel.ConditionalCellValueOperator.lessThan\n    };\n  } else if (params.condition === 'equal_to' && params.value !== undefined) {\n    conditionalFormat.cellValue.rule = {\n      formula1: params.value.toString(),\n      operator: Excel.ConditionalCellValueOperator.equalTo\n    };\n  } else if (params.condition === 'text_contains' && params.value !== undefined) {\n    conditionalFormat.cellValue.rule = {\n      formula1: params.value.toString(),\n      operator: Excel.ConditionalCellValueOperator.containsText\n    };\n  } else {\n    // Default to greater than\n    conditionalFormat.cellValue.rule = {\n      formula1: (params.value || 0).toString(),\n      operator: Excel.ConditionalCellValueOperator.greaterThan\n    };\n  }\n  \n  // Set the format\n  conditionalFormat.cellValue.format.fill.color = params.backgroundColor || \"#00FF00\";\n  if (params.fontColor) {\n    conditionalFormat.cellValue.format.font.color = params.fontColor;\n  }\n  if (params.bold) {\n    conditionalFormat.cellValue.format.font.bold = true;\n  }\n  \n  await context.sync();\n  \n  return {\n    success: true,\n    message: `조건부 서식이 적용되었습니다. (${params.condition} ${params.value || ''})`\n  };\n}\n\n// Translate column contents\nasync function executeTranslate(context, params) {\n  console.log('executeTranslate called with params:', params);\n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  \n  if (!params.targetLanguage) {\n    return { success: false, error: '대상 언어를 지정해주세요.' };\n  }\n  \n  let sourceRange;\n  let targetColumnIndex;\n  \n  if (params.sourceRange) {\n    // Handle column ranges like \"C:C\" by intersecting with used range\n    if (params.sourceRange.match(/^[A-Z]+:[A-Z]+$/)) {\n      console.log('Handling column range:', params.sourceRange);\n      const usedRange = worksheet.getUsedRange();\n      if (!usedRange) {\n        return { success: false, error: '번역할 데이터가 없습니다.' };\n      }\n      \n      usedRange.load([\"rowCount\", \"columnCount\"]);\n      await context.sync();\n      \n      console.log('Used range:', {\n        rowCount: usedRange.rowCount,\n        columnCount: usedRange.columnCount\n      });\n      \n      // Get the column letter from the range (e.g., \"C\" from \"C:C\")\n      const columnLetter = params.sourceRange.split(':')[0];\n      const columnIndex = columnLetter.charCodeAt(0) - 65;\n      \n      // Get only the used portion of the column, starting from row 2 (skip header)\n      if (usedRange.rowCount > 1) {\n        sourceRange = worksheet.getRangeByIndexes(1, columnIndex, usedRange.rowCount - 1, 1);\n      } else {\n        return { success: false, error: '번역할 데이터가 없습니다.' };\n      }\n      \n      // Handle target range similarly\n      if (params.targetRange && params.targetRange.match(/^[A-Z]+:[A-Z]+$/)) {\n        const targetColumnLetter = params.targetRange.split(':')[0];\n        targetColumnIndex = targetColumnLetter.charCodeAt(0) - 65;\n        console.log('Target column calculation:', {\n          targetRange: params.targetRange,\n          targetColumnLetter,\n          targetColumnIndex\n        });\n      } else {\n        // If no target specified, use next column\n        targetColumnIndex = columnIndex + 1;\n        console.log('Using next column as target:', {\n          sourceColumnIndex: columnIndex,\n          targetColumnIndex\n        });\n      }\n    } else {\n      // Handle specific ranges like \"B2:B40\"\n      sourceRange = worksheet.getRange(params.sourceRange);\n      \n      // Parse target column if specified\n      if (params.targetRange) {\n        if (params.targetRange.match(/^[A-Z]+:[A-Z]+$/)) {\n          // Extract column letter from targetRange like \"E:E\"\n          const targetColumnLetter = params.targetRange.split(':')[0];\n          targetColumnIndex = targetColumnLetter.charCodeAt(0) - 65;\n          console.log('Target column parsed from targetRange:', {\n            targetRange: params.targetRange,\n            targetColumnLetter,\n            targetColumnIndex\n          });\n        }\n      }\n    }\n  } else if (params.sourceColumn) {\n    const columnIndex = params.sourceColumn.charCodeAt(0) - 65;\n    const usedRange = worksheet.getUsedRange();\n    usedRange.load([\"rowCount\"]);\n    await context.sync();\n    \n    if (usedRange.rowCount > 1) {\n      sourceRange = worksheet.getRangeByIndexes(1, columnIndex, usedRange.rowCount - 1, 1);\n    } else {\n      return { success: false, error: '번역할 데이터가 없습니다.' };\n    }\n    \n    targetColumnIndex = params.targetColumn === 'next' ? columnIndex + 1 :\n                       params.targetColumn ? params.targetColumn.charCodeAt(0) - 65 : columnIndex + 1;\n  } else {\n    return { success: false, error: '번역할 열을 지정해주세요.' };\n  }\n  \n  sourceRange.load([\"values\", \"rowIndex\", \"columnIndex\", \"rowCount\"]);\n  await context.sync();\n  \n  console.log('Source range loaded:', {\n    rowIndex: sourceRange.rowIndex,\n    columnIndex: sourceRange.columnIndex,\n    rowCount: sourceRange.rowCount,\n    values: sourceRange.values ? `${sourceRange.values.length} rows` : 'null'\n  });\n  \n  const sourceValues = sourceRange.values;\n  if (!sourceValues || sourceValues.length === 0) {\n    return { success: false, error: '번역할 데이터가 없습니다.' };\n  }\n  \n  const translations = [];\n  const batchSize = 20;\n  \n  // Translate in batches\n  for (let i = 0; i < sourceValues.length; i += batchSize) {\n    const batch = sourceValues.slice(i, Math.min(i + batchSize, sourceValues.length));\n    const batchTexts = batch.map(row => row[0]).filter(text => text);\n    \n    if (batchTexts.length > 0) {\n      const translatedBatch = await translateBatch(batchTexts, params.targetLanguage, params.sourceLanguage);\n      \n      // Check if translatedBatch is valid\n      if (!translatedBatch || !Array.isArray(translatedBatch)) {\n        console.error('Invalid translation batch received:', translatedBatch);\n        // Mark all as translation failed\n        for (let j = 0; j < batch.length; j++) {\n          if (batch[j][0]) {\n            translations.push([{ text: '번역 실패', isError: true }]);\n          } else {\n            translations.push([{ text: '', isError: false }]);\n          }\n        }\n      } else {\n        console.log('Processing translation batch:', {\n          batchLength: batch.length,\n          translatedBatchLength: translatedBatch.length,\n          sampleTranslations: translatedBatch.slice(0, 3),\n          firstTranslation: translatedBatch[0],\n          translationType: typeof translatedBatch[0],\n          rawData: JSON.stringify(translatedBatch.slice(0, 3))\n        });\n        \n        let translationIndex = 0;\n        for (let j = 0; j < batch.length; j++) {\n          if (batch[j][0]) {\n            const translatedText = translatedBatch[translationIndex] || '';\n            // Check if translation is empty or failed\n            if (!translatedText || translatedText.trim() === '') {\n              translations.push([{ text: '번역 실패', isError: true }]);\n            } else {\n              translations.push([{ text: translatedText, isError: false }]);\n            }\n            if (j < 3) {\n              console.log(`Translation ${j}: \"${batch[j][0]}\" -> \"${translatedText}\"`);\n            }\n            translationIndex++;\n          } else {\n            // Keep empty rows as empty\n            translations.push([{ text: '', isError: false }]);\n          }\n        }\n      }\n    } else {\n      for (let j = 0; j < batch.length; j++) {\n        translations.push([{ text: '', isError: false }]);\n      }\n    }\n    \n    // Show progress\n    if (i % 100 === 0 && i > 0) {\n      showStatus(`번역 중... ${Math.round((i / sourceValues.length) * 100)}%`, 'info');\n    }\n  }\n  \n  // Write translations\n  console.log('Writing translations to target column:', {\n    rowIndex: sourceRange.rowIndex,\n    targetColumnIndex: targetColumnIndex || sourceRange.columnIndex + 1,\n    translationsCount: translations.length,\n    sampleTranslations: translations.slice(0, 3).map(t => t[0])\n  });\n  console.log('First 5 translations raw:', JSON.stringify(translations.slice(0, 5)));\n  console.log('Translation content check:', {\n    first: translations[0] ? translations[0][0] : 'null',\n    second: translations[1] ? translations[1][0] : 'null',\n    third: translations[2] ? translations[2][0] : 'null',\n    isEmpty: translations[0] && translations[0][0] === ''\n  });\n  \n  // DEBUG: Check if translations contain original text instead of translations\n  console.log('DEBUG: Comparing source and translations:');\n  for (let i = 0; i < Math.min(5, translations.length); i++) {\n    console.log(`  [${i}] Source: \"${sourceValues[i][0]}\" -> Translation: \"${translations[i][0]}\"`);\n  }\n  \n  // Ensure targetColumnIndex is set correctly\n  if (targetColumnIndex === undefined) {\n    // If no target column specified, use the next column after source\n    targetColumnIndex = sourceRange.columnIndex + 1;\n    console.log('No target column specified, using next column:', targetColumnIndex);\n  }\n  \n  const targetRange = worksheet.getRangeByIndexes(\n    sourceRange.rowIndex,\n    targetColumnIndex,\n    translations.length,\n    1\n  );\n  \n  targetRange.load([\"address\", \"values\"]);\n  await context.sync();\n  console.log('Target range address:', targetRange.address);\n  console.log('Existing target values (first 3):', targetRange.values.slice(0, 3));\n  \n  // Clear existing values first\n  targetRange.clear(Excel.ClearApplyTo.contents);\n  await context.sync();\n  console.log('Target range cleared');\n  \n  // Ensure translations are properly formatted as 2D array\n  console.log('Setting target range values:', {\n    translationsLength: translations.length,\n    firstTranslation: translations[0],\n    isArray: Array.isArray(translations),\n    is2DArray: Array.isArray(translations[0])\n  });\n  \n  // Process translations and prepare values\n  const stringTranslations = [];\n  const errorRows = [];\n  \n  for (let i = 0; i < translations.length; i++) {\n    const translation = translations[i][0];\n    if (translation && typeof translation === 'object') {\n      stringTranslations.push([translation.text]);\n      if (translation.isError) {\n        errorRows.push(i);\n      }\n    } else {\n      // Handle legacy format\n      stringTranslations.push([String(translation || '')]);\n    }\n  }\n  \n  console.log('String translations (first 3):', stringTranslations.slice(0, 3));\n  console.log('Error rows:', errorRows.length, 'rows marked as errors');\n  \n  // Set the values\n  targetRange.values = stringTranslations;\n  await context.sync();\n  \n  // Apply error styling to failed translations\n  if (errorRows.length > 0) {\n    for (const rowIndex of errorRows) {\n      const errorCell = targetRange.getCell(rowIndex, 0);\n      errorCell.format.fill.color = \"#FFE6E6\"; // Light red background\n      errorCell.format.font.color = \"#CC0000\"; // Dark red text\n      errorCell.format.font.bold = true;\n    }\n    await context.sync();\n  }\n  \n  console.log('Translations written to Excel with error styling applied');\n  \n  // Verify the values were actually written\n  targetRange.load([\"values\", \"text\", \"valueTypes\"]);\n  await context.sync();\n  console.log('Verification - Target range:', {\n    address: targetRange.address,\n    values: targetRange.values.slice(0, 3),\n    text: targetRange.text.slice(0, 3),\n    valueTypes: targetRange.valueTypes.slice(0, 3),\n    actualFirstValue: targetRange.values[0] ? targetRange.values[0][0] : 'null',\n    firstThreeValues: [\n      targetRange.values[0] ? targetRange.values[0][0] : 'empty',\n      targetRange.values[1] ? targetRange.values[1][0] : 'empty',\n      targetRange.values[2] ? targetRange.values[2][0] : 'empty'\n    ]\n  });\n  \n  // Try alternative method - set each cell individually for debugging\n  if (translations.length > 0) {\n    const isEmpty = !targetRange.values[0] || !targetRange.values[0][0] || targetRange.values[0][0] === '';\n    console.log('Checking if values are empty:', {\n      isEmpty,\n      firstValue: targetRange.values[0] ? targetRange.values[0][0] : 'null',\n      firstValueLength: targetRange.values[0] && targetRange.values[0][0] ? targetRange.values[0][0].length : 0\n    });\n    \n    if (isEmpty) {\n      console.log('Values not visible, trying individual cell approach...');\n      // Try setting just the first few cells individually\n      for (let i = 0; i < Math.min(3, translations.length); i++) {\n        const cellRow = sourceRange.rowIndex + i;\n        const cellCol = targetColumnIndex || sourceRange.columnIndex + 1;\n        const cell = worksheet.getCell(cellRow, cellCol);\n        const cellValue = stringTranslations[i][0];\n        \n        console.log(`Setting cell (${cellRow},${cellCol}) to: \"${cellValue}\"`);\n        cell.values = [[cellValue]];\n        \n        await context.sync();\n        \n        // Verify it was set\n        cell.load(\"values\");\n        await context.sync();\n        console.log(`Cell ${i} after setting:`, cell.values[0][0]);\n      }\n    }\n  }\n  \n  // Add header\n  const headerCell = worksheet.getCell(0, targetColumnIndex || sourceRange.columnIndex + 1);\n  const sourceHeaderCell = worksheet.getCell(0, sourceRange.columnIndex);\n  sourceHeaderCell.load(\"values\");\n  await context.sync();\n  \n  headerCell.values = [[`${sourceHeaderCell.values[0][0]} (${params.targetLanguage})`]];\n  await context.sync();\n  \n  return {\n    success: true,\n    message: `번역이 완료되었습니다. (${sourceValues.length}개 항목)`\n  };\n}\n\n// Translate a batch of texts through proxy\nasync function translateBatch(texts, targetLanguage, sourceLanguage) {\n  try {\n    console.log('translateBatch called with', texts.length, 'texts');\n    const response = await fetch(API_PROXY_URL, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        command: `Translate these items to ${targetLanguage}: ${texts.join(', ')}`,\n        sheetContext: {\n          operation: 'translate_batch',\n          texts: texts,\n          targetLanguage: targetLanguage,\n          sourceLanguage: sourceLanguage\n        }\n      })\n    });\n    \n    console.log('Translation response status:', response.status);\n    \n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    \n    const result = await response.json();\n    console.log('Translation result:', result);\n    \n    if (result.success && result.data && result.data.translations) {\n      console.log('Translations received:', result.data.translations.length);\n      console.log('First 3 translations from API:', result.data.translations.slice(0, 3));\n      console.log('Raw translations data:', JSON.stringify(result.data.translations.slice(0, 5)));\n      return result.data.translations;\n    } else if (result.error) {\n      console.error('Translation API error:', result.error);\n      throw new Error(result.error);\n    } else {\n      console.error('Invalid translation response structure:', result);\n      throw new Error('번역 응답을 받을 수 없습니다.');\n    }\n  } catch (error) {\n    console.error('Translation error:', error);\n    return texts.map(() => '');\n  }\n}\n\n// Helper functions\nfunction getColumnLetter(columnIndex) {\n  let columnLetter = '';\n  let tempIndex = columnIndex;\n  \n  while (tempIndex >= 0) {\n    columnLetter = String.fromCharCode((tempIndex % 26) + 65) + columnLetter;\n    tempIndex = Math.floor(tempIndex / 26) - 1;\n  }\n  \n  return columnLetter;\n}\n\nfunction formatNumber(value) {\n  if (typeof value === 'number') {\n    if (Number.isInteger(value)) {\n      return value.toLocaleString('ko-KR');\n    } else {\n      return value.toLocaleString('ko-KR', { minimumFractionDigits: 0, maximumFractionDigits: 2 });\n    }\n  }\n  return value;\n}\n\nfunction showStatus(message, type) {\n  const status = document.getElementById('status');\n  status.textContent = message;\n  status.className = 'status-message ' + type;\n  status.style.display = 'block';\n  \n  if (window.statusTimeout) {\n    clearTimeout(window.statusTimeout);\n  }\n  \n  if (type === 'success') {\n    window.statusTimeout = setTimeout(() => {\n      status.style.display = 'none';\n    }, 5000);\n  }\n}\n\nfunction clearInput() {\n  document.getElementById('commandInput').value = '';\n  document.getElementById('status').style.display = 'none';\n}\n\nfunction setCommand(command) {\n  document.getElementById('commandInput').value = command;\n  document.getElementById('commandInput').focus();\n}\n\nfunction showSettings() {\n  showStatus('이 애드인은 보안 서버를 통해 AI 기능을 제공합니다. 별도의 API 키 설정이 필요하지 않습니다.', 'info');\n}\n\n// Test backend connection\nasync function testBackendConnection() {\n  try {\n    console.log('Testing backend connection...');\n    const testUrl = 'https://excel-addon-backend.vercel.app/api/test';\n    \n    const response = await fetch(testUrl, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({ test: true })\n    });\n    \n    console.log('Test response status:', response.status);\n    console.log('Test response headers:', response.headers);\n    \n    const data = await response.json();\n    console.log('Test response data:', data);\n    \n    showStatus('백엔드 연결 테스트 성공', 'success');\n  } catch (error) {\n    console.error('Backend test error:', error);\n    showStatus('백엔드 연결 테스트 실패: ' + error.message, 'error');\n  }\n}\n\n// Additional operations (compress, filter, insert, delete, formula, retry_translation)\n// These would need to be implemented based on Excel JavaScript API capabilities\n\nasync function executeCompress(context, params) {\n  console.log('executeCompress called with params:', params);\n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  \n  try {\n    if (!params.range) {\n      return { success: false, error: '범위를 지정해주세요.' };\n    }\n    \n    // Get the specified range\n    const checkRange = worksheet.getRange(params.range);\n    checkRange.load([\"rowIndex\", \"rowCount\", \"columnIndex\", \"values\", \"address\"]);\n    await context.sync();\n    \n    console.log('Compress range:', {\n      address: checkRange.address,\n      rowIndex: checkRange.rowIndex,\n      rowCount: checkRange.rowCount,\n      columnIndex: checkRange.columnIndex\n    });\n    \n    // Find empty rows in the specified column\n    const emptyRows = [];\n    const values = checkRange.values;\n    \n    // Check each row in the range\n    for (let i = 0; i < values.length; i++) {\n      const cellValue = values[i][0]; // First column of the range\n      if (cellValue === null || cellValue === undefined || cellValue === '' || \n          (typeof cellValue === 'string' && cellValue.trim() === '')) {\n        // This row is empty in the specified column\n        // Store the actual row index (rowIndex + i)\n        emptyRows.push(checkRange.rowIndex + i);\n      }\n    }\n    \n    console.log('Found empty rows:', emptyRows.length, 'rows at indices:', emptyRows);\n    \n    if (emptyRows.length === 0) {\n      return {\n        success: true,\n        message: '제거할 빈 행이 없습니다.'\n      };\n    }\n    \n    // IMPORTANT: Only delete rows that are within the specified range\n    // This prevents accidentally deleting rows outside the range (like A1)\n    const minRowIndex = checkRange.rowIndex;\n    const maxRowIndex = checkRange.rowIndex + checkRange.rowCount - 1;\n    \n    // Filter out any row indices that are outside the specified range\n    const rowsToDelete = emptyRows.filter(rowIdx => rowIdx >= minRowIndex && rowIdx <= maxRowIndex);\n    \n    console.log('Rows to delete (filtered):', rowsToDelete);\n    \n    // Delete rows from bottom to top to avoid index shifting\n    rowsToDelete.sort((a, b) => b - a); // Sort in descending order\n    \n    for (const rowIndex of rowsToDelete) {\n      console.log('Deleting row:', rowIndex + 1); // Display 1-based for user\n      // Get the entire row using a fixed large column count to avoid getUsedRange() issues\n      const rowToDelete = worksheet.getRangeByIndexes(rowIndex, 0, 1, 1000);\n      rowToDelete.delete(Excel.DeleteShiftDirection.up);\n      await context.sync();\n    }\n    \n    return {\n      success: true,\n      message: `${rowsToDelete.length}개의 빈 행이 제거되었습니다.`\n    };\n    \n  } catch (error) {\n    console.error('Error in executeCompress:', error);\n    return {\n      success: false,\n      error: `빈 행 제거 중 오류 발생: ${error.message}`\n    };\n  }\n}\n\nasync function executeFilter(context, params) {\n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  const range = params.range ? worksheet.getRange(params.range) : worksheet.getUsedRange();\n  \n  // Apply autofilter\n  range.worksheet.autoFilter.apply(range);\n  \n  await context.sync();\n  \n  return {\n    success: true,\n    message: '필터가 적용되었습니다.'\n  };\n}\n\nasync function executeInsert(context, params) {\n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  const type = params.type || 'row';\n  const position = params.position || 1;\n  const count = params.count || 1;\n  \n  if (type === 'row') {\n    const range = worksheet.getRangeByIndexes(position - 1, 0, count, 1);\n    range.insert(Excel.InsertShiftDirection.down);\n  } else {\n    const range = worksheet.getRangeByIndexes(0, position - 1, 1, count);\n    range.insert(Excel.InsertShiftDirection.right);\n  }\n  \n  await context.sync();\n  \n  return {\n    success: true,\n    message: `${count}개의 ${type === 'row' ? '행' : '열'}이 삽입되었습니다.`\n  };\n}\n\nasync function executeDelete(context, params) {\n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  const type = params.type || 'row';\n  const position = params.position || 1;\n  const count = params.count || 1;\n  \n  if (type === 'row') {\n    const range = worksheet.getRangeByIndexes(position - 1, 0, count, 1);\n    range.delete(Excel.DeleteShiftDirection.up);\n  } else {\n    const range = worksheet.getRangeByIndexes(0, position - 1, 1, count);\n    range.delete(Excel.DeleteShiftDirection.left);\n  }\n  \n  await context.sync();\n  \n  return {\n    success: true,\n    message: `${count}개의 ${type === 'row' ? '행' : '열'}이 삭제되었습니다.`\n  };\n}\n\nasync function executeFormula(context, params) {\n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  const range = params.range ? worksheet.getRange(params.range) : context.workbook.getSelectedRange();\n  \n  if (!params.formula) {\n    return { success: false, error: '수식을 지정해주세요.' };\n  }\n  \n  range.formulas = [[params.formula]];\n  await context.sync();\n  \n  return {\n    success: true,\n    message: '수식이 적용되었습니다.'\n  };\n}\n\nasync function executeRetryTranslation(context, params) {\n  // Implementation would be similar to Google Sheets version\n  // but using Excel JavaScript API\n  return {\n    success: false,\n    error: '이 기능은 현재 구현 중입니다.'\n  };\n}\n\nasync function executeRemoveBorder(context, params) {\n  console.log('executeRemoveBorder called with params:', params);\n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  \n  try {\n    let targetRange;\n    \n    // Determine the range to apply border removal\n    if (params.range) {\n      // Handle special case for entire sheet\n      if (params.range === 'all' || params.range === '전체') {\n        console.log('Removing borders from entire sheet');\n        // Use getUsedRangeOrNullObject to get the actual used range\n        const usedRange = worksheet.getUsedRangeOrNullObject();\n        usedRange.load(\"isNullObject\");\n        await context.sync();\n        \n        if (usedRange.isNullObject) {\n          console.log('No used range in the sheet, nothing to remove borders from');\n          return { success: true, message: '시트에 데이터가 없어 테두리를 제거할 필요가 없습니다.' };\n        } else {\n          // Expand the used range to ensure we get all cells that might have borders\n          usedRange.load([\"rowCount\", \"columnCount\", \"rowIndex\", \"columnIndex\"]);\n          await context.sync();\n          \n          // Get a slightly larger range to ensure we capture all borders\n          const expandedRows = Math.min(usedRange.rowCount + 100, 1048576);\n          const expandedCols = Math.min(usedRange.columnCount + 20, 16384);\n          targetRange = worksheet.getRangeByIndexes(0, 0, expandedRows, expandedCols);\n        }\n      } else if (params.range.match(/^[A-Z]+:[A-Z]+$/)) {\n        // Handle column ranges like \"C:C\"\n        console.log('Handling column range:', params.range);\n        const usedRange = worksheet.getUsedRange();\n        if (!usedRange) {\n          return { success: false, error: '데이터가 없습니다.' };\n        }\n        \n        usedRange.load([\"rowCount\", \"columnCount\"]);\n        await context.sync();\n        \n        // Get the column letter from the range (e.g., \"C\" from \"C:C\")\n        const columnLetter = params.range.split(':')[0];\n        const columnIndex = columnLetter.charCodeAt(0) - 65;\n        \n        // Get the entire used portion of the column\n        targetRange = worksheet.getRangeByIndexes(0, columnIndex, usedRange.rowCount, 1);\n      } else {\n        // Handle specific ranges like \"A1:B10\"\n        targetRange = worksheet.getRange(params.range);\n      }\n    } else {\n      // If no range specified, use the selected range\n      targetRange = context.workbook.getSelectedRange();\n    }\n    \n    // Load the range\n    targetRange.load([\"address\", \"rowCount\", \"columnCount\"]);\n    await context.sync();\n    \n    console.log('Target range for border removal:', {\n      address: targetRange.address,\n      rowCount: targetRange.rowCount,\n      columnCount: targetRange.columnCount\n    });\n    \n    // Determine which borders to remove\n    const borderType = params.borderType || 'all';\n    \n    if (borderType === 'all') {\n      // Remove all borders\n      targetRange.format.borders.getItem(Excel.BorderIndex.edgeLeft).style = Excel.BorderLineStyle.none;\n      targetRange.format.borders.getItem(Excel.BorderIndex.edgeRight).style = Excel.BorderLineStyle.none;\n      targetRange.format.borders.getItem(Excel.BorderIndex.edgeTop).style = Excel.BorderLineStyle.none;\n      targetRange.format.borders.getItem(Excel.BorderIndex.edgeBottom).style = Excel.BorderLineStyle.none;\n      targetRange.format.borders.getItem(Excel.BorderIndex.insideHorizontal).style = Excel.BorderLineStyle.none;\n      targetRange.format.borders.getItem(Excel.BorderIndex.insideVertical).style = Excel.BorderLineStyle.none;\n    } else {\n      // Remove specific border\n      switch (borderType) {\n        case 'right':\n          targetRange.format.borders.getItem(Excel.BorderIndex.edgeRight).style = Excel.BorderLineStyle.none;\n          break;\n        case 'left':\n          targetRange.format.borders.getItem(Excel.BorderIndex.edgeLeft).style = Excel.BorderLineStyle.none;\n          break;\n        case 'top':\n          targetRange.format.borders.getItem(Excel.BorderIndex.edgeTop).style = Excel.BorderLineStyle.none;\n          break;\n        case 'bottom':\n          targetRange.format.borders.getItem(Excel.BorderIndex.edgeBottom).style = Excel.BorderLineStyle.none;\n          break;\n        default:\n          return { success: false, error: `알 수 없는 테두리 유형: ${borderType}` };\n      }\n    }\n    \n    await context.sync();\n    \n    return {\n      success: true,\n      message: `${targetRange.address} 범위의 ${borderType === 'all' ? '모든' : borderType} 테두리가 제거되었습니다.`\n    };\n    \n  } catch (error) {\n    console.error('Error in executeRemoveBorder:', error);\n    return {\n      success: false,\n      error: `테두리 제거 중 오류 발생: ${error.message}`\n    };\n  }\n}"],"names":["__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","m","g","globalThis","this","Function","e","window","o","obj","prop","Object","prototype","hasOwnProperty","call","scriptUrl","importScripts","location","document","currentScript","tagName","toUpperCase","src","scripts","getElementsByTagName","length","i","test","Error","replace","p","b","baseURI","self","href","URL","t","r","Symbol","n","iterator","toStringTag","c","Generator","u","create","_regeneratorDefine2","f","y","G","v","a","d","bind","l","TypeError","done","value","return","GeneratorFunction","GeneratorFunctionPrototype","getPrototypeOf","setPrototypeOf","__proto__","displayName","_regenerator","w","defineProperty","_invoke","enumerable","configurable","writable","asyncGeneratorStep","Promise","resolve","then","_asyncToGenerator","arguments","apply","_next","_throw","recognition","isListening","API_PROXY_URL","process","initializeSpeechRecognition","SpeechRecognition","webkitSpeechRecognition","lang","continuous","interimResults","maxAlternatives","onstart","getElementById","classList","add","textContent","onresult","event","transcript","results","isFinal","onerror","remove","errorMessage","error","showStatus","onend","trim","focus","disabled","_toggleVoiceRecognition","_callee","_t","_t2","_context","stop","navigator","mediaDevices","getUserMedia","audio","getTracks","forEach","track","start","console","name","message","Office","onReady","info","host","HostType","Excel","_testBackendConnection","testBackendConnection","onclick","executeCommand","clearInput","toggleVoiceRecognition","showSettings","querySelectorAll","item","command","getAttribute","addEventListener","key","shiftKey","preventDefault","isExecuting","_executeCommand","_callee3","button","originalText","_t3","_context3","log","innerHTML","run","_ref","_callee2","context","worksheet","range","usedRange","sheetContext","headerRow","interpretation","result","_context2","workbook","worksheets","getActiveWorksheet","getSelectedRange","load","getUsedRange","sync","sheetName","activeRange","address","row","rowIndex","column","columnIndex","numRows","rowCount","numColumns","columnCount","lastRow","lastColumn","headers","dataRange","values","isLargeSheet","push","columnLetter","getColumnLetter","label","toString","callOpenAI","success","executeInterpretedCommand","data","setTimeout","_x43","stack","_x","_x2","_callOpenAI","_callee4","response","errorData","_t4","_context4","fetch","method","body","JSON","stringify","ok","json","concat","status","_x5","_x6","_executeInterpretedCommand","_callee6","commandData","successCount","_iterator","_step","op","_t7","_context6","operations","Array","isArray","_createForOfIteratorHelper","s","executeSingleOperation","operation","parameters","_x7","_x8","_x9","_executeSingleOperation","_callee7","params","_t8","_t9","_context7","Date","toISOString","executeMerge","executeSum","executeAverage","executeCount","executeFormat","executeSort","executeFilter","executeInsert","executeDelete","executeFormula","executeChart","executeConditionalFormat","executeTranslate","executeCompress","executeRetryTranslation","executeRemoveBorder","_x0","_x1","_executeMerge","_callee8","rangeAddress","_context8","getRange","merge","_x10","_x11","_executeSum","_callee9","lastDataRow","sumCell","sourceRange","newCell","targetCell","_column","_lastRow","_newCell","_context9","columnName","sumType","match","charCodeAt","toLowerCase","getCell","formulas","formatNumber","addNewRow","_x12","_x13","_executeAverage","_callee0","rangeDescription","columnInfo","_usedRange","_usedRange2","_t0","_context0","averageType","getRangeByIndexes","getHeaders","find","h","numberFormat","_x14","_x15","_executeCount","_callee1","formula","criteria","resultCell","lastCol","_context1","countType","condition","operator","includes","_x16","_x17","_executeFormat","_callee10","format","_context10","bold","font","italic","fontSize","size","fontColor","color","backgroundColor","fill","horizontalAlignment","_x18","_x19","_executeSort","_callee11","ascending","_context11","sort","_x20","_x21","_executeChart","_callee12","sourceData","chartType","chart","_context12","ChartType","columnClustered","line","pie","xyscatter","charts","ChartSeriesBy","auto","title","text","height","width","left","offsetX","top","offsetY","legend","position","ChartLegendPosition","bottom","visible","_x22","_x23","_executeConditionalFormat","_callee13","conditionalFormat","_context13","conditionalFormats","ConditionalFormatType","cellValue","rule","formula1","ConditionalCellValueOperator","greaterThan","lessThan","equalTo","containsText","_x24","_x25","_executeTranslate","_callee14","targetColumnIndex","targetColumnLetter","_targetColumnLetter","_columnIndex","_usedRange3","sourceValues","translations","batchSize","batch","batchTexts","translatedBatch","j","translationIndex","_j","translatedText","_j2","_i","targetRange","stringTranslations","errorRows","_i2","translation","_iterator2","_step2","errorCell","isEmpty","_i3","cellRow","cellCol","cell","headerCell","sourceHeaderCell","_context14","targetLanguage","split","sourceColumnIndex","sourceColumn","targetColumn","slice","Math","min","map","filter","translateBatch","sourceLanguage","batchLength","translatedBatchLength","sampleTranslations","firstTranslation","translationType","_typeof","rawData","isError","round","translationsCount","first","second","third","clear","ClearApplyTo","contents","translationsLength","is2DArray","String","err","valueTypes","actualFirstValue","firstThreeValues","firstValue","firstValueLength","_x26","_x27","_x28","_translateBatch","_callee15","texts","_t1","_context15","join","tempIndex","fromCharCode","floor","Number","isInteger","toLocaleString","minimumFractionDigits","maximumFractionDigits","type","className","style","display","statusTimeout","clearTimeout","_callee16","_t10","_context16","_x29","_x30","_executeCompress","_callee17","checkRange","emptyRows","minRowIndex","maxRowIndex","rowsToDelete","_iterator3","_step3","_t11","_t12","_context17","rowIdx","delete","DeleteShiftDirection","up","_x31","_x32","_executeFilter","_callee18","_context18","autoFilter","_x33","_x34","_executeInsert","_callee19","count","_context19","insert","InsertShiftDirection","down","right","_x35","_x36","_executeDelete","_callee20","_context20","_x37","_x38","_executeFormula","_callee21","_context21","_x39","_x40","_executeRetryTranslation","_callee22","_context22","_x41","_x42","_executeRemoveBorder","_callee23","expandedRows","expandedCols","_usedRange4","borderType","_t13","_t14","_context23","getUsedRangeOrNullObject","isNullObject","borders","getItem","BorderIndex","edgeLeft","BorderLineStyle","none","edgeRight","edgeTop","edgeBottom","insideHorizontal","insideVertical"],"sourceRoot":""}