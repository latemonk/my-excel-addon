{"version":3,"file":"taskpane.js","mappings":"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","sources":["webpack://worksai-excel-addon/webpack/bootstrap","webpack://worksai-excel-addon/webpack/runtime/global","webpack://worksai-excel-addon/webpack/runtime/hasOwnProperty shorthand","webpack://worksai-excel-addon/webpack/runtime/publicPath","webpack://worksai-excel-addon/webpack/runtime/jsonp chunk loading","webpack://worksai-excel-addon/./src/taskpane/taskpane.html","webpack://worksai-excel-addon/./src/taskpane/taskpane.js"],"sourcesContent":["// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript && document.currentScript.tagName.toUpperCase() === 'SCRIPT')\n\t\tscriptUrl = document.currentScript.src;\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) {\n\t\t\tvar i = scripts.length - 1;\n\t\t\twhile (i > -1 && (!scriptUrl || !/^http(s?):/.test(scriptUrl))) scriptUrl = scripts[i--].src;\n\t\t}\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/^blob:/, \"\").replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","__webpack_require__.b = document.baseURI || self.location.href;\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t926: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n// no on chunks loaded\n\n// no jsonp function","// Imports\nvar ___HTML_LOADER_IMPORT_0___ = new URL(\"./taskpane.css\", import.meta.url);\n// Module\nvar code = \"<!DOCTYPE html> <html> <head> <meta charset=\\\"UTF-8\\\"/> <meta http-equiv=\\\"X-UA-Compatible\\\" content=\\\"IE=Edge\\\"/> <meta name=\\\"viewport\\\" content=\\\"width=device-width,initial-scale=1\\\"> <title>웍스AI 엑셀 도우미</title> <\" + \"script src=\\\"https://appsforoffice.microsoft.com/lib/1.1/hosted/office.js\\\"><\" + \"/script> <link rel=\\\"stylesheet\\\" href=\\\"https://static2.sharepointonline.com/files/fabric/office-ui-fabric-js/1.4.0/css/fabric.min.css\\\"/> <link rel=\\\"stylesheet\\\" href=\\\"https://static2.sharepointonline.com/files/fabric/office-ui-fabric-js/1.4.0/css/fabric.components.min.css\\\"/> <link href=\\\"\" + ___HTML_LOADER_IMPORT_0___ + \"\\\" rel=\\\"stylesheet\\\"/> </head> <body class=\\\"ms-font-m ms-welcome ms-Fabric\\\"> <main id=\\\"app-body\\\" class=\\\"ms-welcome__main\\\"> <div class=\\\"container\\\"> <div class=\\\"header-section\\\"> <h2 class=\\\"ms-font-xl\\\" style=\\\"font-weight:700\\\">웍스AI 엑셀 도우미</h2> <p class=\\\"help-text\\\">자연어로 Excel 작업을 요청하세요. (대용량 번역 지원)</p> </div> <div class=\\\"voice-section\\\"> <button id=\\\"voiceButton\\\" class=\\\"voice-button\\\"> <svg width=\\\"24\\\" height=\\\"24\\\" viewBox=\\\"0 0 24 24\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"> <path d=\\\"M12 14c1.66 0 3-1.34 3-3V5c0-1.66-1.34-3-3-3S9 3.34 9 5v6c0 1.66 1.34 3 3 3z\\\"/> <path d=\\\"M17 11c0 2.76-2.24 5-5 5s-5-2.24-5-5H5c0 3.53 2.61 6.43 6 6.92V21h2v-3.08c3.39-.49 6-3.39 6-6.92h-2z\\\"/> </svg> </button> <div class=\\\"voice-status\\\" id=\\\"voiceStatus\\\">음성 인식 준비</div> </div> <div class=\\\"input-container\\\"> <textarea id=\\\"commandInput\\\" placeholder=\\\"예: A1부터 A10까지 합계를 구해줘\\\" rows=\\\"3\\\"></textarea> <div class=\\\"button-container\\\"> <button id=\\\"executeButton\\\" class=\\\"ms-Button ms-Button--primary\\\"> <span class=\\\"ms-Button-label\\\">실행</span> </button> <button id=\\\"clearButton\\\" class=\\\"ms-Button\\\"> <span class=\\\"ms-Button-label\\\">지우기</span> </button> </div> </div> <div id=\\\"status\\\" class=\\\"status-message\\\"></div> <div class=\\\"examples\\\"> <h3>예제 명령어</h3> <div class=\\\"example-list\\\"> <div class=\\\"example-item\\\" data-command=\\\"A1:B5 셀을 병합해줘\\\"> <strong>셀 병합:</strong> A1:B5 셀을 병합해줘 </div> <div class=\\\"example-item\\\" data-command=\\\"A열의 합계를 구해줘\\\"> <strong>합계 계산:</strong> A열의 합계를 구해줘 </div> <div class=\\\"example-item\\\" data-command=\\\"Name 열의 합계를 구해줘\\\"> <strong>레이블로 합계:</strong> Name 열의 합계를 구해줘 </div> <div class=\\\"example-item\\\" data-command=\\\"C열 평균을 구해줘\\\"> <strong>열 평균:</strong> C열 평균을 구해줘 </div> <div class=\\\"example-item\\\" data-command=\\\"3행 평균을 계산해줘\\\"> <strong>행 평균:</strong> 3행 평균을 계산해줘 </div> <div class=\\\"example-item\\\" data-command=\\\"선택한 셀을 굵게 만들고 파란색으로 바꿔줘\\\"> <strong>서식 지정:</strong> 선택한 셀을 굵게 만들고 파란색으로 바꿔줘 </div> <div class=\\\"example-item\\\" data-command=\\\"B열 기준으로 내림차순 정렬해줘\\\"> <strong>정렬:</strong> B열 기준으로 내림차순 정렬해줘 </div> <div class=\\\"example-item\\\" data-command=\\\"값이 100보다 큰 셀은 녹색 배경으로 표시해줘\\\"> <strong>조건부 서식:</strong> 값이 100보다 큰 셀은 녹색 배경으로 표시해줘 </div> <div class=\\\"example-item\\\" data-command=\\\"A1:B10 데이터로 막대 차트를 만들어줘\\\"> <strong>차트 생성:</strong> A1:B10 데이터로 막대 차트를 만들어줘 </div> <div class=\\\"example-item\\\" data-command=\\\"D열을 중국어로 번역해서 다음 열에 추가해줘\\\"> <strong>번역:</strong> D열을 중국어로 번역해서 다음 열에 추가해줘 </div> <div class=\\\"example-item\\\" data-command=\\\"A열의 10000개 행을 영어로 번역해줘\\\"> <strong>대용량 번역:</strong> A열의 10000개 행을 영어로 번역해줘 </div> <div class=\\\"example-item\\\" data-command=\\\"D2:D170 사이의 빈 행을 제거해줘\\\"> <strong>빈 행 제거:</strong> D2:D170 사이의 빈 행을 제거해줘 </div> <div class=\\\"example-item\\\" data-command=\\\"C열의 오른쪽 테두리를 없애줘\\\"> <strong>테두리 제거:</strong> C열의 오른쪽 테두리를 없애줘 </div> </div> </div> <div class=\\\"settings-section\\\"> <button id=\\\"settingsButton\\\" class=\\\"settings-link\\\">설정</button> </div> </div> </main> </body> </html>\";\n// Exports\nexport default code;","/*\n * Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n * See LICENSE in the project root for license information.\n */\n\n/* global document, Office, Excel */\n\n// Voice recognition variables\nlet recognition = null;\nlet isListening = false;\n\n// Backend API URL - Vercel 배포 후 실제 URL로 변경해주세요\n// 디버그용 URL 사용 중 (CORS 문제 해결 후 원래 URL로 변경 필요)\nconst API_PROXY_URL = process.env.API_PROXY_URL || 'https://excel-addon-backend.vercel.app/api/openai-proxy-debug';\n\nOffice.onReady((info) => {\n  if (info.host === Office.HostType.Excel) {\n    // Test backend connection\n    testBackendConnection();\n    \n    // Assign event handlers\n    document.getElementById(\"executeButton\").onclick = executeCommand;\n    document.getElementById(\"clearButton\").onclick = clearInput;\n    document.getElementById(\"voiceButton\").onclick = () => toggleVoiceRecognition();\n    document.getElementById(\"settingsButton\").onclick = showSettings;\n\n    // Handle example clicks\n    const exampleItems = document.querySelectorAll('.example-item');\n    exampleItems.forEach(item => {\n      item.onclick = function() {\n        setCommand(this.getAttribute('data-command'));\n      };\n    });\n\n    // Handle Enter key\n    document.getElementById('commandInput').addEventListener('keydown', function(event) {\n      if (event.key === 'Enter' && !event.shiftKey) {\n        event.preventDefault();\n        executeCommand();\n      }\n    });\n\n    // Initialize speech recognition\n    initializeSpeechRecognition();\n  }\n});\n\n// Initialize speech recognition\nfunction initializeSpeechRecognition() {\n  const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n  \n  if (!SpeechRecognition) {\n    showStatus('음성 인식이 지원되지 않는 브라우저입니다.', 'error');\n    document.getElementById('voiceButton').disabled = true;\n    document.getElementById('voiceStatus').textContent = '음성 인식 미지원';\n    return null;\n  }\n  \n  recognition = new SpeechRecognition();\n  recognition.lang = 'ko-KR';\n  recognition.continuous = false;\n  recognition.interimResults = true;\n  recognition.maxAlternatives = 1;\n  \n  recognition.onstart = function() {\n    isListening = true;\n    document.getElementById('voiceButton').classList.add('listening');\n    document.getElementById('voiceStatus').textContent = '듣고 있습니다... 말씀해주세요';\n    document.getElementById('voiceStatus').classList.add('listening');\n  };\n  \n  recognition.onresult = function(event) {\n    const transcript = event.results[0][0].transcript;\n    document.getElementById('commandInput').value = transcript;\n    \n    if (event.results[0].isFinal) {\n      document.getElementById('voiceStatus').textContent = '음성 인식 완료';\n    } else {\n      document.getElementById('voiceStatus').textContent = '인식중: ' + transcript;\n    }\n  };\n  \n  recognition.onerror = function(event) {\n    isListening = false;\n    document.getElementById('voiceButton').classList.remove('listening');\n    document.getElementById('voiceStatus').classList.remove('listening');\n    \n    let errorMessage = '음성 인식 오류';\n    switch(event.error) {\n      case 'no-speech':\n        errorMessage = '음성이 감지되지 않았습니다.';\n        break;\n      case 'audio-capture':\n        errorMessage = '마이크를 찾을 수 없습니다.';\n        break;\n      case 'not-allowed':\n        errorMessage = '마이크 권한이 거부되었습니다.';\n        break;\n      case 'network':\n        errorMessage = '네트워크 오류가 발생했습니다.';\n        break;\n    }\n    \n    document.getElementById('voiceStatus').textContent = errorMessage;\n    showStatus(errorMessage, 'error');\n  };\n  \n  recognition.onend = function() {\n    isListening = false;\n    document.getElementById('voiceButton').classList.remove('listening');\n    document.getElementById('voiceStatus').classList.remove('listening');\n    \n    const command = document.getElementById('commandInput').value.trim();\n    if (command) {\n      document.getElementById('voiceStatus').textContent = '음성 인식 완료. 실행 버튼을 눌러주세요.';\n      document.getElementById('executeButton').focus();\n    } else {\n      document.getElementById('voiceStatus').textContent = '음성 인식 준비';\n    }\n  };\n  \n  return recognition;\n}\n\n// Toggle voice recognition\nasync function toggleVoiceRecognition() {\n  if (!recognition) {\n    recognition = initializeSpeechRecognition();\n    if (!recognition) return;\n  }\n  \n  if (isListening) {\n    recognition.stop();\n  } else {\n    try {\n      // Check if we're in Excel Online which has permissions policy restrictions\n      const isExcelOnline = window.location.hostname.includes('office.com') || \n                           window.location.hostname.includes('office365.com') ||\n                           window.location.hostname.includes('sharepoint.com');\n      \n      if (isExcelOnline) {\n        // Excel Online blocks microphone access due to permissions policy\n        showStatus('죄송합니다. Excel Online에서는 보안 정책상 음성 인식을 사용할 수 없습니다. 데스크톱 Excel에서 사용해주세요.', 'error');\n        document.getElementById('voiceStatus').textContent = 'Excel Online 미지원';\n        return;\n      }\n      \n      // For Excel add-ins, we need to handle permissions more carefully\n      // First, try to get microphone permission explicitly\n      if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n        try {\n          const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n          // Permission granted, stop the stream immediately as we only needed permission\n          stream.getTracks().forEach(track => track.stop());\n          // Now start speech recognition\n          recognition.start();\n        } catch (err) {\n          console.error('Microphone permission error:', err);\n          \n          // Check for permissions policy violation\n          if (err.message && err.message.includes('Permissions policy')) {\n            showStatus('Excel 환경의 보안 정책으로 인해 음성 인식을 사용할 수 없습니다.', 'error');\n            document.getElementById('voiceStatus').textContent = '권한 정책 제한';\n          } else if (err.name === 'NotAllowedError' || err.name === 'PermissionDeniedError') {\n            showStatus('마이크 권한이 필요합니다. 브라우저 설정에서 마이크 권한을 허용해주세요.', 'error');\n            document.getElementById('voiceStatus').textContent = '마이크 권한 필요';\n          } else if (err.name === 'NotFoundError') {\n            showStatus('마이크를 찾을 수 없습니다. 마이크가 연결되어 있는지 확인해주세요.', 'error');\n            document.getElementById('voiceStatus').textContent = '마이크 없음';\n          } else {\n            showStatus('음성 인식을 시작할 수 없습니다: ' + err.message, 'error');\n            document.getElementById('voiceStatus').textContent = '오류 발생';\n          }\n        }\n      } else {\n        // Fallback: try to start speech recognition directly\n        try {\n          recognition.start();\n        } catch (err) {\n          console.error('Direct speech recognition error:', err);\n          showStatus('음성 인식을 사용할 수 없는 환경입니다.', 'error');\n          document.getElementById('voiceStatus').textContent = '환경 미지원';\n        }\n      }\n    } catch (error) {\n      console.error('Voice recognition start error:', error);\n      showStatus('음성 인식 시작 중 오류가 발생했습니다.', 'error');\n    }\n  }\n}\n\n// Execute command\n// Add flag to prevent duplicate execution\nlet isExecuting = false;\n\nasync function executeCommand() {\n  // Prevent duplicate execution\n  if (isExecuting) {\n    console.log('Command already executing, ignoring duplicate call');\n    return;\n  }\n  \n  const command = document.getElementById('commandInput').value.trim();\n  \n  if (!command) {\n    showStatus('명령어를 입력해주세요.', 'error');\n    return;\n  }\n  \n  isExecuting = true;\n  \n  const button = document.getElementById('executeButton');\n  const originalText = '<span class=\"ms-Button-label\">실행</span>';\n  \n  // Show loading state\n  button.disabled = true;\n  button.innerHTML = '<span class=\"loading\"></span><span>처리중...</span>';\n  showStatus('명령을 처리하고 있습니다...', 'info');\n  \n  try {\n    await Excel.run(async (context) => {\n      console.log('Starting Excel.run for command execution');\n      // Get current worksheet context\n      const worksheet = context.workbook.worksheets.getActiveWorksheet();\n      const range = context.workbook.getSelectedRange();\n      \n      // Load necessary properties\n      worksheet.load(\"name\");\n      range.load([\"address\", \"rowIndex\", \"columnIndex\", \"rowCount\", \"columnCount\"]);\n      \n      // Get sheet data for context\n      const usedRange = worksheet.getUsedRange();\n      usedRange.load([\"rowCount\", \"columnCount\", \"values\"]);\n      \n      await context.sync();\n      \n      // Build sheet context\n      const sheetContext = {\n        sheetName: worksheet.name,\n        activeRange: {\n          address: range.address,\n          row: range.rowIndex + 1,\n          column: range.columnIndex + 1,\n          numRows: range.rowCount,\n          numColumns: range.columnCount\n        },\n        lastRow: usedRange ? usedRange.rowCount : 0,\n        lastColumn: usedRange ? usedRange.columnCount : 0,\n        headers: [],\n        dataRange: usedRange ? usedRange.values : [],\n        isLargeSheet: usedRange && usedRange.rowCount > 1000\n      };\n      \n      // Extract headers\n      if (usedRange && usedRange.rowCount > 0) {\n        const headerRow = usedRange.values[0];\n        for (let i = 0; i < headerRow.length; i++) {\n          sheetContext.headers.push({\n            column: i + 1,\n            columnLetter: getColumnLetter(i),\n            label: headerRow[i] ? headerRow[i].toString() : ''\n          });\n        }\n      }\n      \n      // Call OpenAI API to interpret the command\n      const interpretation = await callOpenAI(command, sheetContext);\n      \n      if (!interpretation.success) {\n        throw new Error(interpretation.error);\n      }\n      \n      // Execute the interpreted command\n      console.log('Executing interpreted command...');\n      const result = await executeInterpretedCommand(context, interpretation.data);\n      console.log('Command execution result:', result);\n      \n      // Reset button and show success\n      button.disabled = false;\n      button.innerHTML = originalText;\n      \n      if (result.success) {\n        console.log('Operation completed successfully:', result);\n        showStatus(result.message || '명령이 성공적으로 실행되었습니다.', 'success');\n        setTimeout(() => {\n          document.getElementById('commandInput').value = '';\n        }, 1000);\n      } else {\n        console.error('Operation failed:', result);\n        showStatus(result.error || '명령 실행에 실패했습니다.', 'error');\n      }\n      \n      console.log('Excel.run completing...');\n    });\n    console.log('Excel.run completed');\n  } catch (error) {\n    console.error('Error in executeCommand:', error);\n    console.error('Error stack:', error.stack);\n    button.disabled = false;\n    button.innerHTML = originalText;\n    showStatus('오류가 발생했습니다: ' + error.message, 'error');\n  } finally {\n    // Reset execution flag\n    isExecuting = false;\n  }\n}\n\n// Call OpenAI API through proxy\nasync function callOpenAI(command, sheetContext) {\n  try {\n    const response = await fetch(API_PROXY_URL, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        command: command,\n        sheetContext: sheetContext\n      })\n    });\n    \n    if (!response.ok) {\n      const errorData = await response.json();\n      return {\n        success: false,\n        error: errorData.error || `서버 오류 (${response.status})`\n      };\n    }\n    \n    return await response.json();\n    \n  } catch (error) {\n    console.error('Proxy API Error:', error);\n    return {\n      success: false,\n      error: `API 요청 오류: ${error.toString()}`\n    };\n  }\n}\n\n// Original OpenAI API call (no longer used)\nasync function callOpenAIDirectly(command, sheetContext) {\n  const systemPrompt = `You are an Excel assistant that interprets natural language commands and returns JSON instructions for Excel operations.\n  \nAvailable operations:\n1. merge: Merge cells\n2. sum: Sum values in a range or column\n3. average: Calculate average\n4. count: Count cells (can count all, numbers only, or based on conditions)\n5. format: Format cells (bold, italic, font color, background color, etc.)\n6. sort: Sort data\n7. filter: Filter data\n8. insert: Insert rows/columns\n9. delete: Delete rows/columns\n10. formula: Add custom formula\n11. chart: Create chart\n12. conditional_format: Add conditional formatting\n13. translate: Translate cell contents to another language\n14. compress: Remove empty rows in a specific column range\n15. retry_translation: Retry translation for failed items marked as [번역 실패]\n\nFor sum operation:\n- If user mentions a column by header name (e.g., \"totalToken 열의 합\", \"totalToken 합산\"), return: { \"sumType\": \"column\", \"columnName\": \"totalToken\" }\n- The system will automatically find the column, determine the data range, and place the sum in the first empty cell below the data\n- For specific range sum, use: { \"sourceRange\": \"A2:A10\" }\n- For adding sum below selection, use: { \"addNewRow\": true }\n\nCurrent sheet context:\n- Active range: ${sheetContext.activeRange.address}\n- Sheet dimensions: ${sheetContext.lastRow} rows x ${sheetContext.lastColumn} columns\n- Headers: ${sheetContext.headers.map(h => `Column ${h.columnLetter}: \"${h.label}\"`).join(', ')}\n\nReturn JSON in this format:\n{\n  \"operation\": \"operation_name\",\n  \"parameters\": {\n    // operation-specific parameters\n  }\n}`;\n\n  const url = 'https://api.openai.com/v1/chat/completions';\n  \n  const payload = {\n    model: 'gpt-4.1-2025-04-14',\n    messages: [\n      { role: 'system', content: systemPrompt },\n      { role: 'user', content: `Current Excel state:\nHeaders: ${sheetContext.headers.map(h => `Column ${h.columnLetter}: \"${h.label}\"`).join(', ')}\nActive sheet: ${sheetContext.sheetName}\n\nUser command: ${command}` }\n    ],\n    temperature: 0.3,\n    max_tokens: 500\n  };\n  \n  try {\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${OPENAI_API_KEY}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(payload)\n    });\n    \n    if (!response.ok) {\n      const errorData = await response.json();\n      if (response.status === 429) {\n        return {\n          success: false,\n          error: 'API 요청 한도를 초과했습니다. 잠시 후 다시 시도해주세요.'\n        };\n      } else if (response.status === 401) {\n        return {\n          success: false,\n          error: 'API 키가 유효하지 않습니다. API 키를 확인해주세요.'\n        };\n      }\n      return {\n        success: false,\n        error: `API 오류 (${response.status}): ${errorData.error?.message || '알 수 없는 오류'}`\n      };\n    }\n    \n    const result = await response.json();\n    \n    if (result.choices && result.choices[0]) {\n      const content = result.choices[0].message.content;\n      try {\n        const parsedCommand = JSON.parse(content);\n        return {\n          success: true,\n          data: parsedCommand\n        };\n      } catch (parseError) {\n        console.error('Failed to parse AI response:', content);\n        return {\n          success: false,\n          error: 'AI 응답을 해석할 수 없습니다. 다시 시도해주세요.'\n        };\n      }\n    } else {\n      return {\n        success: false,\n        error: 'OpenAI API 응답을 파싱할 수 없습니다.'\n      };\n    }\n  } catch (error) {\n    console.error('OpenAI API Error:', error);\n    return {\n      success: false,\n      error: `OpenAI API 오류: ${error.toString()}`\n    };\n  }\n}\n\n// Execute the interpreted command\nasync function executeInterpretedCommand(context, commandData) {\n  // Check if multiple operations\n  if (commandData.operations && Array.isArray(commandData.operations)) {\n    console.log('Executing multiple operations:', commandData.operations.length);\n    const results = [];\n    let successCount = 0;\n    \n    for (const op of commandData.operations) {\n      const result = await executeSingleOperation(context, op.operation, op.parameters || {});\n      results.push(result);\n      if (result.success) successCount++;\n    }\n    \n    return {\n      success: successCount === commandData.operations.length,\n      message: `${successCount}/${commandData.operations.length} 작업이 완료되었습니다.`,\n      results: results\n    };\n  }\n  \n  // Single operation\n  return await executeSingleOperation(context, commandData.operation, commandData.parameters || {});\n}\n\n// Execute a single operation\nasync function executeSingleOperation(context, operation, params) {\n  console.log(`[${new Date().toISOString()}] Executing operation: ${operation} with params:`, params);\n  \n  try {\n    switch (operation) {\n      case 'merge':\n        return await executeMerge(context, params);\n      \n      case 'sum':\n        return await executeSum(context, params);\n      \n      case 'average':\n        return await executeAverage(context, params);\n      \n      case 'count':\n        return await executeCount(context, params);\n      \n      case 'format':\n        return await executeFormat(context, params);\n      \n      case 'sort':\n        return await executeSort(context, params);\n      \n      case 'filter':\n        return await executeFilter(context, params);\n      \n      case 'insert':\n        return await executeInsert(context, params);\n      \n      case 'delete':\n        return await executeDelete(context, params);\n      \n      case 'formula':\n        return await executeFormula(context, params);\n      \n      case 'chart':\n        return await executeChart(context, params);\n      \n      case 'conditional_format':\n        return await executeConditionalFormat(context, params);\n      \n      case 'translate':\n        return await executeTranslate(context, params);\n      \n      case 'compress':\n        return await executeCompress(context, params);\n      \n      case 'retry_translation':\n        return await executeRetryTranslation(context, params);\n      \n      case 'remove_border':\n        return await executeRemoveBorder(context, params);\n      \n      default:\n        return {\n          success: false,\n          error: `알 수 없는 작업: ${operation}`\n        };\n    }\n  } catch (error) {\n    console.error('Error in executeInterpretedCommand:', error);\n    return {\n      success: false,\n      error: `작업 실행 중 오류: ${error.message || error.toString()}`\n    };\n  }\n}\n\n// Merge cells\nasync function executeMerge(context, params) {\n  console.log('executeMerge started with params:', params);\n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  const range = params.range ? worksheet.getRange(params.range) : context.workbook.getSelectedRange();\n  \n  console.log('Loading range address...');\n  // Load address property before using it\n  range.load('address');\n  await context.sync();\n  \n  console.log('Range address loaded:', range.address);\n  const rangeAddress = range.address;\n  \n  console.log('Merging range...');\n  range.merge();\n  await context.sync();\n  \n  console.log('Merge completed successfully');\n  return {\n    success: true,\n    message: `${rangeAddress} 범위가 병합되었습니다.`\n  };\n}\n\n// Sum values\nasync function executeSum(context, params) {\n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  \n  // If column name is provided, find the column and create range\n  if (params.columnName || params.sumType === 'column') {\n    console.log('Sum by column name:', params.columnName);\n    \n    // Get sheet context to find column by name\n    const usedRange = worksheet.getUsedRange();\n    usedRange.load([\"values\", \"rowCount\", \"columnCount\"]);\n    await context.sync();\n    \n    if (!usedRange || usedRange.rowCount === 0) {\n      return {\n        success: false,\n        error: '시트에 데이터가 없습니다.'\n      };\n    }\n    \n    let columnIndex = -1;\n    let columnLetter = '';\n    \n    // Check if columnName is a single letter (column letter like \"D\")\n    if (params.columnName && params.columnName.match(/^[A-Z]$/)) {\n      // Direct column letter reference\n      columnLetter = params.columnName;\n      columnIndex = columnLetter.charCodeAt(0) - 65;\n      console.log('Column letter specified:', columnLetter, 'index:', columnIndex);\n    } else {\n      // Find column by header name\n      const headers = usedRange.values[0];\n      \n      for (let i = 0; i < headers.length; i++) {\n        if (headers[i] && headers[i].toString().toLowerCase() === (params.columnName || '').toLowerCase()) {\n          columnIndex = i;\n          columnLetter = getColumnLetter(i);\n          break;\n        }\n      }\n    }\n    \n    if (columnIndex === -1) {\n      return {\n        success: false,\n        error: `\"${params.columnName}\" 열을 찾을 수 없습니다.`\n      };\n    }\n    \n    // Find last row with data in this column\n    let lastDataRow = 1; // Start from row 2 (after header)\n    for (let row = 1; row < usedRange.rowCount; row++) {\n      if (usedRange.values[row][columnIndex] !== null && \n          usedRange.values[row][columnIndex] !== undefined && \n          usedRange.values[row][columnIndex] !== '') {\n        lastDataRow = row + 1; // +1 because Excel rows are 1-indexed\n      }\n    }\n    \n    // Create range from row 2 to last data row\n    const rangeAddress = `${columnLetter}2:${columnLetter}${lastDataRow}`;\n    const sumCell = worksheet.getCell(lastDataRow, columnIndex); // This will place sum in row lastDataRow+1 (0-based index)\n    \n    console.log(`Summing range: ${rangeAddress}, placing result in row ${lastDataRow + 1}`);\n    \n    sumCell.formulas = [[`=SUM(${rangeAddress})`]];\n    await context.sync();\n    \n    sumCell.load([\"values\", \"address\"]);\n    await context.sync();\n    \n    return {\n      success: true,\n      message: `${params.columnName} 열의 합계를 ${sumCell.address}에 계산했습니다: ${formatNumber(sumCell.values[0][0])}`,\n      value: sumCell.values[0][0]\n    };\n  }\n  \n  // Original logic for range-based sum\n  const sourceRange = params.sourceRange ? worksheet.getRange(params.sourceRange) : context.workbook.getSelectedRange();\n  \n  sourceRange.load([\"columnIndex\", \"rowIndex\", \"rowCount\", \"address\"]);\n  await context.sync();\n  \n  if (params.addNewRow === true) {\n    // Add new row for sum\n    const column = sourceRange.columnIndex;\n    const lastRow = sourceRange.rowIndex + sourceRange.rowCount;\n    const newCell = worksheet.getCell(lastRow, column);\n    \n    newCell.formulas = [[`=SUM(${sourceRange.address})`]];\n    await context.sync();\n    \n    newCell.load([\"values\", \"address\"]);\n    await context.sync();\n    \n    return {\n      success: true,\n      message: `${newCell.address}에 합계를 계산했습니다: ${formatNumber(newCell.values[0][0])}`,\n      value: newCell.values[0][0]\n    };\n  } else if (params.targetCell) {\n    // Sum to specific cell\n    const targetCell = worksheet.getRange(params.targetCell);\n    targetCell.formulas = [[`=SUM(${sourceRange.address})`]];\n    await context.sync();\n    \n    targetCell.load([\"values\", \"address\"]);\n    await context.sync();\n    \n    return {\n      success: true,\n      message: `${targetCell.address}에 합계를 계산했습니다: ${formatNumber(targetCell.values[0][0])}`,\n      value: targetCell.values[0][0]\n    };\n  } else {\n    // Default: add sum below the range\n    const column = sourceRange.columnIndex;\n    const lastRow = sourceRange.rowIndex + sourceRange.rowCount;\n    const newCell = worksheet.getCell(lastRow, column);\n    \n    newCell.formulas = [[`=SUM(${sourceRange.address})`]];\n    await context.sync();\n    \n    newCell.load([\"values\", \"address\"]);\n    await context.sync();\n    \n    return {\n      success: true,\n      message: `${newCell.address}에 합계를 계산했습니다: ${formatNumber(newCell.values[0][0])}`,\n      value: newCell.values[0][0]\n    };\n  }\n}\n\n// Calculate average\nasync function executeAverage(context, params) {\n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  let sourceRange;\n  let rangeDescription = '';\n  \n  try {\n    // Handle different average types\n    if (params.averageType === 'column') {\n      if (params.column) {\n        // Column specified by letter (e.g., \"C\")\n        const usedRange = worksheet.getUsedRange();\n        if (!usedRange) {\n          return { success: false, error: '데이터가 없습니다.' };\n        }\n        \n        usedRange.load([\"rowCount\", \"columnCount\"]);\n        await context.sync();\n        \n        const columnIndex = params.column.charCodeAt(0) - 65;\n        if (columnIndex < 0 || columnIndex >= usedRange.columnCount) {\n          return { success: false, error: '유효하지 않은 열입니다.' };\n        }\n        \n        // Get column data starting from row 2 (skip header)\n        if (usedRange.rowCount > 1) {\n          sourceRange = worksheet.getRangeByIndexes(1, columnIndex, usedRange.rowCount - 1, 1);\n          rangeDescription = `${params.column}열`;\n        } else {\n          return { success: false, error: '평균을 계산할 데이터가 없습니다.' };\n        }\n      } else if (params.columnName) {\n        // Column specified by header name\n        const headers = await getHeaders(context);\n        const columnInfo = headers.find(h => h.label === params.columnName);\n        \n        if (!columnInfo) {\n          return { success: false, error: `\"${params.columnName}\" 열을 찾을 수 없습니다.` };\n        }\n        \n        const usedRange = worksheet.getUsedRange();\n        usedRange.load([\"rowCount\"]);\n        await context.sync();\n        \n        if (usedRange.rowCount > 1) {\n          sourceRange = worksheet.getRangeByIndexes(1, columnInfo.column - 1, usedRange.rowCount - 1, 1);\n          rangeDescription = `\"${params.columnName}\" 열`;\n        } else {\n          return { success: false, error: '평균을 계산할 데이터가 없습니다.' };\n        }\n      }\n    } else if (params.averageType === 'row') {\n      // Row average (e.g., \"3행 평균\")\n      const usedRange = worksheet.getUsedRange();\n      if (!usedRange) {\n        return { success: false, error: '데이터가 없습니다.' };\n      }\n      \n      usedRange.load([\"rowCount\", \"columnCount\"]);\n      await context.sync();\n      \n      const rowIndex = params.row - 1; // Convert to 0-based\n      if (rowIndex < 0 || rowIndex >= usedRange.rowCount) {\n        return { success: false, error: '유효하지 않은 행입니다.' };\n      }\n      \n      // Get entire row data\n      sourceRange = worksheet.getRangeByIndexes(rowIndex, 0, 1, usedRange.columnCount);\n      rangeDescription = `${params.row}행`;\n    } else if (params.sourceRange) {\n      // Specific range (e.g., \"C1:C100\")\n      sourceRange = worksheet.getRange(params.sourceRange);\n      rangeDescription = params.sourceRange;\n    } else {\n      // Default: use selected range\n      sourceRange = context.workbook.getSelectedRange();\n      rangeDescription = '선택한 범위';\n    }\n    \n    sourceRange.load([\"columnIndex\", \"rowIndex\", \"rowCount\", \"columnCount\", \"address\"]);\n    await context.sync();\n    \n    // Determine where to place the result\n    let targetCell;\n    if (params.targetCell) {\n      targetCell = worksheet.getRange(params.targetCell);\n    } else if (params.averageType === 'row') {\n      // For row average, place result at the end of the row\n      const lastColumn = sourceRange.columnIndex + sourceRange.columnCount;\n      targetCell = worksheet.getCell(sourceRange.rowIndex, lastColumn);\n    } else {\n      // For column average or range, place result below\n      const lastRow = sourceRange.rowIndex + sourceRange.rowCount;\n      targetCell = worksheet.getCell(lastRow, sourceRange.columnIndex);\n    }\n    \n    // Apply AVERAGE formula\n    targetCell.formulas = [[`=AVERAGE(${sourceRange.address})`]];\n    targetCell.numberFormat = [[\"#,##0.00\"]]; // Format as number with 2 decimal places\n    await context.sync();\n    \n    targetCell.load([\"values\", \"address\"]);\n    await context.sync();\n    \n    return {\n      success: true,\n      message: `${rangeDescription}의 평균을 ${targetCell.address}에 계산했습니다: ${formatNumber(targetCell.values[0][0])}`,\n      value: targetCell.values[0][0]\n    };\n    \n  } catch (error) {\n    console.error('Error in executeAverage:', error);\n    return {\n      success: false,\n      error: `평균 계산 중 오류 발생: ${error.message}`\n    };\n  }\n}\n\n// Count cells\nasync function executeCount(context, params) {\n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  const sourceRange = params.sourceRange ? worksheet.getRange(params.sourceRange) : context.workbook.getSelectedRange();\n  \n  sourceRange.load([\"address\"]);\n  await context.sync();\n  \n  let formula;\n  if (params.countType === 'countif' && params.condition !== undefined) {\n    let criteria;\n    if (params.operator === 'contains') {\n      criteria = `\"*${params.condition}*\"`;\n    } else if (params.operator === 'equals') {\n      criteria = typeof params.condition === 'string' ? `\"${params.condition}\"` : params.condition;\n    } else if (params.operator && ['>', '<', '>=', '<=', '<>'].includes(params.operator)) {\n      criteria = `\"${params.operator}${params.condition}\"`;\n    } else {\n      if (typeof params.condition === 'string') {\n        criteria = `\"*${params.condition}*\"`;\n      } else {\n        criteria = params.condition;\n      }\n    }\n    formula = `=COUNTIF(${sourceRange.address}, ${criteria})`;\n  } else if (params.countType === 'counta') {\n    formula = `=COUNTA(${sourceRange.address})`;\n  } else {\n    formula = `=COUNT(${sourceRange.address})`;\n  }\n  \n  let resultCell;\n  if (params.targetCell) {\n    resultCell = worksheet.getRange(params.targetCell);\n  } else {\n    const usedRange = worksheet.getUsedRange();\n    await context.sync();\n    \n    const lastRow = usedRange ? usedRange.rowCount : 1;\n    const lastCol = usedRange ? usedRange.columnCount : 1;\n    resultCell = worksheet.getCell(lastRow, lastCol);\n  }\n  \n  resultCell.formulas = [[formula]];\n  await context.sync();\n  \n  resultCell.load(\"values\");\n  await context.sync();\n  \n  return {\n    success: true,\n    message: params.countType === 'countif' ? \n      `\"${params.condition}\"을(를) 포함하는 셀의 개수: ${formatNumber(resultCell.values[0][0])}개` :\n      `개수를 계산했습니다: ${formatNumber(resultCell.values[0][0])}개`,\n    value: resultCell.values[0][0]\n  };\n}\n\n// Format cells\nasync function executeFormat(context, params) {\n  console.log('executeFormat called with params:', params);\n  \n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  const range = params.range ? worksheet.getRange(params.range) : context.workbook.getSelectedRange();\n  \n  range.load(\"format\");\n  await context.sync();\n  \n  if (params.bold !== undefined) {\n    range.format.font.bold = params.bold;\n  }\n  \n  if (params.italic !== undefined) {\n    range.format.font.italic = params.italic;\n  }\n  \n  if (params.fontSize) {\n    range.format.font.size = params.fontSize;\n  }\n  \n  if (params.fontColor) {\n    range.format.font.color = params.fontColor;\n  }\n  \n  if (params.backgroundColor) {\n    range.format.fill.color = params.backgroundColor;\n  }\n  \n  if (params.horizontalAlignment) {\n    range.format.horizontalAlignment = params.horizontalAlignment === 'left' ? 'Left' :\n                                     params.horizontalAlignment === 'center' ? 'Center' :\n                                     params.horizontalAlignment === 'right' ? 'Right' : 'General';\n  }\n  \n  if (params.numberFormat) {\n    // Handle specific format types\n    let format = params.numberFormat;\n    if (format === 'number' || format === '숫자') {\n      format = '#,##0';\n    } else if (format === 'currency' || format === '원화' || format === 'won' || format === '통화') {\n      format = '₩#,##0';\n    } else if (format === 'currency_decimal' || format === '원화_소수') {\n      format = '₩#,##0.00';\n    } else if (format === 'percentage' || format === '퍼센트' || format === '백분율') {\n      format = '0%';\n    } else if (format === 'percentage_decimal' || format === '퍼센트_소수') {\n      format = '0.00%';\n    } else if (format === 'date' || format === '날짜') {\n      format = 'yyyy-mm-dd';\n    } else if (format === 'time' || format === '시간') {\n      format = 'hh:mm:ss';\n    } else if (format === 'text' || format === '텍스트') {\n      format = '@';\n    } else if (format === 'general' || format === '일반') {\n      format = 'General';\n    }\n    \n    // Set number format for the range\n    range.numberFormat = format;\n  }\n  \n  await context.sync();\n  \n  return {\n    success: true,\n    message: '서식이 적용되었습니다.'\n  };\n}\n\n// Sort data\nasync function executeSort(context, params) {\n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  const range = params.range ? worksheet.getRange(params.range) : worksheet.getUsedRange();\n  \n  const column = params.column || 1;\n  const ascending = params.ascending !== undefined ? params.ascending : true;\n  \n  range.sort.apply([\n    {\n      key: column - 1, // Excel API uses 0-based index\n      ascending: ascending\n    }\n  ]);\n  \n  await context.sync();\n  \n  const columnLetter = getColumnLetter(column - 1);\n  \n  return {\n    success: true,\n    message: `${columnLetter}열 기준으로 ${ascending ? '오름차순' : '내림차순'} 정렬되었습니다.`\n  };\n}\n\n// Create chart\nasync function executeChart(context, params) {\n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  const sourceData = params.range ? worksheet.getRange(params.range) : context.workbook.getSelectedRange();\n  \n  console.log('Creating chart with params:', params);\n  \n  // Load the source data to ensure it's available\n  sourceData.load([\"address\", \"values\"]);\n  await context.sync();\n  \n  console.log('Chart data range:', sourceData.address);\n  \n  // Determine chart type\n  let chartType;\n  if (params.chartType === 'bar' || params.chartType === '막대') {\n    chartType = Excel.ChartType.columnClustered;\n  } else if (params.chartType === 'line' || params.chartType === '선') {\n    chartType = Excel.ChartType.line;\n  } else if (params.chartType === 'pie' || params.chartType === '원') {\n    chartType = Excel.ChartType.pie;\n  } else if (params.chartType === 'scatter' || params.chartType === '분산형') {\n    chartType = Excel.ChartType.xyscatter;\n  } else {\n    // Default to column chart\n    chartType = Excel.ChartType.columnClustered;\n  }\n  \n  // Create the chart\n  const chart = worksheet.charts.add(chartType, sourceData, Excel.ChartSeriesBy.auto);\n  \n  // Set chart properties\n  chart.title.text = params.title || '차트';\n  chart.height = 300;\n  chart.width = 400;\n  \n  // Position the chart\n  chart.left = params.offsetX || 100;\n  chart.top = params.offsetY || 100;\n  \n  // Set legend position\n  chart.legend.position = Excel.ChartLegendPosition.bottom;\n  chart.legend.visible = true;\n  \n  await context.sync();\n  \n  return {\n    success: true,\n    message: `${sourceData.address} 범위로 ${params.chartType || '막대'} 차트가 생성되었습니다.`\n  };\n}\n\n// Add conditional formatting\nasync function executeConditionalFormat(context, params) {\n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  const range = params.range ? worksheet.getRange(params.range) : worksheet.getUsedRange();\n  \n  console.log('Applying conditional format with params:', params);\n  \n  // Simply apply conditional format to the entire range\n  // Excel will automatically skip non-numeric cells for numeric comparisons\n  const conditionalFormat = range.conditionalFormats.add(Excel.ConditionalFormatType.cellValue);\n  \n  // Set the rule based on condition\n  if (params.condition === 'greater_than' && params.value !== undefined) {\n    conditionalFormat.cellValue.rule = {\n      formula1: params.value.toString(),\n      operator: Excel.ConditionalCellValueOperator.greaterThan\n    };\n  } else if (params.condition === 'less_than' && params.value !== undefined) {\n    conditionalFormat.cellValue.rule = {\n      formula1: params.value.toString(),\n      operator: Excel.ConditionalCellValueOperator.lessThan\n    };\n  } else if (params.condition === 'equal_to' && params.value !== undefined) {\n    conditionalFormat.cellValue.rule = {\n      formula1: params.value.toString(),\n      operator: Excel.ConditionalCellValueOperator.equalTo\n    };\n  } else if (params.condition === 'text_contains' && params.value !== undefined) {\n    conditionalFormat.cellValue.rule = {\n      formula1: params.value.toString(),\n      operator: Excel.ConditionalCellValueOperator.containsText\n    };\n  } else {\n    // Default to greater than\n    conditionalFormat.cellValue.rule = {\n      formula1: (params.value || 0).toString(),\n      operator: Excel.ConditionalCellValueOperator.greaterThan\n    };\n  }\n  \n  // Set the format\n  conditionalFormat.cellValue.format.fill.color = params.backgroundColor || \"#00FF00\";\n  if (params.fontColor) {\n    conditionalFormat.cellValue.format.font.color = params.fontColor;\n  }\n  if (params.bold) {\n    conditionalFormat.cellValue.format.font.bold = true;\n  }\n  \n  await context.sync();\n  \n  return {\n    success: true,\n    message: `조건부 서식이 적용되었습니다. (${params.condition} ${params.value || ''})`\n  };\n}\n\n// Translate column contents\nasync function executeTranslate(context, params) {\n  console.log('executeTranslate called with params:', params);\n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  \n  if (!params.targetLanguage) {\n    return { success: false, error: '대상 언어를 지정해주세요.' };\n  }\n  \n  let sourceRange;\n  let targetColumnIndex;\n  \n  if (params.sourceRange) {\n    // Handle column ranges like \"C:C\" by intersecting with used range\n    if (params.sourceRange.match(/^[A-Z]+:[A-Z]+$/)) {\n      console.log('Handling column range:', params.sourceRange);\n      const usedRange = worksheet.getUsedRange();\n      if (!usedRange) {\n        return { success: false, error: '번역할 데이터가 없습니다.' };\n      }\n      \n      usedRange.load([\"rowCount\", \"columnCount\"]);\n      await context.sync();\n      \n      console.log('Used range:', {\n        rowCount: usedRange.rowCount,\n        columnCount: usedRange.columnCount\n      });\n      \n      // Get the column letter from the range (e.g., \"C\" from \"C:C\")\n      const columnLetter = params.sourceRange.split(':')[0];\n      const columnIndex = columnLetter.charCodeAt(0) - 65;\n      \n      // Get only the used portion of the column, starting from row 2 (skip header)\n      if (usedRange.rowCount > 1) {\n        sourceRange = worksheet.getRangeByIndexes(1, columnIndex, usedRange.rowCount - 1, 1);\n      } else {\n        return { success: false, error: '번역할 데이터가 없습니다.' };\n      }\n      \n      // Handle target range similarly\n      if (params.targetRange && params.targetRange.match(/^[A-Z]+:[A-Z]+$/)) {\n        const targetColumnLetter = params.targetRange.split(':')[0];\n        targetColumnIndex = targetColumnLetter.charCodeAt(0) - 65;\n        console.log('Target column calculation:', {\n          targetRange: params.targetRange,\n          targetColumnLetter,\n          targetColumnIndex\n        });\n      } else {\n        // If no target specified, use next column\n        targetColumnIndex = columnIndex + 1;\n        console.log('Using next column as target:', {\n          sourceColumnIndex: columnIndex,\n          targetColumnIndex\n        });\n      }\n    } else {\n      // Handle specific ranges like \"B2:B40\"\n      sourceRange = worksheet.getRange(params.sourceRange);\n      \n      // Parse target column if specified\n      if (params.targetRange) {\n        if (params.targetRange.match(/^[A-Z]+:[A-Z]+$/)) {\n          // Extract column letter from targetRange like \"E:E\"\n          const targetColumnLetter = params.targetRange.split(':')[0];\n          targetColumnIndex = targetColumnLetter.charCodeAt(0) - 65;\n          console.log('Target column parsed from targetRange:', {\n            targetRange: params.targetRange,\n            targetColumnLetter,\n            targetColumnIndex\n          });\n        }\n      }\n    }\n  } else if (params.sourceColumn) {\n    const columnIndex = params.sourceColumn.charCodeAt(0) - 65;\n    const usedRange = worksheet.getUsedRange();\n    usedRange.load([\"rowCount\"]);\n    await context.sync();\n    \n    if (usedRange.rowCount > 1) {\n      sourceRange = worksheet.getRangeByIndexes(1, columnIndex, usedRange.rowCount - 1, 1);\n    } else {\n      return { success: false, error: '번역할 데이터가 없습니다.' };\n    }\n    \n    targetColumnIndex = params.targetColumn === 'next' ? columnIndex + 1 :\n                       params.targetColumn ? params.targetColumn.charCodeAt(0) - 65 : columnIndex + 1;\n  } else {\n    return { success: false, error: '번역할 열을 지정해주세요.' };\n  }\n  \n  sourceRange.load([\"values\", \"rowIndex\", \"columnIndex\", \"rowCount\"]);\n  await context.sync();\n  \n  console.log('Source range loaded:', {\n    rowIndex: sourceRange.rowIndex,\n    columnIndex: sourceRange.columnIndex,\n    rowCount: sourceRange.rowCount,\n    values: sourceRange.values ? `${sourceRange.values.length} rows` : 'null'\n  });\n  \n  const sourceValues = sourceRange.values;\n  if (!sourceValues || sourceValues.length === 0) {\n    return { success: false, error: '번역할 데이터가 없습니다.' };\n  }\n  \n  const translations = [];\n  const batchSize = 20;\n  \n  // Translate in batches\n  for (let i = 0; i < sourceValues.length; i += batchSize) {\n    const batch = sourceValues.slice(i, Math.min(i + batchSize, sourceValues.length));\n    const batchTexts = batch.map(row => row[0]).filter(text => text);\n    \n    if (batchTexts.length > 0) {\n      const translatedBatch = await translateBatch(batchTexts, params.targetLanguage, params.sourceLanguage);\n      \n      // Check if translatedBatch is valid\n      if (!translatedBatch || !Array.isArray(translatedBatch)) {\n        console.error('Invalid translation batch received:', translatedBatch);\n        // Mark all as translation failed\n        for (let j = 0; j < batch.length; j++) {\n          if (batch[j][0]) {\n            translations.push([{ text: '번역 실패', isError: true }]);\n          } else {\n            translations.push([{ text: '', isError: false }]);\n          }\n        }\n      } else {\n        console.log('Processing translation batch:', {\n          batchLength: batch.length,\n          translatedBatchLength: translatedBatch.length,\n          sampleTranslations: translatedBatch.slice(0, 3),\n          firstTranslation: translatedBatch[0],\n          translationType: typeof translatedBatch[0],\n          rawData: JSON.stringify(translatedBatch.slice(0, 3))\n        });\n        \n        let translationIndex = 0;\n        for (let j = 0; j < batch.length; j++) {\n          if (batch[j][0]) {\n            const translatedText = translatedBatch[translationIndex] || '';\n            // Check if translation is empty or failed\n            if (!translatedText || translatedText.trim() === '') {\n              translations.push([{ text: '번역 실패', isError: true }]);\n            } else {\n              translations.push([{ text: translatedText, isError: false }]);\n            }\n            if (j < 3) {\n              console.log(`Translation ${j}: \"${batch[j][0]}\" -> \"${translatedText}\"`);\n            }\n            translationIndex++;\n          } else {\n            // Keep empty rows as empty\n            translations.push([{ text: '', isError: false }]);\n          }\n        }\n      }\n    } else {\n      for (let j = 0; j < batch.length; j++) {\n        translations.push([{ text: '', isError: false }]);\n      }\n    }\n    \n    // Show progress\n    if (i % 100 === 0 && i > 0) {\n      showStatus(`번역 중... ${Math.round((i / sourceValues.length) * 100)}%`, 'info');\n    }\n  }\n  \n  // Write translations\n  console.log('Writing translations to target column:', {\n    rowIndex: sourceRange.rowIndex,\n    targetColumnIndex: targetColumnIndex || sourceRange.columnIndex + 1,\n    translationsCount: translations.length,\n    sampleTranslations: translations.slice(0, 3).map(t => t[0])\n  });\n  console.log('First 5 translations raw:', JSON.stringify(translations.slice(0, 5)));\n  console.log('Translation content check:', {\n    first: translations[0] ? translations[0][0] : 'null',\n    second: translations[1] ? translations[1][0] : 'null',\n    third: translations[2] ? translations[2][0] : 'null',\n    isEmpty: translations[0] && translations[0][0] === ''\n  });\n  \n  // DEBUG: Check if translations contain original text instead of translations\n  console.log('DEBUG: Comparing source and translations:');\n  for (let i = 0; i < Math.min(5, translations.length); i++) {\n    console.log(`  [${i}] Source: \"${sourceValues[i][0]}\" -> Translation: \"${translations[i][0]}\"`);\n  }\n  \n  // Ensure targetColumnIndex is set correctly\n  if (targetColumnIndex === undefined) {\n    // If no target column specified, use the next column after source\n    targetColumnIndex = sourceRange.columnIndex + 1;\n    console.log('No target column specified, using next column:', targetColumnIndex);\n  }\n  \n  const targetRange = worksheet.getRangeByIndexes(\n    sourceRange.rowIndex,\n    targetColumnIndex,\n    translations.length,\n    1\n  );\n  \n  targetRange.load([\"address\", \"values\"]);\n  await context.sync();\n  console.log('Target range address:', targetRange.address);\n  console.log('Existing target values (first 3):', targetRange.values.slice(0, 3));\n  \n  // Clear existing values first\n  targetRange.clear(Excel.ClearApplyTo.contents);\n  await context.sync();\n  console.log('Target range cleared');\n  \n  // Ensure translations are properly formatted as 2D array\n  console.log('Setting target range values:', {\n    translationsLength: translations.length,\n    firstTranslation: translations[0],\n    isArray: Array.isArray(translations),\n    is2DArray: Array.isArray(translations[0])\n  });\n  \n  // Process translations and prepare values\n  const stringTranslations = [];\n  const errorRows = [];\n  \n  for (let i = 0; i < translations.length; i++) {\n    const translation = translations[i][0];\n    if (translation && typeof translation === 'object') {\n      stringTranslations.push([translation.text]);\n      if (translation.isError) {\n        errorRows.push(i);\n      }\n    } else {\n      // Handle legacy format\n      stringTranslations.push([String(translation || '')]);\n    }\n  }\n  \n  console.log('String translations (first 3):', stringTranslations.slice(0, 3));\n  console.log('Error rows:', errorRows.length, 'rows marked as errors');\n  \n  // Set the values\n  targetRange.values = stringTranslations;\n  await context.sync();\n  \n  // Apply error styling to failed translations\n  if (errorRows.length > 0) {\n    for (const rowIndex of errorRows) {\n      const errorCell = targetRange.getCell(rowIndex, 0);\n      errorCell.format.fill.color = \"#FFE6E6\"; // Light red background\n      errorCell.format.font.color = \"#CC0000\"; // Dark red text\n      errorCell.format.font.bold = true;\n    }\n    await context.sync();\n  }\n  \n  console.log('Translations written to Excel with error styling applied');\n  \n  // Verify the values were actually written\n  targetRange.load([\"values\", \"text\", \"valueTypes\"]);\n  await context.sync();\n  console.log('Verification - Target range:', {\n    address: targetRange.address,\n    values: targetRange.values.slice(0, 3),\n    text: targetRange.text.slice(0, 3),\n    valueTypes: targetRange.valueTypes.slice(0, 3),\n    actualFirstValue: targetRange.values[0] ? targetRange.values[0][0] : 'null',\n    firstThreeValues: [\n      targetRange.values[0] ? targetRange.values[0][0] : 'empty',\n      targetRange.values[1] ? targetRange.values[1][0] : 'empty',\n      targetRange.values[2] ? targetRange.values[2][0] : 'empty'\n    ]\n  });\n  \n  // Try alternative method - set each cell individually for debugging\n  if (translations.length > 0) {\n    const isEmpty = !targetRange.values[0] || !targetRange.values[0][0] || targetRange.values[0][0] === '';\n    console.log('Checking if values are empty:', {\n      isEmpty,\n      firstValue: targetRange.values[0] ? targetRange.values[0][0] : 'null',\n      firstValueLength: targetRange.values[0] && targetRange.values[0][0] ? targetRange.values[0][0].length : 0\n    });\n    \n    if (isEmpty) {\n      console.log('Values not visible, trying individual cell approach...');\n      // Try setting just the first few cells individually\n      for (let i = 0; i < Math.min(3, translations.length); i++) {\n        const cellRow = sourceRange.rowIndex + i;\n        const cellCol = targetColumnIndex || sourceRange.columnIndex + 1;\n        const cell = worksheet.getCell(cellRow, cellCol);\n        const cellValue = stringTranslations[i][0];\n        \n        console.log(`Setting cell (${cellRow},${cellCol}) to: \"${cellValue}\"`);\n        cell.values = [[cellValue]];\n        \n        await context.sync();\n        \n        // Verify it was set\n        cell.load(\"values\");\n        await context.sync();\n        console.log(`Cell ${i} after setting:`, cell.values[0][0]);\n      }\n    }\n  }\n  \n  // Add header\n  const headerCell = worksheet.getCell(0, targetColumnIndex || sourceRange.columnIndex + 1);\n  const sourceHeaderCell = worksheet.getCell(0, sourceRange.columnIndex);\n  sourceHeaderCell.load(\"values\");\n  await context.sync();\n  \n  headerCell.values = [[`${sourceHeaderCell.values[0][0]} (${params.targetLanguage})`]];\n  await context.sync();\n  \n  return {\n    success: true,\n    message: `번역이 완료되었습니다. (${sourceValues.length}개 항목)`\n  };\n}\n\n// Translate a batch of texts through proxy\nasync function translateBatch(texts, targetLanguage, sourceLanguage) {\n  try {\n    console.log('translateBatch called with', texts.length, 'texts');\n    const response = await fetch(API_PROXY_URL, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        command: `Translate these items to ${targetLanguage}: ${texts.join(', ')}`,\n        sheetContext: {\n          operation: 'translate_batch',\n          texts: texts,\n          targetLanguage: targetLanguage,\n          sourceLanguage: sourceLanguage\n        }\n      })\n    });\n    \n    console.log('Translation response status:', response.status);\n    \n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    \n    const result = await response.json();\n    console.log('Translation result:', result);\n    \n    if (result.success && result.data && result.data.translations) {\n      console.log('Translations received:', result.data.translations.length);\n      console.log('First 3 translations from API:', result.data.translations.slice(0, 3));\n      console.log('Raw translations data:', JSON.stringify(result.data.translations.slice(0, 5)));\n      return result.data.translations;\n    } else if (result.error) {\n      console.error('Translation API error:', result.error);\n      throw new Error(result.error);\n    } else {\n      console.error('Invalid translation response structure:', result);\n      throw new Error('번역 응답을 받을 수 없습니다.');\n    }\n  } catch (error) {\n    console.error('Translation error:', error);\n    return texts.map(() => '');\n  }\n}\n\n// Helper functions\nfunction getColumnLetter(columnIndex) {\n  let columnLetter = '';\n  let tempIndex = columnIndex;\n  \n  while (tempIndex >= 0) {\n    columnLetter = String.fromCharCode((tempIndex % 26) + 65) + columnLetter;\n    tempIndex = Math.floor(tempIndex / 26) - 1;\n  }\n  \n  return columnLetter;\n}\n\nfunction formatNumber(value) {\n  if (typeof value === 'number') {\n    if (Number.isInteger(value)) {\n      return value.toLocaleString('ko-KR');\n    } else {\n      return value.toLocaleString('ko-KR', { minimumFractionDigits: 0, maximumFractionDigits: 2 });\n    }\n  }\n  return value;\n}\n\nfunction showStatus(message, type) {\n  const status = document.getElementById('status');\n  status.textContent = message;\n  status.className = 'status-message ' + type;\n  status.style.display = 'block';\n  \n  if (window.statusTimeout) {\n    clearTimeout(window.statusTimeout);\n  }\n  \n  if (type === 'success') {\n    window.statusTimeout = setTimeout(() => {\n      status.style.display = 'none';\n    }, 5000);\n  }\n}\n\nfunction clearInput() {\n  document.getElementById('commandInput').value = '';\n  document.getElementById('status').style.display = 'none';\n}\n\nfunction setCommand(command) {\n  document.getElementById('commandInput').value = command;\n  document.getElementById('commandInput').focus();\n}\n\nfunction showSettings() {\n  showStatus('이 애드인은 보안 서버를 통해 AI 기능을 제공합니다. 별도의 API 키 설정이 필요하지 않습니다.', 'info');\n}\n\n// Test backend connection\nasync function testBackendConnection() {\n  try {\n    console.log('Testing backend connection...');\n    const testUrl = 'https://excel-addon-backend.vercel.app/api/test';\n    \n    const response = await fetch(testUrl, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({ test: true })\n    });\n    \n    console.log('Test response status:', response.status);\n    console.log('Test response headers:', response.headers);\n    \n    const data = await response.json();\n    console.log('Test response data:', data);\n    \n    showStatus('백엔드 연결 테스트 성공', 'success');\n  } catch (error) {\n    console.error('Backend test error:', error);\n    showStatus('백엔드 연결 테스트 실패: ' + error.message, 'error');\n  }\n}\n\n// Additional operations (compress, filter, insert, delete, formula, retry_translation)\n// These would need to be implemented based on Excel JavaScript API capabilities\n\nasync function executeCompress(context, params) {\n  console.log('executeCompress called with params:', params);\n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  \n  try {\n    if (!params.range) {\n      return { success: false, error: '범위를 지정해주세요.' };\n    }\n    \n    // Get the specified range\n    const checkRange = worksheet.getRange(params.range);\n    checkRange.load([\"rowIndex\", \"rowCount\", \"columnIndex\", \"values\", \"address\"]);\n    await context.sync();\n    \n    console.log('Compress range:', {\n      address: checkRange.address,\n      rowIndex: checkRange.rowIndex,\n      rowCount: checkRange.rowCount,\n      columnIndex: checkRange.columnIndex\n    });\n    \n    // Find empty rows in the specified column\n    const emptyRows = [];\n    const values = checkRange.values;\n    \n    // Check each row in the range\n    for (let i = 0; i < values.length; i++) {\n      const cellValue = values[i][0]; // First column of the range\n      if (cellValue === null || cellValue === undefined || cellValue === '' || \n          (typeof cellValue === 'string' && cellValue.trim() === '')) {\n        // This row is empty in the specified column\n        // Store the actual row index (rowIndex + i)\n        emptyRows.push(checkRange.rowIndex + i);\n      }\n    }\n    \n    console.log('Found empty rows:', emptyRows.length, 'rows at indices:', emptyRows);\n    \n    if (emptyRows.length === 0) {\n      return {\n        success: true,\n        message: '제거할 빈 행이 없습니다.'\n      };\n    }\n    \n    // IMPORTANT: Only delete rows that are within the specified range\n    // This prevents accidentally deleting rows outside the range (like A1)\n    const minRowIndex = checkRange.rowIndex;\n    const maxRowIndex = checkRange.rowIndex + checkRange.rowCount - 1;\n    \n    // Filter out any row indices that are outside the specified range\n    const rowsToDelete = emptyRows.filter(rowIdx => rowIdx >= minRowIndex && rowIdx <= maxRowIndex);\n    \n    console.log('Rows to delete (filtered):', rowsToDelete);\n    \n    // Delete rows from bottom to top to avoid index shifting\n    rowsToDelete.sort((a, b) => b - a); // Sort in descending order\n    \n    for (const rowIndex of rowsToDelete) {\n      console.log('Deleting row:', rowIndex + 1); // Display 1-based for user\n      // Get the entire row using a fixed large column count to avoid getUsedRange() issues\n      const rowToDelete = worksheet.getRangeByIndexes(rowIndex, 0, 1, 1000);\n      rowToDelete.delete(Excel.DeleteShiftDirection.up);\n      await context.sync();\n    }\n    \n    return {\n      success: true,\n      message: `${rowsToDelete.length}개의 빈 행이 제거되었습니다.`\n    };\n    \n  } catch (error) {\n    console.error('Error in executeCompress:', error);\n    return {\n      success: false,\n      error: `빈 행 제거 중 오류 발생: ${error.message}`\n    };\n  }\n}\n\nasync function executeFilter(context, params) {\n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  const range = params.range ? worksheet.getRange(params.range) : worksheet.getUsedRange();\n  \n  // Apply autofilter\n  range.worksheet.autoFilter.apply(range);\n  \n  await context.sync();\n  \n  return {\n    success: true,\n    message: '필터가 적용되었습니다.'\n  };\n}\n\nasync function executeInsert(context, params) {\n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  const type = params.type || 'row';\n  const position = params.position || 1;\n  const count = params.count || 1;\n  \n  if (type === 'row') {\n    const range = worksheet.getRangeByIndexes(position - 1, 0, count, 1);\n    range.insert(Excel.InsertShiftDirection.down);\n  } else {\n    const range = worksheet.getRangeByIndexes(0, position - 1, 1, count);\n    range.insert(Excel.InsertShiftDirection.right);\n  }\n  \n  await context.sync();\n  \n  return {\n    success: true,\n    message: `${count}개의 ${type === 'row' ? '행' : '열'}이 삽입되었습니다.`\n  };\n}\n\nasync function executeDelete(context, params) {\n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  const type = params.type || 'row';\n  const position = params.position || 1;\n  const count = params.count || 1;\n  \n  if (type === 'row') {\n    const range = worksheet.getRangeByIndexes(position - 1, 0, count, 1);\n    range.delete(Excel.DeleteShiftDirection.up);\n  } else {\n    const range = worksheet.getRangeByIndexes(0, position - 1, 1, count);\n    range.delete(Excel.DeleteShiftDirection.left);\n  }\n  \n  await context.sync();\n  \n  return {\n    success: true,\n    message: `${count}개의 ${type === 'row' ? '행' : '열'}이 삭제되었습니다.`\n  };\n}\n\nasync function executeFormula(context, params) {\n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  const range = params.range ? worksheet.getRange(params.range) : context.workbook.getSelectedRange();\n  \n  if (!params.formula) {\n    return { success: false, error: '수식을 지정해주세요.' };\n  }\n  \n  range.formulas = [[params.formula]];\n  await context.sync();\n  \n  return {\n    success: true,\n    message: '수식이 적용되었습니다.'\n  };\n}\n\nasync function executeRetryTranslation(context, params) {\n  // Implementation would be similar to Google Sheets version\n  // but using Excel JavaScript API\n  return {\n    success: false,\n    error: '이 기능은 현재 구현 중입니다.'\n  };\n}\n\nasync function executeRemoveBorder(context, params) {\n  console.log('executeRemoveBorder called with params:', params);\n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  \n  try {\n    let targetRange;\n    \n    // Determine the range to apply border removal\n    if (params.range) {\n      // Handle special case for entire sheet\n      if (params.range === 'all' || params.range === '전체') {\n        console.log('Removing borders from entire sheet');\n        // Use getUsedRangeOrNullObject to get the actual used range\n        const usedRange = worksheet.getUsedRangeOrNullObject();\n        usedRange.load(\"isNullObject\");\n        await context.sync();\n        \n        if (usedRange.isNullObject) {\n          console.log('No used range in the sheet, nothing to remove borders from');\n          return { success: true, message: '시트에 데이터가 없어 테두리를 제거할 필요가 없습니다.' };\n        } else {\n          // Expand the used range to ensure we get all cells that might have borders\n          usedRange.load([\"rowCount\", \"columnCount\", \"rowIndex\", \"columnIndex\"]);\n          await context.sync();\n          \n          // Get a slightly larger range to ensure we capture all borders\n          const expandedRows = Math.min(usedRange.rowCount + 100, 1048576);\n          const expandedCols = Math.min(usedRange.columnCount + 20, 16384);\n          targetRange = worksheet.getRangeByIndexes(0, 0, expandedRows, expandedCols);\n        }\n      } else if (params.range.match(/^[A-Z]+:[A-Z]+$/)) {\n        // Handle column ranges like \"C:C\"\n        console.log('Handling column range:', params.range);\n        const usedRange = worksheet.getUsedRange();\n        if (!usedRange) {\n          return { success: false, error: '데이터가 없습니다.' };\n        }\n        \n        usedRange.load([\"rowCount\", \"columnCount\"]);\n        await context.sync();\n        \n        // Get the column letter from the range (e.g., \"C\" from \"C:C\")\n        const columnLetter = params.range.split(':')[0];\n        const columnIndex = columnLetter.charCodeAt(0) - 65;\n        \n        // Get the entire used portion of the column\n        targetRange = worksheet.getRangeByIndexes(0, columnIndex, usedRange.rowCount, 1);\n      } else {\n        // Handle specific ranges like \"A1:B10\"\n        targetRange = worksheet.getRange(params.range);\n      }\n    } else {\n      // If no range specified, use the selected range\n      targetRange = context.workbook.getSelectedRange();\n    }\n    \n    // Load the range\n    targetRange.load([\"address\", \"rowCount\", \"columnCount\"]);\n    await context.sync();\n    \n    console.log('Target range for border removal:', {\n      address: targetRange.address,\n      rowCount: targetRange.rowCount,\n      columnCount: targetRange.columnCount\n    });\n    \n    // Determine which borders to remove\n    const borderType = params.borderType || 'all';\n    \n    if (borderType === 'all') {\n      // Remove all borders\n      targetRange.format.borders.getItem(Excel.BorderIndex.edgeLeft).style = Excel.BorderLineStyle.none;\n      targetRange.format.borders.getItem(Excel.BorderIndex.edgeRight).style = Excel.BorderLineStyle.none;\n      targetRange.format.borders.getItem(Excel.BorderIndex.edgeTop).style = Excel.BorderLineStyle.none;\n      targetRange.format.borders.getItem(Excel.BorderIndex.edgeBottom).style = Excel.BorderLineStyle.none;\n      targetRange.format.borders.getItem(Excel.BorderIndex.insideHorizontal).style = Excel.BorderLineStyle.none;\n      targetRange.format.borders.getItem(Excel.BorderIndex.insideVertical).style = Excel.BorderLineStyle.none;\n    } else {\n      // Remove specific border\n      switch (borderType) {\n        case 'right':\n          targetRange.format.borders.getItem(Excel.BorderIndex.edgeRight).style = Excel.BorderLineStyle.none;\n          break;\n        case 'left':\n          targetRange.format.borders.getItem(Excel.BorderIndex.edgeLeft).style = Excel.BorderLineStyle.none;\n          break;\n        case 'top':\n          targetRange.format.borders.getItem(Excel.BorderIndex.edgeTop).style = Excel.BorderLineStyle.none;\n          break;\n        case 'bottom':\n          targetRange.format.borders.getItem(Excel.BorderIndex.edgeBottom).style = Excel.BorderLineStyle.none;\n          break;\n        default:\n          return { success: false, error: `알 수 없는 테두리 유형: ${borderType}` };\n      }\n    }\n    \n    await context.sync();\n    \n    return {\n      success: true,\n      message: `${targetRange.address} 범위의 ${borderType === 'all' ? '모든' : borderType} 테두리가 제거되었습니다.`\n    };\n    \n  } catch (error) {\n    console.error('Error in executeRemoveBorder:', error);\n    return {\n      success: false,\n      error: `테두리 제거 중 오류 발생: ${error.message}`\n    };\n  }\n}"],"names":["__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","m","g","globalThis","this","Function","e","window","o","obj","prop","Object","prototype","hasOwnProperty","call","scriptUrl","importScripts","location","document","currentScript","tagName","toUpperCase","src","scripts","getElementsByTagName","length","i","test","Error","replace","p","b","baseURI","self","href","URL","t","r","Symbol","n","iterator","toStringTag","c","Generator","u","create","_regeneratorDefine2","f","y","G","v","a","d","bind","l","TypeError","done","value","return","GeneratorFunction","GeneratorFunctionPrototype","getPrototypeOf","setPrototypeOf","__proto__","displayName","_regenerator","w","defineProperty","_invoke","enumerable","configurable","writable","asyncGeneratorStep","Promise","resolve","then","_asyncToGenerator","arguments","apply","_next","_throw","recognition","isListening","API_PROXY_URL","process","initializeSpeechRecognition","SpeechRecognition","webkitSpeechRecognition","lang","continuous","interimResults","maxAlternatives","onstart","getElementById","classList","add","textContent","onresult","event","transcript","results","isFinal","onerror","remove","errorMessage","error","showStatus","onend","trim","focus","disabled","_toggleVoiceRecognition","_callee","_t","_t2","_context","stop","hostname","includes","navigator","mediaDevices","getUserMedia","audio","getTracks","forEach","track","start","console","message","name","err","Office","onReady","info","host","HostType","Excel","_testBackendConnection","testBackendConnection","onclick","executeCommand","clearInput","toggleVoiceRecognition","showSettings","querySelectorAll","item","command","getAttribute","addEventListener","key","shiftKey","preventDefault","isExecuting","_executeCommand","_callee3","button","originalText","_t3","_context3","log","innerHTML","run","_ref","_callee2","context","worksheet","range","usedRange","sheetContext","headerRow","interpretation","result","_context2","workbook","worksheets","getActiveWorksheet","getSelectedRange","load","getUsedRange","sync","sheetName","activeRange","address","row","rowIndex","column","columnIndex","numRows","rowCount","numColumns","columnCount","lastRow","lastColumn","headers","dataRange","values","isLargeSheet","push","columnLetter","getColumnLetter","label","toString","callOpenAI","success","executeInterpretedCommand","data","setTimeout","_x43","stack","_x","_x2","_callOpenAI","_callee4","response","errorData","_t4","_context4","fetch","method","body","JSON","stringify","ok","json","concat","status","_x5","_x6","_executeInterpretedCommand","_callee6","commandData","successCount","_iterator","_step","op","_t7","_context6","operations","Array","isArray","_createForOfIteratorHelper","s","executeSingleOperation","operation","parameters","_x7","_x8","_x9","_executeSingleOperation","_callee7","params","_t8","_t9","_context7","Date","toISOString","executeMerge","executeSum","executeAverage","executeCount","executeFormat","executeSort","executeFilter","executeInsert","executeDelete","executeFormula","executeChart","executeConditionalFormat","executeTranslate","executeCompress","executeRetryTranslation","executeRemoveBorder","_x0","_x1","_executeMerge","_callee8","rangeAddress","_context8","getRange","merge","_x10","_x11","_executeSum","_callee9","lastDataRow","sumCell","sourceRange","newCell","targetCell","_column","_lastRow","_newCell","_context9","columnName","sumType","match","charCodeAt","toLowerCase","getCell","formulas","formatNumber","addNewRow","_x12","_x13","_executeAverage","_callee0","rangeDescription","columnInfo","_usedRange","_usedRange2","_t0","_context0","averageType","getRangeByIndexes","getHeaders","find","h","numberFormat","_x14","_x15","_executeCount","_callee1","formula","criteria","resultCell","lastCol","_context1","countType","condition","operator","_x16","_x17","_executeFormat","_callee10","format","_context10","bold","font","italic","fontSize","size","fontColor","color","backgroundColor","fill","horizontalAlignment","_x18","_x19","_executeSort","_callee11","ascending","_context11","sort","_x20","_x21","_executeChart","_callee12","sourceData","chartType","chart","_context12","ChartType","columnClustered","line","pie","xyscatter","charts","ChartSeriesBy","auto","title","text","height","width","left","offsetX","top","offsetY","legend","position","ChartLegendPosition","bottom","visible","_x22","_x23","_executeConditionalFormat","_callee13","conditionalFormat","_context13","conditionalFormats","ConditionalFormatType","cellValue","rule","formula1","ConditionalCellValueOperator","greaterThan","lessThan","equalTo","containsText","_x24","_x25","_executeTranslate","_callee14","targetColumnIndex","targetColumnLetter","_targetColumnLetter","_columnIndex","_usedRange3","sourceValues","translations","batchSize","batch","batchTexts","translatedBatch","j","translationIndex","_j","translatedText","_j2","_i","targetRange","stringTranslations","errorRows","_i2","translation","_iterator2","_step2","errorCell","isEmpty","_i3","cellRow","cellCol","cell","headerCell","sourceHeaderCell","_context14","targetLanguage","split","sourceColumnIndex","sourceColumn","targetColumn","slice","Math","min","map","filter","translateBatch","sourceLanguage","batchLength","translatedBatchLength","sampleTranslations","firstTranslation","translationType","_typeof","rawData","isError","round","translationsCount","first","second","third","clear","ClearApplyTo","contents","translationsLength","is2DArray","String","valueTypes","actualFirstValue","firstThreeValues","firstValue","firstValueLength","_x26","_x27","_x28","_translateBatch","_callee15","texts","_t1","_context15","join","tempIndex","fromCharCode","floor","Number","isInteger","toLocaleString","minimumFractionDigits","maximumFractionDigits","type","className","style","display","statusTimeout","clearTimeout","_callee16","_t10","_context16","_x29","_x30","_executeCompress","_callee17","checkRange","emptyRows","minRowIndex","maxRowIndex","rowsToDelete","_iterator3","_step3","_t11","_t12","_context17","rowIdx","delete","DeleteShiftDirection","up","_x31","_x32","_executeFilter","_callee18","_context18","autoFilter","_x33","_x34","_executeInsert","_callee19","count","_context19","insert","InsertShiftDirection","down","right","_x35","_x36","_executeDelete","_callee20","_context20","_x37","_x38","_executeFormula","_callee21","_context21","_x39","_x40","_executeRetryTranslation","_callee22","_context22","_x41","_x42","_executeRemoveBorder","_callee23","expandedRows","expandedCols","_usedRange4","borderType","_t13","_t14","_context23","getUsedRangeOrNullObject","isNullObject","borders","getItem","BorderIndex","edgeLeft","BorderLineStyle","none","edgeRight","edgeTop","edgeBottom","insideHorizontal","insideVertical"],"sourceRoot":""}