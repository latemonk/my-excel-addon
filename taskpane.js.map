{"version":3,"file":"taskpane.js","mappings":";iGACIA,EAA2B,CAAC,EAGhC,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAaE,QAGrB,IAAIC,EAASN,EAAyBE,GAAY,CAGjDG,QAAS,CAAC,GAOX,OAHAE,EAAoBL,GAAUI,EAAQA,EAAOD,QAASJ,GAG/CK,EAAOD,OACf,CAGAJ,EAAoBO,EAAID,ECzBxBN,EAAoBQ,EAAI,WACvB,GAA0B,iBAAfC,WAAyB,OAAOA,WAC3C,IACC,OAAOC,MAAQ,IAAIC,SAAS,cAAb,EAChB,CAAE,MAAOC,GACR,GAAsB,iBAAXC,OAAqB,OAAOA,MACxC,CACA,CAPuB,GCAxBb,EAAoBc,EAAI,SAASC,EAAKC,GAAQ,OAAOC,OAAOC,UAAUC,eAAeC,KAAKL,EAAKC,EAAO,E,WCAtG,IAAIK,EACArB,EAAoBQ,EAAEc,gBAAeD,EAAYrB,EAAoBQ,EAAEe,SAAW,IACtF,IAAIC,EAAWxB,EAAoBQ,EAAEgB,SACrC,IAAKH,GAAaG,IACbA,EAASC,eAAkE,WAAjDD,EAASC,cAAcC,QAAQC,gBAC5DN,EAAYG,EAASC,cAAcG,MAC/BP,GAAW,CACf,IAAIQ,EAAUL,EAASM,qBAAqB,UAC5C,GAAGD,EAAQE,OAEV,IADA,IAAIC,EAAIH,EAAQE,OAAS,EAClBC,GAAK,KAAOX,IAAc,aAAaY,KAAKZ,KAAaA,EAAYQ,EAAQG,KAAKJ,GAE3F,CAID,IAAKP,EAAW,MAAM,IAAIa,MAAM,yDAChCb,EAAYA,EAAUc,QAAQ,SAAU,IAAIA,QAAQ,OAAQ,IAAIA,QAAQ,QAAS,IAAIA,QAAQ,YAAa,KAC1GnC,EAAoBoC,EAAIf,C,IClBxBrB,EAAoBqC,EAAIb,SAASc,SAAWC,KAAKhB,SAASiB,K,wBCCzB,IAAIC,IAAI,a,uvCCAzC,IAAA7B,EAAA8B,EAAAC,EAAA,mBAAAC,OAAAA,OAAA,GAAAC,EAAAF,EAAAG,UAAA,aAAAhC,EAAA6B,EAAAI,aAAA,yBAAAf,EAAAW,EAAAE,EAAA/B,EAAAkB,GAAA,IAAAgB,EAAAH,GAAAA,EAAA3B,qBAAA+B,EAAAJ,EAAAI,EAAAC,EAAAjC,OAAAkC,OAAAH,EAAA9B,WAAA,OAAAkC,EAAAF,EAAA,mBAAAP,EAAAE,EAAA/B,GAAA,IAAAkB,EAAAgB,EAAAE,EAAAG,EAAA,EAAAjB,EAAAtB,GAAA,GAAAwC,GAAA,EAAAC,EAAA,CAAAnB,EAAA,EAAAS,EAAA,EAAAW,EAAA5C,EAAA6C,EAAAC,EAAAL,EAAAK,EAAAC,KAAA/C,EAAA,GAAA8C,EAAA,SAAAhB,EAAAC,GAAA,OAAAX,EAAAU,EAAAM,EAAA,EAAAE,EAAAtC,EAAA2C,EAAAV,EAAAF,EAAAc,CAAA,YAAAC,EAAAf,EAAAE,GAAA,IAAAG,EAAAL,EAAAO,EAAAL,EAAAH,EAAA,GAAAY,GAAAD,IAAAvC,GAAA4B,EAAAN,EAAAL,OAAAW,IAAA,KAAA5B,EAAAkB,EAAAI,EAAAM,GAAAgB,EAAAH,EAAAnB,EAAAwB,EAAA5B,EAAA,GAAAW,EAAA,GAAA7B,EAAA8C,IAAAf,KAAAK,EAAAlB,GAAAgB,EAAAhB,EAAA,OAAAgB,EAAA,MAAAhB,EAAA,GAAAA,EAAA,GAAApB,GAAAoB,EAAA,IAAA0B,KAAA5C,EAAA6B,EAAA,GAAAe,EAAA1B,EAAA,KAAAgB,EAAA,EAAAO,EAAAC,EAAAX,EAAAU,EAAAV,EAAAb,EAAA,IAAA0B,EAAAE,IAAA9C,EAAA6B,EAAA,GAAAX,EAAA,GAAAa,GAAAA,EAAAe,KAAA5B,EAAA,GAAAW,EAAAX,EAAA,GAAAa,EAAAU,EAAAV,EAAAe,EAAAZ,EAAA,OAAAlC,GAAA6B,EAAA,SAAAc,EAAA,MAAAH,GAAA,EAAAT,CAAA,iBAAA/B,EAAAsB,EAAAwB,GAAA,GAAAP,EAAA,QAAAQ,UAAA,oCAAAP,GAAA,IAAAlB,GAAAsB,EAAAtB,EAAAwB,GAAAZ,EAAAZ,EAAAc,EAAAU,GAAAlB,EAAAM,EAAA,EAAApC,EAAAsC,KAAAI,GAAA,CAAAtB,IAAAgB,EAAAA,EAAA,GAAAA,EAAA,IAAAO,EAAAV,GAAA,GAAAa,EAAAV,EAAAE,IAAAK,EAAAV,EAAAK,EAAAK,EAAAC,EAAAN,GAAA,OAAAG,EAAA,EAAArB,EAAA,IAAAgB,IAAAlC,EAAA,QAAA4B,EAAAV,EAAAlB,GAAA,MAAA4B,EAAAA,EAAAtB,KAAAY,EAAAkB,IAAA,MAAAW,UAAA,wCAAAnB,EAAAoB,KAAA,OAAApB,EAAAQ,EAAAR,EAAAqB,MAAAf,EAAA,IAAAA,EAAA,YAAAA,IAAAN,EAAAV,EAAAgC,SAAAtB,EAAAtB,KAAAY,GAAAgB,EAAA,IAAAE,EAAAW,UAAA,oCAAA/C,EAAA,YAAAkC,EAAA,GAAAhB,EAAApB,CAAA,UAAA8B,GAAAY,EAAAC,EAAAV,EAAA,GAAAK,EAAAP,EAAAvB,KAAAyB,EAAAU,MAAAE,EAAA,YAAAf,GAAAV,EAAApB,EAAAoC,EAAA,EAAAE,EAAAR,CAAA,SAAAW,EAAA,UAAAU,MAAArB,EAAAoB,KAAAR,EAAA,GAAAX,EAAA7B,EAAAkB,IAAA,GAAAkB,CAAA,KAAAO,EAAA,YAAAR,IAAA,UAAAgB,IAAA,UAAAC,IAAA,CAAAxB,EAAAzB,OAAAkD,eAAA,IAAAnB,EAAA,GAAAH,GAAAH,EAAAA,EAAA,GAAAG,QAAAO,EAAAV,EAAA,GAAAG,EAAA,yBAAAH,GAAAQ,EAAAgB,EAAAhD,UAAA+B,EAAA/B,UAAAD,OAAAkC,OAAAH,GAAA,SAAAK,EAAAzC,GAAA,OAAAK,OAAAmD,eAAAnD,OAAAmD,eAAAxD,EAAAsD,IAAAtD,EAAAyD,UAAAH,EAAAd,EAAAxC,EAAAE,EAAA,sBAAAF,EAAAM,UAAAD,OAAAkC,OAAAD,GAAAtC,CAAA,QAAAqD,EAAA/C,UAAAgD,EAAAd,EAAAF,EAAA,cAAAgB,GAAAd,EAAAc,EAAA,cAAAD,GAAAA,EAAAK,YAAA,oBAAAlB,EAAAc,EAAApD,EAAA,qBAAAsC,EAAAF,GAAAE,EAAAF,EAAApC,EAAA,aAAAsC,EAAAF,EAAAL,EAAA,yBAAAO,EAAAF,EAAA,oDAAAqB,EAAA,kBAAAC,EAAAxC,EAAAzB,EAAA8C,EAAA,cAAAD,EAAAxC,EAAA+B,EAAAE,EAAAH,GAAA,IAAAV,EAAAf,OAAAwD,eAAA,IAAAzC,EAAA,gBAAApB,GAAAoB,EAAA,EAAAoB,EAAA,SAAAxC,EAAA+B,EAAAE,EAAAH,GAAA,SAAA5B,EAAA6B,EAAAE,GAAAO,EAAAxC,EAAA+B,EAAA,SAAA/B,GAAA,YAAA8D,QAAA/B,EAAAE,EAAAjC,EAAA,GAAA+B,EAAAX,EAAAA,EAAApB,EAAA+B,EAAA,CAAAoB,MAAAlB,EAAA8B,YAAAjC,EAAAkC,cAAAlC,EAAAmC,UAAAnC,IAAA9B,EAAA+B,GAAAE,GAAA/B,EAAA,UAAAA,EAAA,WAAAA,EAAA,cAAAsC,EAAAxC,EAAA+B,EAAAE,EAAAH,EAAA,UAAAoC,EAAAjC,EAAAH,EAAA9B,EAAA+B,EAAA7B,EAAA2C,EAAAT,GAAA,QAAAhB,EAAAa,EAAAY,GAAAT,GAAAE,EAAAlB,EAAA+B,KAAA,OAAAlB,GAAA,YAAAjC,EAAAiC,EAAA,CAAAb,EAAA8B,KAAApB,EAAAQ,GAAA6B,QAAAC,QAAA9B,GAAA+B,KAAAtC,EAAA7B,EAAA,UAAAoE,EAAArC,GAAA,sBAAAH,EAAA,KAAA9B,EAAAuE,UAAA,WAAAJ,QAAA,SAAApC,EAAA7B,GAAA,IAAA2C,EAAAZ,EAAAuC,MAAA1C,EAAA9B,GAAA,SAAAyE,EAAAxC,GAAAiC,EAAArB,EAAAd,EAAA7B,EAAAuE,EAAAC,EAAA,OAAAzC,EAAA,UAAAyC,EAAAzC,GAAAiC,EAAArB,EAAAd,EAAA7B,EAAAuE,EAAAC,EAAA,QAAAzC,EAAA,CAAAwC,OAAA,MAOA,IAAIE,EAAc,KACdC,GAAc,EAGZC,EAAgBC,0DAEtBC,OAAOC,QAAQ,SAACC,GACd,GAAIA,EAAKC,OAASH,OAAOI,SAASC,MAAO,EA2+E3C,WACoCC,GAAAb,MAAC,KAADD,UAAA,CA1+EhCe,GAGA1E,SAAS2E,eAAe,iBAAiBC,QAAUC,EACnD7E,SAAS2E,eAAe,eAAeC,QAAUE,EACjD9E,SAAS2E,eAAe,eAAeC,QAAU,kBAiMrD,WAKE,GAHsD,WAA7BvF,OAAOU,SAASgF,WAChB1F,OAAOU,SAASiF,SAASC,SAAS,aAKzD,OAFAC,EAAW,iEAAkE,cAC7ElF,SAAS2E,eAAe,eAAeQ,YAAc,YAIvD,GAAKpB,EAML,GAAIC,EACFD,EAAYqB,YAEZ,IACErB,EAAYsB,OACd,CAAE,MAAOC,GACPC,QAAQD,MAAM,iCAAkCA,GAG5CA,EAAME,SAAWF,EAAME,QAAQP,SAAS,eAC1CC,EAAW,2CAA4C,SAEvDA,EAAW,qBAAsB,QAErC,MAlBAA,EAAW,4BAA6B,QAoB5C,CAlO2DO,EAAwB,EAG/EzF,SAAS2E,eAAe,cAAcC,QAAUc,EAChD1F,SAAS2E,eAAe,iBAAiBC,QAAUe,GAGnDC,IAGA,IAAMC,EAAc7F,SAAS2E,eAAe,eACtCmB,EAAaC,aAAaC,QAAQ,8BAClCC,EAAUF,aAAaC,QAAQ,wBAGlB,uBAAfF,GAAwCG,EAGjCH,EACTD,EAAYtD,MAAQuD,GAGpBD,EAAYtD,MAAQ,0BACpBwD,aAAaG,QAAQ,6BAA8B,6BAPnDH,aAAaG,QAAQ,6BAA8B,2BACnDL,EAAYtD,MAAQ,2BAUtB,IAAM4D,EAAYnG,SAAS2E,eAAe,aACzBwB,EAAUC,cAAc,UAChCxB,QAAU,kBAAMyB,GAAe,EAExC,IAAMC,EAActG,SAAS2E,eAAe,eAE5CtF,OAAOuF,QAAU,SAAC2B,GACZA,EAAMC,QAAUL,EAClBE,IACSE,EAAMC,QAAUF,GACzBG,GAEJ,EAEAzG,SAAS2E,eAAe,iBAAiBC,QAAU8B,EACnD1G,SAAS2E,eAAe,iBAAiBC,QAAU+B,EACnD3G,SAAS2E,eAAe,gBAAgBC,QAAU6B,EAGlDzG,SAAS2E,eAAe,eAAeiC,SAAWC,GAG7B7G,SAAS8G,iBAAiB,iBAClCC,QAAQ,SAAAC,GACnBA,EAAKpC,QAAU,WA8sErB,IAAoBqC,IA7sED/H,KAAKgI,aAAa,gBA8sEnClH,SAAS2E,eAAe,gBAAgBpC,MAAQ0E,EAChDjH,SAAS2E,eAAe,gBAAgBwC,OA9sEpC,CACF,GAGAnH,SAAS2E,eAAe,gBAAgByC,iBAAiB,UAAW,SAASb,GACzD,UAAdA,EAAMc,KAAoBd,EAAMe,WAClCf,EAAMgB,iBACN1C,IAEJ,GAQJ,WAKE,GAHsD,WAA7BxF,OAAOU,SAASgF,WAChB1F,OAAOU,SAASiF,SAASC,SAAS,aAErC,CACpBM,QAAQiC,IAAI,iDACZ,IAAMC,EAAczH,SAAS2E,eAAe,eACtC+C,EAAc1H,SAAS2E,eAAe,eAW5C,OATA8C,EAAYE,UAAW,EACvBF,EAAYG,MAAMC,QAAU,MAC5BJ,EAAYG,MAAME,OAAS,cAC3BJ,EAAYvC,YAAc,oBAC1BuC,EAAYE,MAAMG,MAAQ,OAG1BN,EAAYO,MAAQ,6DAEb,IACT,CAEA,IAAMC,EAAoB5I,OAAO4I,mBAAqB5I,OAAO6I,wBAE7D,IAAKD,EAIH,OAHA/C,EAAW,0BAA2B,SACtClF,SAAS2E,eAAe,eAAegD,UAAW,EAClD3H,SAAS2E,eAAe,eAAeQ,YAAc,YAC9C,MAGTpB,EAAc,IAAIkE,GACNE,KAAO,QACnBpE,EAAYqE,YAAa,EACzBrE,EAAYsE,gBAAiB,EAC7BtE,EAAYuE,gBAAkB,EAE9BvE,EAAYwE,QAAU,WACpBvE,GAAc,EACdhE,SAAS2E,eAAe,eAAe6D,UAAUC,IAAI,aACrDzI,SAAS2E,eAAe,eAAeQ,YAAc,oBACrDnF,SAAS2E,eAAe,eAAe6D,UAAUC,IAAI,YACvD,EAEA1E,EAAY2E,SAAW,SAASnC,GAC9B,IAAMoC,EAAapC,EAAMqC,QAAQ,GAAG,GAAGD,WACvC3I,SAAS2E,eAAe,gBAAgBpC,MAAQoG,EAE5CpC,EAAMqC,QAAQ,GAAGC,QACnB7I,SAAS2E,eAAe,eAAeQ,YAAc,WAErDnF,SAAS2E,eAAe,eAAeQ,YAAc,QAAUwD,CAEnE,EAEA5E,EAAY+E,QAAU,SAASvC,GAC7BhB,QAAQiC,IAAI,4BAA6BjB,EAAMjB,MAAO,YAAajG,OAAOU,SAASiF,UACnFhB,GAAc,EACdhE,SAAS2E,eAAe,eAAe6D,UAAUO,OAAO,aACxD/I,SAAS2E,eAAe,eAAe6D,UAAUO,OAAO,aAExD,IAAIC,EAAe,WAGbC,EAAgD,WAA7B5J,OAAOU,SAASgF,WAChB1F,OAAOU,SAASiF,SAASC,SAAS,aAE3D,OAAOsB,EAAMjB,OACX,IAAK,YACH0D,EAAe,kBACf,MACF,IAAK,gBACHA,EAAe,kBACf,MACF,IAAK,cAECC,GACFD,EAAe,iEACfhJ,SAAS2E,eAAe,eAAeQ,YAAc,YAErD6D,EAAe,oCAEjB,MACF,IAAK,UACHA,EAAe,mBACf,MACF,QAEMC,GAAoB1C,EAAMjB,QAC5B0D,EAAe,iEACfhJ,SAAS2E,eAAe,eAAeQ,YAAc,YAMvD8D,GAAoC,gBAAhB1C,EAAMjB,MAC5BtF,SAAS2E,eAAe,eAAeQ,YAAc,WAErDnF,SAAS2E,eAAe,eAAeQ,YAAc6D,EAGvD9D,EAAW8D,EAAc,QAC3B,EAEAjF,EAAYmF,MAAQ,WAClBlF,GAAc,EACdhE,SAAS2E,eAAe,eAAe6D,UAAUO,OAAO,aACxD/I,SAAS2E,eAAe,eAAe6D,UAAUO,OAAO,aAExC/I,SAAS2E,eAAe,gBAAgBpC,MAAM4G,QAE5DnJ,SAAS2E,eAAe,eAAeQ,YAAc,0BACrDnF,SAAS2E,eAAe,iBAAiBwC,SAEzCnH,SAAS2E,eAAe,eAAeQ,YAAc,UAEzD,CAGF,CA7HIiE,EACF,CACF,GAmKA,IAAIC,GAAc,EAAM,SAETxE,IAAc,OAAAyE,EAAA1F,MAAC,KAADD,UAAA,CAwK7B,SAAA2F,IAFC,OAEDA,EAAA5F,EAAAX,IAAAhE,EAxKA,SAAAwK,IAAA,IAAAtC,EAAAuC,EAAAC,EAAAC,EAAA,OAAA3G,IAAAC,EAAA,SAAA2G,GAAA,cAAAA,EAAA/I,EAAA+I,EAAAtI,GAAA,WAEMgI,EAAa,CAAFM,EAAAtI,EAAA,QACqD,OAAlEkE,QAAQiC,IAAI,sDAAsDmC,EAAA1H,EAAA,UAIA,GAA9DgF,EAAUjH,SAAS2E,eAAe,gBAAgBpC,MAAM4G,OAEhD,CAAFQ,EAAAtI,EAAA,QAC0B,OAApC6D,EAAW,eAAgB,SAASyE,EAAA1H,EAAA,UAYC,OARvCoH,GAAc,EAERG,EAASxJ,SAAS2E,eAAe,iBACjC8E,EAAe,0CAGrBD,EAAO7B,UAAW,EAClB6B,EAAOI,UAAY,mDACnB1E,EAAW,mBAAoB,QAAQyE,EAAA/I,EAAA,EAAA+I,EAAAtI,EAAA,EAG/BmD,MAAMqF,IAAG,eAAAC,EAAApG,EAAAX,IAAAhE,EAAC,SAAAgL,EAAOC,GAAO,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA7J,EAAA8J,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAA/H,IAAAC,EAAA,SAAA+H,GAAA,cAAAA,EAAAnK,EAAAmK,EAAA1J,GAAA,OAWkB,OAV9CkE,QAAQiC,IAAI,4CAENyC,EAAYD,EAAQgB,SAASC,WAAWC,qBAE1ChB,EAAkB,KACMa,EAAAnK,EAAA,GAIpBuJ,EAAiBH,EAAQgB,SAASG,qBACzBC,KAAK,CAAC,QAAS,cAAcL,EAAA1J,EAAA,EACtC2I,EAAQqB,OAAM,YAEhBlB,EAAemB,UAAY,GAAC,CAAAP,EAAA1J,EAAA,QAIqD,OAD7E+I,EAAaD,EAAeoB,MAAMC,MAAM,IACnCJ,KAAK,CAAC,UAAW,WAAY,cAAe,WAAY,gBAAgBL,EAAA1J,EAAA,EAC7E2I,EAAQqB,OAAM,OAIpB,IADMhB,EAAiB,GACd7J,EAAI,EAAGA,EAAI2J,EAAeoB,MAAMC,MAAMjL,OAAQC,IACxC2J,EAAeoB,MAAMC,MAAMhL,GACnC4K,KAAK,WACX,OAAAL,EAAA1J,EAAA,EACK2I,EAAQqB,OAAM,OAEpB,IAAS7K,EAAI,EAAGA,EAAI2J,EAAeoB,MAAMC,MAAMjL,OAAQC,IACrD6J,EAAeoB,KAAKtB,EAAeoB,MAAMC,MAAMhL,GAAGkL,SAGpDxB,EAAkB,CAChBwB,QAASrB,EAAesB,KAAK,KAC7BC,IAAKxB,EAAWyB,SAAW,EAC3BC,OAAQ1B,EAAW2B,YAAc,EACjCC,QAAS5B,EAAW6B,SACpBC,WAAY9B,EAAW+B,YACvBC,kBAAkB,GAClBrB,EAAA1J,EAAA,eAI4E,OADxEkJ,EAAQJ,EAAeoB,MAAMC,MAAM,IACnCJ,KAAK,CAAC,UAAW,WAAY,cAAe,WAAY,gBAAgBL,EAAA1J,EAAA,EACxE2I,EAAQqB,OAAM,OAEpBnB,EAAkB,CAChBwB,QAASnB,EAAMmB,QACfE,IAAKrB,EAAMsB,SAAW,EACtBC,OAAQvB,EAAMwB,YAAc,EAC5BC,QAASzB,EAAM0B,SACfC,WAAY3B,EAAM4B,YAClBC,kBAAkB,GAClB,OAAArB,EAAA1J,EAAA,eAAA0J,EAAAnK,EAAA,EAAAkK,EAAAC,EAAA/I,EAGJuD,QAAQiC,IAAI,iDAAgDsD,GAE5DZ,EAAkB,CAChBwB,QAAS,KACTE,IAAK,EACLE,OAAQ,EACRE,QAAS,EACTE,WAAY,EACZE,kBAAkB,GAClB,OAQkD,OAJtDnC,EAAUmB,KAAK,SAGTZ,EAAYP,EAAUoC,gBAClBjB,KAAK,CAAC,WAAY,cAAe,WAAWL,EAAA1J,EAAA,GAEhD2I,EAAQqB,OAAM,QAcpB,GAXMZ,EAAe,CACnB6B,UAAWrC,EAAUsC,KACrBC,YAAatC,EACbuC,QAASjC,EAAYA,EAAUyB,SAAW,EAC1CS,WAAYlC,EAAYA,EAAU2B,YAAc,EAChDQ,QAAS,GACTC,UAAWpC,EAAYA,EAAUqC,OAAS,GAC1CC,aAActC,GAAaA,EAAUyB,SAAW,KAI9CzB,GAAaA,EAAUyB,SAAW,EAEpC,IADMvB,EAAYF,EAAUqC,OAAO,GAC1BrM,EAAI,EAAGA,EAAIkK,EAAUnK,OAAQC,IACpCiK,EAAakC,QAAQlB,KAAK,CACxBK,OAAQtL,EAAI,EACZuM,aAAcC,EAAgBxM,GAC9ByM,MAAOvC,EAAUlK,GAAKkK,EAAUlK,GAAG0M,WAAa,KAKtD,OAAAnC,EAAA1J,EAAA,GAC6B8L,EAAWlG,EAASwD,GAAa,QAA1C,IAAdG,EAAcG,EAAA/I,GAEAoL,QAAS,CAAFrC,EAAA1J,EAAA,eACnB,IAAIX,MAAMkK,EAAetF,OAAM,QAIS,OAAhDC,QAAQiC,IAAI,oCAAoCuD,EAAA1J,EAAA,GAC3BgM,EAA0BrD,EAASY,EAAe0C,MAAK,QAAtEzC,EAAME,EAAA/I,EACZuD,QAAQiC,IAAI,4BAA6BqD,GAGzCrB,EAAO7B,UAAW,EAClB6B,EAAOI,UAAYH,EAEfoB,EAAOuC,SACT7H,QAAQiC,IAAI,oCAAqCqD,GACjD3F,EAAW2F,EAAOrF,SAAW,qBAAsB,WACnD+H,WAAW,WACTvN,SAAS2E,eAAe,gBAAgBpC,MAAQ,EAClD,EAAG,OAEHgD,QAAQD,MAAM,oBAAqBuF,GACnC3F,EAAW2F,EAAOvF,OAAS,iBAAkB,UAG/CC,QAAQiC,IAAI,2BAA2B,eAAAuD,EAAA9I,EAAA,KAAA8H,EAAA,iBACxC,gBAAAyD,GAAA,OAAA1D,EAAAlG,MAAA,KAAAD,UAAA,EAjIc,IAiIb,OACF4B,QAAQiC,IAAI,uBAAuBmC,EAAAtI,EAAA,eAAAsI,EAAA/I,EAAA,EAAA8I,EAAAC,EAAA3H,EAEnCuD,QAAQD,MAAM,2BAA0BoE,GACxCnE,QAAQD,MAAM,eAAgBoE,EAAM+D,OACpCjE,EAAO7B,UAAW,EAClB6B,EAAOI,UAAYH,EACnBvE,EAAW,eAAiBwE,EAAMlE,QAAS,SAAS,OAGhC,OAHgCmE,EAAA/I,EAAA,EAGpDyI,GAAc,EAAMM,EAAA9H,EAAA,iBAAA8H,EAAA1H,EAAA,KAAAsH,EAAA,qBAEvBD,EAAA1F,MAAA,KAAAD,UAAA,UAGcwJ,EAAUO,EAAAC,GAAA,OAAAC,EAAAhK,MAAC,KAADD,UAAA,CAuDzB,SAAAiK,IAFC,OAEDA,EAAAlK,EAAAX,IAAAhE,EAvDA,SAAA8O,EAA0B5G,EAASwD,GAAY,IAAAqD,EAAA7H,EAAA8H,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAApL,IAAAC,EAAA,SAAAoL,GAAA,cAAAA,EAAAxN,EAAAwN,EAAA/M,GAAA,OA0BxC,OA1BwC+M,EAAAxN,EAAA,EAGrCkN,EAAgB/H,aAAaC,QAAQ,+BAAiC,0BACtEC,EAAUF,aAAaC,QAAQ,wBAC/B+H,EAAYhI,aAAaC,QAAQ,0BAGjCgI,EAAc,CAClB/G,QAASA,EACTwD,aAAcA,EACd4D,MAAOP,EACPQ,WAAY,SAIQ,uBAAlBR,IACFE,EAAY/H,QAAUA,EACtB+H,EAAYD,UAAYA,GAG1BxI,QAAQiC,IAAI,wBAAyB,CACnC6G,MAAOP,EACPS,aAAcP,EAAY/H,QAC1BuI,eAAgBR,EAAYD,UAC5B9G,QAASA,IACRmH,EAAA/M,EAAA,EAEoBoN,MAAMxK,EAAe,CAC1CyK,OAAQ,OACR/B,QAAS,CACP,eAAgB,oBAElBgC,KAAMC,KAAKC,UAAUb,KACrB,OANY,IAARC,EAAQG,EAAApM,GAQA8M,GAAI,CAAFV,EAAA/M,EAAA,eAAA+M,EAAA/M,EAAA,EACU4M,EAASc,OAAM,OAAxB,OAATb,EAASE,EAAApM,EAAAoM,EAAAnM,EAAA,EACR,CACLmL,SAAS,EACT9H,MAAO4I,EAAU5I,OAAS,UAAJ0J,OAAcf,EAASgB,OAAM,OACpD,cAAAb,EAAA/M,EAAA,EAGU4M,EAASc,OAAM,cAAAX,EAAAnM,EAAA,EAAAmM,EAAApM,GAAA,OAGa,OAHboM,EAAAxN,EAAA,EAAAuN,EAAAC,EAAApM,EAG5BuD,QAAQD,MAAM,mBAAkB6I,GAASC,EAAAnM,EAAA,EAClC,CACLmL,SAAS,EACT9H,MAAO,cAAF0J,OAAgBb,EAAMjB,cAC5B,EAAAW,EAAA,kBAEJjK,MAAA,KAAAD,UAAA,CAqHA,SAGc0J,EAAyB6B,EAAAC,GAAA,OAAAC,EAAAxL,MAAC,KAADD,UAAA,CAwBxC,SAAAyL,IAFC,OAEDA,EAAA1L,EAAAX,IAAAhE,EAxBA,SAAAsQ,EAAyCrF,EAASsF,GAAW,IAAA1G,EAAA2G,EAAAC,EAAAC,EAAAC,EAAA7E,EAAA8E,EAAA,OAAA5M,IAAAC,EAAA,SAAA4M,GAAA,cAAAA,EAAAhP,EAAAgP,EAAAvO,GAAA,WAEvDiO,EAAYO,aAAcC,MAAMC,QAAQT,EAAYO,YAAW,CAAAD,EAAAvO,EAAA,QACjEkE,QAAQiC,IAAI,iCAAkC8H,EAAYO,WAAWtP,QAC/DqI,EAAU,GACZ2G,EAAe,EAACC,EAAAQ,EAEHV,EAAYO,YAAUD,EAAAhP,EAAA,EAAA4O,EAAAS,IAAA,WAAAR,EAAAD,EAAAnO,KAAAiB,KAAE,CAAFsN,EAAAvO,EAAA,QAA1B,OAAFqO,EAAED,EAAAlN,MAAAqN,EAAAvO,EAAA,EACU6O,EAAuBlG,EAAS0F,EAAGS,UAAWT,EAAGU,YAAc,CAAC,GAAE,OAAjFvF,EAAM+E,EAAA5N,EACZ4G,EAAQ6C,KAAKZ,GACTA,EAAOuC,SAASmC,IAAe,OAAAK,EAAAvO,EAAA,eAAAuO,EAAAvO,EAAA,eAAAuO,EAAAhP,EAAA,EAAA+O,EAAAC,EAAA5N,EAAAwN,EAAApQ,EAAAuQ,GAAA,cAAAC,EAAAhP,EAAA,EAAA4O,EAAA3N,IAAA+N,EAAA/N,EAAA,iBAAA+N,EAAA3N,EAAA,EAG9B,CACLmL,QAASmC,IAAiBD,EAAYO,WAAWtP,OACjDiF,QAAS,GAAFwJ,OAAKO,EAAY,KAAAP,OAAIM,EAAYO,WAAWtP,OAAM,iBACzDqI,QAASA,IACV,cAAAgH,EAAAvO,EAAA,GAIU6O,EAAuBlG,EAASsF,EAAYa,UAAWb,EAAYc,YAAc,CAAC,GAAE,eAAAR,EAAA3N,EAAA,EAAA2N,EAAA5N,GAAA,EAAAqN,EAAA,sBAClGzL,MAAA,KAAAD,UAAA,UAGcuM,EAAsBG,EAAAC,EAAAC,GAAA,OAAAC,EAAA5M,MAAC,KAADD,UAAA,CAuErC,SAAA6M,IAFC,OAEDA,EAAA9M,EAAAX,IAAAhE,EAvEA,SAAA0R,EAAsCzG,EAASmG,EAAWO,GAAM,IAAAC,EAAAC,EAAA,OAAA7N,IAAAC,EAAA,SAAA6N,GAAA,cAAAA,EAAAjQ,EAAAiQ,EAAAxP,GAAA,OAC9DkE,QAAQiC,IAAI,IAADwH,QAAK,IAAI8B,MAAOC,cAAa,2BAAA/B,OAA0BmB,EAAS,iBAAiBO,GAAQG,EAAAjQ,EAAA,EAAA+P,EAG1FR,EAASU,EAAAxP,EACV,UADUsP,EACH,EAGP,QAHOA,EAGF,EAGL,YAHKA,EAGI,EAGT,UAHSA,EAGF,EAGP,WAHOA,EAGC,GAGR,SAHQA,EAGF,GAGN,WAHMA,EAGE,GAGR,WAHQA,EAGA,GAGR,WAHQA,EAGA,GAGR,YAHQA,EAGC,GAGT,UAHSA,EAGF,GAGP,uBAHOA,EAGa,GAGpB,cAHoBA,EAGT,GAGX,aAHWA,EAGD,GAGV,sBAHUA,EAGS,GAGnB,kBAHmBA,EAGJ,GAGf,kBAHeA,EAGA,0BAAAE,EAAAxP,EAAA,EA/CL2P,EAAahH,EAAS0G,GAAO,OAGF,OAGI,OAGF,OAGC,QAGF,QAGE,QAGA,QAGA,QAGC,QAGF,QAGY,QAGR,QAGD,QAGQ,QAGJ,QAGA,eAAAG,EAAA5O,EAAA,EAAA4O,EAAA7O,GAhDP,cAAA6O,EAAAxP,EAAA,EAG7B4P,EAAWjH,EAAS0G,GAAO,cAAAG,EAAAxP,EAAA,EAG3B6P,EAAelH,EAAS0G,GAAO,cAAAG,EAAAxP,EAAA,EAG/B8P,EAAanH,EAAS0G,GAAO,eAAAG,EAAAxP,EAAA,GAG7B+P,EAAcpH,EAAS0G,GAAO,eAAAG,EAAAxP,EAAA,GAG9BgQ,EAAYrH,EAAS0G,GAAO,eAAAG,EAAAxP,EAAA,GAG5BiQ,GAActH,EAAS0G,GAAO,eAAAG,EAAAxP,EAAA,GAG9BkQ,GAAcvH,EAAS0G,GAAO,eAAAG,EAAAxP,EAAA,GAG9BmQ,GAAcxH,EAAS0G,GAAO,eAAAG,EAAAxP,EAAA,GAG9BoQ,GAAezH,EAAS0G,GAAO,eAAAG,EAAAxP,EAAA,GAG/BqQ,EAAa1H,EAAS0G,GAAO,eAAAG,EAAAxP,EAAA,GAG7BsQ,EAAyB3H,EAAS0G,GAAO,eAAAG,EAAAxP,EAAA,GAGzCuQ,EAAiB5H,EAAS0G,GAAO,eAAAG,EAAAxP,EAAA,GAGjCwQ,GAAgB7H,EAAS0G,GAAO,eAAAG,EAAAxP,EAAA,GAGhCyQ,GAAwB9H,EAAS0G,GAAO,eAAAG,EAAAxP,EAAA,GAGxC0Q,GAAoB/H,EAAS0G,GAAO,eAAAG,EAAAxP,EAAA,GAGpC2Q,GAAoBhI,EAAS0G,GAAO,eAAAG,EAAA5O,EAAA,EAG1C,CACLmL,SAAS,EACT9H,MAAO,cAAF0J,OAAgBmB,KACtB,QAAAU,EAAAxP,EAAA,iBAGuD,OAHvDwP,EAAAjQ,EAAA,GAAAgQ,EAAAC,EAAA7O,EAGLuD,QAAQD,MAAM,sCAAqCsL,GAASC,EAAA5O,EAAA,EACrD,CACLmL,SAAS,EACT9H,MAAO,eAAF0J,OAAiB4B,EAAMpL,SAAWoL,EAAM1D,cAC9C,eAAA2D,EAAA5O,EAAA,KAAAwO,EAAA,mBAEJ7M,MAAA,KAAAD,UAAA,UAGcqN,EAAYiB,EAAAC,GAAA,OAAAC,EAAAvO,MAAC,KAADD,UAAA,CAwB3B,SAAAwO,IAFC,OAEDA,EAAAzO,EAAAX,IAAAhE,EAxBA,SAAAqT,EAA4BpI,EAAS0G,GAAM,IAAAzG,EAAAM,EAAA8H,EAAA,OAAAtP,IAAAC,EAAA,SAAAsP,GAAA,cAAAA,EAAAjR,GAAA,OAOnB,OANtBkE,QAAQiC,IAAI,oCAAqCkJ,GAC3CzG,EAAYD,EAAQgB,SAASC,WAAWC,qBACxCX,EAAQmG,EAAOnG,MAAQN,EAAUsI,SAAS7B,EAAOnG,OAASP,EAAQgB,SAASwH,mBAEjFjN,QAAQiC,IAAI,4BAEZ+C,EAAMa,KAAK,WAAWkH,EAAAjR,EAAA,EAChB2I,EAAQqB,OAAM,OAMN,OAJd9F,QAAQiC,IAAI,wBAAyB+C,EAAMmB,SACrC2G,EAAe9H,EAAMmB,QAE3BnG,QAAQiC,IAAI,oBACZ+C,EAAMkI,QAAQH,EAAAjR,EAAA,EACR2I,EAAQqB,OAAM,OAEwB,OAA5C9F,QAAQiC,IAAI,gCAAgC8K,EAAArQ,EAAA,EACrC,CACLmL,SAAS,EACT5H,QAAS,GAAFwJ,OAAKqD,EAAY,mBACzB,EAAAD,EAAA,KACFxO,MAAA,KAAAD,UAAA,UAGcsN,EAAUyB,EAAAC,GAAA,OAAAC,EAAAhP,MAAC,KAADD,UAAA,CA0XzB,SAAAiP,IAFC,OAEDA,EAAAlP,EAAAX,IAAAhE,EA1XA,SAAA8T,EAA0B7I,EAAS0G,GAAM,IAAAzG,EAAAO,EAAAsI,EAAAC,EAAAC,EAAAxS,EAAAyS,EAAAC,EAAAC,EAAAC,EAAAC,EAAAtH,EAAAgB,EAAAuG,EAAA3G,EAAA4G,EAAAC,EAAA5H,EAAAyG,EAAAoB,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA7J,EAAAE,EAAA4J,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAxI,EAAAW,EAAA8H,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAA,OAAA3S,IAAAC,EAAA,SAAA2S,GAAA,cAAAA,EAAA/U,EAAA+U,EAAAtU,GAAA,OAGvC,GAFM4I,EAAYD,EAAQgB,SAASC,WAAWC,qBAGvB,QAAnBwF,EAAOkF,UAAqBlF,EAAO9E,IAAG,CAAA+J,EAAAtU,EAAA,SAIE,GAH1CkE,QAAQiC,IAAI,cAAekJ,EAAO9E,KAG5BpB,EAAYP,EAAUoC,eACZ,CAAFsJ,EAAAtU,EAAA,eAAAsU,EAAA1T,EAAA,EACL,CACLmL,SAAS,EACT9H,MAAO,mBACR,OAG6B,OAAhCkF,EAAUY,KAAK,CAAC,gBAAgBuK,EAAAtU,EAAA,EAC1B2I,EAAQqB,OAAM,OAUM,OAPpByH,EAAW7I,EAAU4L,kBACzBnF,EAAO9E,IAAM,EACb,EACA,EACApB,EAAU2B,cAGHf,KAAK,CAAC,WAAWuK,EAAAtU,EAAA,EACpB2I,EAAQqB,OAAM,OAGd0H,EAAYD,EAASjG,OAAO,GAC9BmG,GAAkB,EAEbxS,EAAIuS,EAAUxS,OAAS,EAAC,YAAEC,GAAK,GAAC,CAAAmV,EAAAtU,EAAA,WAClB,OAAjB0R,EAAUvS,IAAgC,KAAjBuS,EAAUvS,SAA8B7B,IAAjBoU,EAAUvS,GAAgB,CAAAmV,EAAAtU,EAAA,QACzD,OAAnB2R,EAAiBxS,EAAEmV,EAAA1T,EAAA,YAFoBzB,IAAGmV,EAAAtU,EAAA,mBAOtB,IAApB2R,EAAqB,CAAA2C,EAAAtU,EAAA,eAAAsU,EAAA1T,EAAA,EAChB,CACLmL,SAAS,EACT9H,MAAO,GAAF0J,OAAK0B,EAAO9E,IAAG,mBACrB,OAYkC,OAR/BqH,EAAeD,EAAiB,EAChCE,EAAajJ,EAAU6L,QAAQpF,EAAO9E,IAAM,EAAGqH,GAI/CE,EAASnG,EAAgBgG,GACzBgB,EAAa,QAAHhF,OAFC,KAEkBA,OAAG0B,EAAO9E,IAAG,KAAAoD,OAAImE,GAAMnE,OAAG0B,EAAO9E,IAAG,KAEvEsH,EAAW6C,SAAW,CAAC,CAAC/B,IAAa2B,EAAAtU,EAAA,EAC/B2I,EAAQqB,OAAM,OAEmB,OAAvC6H,EAAW9H,KAAK,CAAC,SAAU,YAAYuK,EAAAtU,EAAA,EACjC2I,EAAQqB,OAAM,cAAAsK,EAAA1T,EAAA,EAEb,CACLmL,SAAS,EACT5H,QAAS,GAAFwJ,OAAK0B,EAAO9E,IAAG,WAAAoD,OAAUkE,EAAWxH,QAAO,cAAAsD,OAAagH,EAAa9C,EAAWrG,OAAO,GAAG,KACjGtK,MAAO2Q,EAAWrG,OAAO,GAAG,KAC7B,YAIC6D,EAAOuF,YAAiC,WAAnBvF,EAAOkF,QAAoB,CAAAD,EAAAtU,EAAA,SAKI,OAJtDkE,QAAQiC,IAAI,sBAAuBkJ,EAAOuF,aAGpCzL,EAAYP,EAAUoC,gBAClBjB,KAAK,CAAC,SAAU,WAAY,gBAAgBuK,EAAAtU,EAAA,GAChD2I,EAAQqB,OAAM,WAEfb,GAAoC,IAAvBA,EAAUyB,SAAc,CAAA0J,EAAAtU,EAAA,gBAAAsU,EAAA1T,EAAA,EACjC,CACLmL,SAAS,EACT9H,MAAO,mBACR,QAMH,GAHIyG,GAAe,EACfgB,EAAe,IAGf2D,EAAOuF,aAAcvF,EAAOuF,WAAWC,MAAM,YAAW,CAAAP,EAAAtU,EAAA,SAK1D,IAHA0L,EAAe2D,EAAOuF,WAEtBlK,EAAc,EACLvL,EAAI,EAAGA,EAAIuM,EAAaxM,OAAQC,IACvCuL,EAA4B,GAAdA,GAAoBgB,EAAaoJ,WAAW3V,GAAK,IAEjEuL,IACAxG,QAAQiC,IAAI,2BAA4BuF,EAAc,SAAUhB,GAAa4J,EAAAtU,EAAA,iBAGvEsL,EAAUnC,EAAUqC,OAAO,GAExBrM,EAAI,EAAC,aAAEA,EAAImM,EAAQpM,QAAM,CAAAoV,EAAAtU,EAAA,aAC5BsL,EAAQnM,IAAMmM,EAAQnM,GAAG0M,WAAWkJ,iBAAmB1F,EAAOuF,YAAc,IAAIG,cAAa,CAAAT,EAAAtU,EAAA,SAE7D,OADlC0K,EAAcvL,EACduM,EAAeC,EAAgBxM,GAAGmV,EAAA1T,EAAA,cAHFzB,IAAGmV,EAAAtU,EAAA,qBASpB,IAAjB0K,EAAkB,CAAA4J,EAAAtU,EAAA,gBAAAsU,EAAA1T,EAAA,EACb,CACLmL,SAAS,EACT9H,MAAO,IAAF0J,OAAM0B,EAAOuF,WAAU,qBAC7B,QAKH,IADIzC,EAAc,EACT5H,EAAM,EAAGA,EAAMpB,EAAUyB,SAAUL,IACC,OAAvCpB,EAAUqC,OAAOjB,GAAKG,SACiBpN,IAAvC6L,EAAUqC,OAAOjB,GAAKG,IACiB,KAAvCvB,EAAUqC,OAAOjB,GAAKG,KACxByH,EAAc5H,EAAM,GAKlByG,EAAe,GAAHrD,OAAMjC,EAAY,MAAAiC,OAAKjC,GAAYiC,OAAGwE,GAGpDC,EAAYD,EACZE,GAAa,EAGRlT,EAAI,EAAC,aAAEA,EAAI,IAAE,CAAAmV,EAAAtU,EAAA,SAEK,OADnBuS,EAAY3J,EAAU6L,QAAQtC,EAAchT,EAAGuL,IAC3CX,KAAK,UAAUuK,EAAAtU,EAAA,GACnB2I,EAAQqB,OAAM,QAEoB,GACpCwI,OADEA,EAAYD,EAAU/G,OAAO,GAAG,KAC6B,KAAdgH,EAAgB,CAAA8B,EAAAtU,EAAA,SAEjD,OADlBoS,EAAYD,EAAchT,EAC1BkT,GAAa,EAAKiC,EAAA1T,EAAA,cAREzB,IAAGmV,EAAAtU,EAAA,iBAsBoB,OAR1CqS,IACHD,EAAYD,GAGRM,EAAU7J,EAAU6L,QAAQrC,EAAW1H,GAE7CxG,QAAQiC,IAAI,kBAADwH,OAAmBqD,EAAY,4BAAArD,OAA2ByE,EAAY,IAEjFK,EAAQiC,SAAW,CAAC,CAAC,QAAD/G,OAASqD,EAAY,OAAMsD,EAAAtU,EAAA,GACzC2I,EAAQqB,OAAM,QAEgB,OAApCyI,EAAQ1I,KAAK,CAAC,SAAU,YAAYuK,EAAAtU,EAAA,GAC9B2I,EAAQqB,OAAM,eAAAsK,EAAA1T,EAAA,EAEb,CACLmL,SAAS,EACT5H,QAAS,GAAFwJ,OAAK0B,EAAOuF,WAAU,YAAAjH,OAAW8E,EAAQpI,QAAO,cAAAsD,OAAagH,EAAalC,EAAQjH,OAAO,GAAG,KACnGtK,MAAOuR,EAAQjH,OAAO,GAAG,KAC1B,YAOC6D,EAAOqD,YAAa,CAAF4B,EAAAtU,EAAA,SAEiD,OADrE0S,EAAc9J,EAAUsI,SAAS7B,EAAOqD,cAC5B3I,KAAK,CAAC,cAAe,WAAY,WAAY,YAAYuK,EAAAtU,EAAA,GAC/D2I,EAAQqB,OAAM,QACpB2I,EAAa,QAAHhF,OAAW+E,EAAYrI,QAAO,KAAIiK,EAAAtU,EAAA,iBAKE,OALFsU,EAAA/U,EAAA,IAIpCuJ,EAAiBH,EAAQgB,SAASG,qBACzBC,KAAK,CAAC,QAAS,cAAcuK,EAAAtU,EAAA,GACtC2I,EAAQqB,OAAM,aAEhBlB,EAAemB,UAAY,GAAC,CAAAqK,EAAAtU,EAAA,SAI9B,IAFMgJ,EAAiB,GAEd7J,EAAI,EAAGA,EAAI2J,EAAeoB,MAAMC,MAAMjL,OAAQC,IACxC2J,EAAeoB,MAAMC,MAAMhL,GACnC4K,KAAK,WACX,OAAAuK,EAAAtU,EAAA,GACK2I,EAAQqB,OAAM,QAEpB,IAAS7K,EAAI,EAAGA,EAAI2J,EAAeoB,MAAMC,MAAMjL,OAAQC,IACrD6J,EAAeoB,KAAKtB,EAAeoB,MAAMC,MAAMhL,GAAGkL,SAKM,OAF1DsI,EAAa,QAAHhF,OAAW3E,EAAesB,KAAK,KAAI,MAC7CoI,EAAc5J,EAAeoB,MAAMC,MAAM,IAC7BJ,KAAK,CAAC,cAAe,WAAY,aAAauK,EAAAtU,EAAA,GACpD2I,EAAQqB,OAAM,QAAAsK,EAAAtU,EAAA,iBAIiD,OADrE0S,EAAc/J,EAAQgB,SAASwH,oBACnBpH,KAAK,CAAC,cAAe,WAAY,WAAY,YAAYuK,EAAAtU,EAAA,GAC/D2I,EAAQqB,OAAM,QACpB2I,EAAa,QAAHhF,OAAW+E,EAAYrI,QAAO,KAAI,QAAAiK,EAAAtU,EAAA,iBAQA,OARAsU,EAAA/U,EAAA,GAAA6U,GAAAE,EAAA3T,EAG9CuD,QAAQiC,IAAI,kDAAiDiO,IAE7DE,EAAA/U,EAAA,IAEQuJ,EAAiBH,EAAQgB,SAASG,qBACzBC,KAAK,CAAC,QAAS,cAAcuK,EAAAtU,EAAA,GACtC2I,EAAQqB,OAAM,aAEhBlB,EAAeoB,MAAMC,MAAMjL,OAAS,GAAC,CAAAoV,EAAAtU,EAAA,SAEvC,IADMgJ,EAAiB,GACd7J,EAAI,EAAGA,EAAI2J,EAAeoB,MAAMC,MAAMjL,OAAQC,IACxC2J,EAAeoB,MAAMC,MAAMhL,GACnC4K,KAAK,WACX,OAAAuK,EAAAtU,EAAA,GACK2I,EAAQqB,OAAM,QAEpB,IAAS7K,EAAI,EAAGA,EAAI2J,EAAeoB,MAAMC,MAAMjL,OAAQC,IACrD6J,EAAeoB,KAAKtB,EAAeoB,MAAMC,MAAMhL,GAAGkL,SAKM,OAF1DsI,EAAa,QAAHhF,OAAW3E,EAAesB,KAAK,KAAI,MAC7CoI,EAAc5J,EAAeoB,MAAMC,MAAM,IAC7BJ,KAAK,CAAC,cAAe,WAAY,aAAauK,EAAAtU,EAAA,GACpD2I,EAAQqB,OAAM,QAAAsK,EAAAtU,EAAA,uBAEd,IAAIX,MAAM,sBAAqB,QAAAiV,EAAAtU,EAAA,iBAGe,OAHfsU,EAAA/U,EAAA,GAAA8U,GAAAC,EAAA3T,EAGvCuD,QAAQD,MAAM,wBAAuBoQ,IAAiBC,EAAA1T,EAAA,EAC/C,CAAEmL,SAAS,EAAO9H,MAAO,wCAAuC,YAKpD,IAArBoL,EAAO2F,UAAkB,CAAAV,EAAAtU,EAAA,SAE+B,OAA1D0S,EAAY3I,KAAK,CAAC,cAAe,WAAY,aAAauK,EAAAtU,EAAA,GACpD2I,EAAQqB,OAAM,QAMc,OAJ5BS,EAASiI,EAAYhI,YACrBU,EAAUsH,EAAYlI,SAAWkI,EAAY9H,UAC7CsI,EAAUtK,EAAU6L,QAAQrJ,EAASX,IAEnCiK,SAAW,CAAC,CAAC/B,IAAa2B,EAAAtU,EAAA,GAC5B2I,EAAQqB,OAAM,QAEgB,OAApCkJ,EAAQnJ,KAAK,CAAC,SAAU,YAAYuK,EAAAtU,EAAA,GAC9B2I,EAAQqB,OAAM,eAAAsK,EAAA1T,EAAA,EAEb,CACLmL,SAAS,EACT5H,QAAS,GAAFwJ,OAAKuF,EAAQ7I,QAAO,kBAAAsD,OAAiBgH,EAAazB,EAAQ1H,OAAO,GAAG,KAC3EtK,MAAOgS,EAAQ1H,OAAO,GAAG,KAC1B,YACQ6D,EAAO8D,WAAY,CAAFmB,EAAAtU,EAAA,SAGW,OAD/BmT,EAAavK,EAAUsI,SAAS7B,EAAO8D,aAClCuB,SAAW,CAAC,CAAC/B,IAAa2B,EAAAtU,EAAA,GAC/B2I,EAAQqB,OAAM,QAEmB,OAAvCmJ,EAAWpJ,KAAK,CAAC,SAAU,YAAYuK,EAAAtU,EAAA,GACjC2I,EAAQqB,OAAM,eAAAsK,EAAA1T,EAAA,EAEb,CACLmL,SAAS,EACT5H,QAAS,GAAFwJ,OAAKwF,EAAW9I,QAAO,kBAAAsD,OAAiBgH,EAAaxB,EAAW3H,OAAO,GAAG,KACjFtK,MAAOiS,EAAW3H,OAAO,GAAG,KAC7B,QAK2C,OADtCrC,EAAYP,EAAUoC,gBAClBjB,KAAK,CAAC,WAAY,gBAAgBuK,EAAAtU,EAAA,GACtC2I,EAAQqB,OAAM,YAKhB2I,EAAW/O,SAAS,KAAM,CAAF0Q,EAAAtU,EAAA,SAEpBsT,EAAcnK,EAAYA,EAAUyB,SAAW,EAC/C2I,EAAcpK,EAAYA,EAAU2B,YAAc,EAGpDuH,GAAa,EACRoB,EAAMF,EAAW,aAAEE,EAAMF,EAAc,GAAC,CAAAe,EAAAtU,EAAA,SAEtB,OADnBuS,EAAY3J,EAAU6L,QAAQ/B,EAAYlI,SAAUiJ,IAChD1J,KAAK,UAAUuK,EAAAtU,EAAA,GACnB2I,EAAQqB,OAAM,WAEfuI,EAAU/G,OAAO,GAAG,GAAI,CAAF8I,EAAAtU,EAAA,SAEP,OADlBmT,EAAaZ,EACbF,GAAa,EAAKiC,EAAA1T,EAAA,cAP6B6S,IAAKa,EAAAtU,EAAA,oBAanDqS,EAAY,CAAFiC,EAAAtU,EAAA,SACJuK,EAAM+I,EAAW,aAAE/I,EAAM+I,EAAc,GAAC,CAAAgB,EAAAtU,EAAA,SAEtB,OADnBuS,EAAY3J,EAAU6L,QAAQlK,EAAK,IAC/BR,KAAK,UAAUuK,EAAAtU,EAAA,GACnB2I,EAAQqB,OAAM,WAEfuI,EAAU/G,OAAO,GAAG,GAAI,CAAF8I,EAAAtU,EAAA,SAEP,OADlBmT,EAAaZ,EACbF,GAAa,EAAKiC,EAAA1T,EAAA,cAP6B2J,IAAK+J,EAAAtU,EAAA,iBAcrDqS,IACHc,EAAavK,EAAU6L,QAAQnB,EAAc,EAAG,IACjDgB,EAAAtU,EAAA,iBAGyD,OAA1D0S,EAAY3I,KAAK,CAAC,cAAe,WAAY,aAAauK,EAAAtU,EAAA,GACpD2I,EAAQqB,OAAM,QAEdS,GAASiI,EAAYhI,YACrBoJ,GAAWpB,EAAYlI,SAAWkI,EAAY9H,SAEhDwH,GAAY0B,GACZzB,IAAa,EAGRlT,GAAI,EAAC,aAAEA,GAAI,IAAE,CAAAmV,EAAAtU,EAAA,SAEK,OADnBuS,GAAY3J,EAAU6L,QAAQX,GAAW3U,GAAGsL,KACxCV,KAAK,UAAUuK,EAAAtU,EAAA,GACnB2I,EAAQqB,OAAM,QAEoB,GACpCwI,OADEA,GAAYD,GAAU/G,OAAO,GAAG,KAC6B,KAAdgH,GAAgB,CAAA8B,EAAAtU,EAAA,SAEjD,OADlBoS,GAAY0B,GAAW3U,GACvBkT,IAAa,EAAKiC,EAAA1T,EAAA,cAREzB,KAAGmV,EAAAtU,EAAA,iBActBqS,KACHD,GAAY0B,IAGdX,EAAavK,EAAU6L,QAAQrC,GAAW3H,IAAQ,QAGf,OAArC0I,EAAWuB,SAAW,CAAC,CAAC/B,IAAa2B,EAAAtU,EAAA,GAC/B2I,EAAQqB,OAAM,QAEmB,OAAvCmJ,EAAWpJ,KAAK,CAAC,SAAU,YAAYuK,EAAAtU,EAAA,GACjC2I,EAAQqB,OAAM,eAAAsK,EAAA1T,EAAA,EAEb,CACLmL,SAAS,EACT5H,QAAS,GAAFwJ,OAAKwF,EAAW9I,QAAO,kBAAAsD,OAAiBgH,EAAaxB,EAAW3H,OAAO,GAAG,KACjFtK,MAAOiS,EAAW3H,OAAO,GAAG,KAC7B,eAAA8I,EAAA1T,EAAA,KAAA4Q,EAAA,4BAEJjP,MAAA,KAAAD,UAAA,UAGc2S,EAAUC,GAAA,OAAAC,EAAA5S,MAAC,KAADD,UAAA,CA2BzB,SAAA6S,IAFC,OAEDA,EAAA9S,EAAAX,IAAAhE,EA3BA,SAAA0X,EAA0BzM,GAAO,IAAAC,EAAAO,EAAAmC,EAAAjC,EAAAlK,EAAA,OAAAuC,IAAAC,EAAA,SAAA0T,GAAA,cAAAA,EAAArV,GAAA,OAEW,GADpC4I,EAAYD,EAAQgB,SAASC,WAAWC,qBACxCV,EAAYP,EAAUoC,eAEZ,CAAFqK,EAAArV,EAAA,eAAAqV,EAAAzU,EAAA,EACL,IAAE,OAG+B,OAA1CuI,EAAUY,KAAK,CAAC,SAAU,gBAAgBsL,EAAArV,EAAA,EACpC2I,EAAQqB,OAAM,OAKpB,GAHMsB,EAAU,GACVjC,EAAYF,EAAUqC,OAAO,GAGjC,IAASrM,EAAI,EAAGA,EAAIkK,EAAUnK,OAAQC,IACpCmM,EAAQlB,KAAK,CACXK,OAAQtL,EAAI,EACZuM,aAAcC,EAAgBxM,GAC9ByM,MAAOvC,EAAUlK,GAAKkK,EAAUlK,GAAG0M,WAAa,KAGrD,OAAAwJ,EAAAzU,EAAA,EAEM0K,GAAO,EAAA8J,EAAA,KACf7S,MAAA,KAAAD,UAAA,UAGcuN,EAAcyF,EAAAC,GAAA,OAAAC,EAAAjT,MAAC,KAADD,UAAA,CA6Q7B,SAAAkT,IAFC,OAEDA,EAAAnT,EAAAX,IAAAhE,EA7QA,SAAA+X,EAA8B9M,EAAS0G,GAAM,IAAAzG,EAAA8J,EAAAgD,EAAAC,EAAAxM,EAAAuB,EAAAgB,EAAAkK,EAAAzW,EAAA0W,EAAAvK,EAAAwK,EAAAC,EAAAC,EAAAxL,EAAA1B,EAAAE,EAAAiN,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAnD,EAAA9H,EAAAZ,EAAAqJ,EAAA1B,EAAAC,EAAAkE,EAAAhE,EAAAC,EAAAgE,EAAAC,EAAAC,EAAA,OAAAhV,IAAAC,EAAA,SAAAgV,GAAA,cAAAA,EAAApX,EAAAoX,EAAA3W,GAAA,OAIpB,GAHjB4I,EAAYD,EAAQgB,SAASC,WAAWC,qBAE1C6L,EAAmB,GACnBC,EAAiB,GAAEgB,EAAApX,EAAA,EAIM,WAAvB8P,EAAOuH,YAAwB,CAAAD,EAAA3W,EAAA,aAC7BqP,EAAO5E,OAAQ,CAAFkM,EAAA3W,EAAA,QAE2B,GAApCmJ,EAAYP,EAAUoC,eACZ,CAAF2L,EAAA3W,EAAA,eAAA2W,EAAA/V,EAAA,EACL,CAAEmL,SAAS,EAAO9H,MAAO,eAAc,OAGJ,OAA5CkF,EAAUY,KAAK,CAAC,WAAY,gBAAgB4M,EAAA3W,EAAA,EACtC2I,EAAQqB,OAAM,OAEgC,MAA9CU,EAAc2E,EAAO5E,OAAOqK,WAAW,GAAK,IAChC,GAAKpK,GAAevB,EAAU2B,aAAW,CAAA6L,EAAA3W,EAAA,eAAA2W,EAAA/V,EAAA,EAClD,CAAEmL,SAAS,EAAO9H,MAAO,kBAAiB,YAI/CkF,EAAUyB,SAAW,GAAC,CAAA+L,EAAA3W,EAAA,QACxB0S,EAAc9J,EAAU4L,kBAAkB,EAAG9J,EAAavB,EAAUyB,SAAW,EAAG,GAClF8K,EAAmB,GAAH/H,OAAM0B,EAAO5E,OAAM,KAAIkM,EAAA3W,EAAA,sBAAA2W,EAAA/V,EAAA,EAEhC,CAAEmL,SAAS,EAAO9H,MAAO,uBAAsB,OAG1B,OAA9ByO,EAAY3I,KAAK,CAAC,YAAY4M,EAAA3W,EAAA,EACxB2I,EAAQqB,OAAM,OACpB2L,EAAiB,YAAHhI,OAAe+E,EAAYrI,QAAO,KAAIsM,EAAA3W,EAAA,oBAE3CqP,EAAOuF,WAAY,CAAF+B,EAAA3W,EAAA,aAEtBqP,EAAOuF,WAAWC,MAAM,YAAa,CAAF8B,EAAA3W,EAAA,SAKrC,IAHM0L,EAAe2D,EAAOuF,WAExBlK,EAAc,EACTvL,EAAI,EAAGA,EAAIuM,EAAaxM,OAAQC,IACvCuL,EAA4B,GAAdA,GAAoBgB,EAAaoJ,WAAW3V,GAAK,IAIvB,GAF1CuL,IAEMvB,EAAYP,EAAUoC,eACZ,CAAF2L,EAAA3W,EAAA,eAAA2W,EAAA/V,EAAA,EACL,CAAEmL,SAAS,EAAO9H,MAAO,eAAc,OAGJ,OAA5CkF,EAAUY,KAAK,CAAC,WAAY,gBAAgB4M,EAAA3W,EAAA,GACtC2I,EAAQqB,OAAM,aAEhBU,EAAc,GAAKA,GAAevB,EAAU2B,aAAW,CAAA6L,EAAA3W,EAAA,gBAAA2W,EAAA/V,EAAA,EAClD,CAAEmL,SAAS,EAAO9H,MAAO,kBAAiB,aAI/CkF,EAAUyB,SAAW,GAAC,CAAA+L,EAAA3W,EAAA,SACxB0S,EAAc9J,EAAU4L,kBAAkB,EAAG9J,EAAavB,EAAUyB,SAAW,EAAG,GAClF8K,EAAmB,GAAH/H,OAAM0B,EAAOuF,WAAU,KAAI+B,EAAA3W,EAAA,wBAAA2W,EAAA/V,EAAA,EAEpC,CAAEmL,SAAS,EAAO9H,MAAO,uBAAsB,QAG1B,OAA9ByO,EAAY3I,KAAK,CAAC,YAAY4M,EAAA3W,EAAA,GACxB2I,EAAQqB,OAAM,QACpB2L,EAAiB,YAAHhI,OAAe+E,EAAYrI,QAAO,KAAIsM,EAAA3W,EAAA,wBAAA2W,EAAA3W,EAAA,GAG9BiV,EAAWtM,GAAQ,QAC0B,GAD7D2C,EAAOqL,EAAAhW,EACPmV,EAAaxK,EAAQuL,KAAK,SAAAC,GAAC,OAAIA,EAAElL,QAAUyD,EAAOuF,UAAU,GAEjD,CAAF+B,EAAA3W,EAAA,gBAAA2W,EAAA/V,EAAA,EACN,CAAEmL,SAAS,EAAO9H,MAAO,IAAF0J,OAAM0B,EAAOuF,WAAU,qBAAmB,QAI7C,OADvBzL,EAAYP,EAAUoC,gBAClBjB,KAAK,CAAC,aAAa4M,EAAA3W,EAAA,GACvB2I,EAAQqB,OAAM,aAEhBb,EAAUyB,SAAW,GAAC,CAAA+L,EAAA3W,EAAA,SACxB0S,EAAc9J,EAAU4L,kBAAkB,EAAGsB,EAAWrL,OAAS,EAAGtB,EAAUyB,SAAW,EAAG,GAC5F8K,EAAmB,IAAH/H,OAAO0B,EAAOuF,WAAU,OAAM+B,EAAA3W,EAAA,wBAAA2W,EAAA/V,EAAA,EAEvC,CAAEmL,SAAS,EAAO9H,MAAO,uBAAsB,QAG1B,OAA9ByO,EAAY3I,KAAK,CAAC,YAAY4M,EAAA3W,EAAA,GACxB2I,EAAQqB,OAAM,QACpB2L,EAAiB,YAAHhI,OAAe+E,EAAYrI,QAAO,KAAI,QAAAsM,EAAA3W,EAAA,oBAGxB,QAAvBqP,EAAOuH,YAAqB,CAAAD,EAAA3W,EAAA,SAEK,GAApCmJ,EAAYP,EAAUoC,eACZ,CAAF2L,EAAA3W,EAAA,gBAAA2W,EAAA/V,EAAA,EACL,CAAEmL,SAAS,EAAO9H,MAAO,eAAc,QAGJ,OAA5CkF,EAAUY,KAAK,CAAC,WAAY,gBAAgB4M,EAAA3W,EAAA,GACtC2I,EAAQqB,OAAM,QAEa,MAA3BQ,EAAW6E,EAAO9E,IAAM,GACf,GAAKC,GAAYrB,EAAUyB,UAAQ,CAAA+L,EAAA3W,EAAA,gBAAA2W,EAAA/V,EAAA,EACzC,CAAEmL,SAAS,EAAO9H,MAAO,kBAAiB,QAOqB,OAHxEyO,EAAc9J,EAAU4L,kBAAkBhK,EAAU,EAAG,EAAGrB,EAAU2B,aACpE4K,EAAmB,GAAH/H,OAAM0B,EAAO9E,IAAG,KAEhCmI,EAAY3I,KAAK,CAAC,UAAW,WAAY,cAAe,gBAAgB4M,EAAA3W,EAAA,GAClE2I,EAAQqB,OAAM,QACpB2L,EAAiB,YAAHhI,OAAe+E,EAAYrI,QAAO,KAAIsM,EAAA3W,EAAA,qBAE3CqP,EAAOqD,YAAa,CAAFiE,EAAA3W,EAAA,SAKG,OAH9B0S,EAAc9J,EAAUsI,SAAS7B,EAAOqD,aACxCgD,EAAmBrG,EAAOqD,YAE1BA,EAAY3I,KAAK,CAAC,YAAY4M,EAAA3W,EAAA,GACxB2I,EAAQqB,OAAM,QACpB2L,EAAiB,YAAHhI,OAAe+E,EAAYrI,QAAO,KAAIsM,EAAA3W,EAAA,iBAON,OAPM2W,EAAApX,EAAA,IAM5CuJ,EAAiBH,EAAQgB,SAASG,qBACzBC,KAAK,CAAC,QAAS,cAAc4M,EAAA3W,EAAA,GACtC2I,EAAQqB,OAAM,aAEhBlB,EAAemB,UAAY,GAAC,CAAA0M,EAAA3W,EAAA,SAI9B,IAFMgJ,EAAiB,GAEd7J,EAAI,EAAGA,EAAI2J,EAAeoB,MAAMC,MAAMjL,OAAQC,IACxC2J,EAAeoB,MAAMC,MAAMhL,GACnC4K,KAAK,WACX,OAAA4M,EAAA3W,EAAA,GACK2I,EAAQqB,OAAM,QAEpB,IAAS7K,EAAI,EAAGA,EAAI2J,EAAeoB,MAAMC,MAAMjL,OAAQC,IACrD6J,EAAeoB,KAAKtB,EAAeoB,MAAMC,MAAMhL,GAAGkL,SAQqB,OALzEsL,EAAiB,YAAHhI,OAAe3E,EAAesB,KAAK,KAAI,KACrDoL,EAAmB,SAGnBhD,EAAc5J,EAAeoB,MAAMC,MAAM,IAC7BJ,KAAK,CAAC,cAAe,WAAY,WAAY,gBAAgB4M,EAAA3W,EAAA,GACnE2I,EAAQqB,OAAM,QAAA2M,EAAA3W,EAAA,iBAOgE,OAHpF0S,EAAc/J,EAAQgB,SAASwH,mBAC/BuE,EAAmB,SAEnBhD,EAAY3I,KAAK,CAAC,cAAe,WAAY,WAAY,cAAe,YAAY4M,EAAA3W,EAAA,GAC9E2I,EAAQqB,OAAM,QACpB2L,EAAiB,YAAHhI,OAAe+E,EAAYrI,QAAO,KAAI,QAAAsM,EAAA3W,EAAA,iBAQR,OARQ2W,EAAApX,EAAA,GAAAiX,EAAAG,EAAAhW,EAItDuD,QAAQiC,IAAI,8DAA6DqQ,GACzEG,EAAApX,EAAA,IAEQuJ,EAAiBH,EAAQgB,SAASG,qBACzBC,KAAK,CAAC,QAAS,cAAc4M,EAAA3W,EAAA,GACtC2I,EAAQqB,OAAM,aAEhBlB,EAAeoB,MAAMC,MAAMjL,OAAS,GAAC,CAAAyX,EAAA3W,EAAA,SAEvC,IADMgJ,EAAiB,GACd7J,EAAI,EAAGA,EAAI2J,EAAeoB,MAAMC,MAAMjL,OAAQC,IACxC2J,EAAeoB,MAAMC,MAAMhL,GACnC4K,KAAK,WACX,OAAA4M,EAAA3W,EAAA,GACK2I,EAAQqB,OAAM,QAEpB,IAAS7K,EAAI,EAAGA,EAAI2J,EAAeoB,MAAMC,MAAMjL,OAAQC,IACrD6J,EAAeoB,KAAKtB,EAAeoB,MAAMC,MAAMhL,GAAGkL,SAMqB,OAHzEsL,EAAiB,YAAHhI,OAAe3E,EAAesB,KAAK,KAAI,KACrDoL,EAAmB,SACnBhD,EAAc5J,EAAeoB,MAAMC,MAAM,IAC7BJ,KAAK,CAAC,cAAe,WAAY,WAAY,gBAAgB4M,EAAA3W,EAAA,GACnE2I,EAAQqB,OAAM,QAAA2M,EAAA3W,EAAA,uBAEd,IAAIX,MAAM,sBAAqB,QAAAsX,EAAA3W,EAAA,iBAGuB,OAHvB2W,EAAApX,EAAA,GAAAkX,EAAAE,EAAAhW,EAGvCuD,QAAQD,MAAM,gCAA+BwS,GAAiBE,EAAA/V,EAAA,EACvD,CAAEmL,SAAS,EAAO9H,MAAO,wCAAuC,QAMJ,OAAzEyO,EAAY3I,KAAK,CAAC,cAAe,WAAY,WAAY,gBAAgB4M,EAAA3W,EAAA,GACnE2I,EAAQqB,OAAM,YAIhBqF,EAAO8D,WAAY,CAAFwD,EAAA3W,EAAA,SACnBmT,EAAavK,EAAUsI,SAAS7B,EAAO8D,YAAYwD,EAAA3W,EAAA,oBACnB,QAAvBqP,EAAOuH,YAAqB,CAAAD,EAAA3W,EAAA,SAE/BqL,EAAaqH,EAAYhI,YAAcgI,EAAY5H,YACzDqI,EAAavK,EAAU6L,QAAQ/B,EAAYlI,SAAUa,GAAYsL,EAAA3W,EAAA,iBAG3DyK,EAASiI,EAAYhI,YACrBoJ,EAAWpB,EAAYlI,SAAWkI,EAAY9H,SAGhDwH,EAAY0B,EACZzB,GAAa,EAGRlT,EAAI,EAAC,aAAEA,EAAI,IAAE,CAAAwX,EAAA3W,EAAA,SAEK,OADnBuS,EAAY3J,EAAU6L,QAAQX,EAAW3U,EAAGsL,IACxCV,KAAK,UAAU4M,EAAA3W,EAAA,GACnB2I,EAAQqB,OAAM,QAEoB,GACpCwI,OADEA,EAAYD,EAAU/G,OAAO,GAAG,KAC6B,KAAdgH,EAAgB,CAAAmE,EAAA3W,EAAA,SAEjD,OADlBoS,EAAY0B,EAAW3U,EACvBkT,GAAa,EAAKsE,EAAA/V,EAAA,cAREzB,IAAGwX,EAAA3W,EAAA,iBActBqS,IACHD,EAAY0B,GAGdX,EAAavK,EAAU6L,QAAQrC,EAAW3H,GAAQ,QAKV,OAD1C0I,EAAWuB,SAAW,CAAC,CAACiB,IACxBxC,EAAW4D,aAAe,CAAC,CAAC,aAAcJ,EAAA3W,EAAA,GACpC2I,EAAQqB,OAAM,QAEmB,OAAvCmJ,EAAWpJ,KAAK,CAAC,SAAU,YAAY4M,EAAA3W,EAAA,GACjC2I,EAAQqB,OAAM,eAAA2M,EAAA/V,EAAA,EAEb,CACLmL,SAAS,EACT5H,QAAS,GAAFwJ,OAAK+H,EAAgB,UAAA/H,OAASwF,EAAW9I,QAAO,cAAAsD,OAAagH,EAAaxB,EAAW3H,OAAO,GAAG,KACtGtK,MAAOiS,EAAW3H,OAAO,GAAG,KAC7B,QAGgD,OAHhDmL,EAAApX,EAAA,GAAAmX,EAAAC,EAAAhW,EAGDuD,QAAQD,MAAM,2BAA0ByS,GAASC,EAAA/V,EAAA,EAC1C,CACLmL,SAAS,EACT9H,MAAO,kBAAF0J,OAAoB+I,EAAMvS,WAChC,EAAAsR,EAAA,mCAEJlT,MAAA,KAAAD,UAAA,UAGcwN,EAAYkH,EAAAC,GAAA,OAAAC,EAAA3U,MAAC,KAADD,UAAA,CAyD3B,SAAA4U,IAFC,OAEDA,EAAA7U,EAAAX,IAAAhE,EAzDA,SAAAyZ,EAA4BxO,EAAS0G,GAAM,IAAAzG,EAAA8J,EAAA0E,EAAAC,EAAAxF,EAAA1I,EAAAiC,EAAAkM,EAAA,OAAA5V,IAAAC,EAAA,SAAA4V,GAAA,cAAAA,EAAAvX,GAAA,OAIX,OAHxB4I,EAAYD,EAAQgB,SAASC,WAAWC,sBACxC6I,EAAcrD,EAAOqD,YAAc9J,EAAUsI,SAAS7B,EAAOqD,aAAe/J,EAAQgB,SAASwH,oBAEvFpH,KAAK,CAAC,YAAYwN,EAAAvX,EAAA,EACxB2I,EAAQqB,OAAM,OAuBnB,GApBwB,YAArBqF,EAAOmI,gBAAgDla,IAArB+R,EAAOoI,WAGzCJ,EADsB,aAApBhI,EAAOqI,SACE,KAAH/J,OAAQ0B,EAAOoI,UAAS,MACH,WAApBpI,EAAOqI,SACuB,iBAArBrI,EAAOoI,UAAyB,IAAH9J,OAAO0B,EAAOoI,UAAS,KAAMpI,EAAOoI,UAC1EpI,EAAOqI,UAAY,CAAC,IAAK,IAAK,KAAM,KAAM,MAAM9T,SAASyL,EAAOqI,UAC9D,IAAH/J,OAAO0B,EAAOqI,UAAQ/J,OAAG0B,EAAOoI,UAAS,KAEjB,iBAArBpI,EAAOoI,UACL,KAAH9J,OAAQ0B,EAAOoI,UAAS,MAErBpI,EAAOoI,UAGtBL,EAAU,YAAHzJ,OAAe+E,EAAYrI,QAAO,MAAAsD,OAAK0J,EAAQ,MAEtDD,EAD8B,WAArB/H,EAAOmI,UACN,WAAH7J,OAAc+E,EAAYrI,QAAO,KAE9B,UAAHsD,OAAa+E,EAAYrI,QAAO,MAIrCgF,EAAO8D,WAAY,CAAFoE,EAAAvX,EAAA,QACnB6R,EAAajJ,EAAUsI,SAAS7B,EAAO8D,YAAYoE,EAAAvX,EAAA,eAET,OAApCmJ,EAAYP,EAAUoC,eAAcuM,EAAAvX,EAAA,EACpC2I,EAAQqB,OAAM,OAEdoB,EAAUjC,EAAYA,EAAUyB,SAAW,EAC3C0M,EAAUnO,EAAYA,EAAU2B,YAAc,EACpD+G,EAAajJ,EAAU6L,QAAQrJ,EAASkM,GAAS,OAGjB,OAAlCzF,EAAW6C,SAAW,CAAC,CAAC0C,IAAUG,EAAAvX,EAAA,EAC5B2I,EAAQqB,OAAM,OAEM,OAA1B6H,EAAW9H,KAAK,UAAUwN,EAAAvX,EAAA,EACpB2I,EAAQqB,OAAM,cAAAuN,EAAA3W,EAAA,EAEb,CACLmL,SAAS,EACT5H,QAA8B,YAArBkL,EAAOmI,UAA0B,IAAH7J,OACjC0B,EAAOoI,UAAS,sBAAA9J,OAAqBgH,EAAa9C,EAAWrG,OAAO,GAAG,IAAG,oBAAAmC,OAC/DgH,EAAa9C,EAAWrG,OAAO,GAAG,IAAG,KACtDtK,MAAO2Q,EAAWrG,OAAO,GAAG,KAC7B,EAAA2L,EAAA,KACF5U,MAAA,KAAAD,UAAA,UAGcyN,EAAa4H,EAAAC,GAAA,OAAAC,EAAAtV,MAAC,KAADD,UAAA,CAoG5B,SAAAuV,IAFC,OAEDA,EAAAxV,EAAAX,IAAAhE,EApGA,SAAAoa,EAA6BnP,EAAS0G,GAAM,IAAAzG,EAAAmP,EAAAjP,EAAA3J,EAAA6Y,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAA5W,IAAAC,EAAA,SAAA4W,GAAA,cAAAA,EAAAhZ,EAAAgZ,EAAAvY,GAAA,OAI3B,GAHfkE,QAAQiC,IAAI,oCAAqCkJ,GAE3CzG,EAAYD,EAAQgB,SAASC,WAAWC,qBAC1CkO,EAAS,IAET1I,EAAOnG,MAAO,CAAFqP,EAAAvY,EAAA,QACd+X,EAAO3N,KAAKxB,EAAUsI,SAAS7B,EAAOnG,QAAQqP,EAAAvY,EAAA,eAKA,OALAuY,EAAAhZ,EAAA,GAItCuJ,EAAiBH,EAAQgB,SAASG,qBACzBC,KAAK,CAAC,QAAS,cAAcwO,EAAAvY,EAAA,EACtC2I,EAAQqB,OAAM,OAEpB,GAAIlB,EAAemB,UAAY,EAE7B,IAAS9K,EAAI,EAAGA,EAAI2J,EAAeoB,MAAMC,MAAMjL,OAAQC,IACrD4Y,EAAO3N,KAAKtB,EAAeoB,MAAMC,MAAMhL,SAIzC4Y,EAAO3N,KAAKzB,EAAQgB,SAASwH,oBAC9BoH,EAAAvY,EAAA,eAE+D,OAF/DuY,EAAAhZ,EAAA,EAAA+Y,EAAAC,EAAA5X,EAEDuD,QAAQiC,IAAI,4CAA2CmS,GAASC,EAAA3X,EAAA,EACzD,CAAEmL,SAAS,EAAO9H,MAAO,wCAAuC,OAK3E,IAAA+T,EAAA,EAAAC,EAAoBF,EAAMC,EAAAC,EAAA/Y,OAAA8Y,IAAVC,EAAAD,GACRjO,KAAK,UACZ,OAAAwO,EAAAvY,EAAA,EACK2I,EAAQqB,OAAM,OAGpB,IAAAkO,EAAA,EAAAC,EAAoBJ,EAAMG,EAAAC,EAAAjZ,OAAAgZ,IAAfhP,EAAKiP,EAAAD,QACM5a,IAAhB+R,EAAOmJ,OACTtP,EAAMmP,OAAOI,KAAKD,KAAOnJ,EAAOmJ,WAGZlb,IAAlB+R,EAAOqJ,SACTxP,EAAMmP,OAAOI,KAAKC,OAASrJ,EAAOqJ,QAGhCrJ,EAAOsJ,WACTzP,EAAMmP,OAAOI,KAAKG,KAAOvJ,EAAOsJ,UAG9BtJ,EAAOwJ,YACT3P,EAAMmP,OAAOI,KAAK/R,MAAQ2I,EAAOwJ,WAG/BxJ,EAAOyJ,kBACT5P,EAAMmP,OAAOU,KAAKrS,MAAQ2I,EAAOyJ,iBAG/BzJ,EAAO2J,sBACT9P,EAAMmP,OAAOW,oBAAqD,SAA/B3J,EAAO2J,oBAAiC,OACX,WAA/B3J,EAAO2J,oBAAmC,SACX,UAA/B3J,EAAO2J,oBAAkC,QAAU,WAGlF3J,EAAO0H,eAGM,YADXsB,EAAShJ,EAAO0H,eACkB,OAAXsB,EACzBA,EAAS,QACW,aAAXA,GAAoC,OAAXA,GAA8B,QAAXA,GAA+B,OAAXA,EACzEA,EAAS,SACW,qBAAXA,GAA4C,UAAXA,EAC1CA,EAAS,YACW,eAAXA,GAAsC,QAAXA,GAA+B,QAAXA,EACxDA,EAAS,KACW,uBAAXA,GAA8C,WAAXA,EAC5CA,EAAS,QACW,SAAXA,GAAgC,OAAXA,EAC9BA,EAAS,aACW,SAAXA,GAAgC,OAAXA,EAC9BA,EAAS,WACW,SAAXA,GAAgC,QAAXA,EAC9BA,EAAS,IACW,YAAXA,GAAmC,OAAXA,IACjCA,EAAS,WAIXnP,EAAM6N,aAAesB,GAExB,OAAAE,EAAAvY,EAAA,EAEK2I,EAAQqB,OAAM,cAAAuO,EAAA3X,EAAA,EAEb,CACLmL,SAAS,EACT5H,QAAS,iBACV,EAAA2T,EAAA,kBACFvV,MAAA,KAAAD,UAAA,UAGc0N,EAAWiJ,EAAAC,GAAA,OAAAC,EAAA5W,MAAC,KAADD,UAAA,CAwB1B,SAAA6W,IAFC,OAEDA,EAAA9W,EAAAX,IAAAhE,EAxBA,SAAA0b,EAA2BzQ,EAAS0G,GAAM,IAAAzG,EAAAM,EAAAuB,EAAA4O,EAAA3N,EAAA,OAAAhK,IAAAC,EAAA,SAAA2X,GAAA,cAAAA,EAAAtZ,GAAA,OAYrC,OAXG4I,EAAYD,EAAQgB,SAASC,WAAWC,qBACxCX,EAAQmG,EAAOnG,MAAQN,EAAUsI,SAAS7B,EAAOnG,OAASN,EAAUoC,eAEpEP,EAAS4E,EAAO5E,QAAU,EAC1B4O,OAAiC/b,IAArB+R,EAAOgK,WAA0BhK,EAAOgK,UAE1DnQ,EAAMqQ,KAAKhX,MAAM,CACf,CACEyD,IAAKyE,EAAS,EACd4O,UAAWA,KAEZC,EAAAtZ,EAAA,EAEG2I,EAAQqB,OAAM,OAE4B,OAA1C0B,EAAeC,EAAgBlB,EAAS,GAAE6O,EAAA1Y,EAAA,EAEzC,CACLmL,SAAS,EACT5H,QAAS,GAAFwJ,OAAKjC,EAAY,WAAAiC,OAAU0L,EAAY,OAAS,OAAM,eAC9D,EAAAD,EAAA,KACF7W,MAAA,KAAAD,UAAA,UAGc+N,EAAYmJ,EAAAC,GAAA,OAAAC,EAAAnX,MAAC,KAADD,UAAA,CA4N3B,SAAAoX,IAFC,OAEDA,EAAArX,EAAAX,IAAAhE,EA5NA,SAAAic,EAA4BhR,EAAS0G,GAAM,IAAAzG,EAAAgR,EAAAC,EAAA/Q,EAAAgR,EAAA3a,EAAA4a,EAAA5Q,EAAA6Q,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAnR,EAAAoR,EAAAC,EAAAhQ,EAAAiQ,EAAAC,EAAAvZ,EAAAwZ,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAxZ,IAAAC,EAAA,SAAAwZ,GAAA,cAAAA,EAAA5b,EAAA4b,EAAAnb,GAAA,OAKU,GAJ7C4I,EAAYD,EAAQgB,SAASC,WAAWC,qBAE1CgQ,EAAc,GAElB3V,QAAQiC,IAAI,8BAA+BkJ,IAEvCA,EAAOnG,MAAO,CAAFiS,EAAAnb,EAAA,QAEyB,OADvC4Z,EAAahR,EAAUsI,SAAS7B,EAAOnG,QAC5Ba,KAAK,CAAC,UAAW,WAAWoR,EAAAnb,EAAA,EACjC2I,EAAQqB,OAAM,OACpB6P,EAAcD,EAAWvP,QAAQ8Q,EAAAnb,EAAA,gBAKa,OALbmb,EAAA5b,EAAA,GAIzBuJ,EAAiBH,EAAQgB,SAASG,qBACzBC,KAAK,CAAC,QAAS,cAAcoR,EAAAnb,EAAA,EACtC2I,EAAQqB,OAAM,YAEhBlB,EAAemB,UAAY,GAAC,CAAAkR,EAAAnb,EAAA,SAM9B,IAJAkE,QAAQiC,IAAI,gEAGN2T,EAAY,GACT3a,EAAI,EAAGA,EAAI2J,EAAeoB,MAAMC,MAAMjL,OAAQC,KAC/C4a,EAAOjR,EAAeoB,MAAMC,MAAMhL,IACnC4K,KAAK,CAAC,UAAW,SAAU,WAAY,gBAC5C+P,EAAU1P,KAAK2P,GAChB,OAAAoB,EAAAnb,EAAA,EACK2I,EAAQqB,OAAM,OAIwC,OADtDb,EAAYP,EAAUwS,4BAClBrR,KAAK,CAAC,eAAgB,WAAY,gBAAgBoR,EAAAnb,EAAA,EACtD2I,EAAQqB,OAAM,OASpB,IAPMgQ,EAAgB7Q,EAAUkS,aAAwC,EAAzBlS,EAAUyB,SAAW,EAC9DqP,EAAe,EAGfC,EAAmB,GACrBC,EAAa,EAEjBC,EAAA,EAAAC,EAAoBP,EAASM,EAAAC,EAAAnb,OAAAkb,IAC3B,IADSlR,EAAKmR,EAAAD,IACJ5O,QAAUtC,EAAMsC,OAAOtM,OAAS,EAAG,CAC3Cob,EAAA3L,EACkBzF,EAAMsC,QAAM,IAA9B,IAAA8O,EAAA1L,MAAA2L,EAAAD,EAAAta,KAAAiB,MAAWsJ,EAAGgQ,EAAArZ,MACZgZ,EAAiB9P,KAAKG,GACtB4P,EAAamB,KAAKC,IAAIpB,EAAY5P,EAAIrL,OACvC,OAAAsc,GAAAlB,EAAAvc,EAAAyd,EAAA,SAAAlB,EAAA9Z,GAAA,CACH,CAGF,KACI0Z,EAAiBhb,OAAS,GAAC,CAAAic,EAAAnb,EAAA,SAEsB,GADnDkE,QAAQiC,IAAI,qBAAsB+T,GAClChW,QAAQiC,IAAI,oBAAqB2T,EAAU5a,QAAQic,EAAA5b,EAAA,GAI7C2a,EAAiBuB,MAAM,SAAAlR,GAAG,OAAmB,IAAfA,EAAIrL,MAAY,GAAG,CAAFic,EAAAnb,EAAA,QAGjD,IADMwa,EAAkB,GACfrb,EAAI,EAAGA,EAAI+a,EAAiBhb,OAAQC,IAGvC+B,OAFEA,EAAQgZ,EAAiB/a,GAAG,KAEqB,KAAV+B,GAC3CsZ,EAAgBpQ,KAAK,CAAC,QAADuD,OAASxO,EAAE,GAAK+B,IAExC,GAE8B,IAA3BsZ,EAAgBtb,OAAY,CAAAic,EAAAnb,EAAA,eAAAmb,EAAAva,EAAA,EACvB,CAAEmL,SAAS,EAAO9H,MAAO,0BAAyB,OAYxB,OATnCC,QAAQiC,IAAI,8BAA+BqU,IAErCE,EAAY9R,EAAU4L,kBAC1BwF,EACAC,EACAO,EAAgBtb,OAChB,IAGQsM,OAASgP,EAAgBW,EAAAnb,EAAA,EAC7B2I,EAAQqB,OAAM,OAEpB4P,EAAac,EAAUS,EAAAnb,EAAA,gBAUa,OAP9B0a,EAAY9R,EAAU4L,kBAC1BwF,EACAC,EACAC,EAAiBhb,OACjBib,IAGQ3O,OAAS0O,EAAiBiB,EAAAnb,EAAA,GAC9B2I,EAAQqB,OAAM,QAEpB4P,EAAac,EAAU,QAGyC,OAAlEd,EAAW7P,KAAK,CAAC,UAAW,SAAU,WAAY,gBAAgBoR,EAAAnb,EAAA,GAC5D2I,EAAQqB,OAAM,QAEpB9F,QAAQiC,IAAI,sBAAuB,CACjCkE,QAASuP,EAAWvP,QACpBO,SAAUgP,EAAWhP,SACrBE,YAAa8O,EAAW9O,YACxB4Q,WAAY9B,EAAWpO,OAAO,KAGhCqO,EAAcD,EAAWvP,QAAQ8Q,EAAAnb,EAAA,iBAEuB,OAFvBmb,EAAA5b,EAAA,GAAAwb,EAAAI,EAAAxa,EAEjCuD,QAAQD,MAAM,kCAAiC8W,GAASI,EAAAva,EAAA,EACjD,CAAEmL,SAAS,EAAO9H,MAAO,+BAA8B,QAAAkX,EAAAnb,EAAA,wBAAAmb,EAAAva,EAAA,EAGzD,CAAEmL,SAAS,EAAO9H,MAAO,sBAAqB,QAAAkX,EAAAnb,EAAA,iBAKhB,OADvC4Z,EAAajR,EAAQgB,SAASwH,oBACnBpH,KAAK,CAAC,UAAW,WAAWoR,EAAAnb,EAAA,GACjC2I,EAAQqB,OAAM,QACpB6P,EAAcD,EAAWvP,QAAQ,QAAA8Q,EAAAnb,EAAA,iBAG4B,OAH5Bmb,EAAA5b,EAAA,GAAAyb,EAAAG,EAAAxa,EAGnCuD,QAAQiC,IAAI,2CAA0C6U,GAASG,EAAAva,EAAA,EACxD,CAAEmL,SAAS,EAAO9H,MAAO,wCAAuC,QAmB1E,GAfDC,QAAQiC,IAAI,oBAAqB0T,GAK/Be,EADuB,QAArBvL,EAAOuL,WAA4C,OAArBvL,EAAOuL,UAC3BzX,MAAMwY,UAAUC,gBACE,SAArBvM,EAAOuL,WAA6C,MAArBvL,EAAOuL,UACnCzX,MAAMwY,UAAUE,KACE,QAArBxM,EAAOuL,WAA4C,MAArBvL,EAAOuL,UAClCzX,MAAMwY,UAAUG,IACE,YAArBzM,EAAOuL,WAAgD,QAArBvL,EAAOuL,UACtCzX,MAAMwY,UAAUI,UAGhB5Y,MAAMwY,UAAUC,gBAC7BT,EAAA5b,EAAA,GAIMqa,EAAY,CAAFuB,EAAAnb,EAAA,gBAAAmb,EAAAva,EAAA,EACN,CAAEmL,SAAS,EAAO9H,MAAO,kBAAiB,QAoBvB,OAhB5BC,QAAQiC,IAAI,4BAA6ByU,GACzC1W,QAAQiC,IAAI,uBAAwB0T,IAE9BgB,EAAQjS,EAAUoT,OAAO5U,IAAIwT,EAAWhB,EAAYzW,MAAM8Y,cAAcC,OAGxEvV,MAAMwV,KAAO9M,EAAO1I,OAAS,KACnCkU,EAAMuB,OAAS,IACfvB,EAAMwB,MAAQ,IAGdxB,EAAMyB,KAAOjN,EAAOkN,SAAW,IAC/B1B,EAAM2B,IAAMnN,EAAOoN,SAAW,IAG9B5B,EAAM6B,OAAOC,SAAWxZ,MAAMyZ,oBAAoBC,OAClDhC,EAAM6B,OAAOI,SAAU,EAAK3B,EAAAnb,EAAA,GAEtB2I,EAAQqB,OAAM,QAEpB9F,QAAQiC,IAAI,8BAA8BgV,EAAAnb,EAAA,iBAU1C,GAV0Cmb,EAAA5b,EAAA,GAAA0b,EAAAE,EAAAxa,EAE1CuD,QAAQD,MAAM,wBAAuBgX,GACrC/W,QAAQD,MAAM,uBAAwB,CACpCE,QAAS8W,EAAW9W,QACpBiI,MAAO6O,EAAW7O,MAClBwO,UAAWA,EACXf,YAAaA,IAIXe,IAAczX,MAAMwY,UAAUC,gBAAe,CAAAT,EAAAnb,EAAA,SAQX,OAPpCkE,QAAQiC,IAAI,sCAAsCgV,EAAA5b,EAAA,IAE1Csb,EAAQjS,EAAUoT,OAAO5U,IAAIjE,MAAMwY,UAAUC,gBAAiBhC,EAAYzW,MAAM8Y,cAAcC,OAC9FvV,MAAMwV,KAAO9M,EAAO1I,OAAS,KACnCkU,EAAMuB,OAAS,IACfvB,EAAMwB,MAAQ,IACdxB,EAAMyB,KAAOjN,EAAOkN,SAAW,IAC/B1B,EAAM2B,IAAMnN,EAAOoN,SAAW,IAAItB,EAAAnb,EAAA,GAC5B2I,EAAQqB,OAAM,eAAAmR,EAAAva,EAAA,EAEb,CACLmL,SAAS,EACT5H,QAAS,GAAFwJ,OAAKkM,EAAW,kEACxB,QAE2D,OAF3DsB,EAAA5b,EAAA,GAAA2b,EAAAC,EAAAxa,EAEDuD,QAAQD,MAAM,8BAA6BiX,GAAiBC,EAAAva,EAAA,EACrD,CAAEmL,SAAS,EAAO9H,MAAO,mCAAkC,eAAAkX,EAAAva,EAAA,EAI/D,CAAEmL,SAAS,EAAO9H,MAAO,eAAF0J,OAAiBsN,EAAW9W,WAAW,eAAAgX,EAAAva,EAAA,EAGhE,CACLmL,SAAS,EACT5H,QAAS,GAAFwJ,OAAKkM,EAAW,SAAAlM,OAAQ0B,EAAOuL,WAAa,KAAI,mBACxD,EAAAjB,EAAA,0CACFpX,MAAA,KAAAD,UAAA,UAGcgO,EAAwByM,EAAAC,GAAA,OAAAC,EAAA1a,MAAC,KAADD,UAAA,CA6FvC,SAAA2a,IAFC,OAEDA,EAAA5a,EAAAX,IAAAhE,EA7FA,SAAAwf,EAAwCvU,EAAS0G,GAAM,IAAAzG,EAAAmP,EAAA5O,EAAAgU,EAAAC,EAAAC,EAAAnU,EAAAoU,EAAAC,EAAA,OAAA7b,IAAAC,EAAA,SAAA6b,GAAA,cAAAA,EAAAje,EAAAie,EAAAxd,GAAA,OAIW,GAH1D4I,EAAYD,EAAQgB,SAASC,WAAWC,qBAC1CkO,EAAS,GAEb7T,QAAQiC,IAAI,2CAA4CkJ,IAEpDA,EAAOnG,MAAO,CAAFsU,EAAAxd,EAAA,QACd+X,EAAO3N,KAAKxB,EAAUsI,SAAS7B,EAAOnG,QAAQsU,EAAAxd,EAAA,eAKf,OAF/BkE,QAAQiC,IAAI,kEACNgD,EAAYP,EAAUwS,4BAClBrR,KAAK,gBAAgByT,EAAAxd,EAAA,EACzB2I,EAAQqB,OAAM,OAEfb,EAAUkS,cAMP8B,EAAevU,EAAUsI,SAAS,iBACxC6G,EAAO3N,KAAK+S,IALZpF,EAAO3N,KAAKjB,GAMb,OAAAqU,EAAAje,EAAA,EAAA6d,EAAA,EAAAC,EAKmBtF,EAAM,YAAAqF,EAAAC,EAAAne,QAAA,CAAAse,EAAAxd,EAAA,QAEF,OAFbkJ,EAAKmU,EAAAD,IAERrT,KAAK,WAAWyT,EAAAxd,EAAA,EAChB2I,EAAQqB,OAAM,OAEpB9F,QAAQiC,IAAI,wCAAyC+C,EAAMmB,SAIrDiT,EAAoBpU,EAAMuU,mBAAmBrW,IAAIjE,MAAMua,sBAAsBlL,WAG1D,iBAArBnD,EAAOoI,gBAAiDna,IAAjB+R,EAAOnO,MAChDoc,EAAkB9K,UAAUmL,KAAO,CACjCC,SAAUvO,EAAOnO,MAAM2K,WACvB6L,SAAUvU,MAAM0a,6BAA6BC,aAEjB,cAArBzO,EAAOoI,gBAA8Cna,IAAjB+R,EAAOnO,MACpDoc,EAAkB9K,UAAUmL,KAAO,CACjCC,SAAUvO,EAAOnO,MAAM2K,WACvB6L,SAAUvU,MAAM0a,6BAA6BE,UAEjB,aAArB1O,EAAOoI,gBAA6Cna,IAAjB+R,EAAOnO,MACnDoc,EAAkB9K,UAAUmL,KAAO,CACjCC,SAAUvO,EAAOnO,MAAM2K,WACvB6L,SAAUvU,MAAM0a,6BAA6BG,SAEjB,kBAArB3O,EAAOoI,gBAAkDna,IAAjB+R,EAAOnO,MACxDoc,EAAkB9K,UAAUmL,KAAO,CACjCC,SAAUvO,EAAOnO,MAAM2K,WACvB6L,SAAUvU,MAAM0a,6BAA6BI,cAI/CX,EAAkB9K,UAAUmL,KAAO,CACjCC,UAAWvO,EAAOnO,OAAS,GAAG2K,WAC9B6L,SAAUvU,MAAM0a,6BAA6BC,aAKjDR,EAAkB9K,UAAU6F,OAAOU,KAAKrS,MAAQ2I,EAAOyJ,iBAAmB,UACtEzJ,EAAOwJ,YACTyE,EAAkB9K,UAAU6F,OAAOI,KAAK/R,MAAQ2I,EAAOwJ,WAErDxJ,EAAOmJ,OACT8E,EAAkB9K,UAAU6F,OAAOI,KAAKD,MAAO,GAChD,OAAA4E,IAAAI,EAAAxd,EAAA,eAAAwd,EAAAxd,EAAA,eAG8D,OAH9Dwd,EAAAje,EAAA,EAAAge,EAAAC,EAAA7c,EAGHuD,QAAQD,MAAM,qCAAoCsZ,GAAeC,EAAA5c,EAAA,EAC1D,CACLmL,SAAS,EACT9H,MAAO,mBAAF0J,OAAqB4P,EAAYpZ,WACvC,cAAAqZ,EAAAxd,EAAA,GAGG2I,EAAQqB,OAAM,eAAAwT,EAAA5c,EAAA,EAEb,CACLmL,SAAS,EACT5H,QAAS,qBAAFwJ,OAAuB0B,EAAOoI,UAAS,KAAA9J,OAAI0B,EAAOnO,OAAS,GAAE,OACrE,EAAAgc,EAAA,kBACF3a,MAAA,KAAAD,UAAA,UAGciO,EAAgB2N,EAAAC,GAAA,OAAAC,EAAA7b,MAAC,KAADD,UAAA,CAmU/B,SAAA8b,IAFC,OAEDA,EAAA/b,EAAAX,IAAAhE,EAnUA,SAAA2gB,EAAgC1V,EAAS0G,GAAM,IAAAzG,EAAA8J,EAAA4L,EAAAnV,EAAAuC,EAAAhB,EAAA6T,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA1f,EAAA2f,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAArV,EAAAsV,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA3N,EAAA4N,EAAAC,EAAA,OAAA3e,IAAAC,EAAA,SAAA2e,GAAA,cAAAA,EAAAtgB,GAAA,OAEqB,GADlEkE,QAAQiC,IAAI,uCAAwCkJ,GAC9CzG,EAAYD,EAAQgB,SAASC,WAAWC,qBAEzCwF,EAAOkR,eAAgB,CAAFD,EAAAtgB,EAAA,eAAAsgB,EAAA1f,EAAA,EACjB,CAAEmL,SAAS,EAAO9H,MAAO,mBAAkB,WAMhDoL,EAAOqD,YAAa,CAAF4N,EAAAtgB,EAAA,YAEhBqP,EAAOqD,YAAYmC,MAAM,mBAAoB,CAAFyL,EAAAtgB,EAAA,QAEH,GAD1CkE,QAAQiC,IAAI,yBAA0BkJ,EAAOqD,aACvCvJ,EAAYP,EAAUoC,eACZ,CAAFsV,EAAAtgB,EAAA,eAAAsgB,EAAA1f,EAAA,EACL,CAAEmL,SAAS,EAAO9H,MAAO,mBAAkB,OAGR,OAA5CkF,EAAUY,KAAK,CAAC,WAAY,gBAAgBuW,EAAAtgB,EAAA,EACtC2I,EAAQqB,OAAM,OAWpB,GATA9F,QAAQiC,IAAI,cAAe,CACzByE,SAAUzB,EAAUyB,SACpBE,YAAa3B,EAAU2B,cAInBY,EAAe2D,EAAOqD,YAAY8N,MAAM,KAAK,GAC7C9V,EAAcgB,EAAaoJ,WAAW,GAAK,KAG7C3L,EAAUyB,SAAW,GAAC,CAAA0V,EAAAtgB,EAAA,QACxB0S,EAAc9J,EAAU4L,kBAAkB,EAAG9J,EAAavB,EAAUyB,SAAW,EAAG,GAAG0V,EAAAtgB,EAAA,sBAAAsgB,EAAA1f,EAAA,EAE9E,CAAEmL,SAAS,EAAO9H,MAAO,mBAAkB,OAIhDoL,EAAOkQ,aAAelQ,EAAOkQ,YAAY1K,MAAM,oBAC3C0J,EAAqBlP,EAAOkQ,YAAYiB,MAAM,KAAK,GACzDlC,EAAoBC,EAAmBzJ,WAAW,GAAK,GACvD5Q,QAAQiC,IAAI,6BAA8B,CACxCoZ,YAAalQ,EAAOkQ,YACpBhB,mBAAAA,EACAD,kBAAAA,MAIFA,EAAoB5T,EAAc,EAClCxG,QAAQiC,IAAI,+BAAgC,CAC1Csa,kBAAmB/V,EACnB4T,kBAAAA,KAEHgC,EAAAtgB,EAAA,eAGD0S,EAAc9J,EAAUsI,SAAS7B,EAAOqD,aAGpCrD,EAAOkQ,aACLlQ,EAAOkQ,YAAY1K,MAAM,qBAErB0J,EAAqBlP,EAAOkQ,YAAYiB,MAAM,KAAK,GACzDlC,EAAoBC,EAAmBzJ,WAAW,GAAK,GACvD5Q,QAAQiC,IAAI,yCAA0C,CACpDoZ,YAAalQ,EAAOkQ,YACpBhB,mBAAAA,EACAD,kBAAAA,KAGL,OAAAgC,EAAAtgB,EAAA,oBAEMqP,EAAOqR,aAAc,CAAFJ,EAAAtgB,EAAA,SAGC,OAFvB0K,EAAc2E,EAAOqR,aAAa5L,WAAW,GAAK,IAClD3L,EAAYP,EAAUoC,gBAClBjB,KAAK,CAAC,aAAauW,EAAAtgB,EAAA,EACvB2I,EAAQqB,OAAM,YAEhBb,EAAUyB,SAAW,GAAC,CAAA0V,EAAAtgB,EAAA,SACxB0S,EAAc9J,EAAU4L,kBAAkB,EAAG9J,EAAavB,EAAUyB,SAAW,EAAG,GAAG0V,EAAAtgB,EAAA,wBAAAsgB,EAAA1f,EAAA,EAE9E,CAAEmL,SAAS,EAAO9H,MAAO,mBAAkB,QAGpDqa,EAA4C,SAAxBjP,EAAOsR,aAA0BjW,EAAc,EAChD2E,EAAOsR,aAAetR,EAAOsR,aAAa7L,WAAW,GAAK,GAAKpK,EAAc,EAAE4V,EAAAtgB,EAAA,wBAAAsgB,EAAA1f,EAAA,EAE3F,CAAEmL,SAAS,EAAO9H,MAAO,mBAAkB,QAGgB,OAApEyO,EAAY3I,KAAK,CAAC,SAAU,WAAY,cAAe,aAAauW,EAAAtgB,EAAA,GAC9D2I,EAAQqB,OAAM,QASmB,GAPvC9F,QAAQiC,IAAI,uBAAwB,CAClCqE,SAAUkI,EAAYlI,SACtBE,YAAagI,EAAYhI,YACzBE,SAAU8H,EAAY9H,SACtBY,OAAQkH,EAAYlH,OAAS,GAAHmC,OAAM+E,EAAYlH,OAAOtM,OAAM,SAAU,UAG/Dyf,EAAejM,EAAYlH,SACY,IAAxBmT,EAAazf,OAAY,CAAAohB,EAAAtgB,EAAA,gBAAAsgB,EAAA1f,EAAA,EACrC,CAAEmL,SAAS,EAAO9H,MAAO,mBAAkB,QAG9C2a,EAAe,GACfC,EAAY,GAGT1f,EAAI,EAAC,aAAEA,EAAIwf,EAAazf,QAAM,CAAAohB,EAAAtgB,EAAA,SAE2B,GAD1D8e,EAAQH,EAAaiC,MAAMzhB,EAAGmc,KAAKuF,IAAI1hB,EAAI0f,EAAWF,EAAazf,YACnE6f,EAAaD,EAAMgC,IAAI,SAAAvW,GAAG,OAAIA,EAAI,EAAE,GAAEwW,OAAO,SAAA5E,GAAI,OAAIA,CAAI,IAEhDjd,OAAS,GAAC,CAAAohB,EAAAtgB,EAAA,gBAAAsgB,EAAAtgB,EAAA,GACOghB,EAAejC,EAAY1P,EAAOkR,eAAgBlR,EAAO4R,gBAAe,QAGtG,IAHMjC,EAAesB,EAAA3f,IAGI8N,MAAMC,QAAQsQ,GAqBrC,IAVA9a,QAAQiC,IAAI,gCAAiC,CAC3C+a,YAAapC,EAAM5f,OACnBiiB,sBAAuBnC,EAAgB9f,OACvCkiB,mBAAoBpC,EAAgB4B,MAAM,EAAG,GAC7CS,iBAAkBrC,EAAgB,GAClCsC,gBAAeC,EAASvC,EAAgB,IACxCwC,QAASjU,KAAKC,UAAUwR,EAAgB4B,MAAM,EAAG,MAG/C1B,EAAmB,EACdD,EAAI,EAAGA,EAAIH,EAAM5f,OAAQ+f,IAC5BH,EAAMG,GAAG,KACLG,EAAiBJ,EAAgBE,IAAqB,KAEX,KAA1BE,EAAetX,OAGpC8W,EAAaxU,KAAK,CAAC,CAAE+R,KAAMiD,EAAgBqC,SAAS,KAFpD7C,EAAaxU,KAAK,CAAC,CAAE+R,KAAM,QAASsF,SAAS,KAI3CxC,EAAI,GACN/a,QAAQiC,IAAI,eAADwH,OAAgBsR,EAAC,OAAAtR,OAAMmR,EAAMG,GAAG,GAAE,UAAAtR,OAASyR,EAAc,MAEtEF,KAGAN,EAAaxU,KAAK,CAAC,CAAE+R,KAAM,GAAIsF,SAAS,UAjC5C,IAFAvd,QAAQD,MAAM,sCAAuC+a,GAE5CC,EAAI,EAAGA,EAAIH,EAAM5f,OAAQ+f,IAC5BH,EAAMG,GAAG,GACXL,EAAaxU,KAAK,CAAC,CAAE+R,KAAM,QAASsF,SAAS,KAE7C7C,EAAaxU,KAAK,CAAC,CAAE+R,KAAM,GAAIsF,SAAS,KAgC7CnB,EAAAtgB,EAAA,iBAED,IAASif,EAAI,EAAGA,EAAIH,EAAM5f,OAAQ+f,IAChCL,EAAaxU,KAAK,CAAC,CAAE+R,KAAM,GAAIsF,SAAS,KACzC,QAICtiB,EAAI,KAAQ,GAAKA,EAAI,GACvB0E,EAAW,WAAD8J,OAAY2N,KAAKoG,MAAOviB,EAAIwf,EAAazf,OAAU,KAAI,KAAK,QACvE,QAzDsCC,GAAK0f,EAASyB,EAAAtgB,EAAA,iBA6EvD,IAhBAkE,QAAQiC,IAAI,yCAA0C,CACpDqE,SAAUkI,EAAYlI,SACtB8T,kBAAmBA,GAAqB5L,EAAYhI,YAAc,EAClEiX,kBAAmB/C,EAAa1f,OAChCkiB,mBAAoBxC,EAAagC,MAAM,EAAG,GAAGE,IAAI,SAAAjhB,GAAC,OAAIA,EAAE,EAAE,KAE5DqE,QAAQiC,IAAI,4BAA6BoH,KAAKC,UAAUoR,EAAagC,MAAM,EAAG,KAC9E1c,QAAQiC,IAAI,6BAA8B,CACxCyb,MAAOhD,EAAa,GAAKA,EAAa,GAAG,GAAK,OAC9CiD,OAAQjD,EAAa,GAAKA,EAAa,GAAG,GAAK,OAC/CkD,MAAOlD,EAAa,GAAKA,EAAa,GAAG,GAAK,OAC9CmB,QAASnB,EAAa,IAA6B,KAAvBA,EAAa,GAAG,KAI9C1a,QAAQiC,IAAI,6CACHhH,EAAI,EAAGA,EAAImc,KAAKuF,IAAI,EAAGjC,EAAa1f,QAASC,IACpD+E,QAAQiC,IAAI,MAADwH,OAAOxO,EAAC,eAAAwO,OAAcgR,EAAaxf,GAAG,GAAE,uBAAAwO,OAAsBiR,EAAazf,GAAG,GAAE,MAiBrD,YAbd7B,IAAtBghB,IAEFA,EAAoB5L,EAAYhI,YAAc,EAC9CxG,QAAQiC,IAAI,iDAAkDmY,KAG1DiB,EAAc3W,EAAU4L,kBAC5B9B,EAAYlI,SACZ8T,EACAM,EAAa1f,OACb,IAGU6K,KAAK,CAAC,UAAW,WAAWuW,EAAAtgB,EAAA,GAClC2I,EAAQqB,OAAM,QAK2B,OAJ/C9F,QAAQiC,IAAI,wBAAyBoZ,EAAYlV,SACjDnG,QAAQiC,IAAI,oCAAqCoZ,EAAY/T,OAAOoV,MAAM,EAAG,IAG7ErB,EAAYwC,MAAM5e,MAAM6e,aAAaC,UAAU3B,EAAAtgB,EAAA,GACzC2I,EAAQqB,OAAM,QAepB,IAdA9F,QAAQiC,IAAI,wBAGZjC,QAAQiC,IAAI,+BAAgC,CAC1C+b,mBAAoBtD,EAAa1f,OACjCmiB,iBAAkBzC,EAAa,GAC/BlQ,QAASD,MAAMC,QAAQkQ,GACvBuD,UAAW1T,MAAMC,QAAQkQ,EAAa,MAIlCY,EAAqB,GACrBC,EAAY,GAETtgB,EAAI,EAAGA,EAAIyf,EAAa1f,OAAQC,KACjCwgB,EAAcf,EAAazf,GAAG,KACM,WAAvBoiB,EAAO5B,IACxBH,EAAmBpV,KAAK,CAACuV,EAAYxD,OACjCwD,EAAY8B,SACdhC,EAAUrV,KAAKjL,IAIjBqgB,EAAmBpV,KAAK,CAACgY,OAAOzC,GAAe,MAQX,OAJxCzb,QAAQiC,IAAI,iCAAkCqZ,EAAmBoB,MAAM,EAAG,IAC1E1c,QAAQiC,IAAI,cAAesZ,EAAUvgB,OAAQ,yBAG7CqgB,EAAY/T,OAASgU,EAAmBc,EAAAtgB,EAAA,GAClC2I,EAAQqB,OAAM,aAGhByV,EAAUvgB,OAAS,GAAC,CAAAohB,EAAAtgB,EAAA,SAAA4f,EAAAjR,EACC8Q,GAAS,IAAhC,IAAAG,EAAAhR,MAAAiR,EAAAD,EAAA5f,KAAAiB,MAAWuJ,EAAQqV,EAAA3e,OACX4e,EAAYP,EAAY9K,QAAQjK,EAAU,IACtC6N,OAAOU,KAAKrS,MAAQ,UAC9BoZ,EAAUzH,OAAOI,KAAK/R,MAAQ,UAC9BoZ,EAAUzH,OAAOI,KAAKD,MAAO,CAC9B,OAAAgD,GAAAoE,EAAA7hB,EAAAyd,EAAA,SAAAoE,EAAApf,GAAA,QAAA8f,EAAAtgB,EAAA,GACK2I,EAAQqB,OAAM,QAM6B,OAHnD9F,QAAQiC,IAAI,4DAGZoZ,EAAYxV,KAAK,CAAC,SAAU,OAAQ,eAAeuW,EAAAtgB,EAAA,GAC7C2I,EAAQqB,OAAM,QAcpB,GAbA9F,QAAQiC,IAAI,+BAAgC,CAC1CkE,QAASkV,EAAYlV,QACrBmB,OAAQ+T,EAAY/T,OAAOoV,MAAM,EAAG,GACpCzE,KAAMoD,EAAYpD,KAAKyE,MAAM,EAAG,GAChCyB,WAAY9C,EAAY8C,WAAWzB,MAAM,EAAG,GAC5C0B,iBAAkB/C,EAAY/T,OAAO,GAAK+T,EAAY/T,OAAO,GAAG,GAAK,OACrE+W,iBAAkB,CAChBhD,EAAY/T,OAAO,GAAK+T,EAAY/T,OAAO,GAAG,GAAK,QACnD+T,EAAY/T,OAAO,GAAK+T,EAAY/T,OAAO,GAAG,GAAK,QACnD+T,EAAY/T,OAAO,GAAK+T,EAAY/T,OAAO,GAAG,GAAK,aAKnDoT,EAAa1f,OAAS,GAAC,CAAAohB,EAAAtgB,EAAA,SAMtB,GALG+f,GAAWR,EAAY/T,OAAO,KAAO+T,EAAY/T,OAAO,GAAG,IAAmC,KAA7B+T,EAAY/T,OAAO,GAAG,GAC7FtH,QAAQiC,IAAI,gCAAiC,CAC3C4Z,QAAAA,EACArE,WAAY6D,EAAY/T,OAAO,GAAK+T,EAAY/T,OAAO,GAAG,GAAK,OAC/DgX,iBAAkBjD,EAAY/T,OAAO,IAAM+T,EAAY/T,OAAO,GAAG,GAAK+T,EAAY/T,OAAO,GAAG,GAAGtM,OAAS,KAGtG6gB,EAAS,CAAFO,EAAAtgB,EAAA,SACTkE,QAAQiC,IAAI,0DAEHhH,EAAI,EAAC,aAAEA,EAAImc,KAAKuF,IAAI,EAAGjC,EAAa1f,SAAO,CAAAohB,EAAAtgB,EAAA,SAOtB,OANtBigB,EAAUvN,EAAYlI,SAAWrL,EACjC+gB,EAAU5B,GAAqB5L,EAAYhI,YAAc,EACzDyV,EAAOvX,EAAU6L,QAAQwL,EAASC,GAClC1N,EAAYgN,EAAmBrgB,GAAG,GAExC+E,QAAQiC,IAAI,iBAADwH,OAAkBsS,EAAO,KAAAtS,OAAIuS,EAAO,WAAAvS,OAAU6E,EAAS,MAClE2N,EAAK3U,OAAS,CAAC,CAACgH,IAAY8N,EAAAtgB,EAAA,GAEtB2I,EAAQqB,OAAM,QAGA,OAApBmW,EAAKpW,KAAK,UAAUuW,EAAAtgB,EAAA,GACd2I,EAAQqB,OAAM,QACpB9F,QAAQiC,IAAI,QAADwH,OAASxO,EAAC,mBAAmBghB,EAAK3U,OAAO,GAAG,IAAI,QAdPrM,IAAGmhB,EAAAtgB,EAAA,iBAsB7B,OAF1BogB,EAAaxX,EAAU6L,QAAQ,EAAG6J,GAAqB5L,EAAYhI,YAAc,IACjF2V,EAAmBzX,EAAU6L,QAAQ,EAAG/B,EAAYhI,cACzCX,KAAK,UAAUuW,EAAAtgB,EAAA,GAC1B2I,EAAQqB,OAAM,QAEkE,OAAtFoW,EAAW5U,OAAS,CAAC,CAAC,GAADmC,OAAI0S,EAAiB7U,OAAO,GAAG,GAAE,MAAAmC,OAAK0B,EAAOkR,eAAc,OAAMD,EAAAtgB,EAAA,GAChF2I,EAAQqB,OAAM,eAAAsW,EAAA1f,EAAA,EAEb,CACLmL,SAAS,EACT5H,QAAS,iBAAFwJ,OAAmBgR,EAAazf,OAAM,WAC9C,EAAAmf,EAAA,KACF9b,MAAA,KAAAD,UAAA,UAGc0e,EAAcyB,EAAAC,EAAAC,GAAA,OAAAC,EAAArgB,MAAC,KAADD,UAAA,CA+D7B,SAAAsgB,IAFC,OAEDA,EAAAvgB,EAAAX,IAAAhE,EA/DA,SAAAmlB,EAA8BC,EAAOvC,EAAgBU,GAAc,IAAAxU,EAAA7H,EAAA8H,EAAAC,EAAAC,EAAApD,EAAAuZ,EAAA,OAAArhB,IAAAC,EAAA,SAAAqhB,GAAA,cAAAA,EAAAzjB,EAAAyjB,EAAAhjB,GAAA,OA0B9D,OA1B8DgjB,EAAAzjB,EAAA,EAE/D2E,QAAQiC,IAAI,6BAA8B2c,EAAM5jB,OAAQ,SAGlDuN,EAAgB/H,aAAaC,QAAQ,+BAAiC,0BACtEC,EAAUF,aAAaC,QAAQ,wBAC/B+H,EAAYhI,aAAaC,QAAQ,0BAGjCgI,EAAc,CAClB/G,QAAS,4BAAF+H,OAA8B4S,EAAc,MAAA5S,OAAKmV,EAAMxY,KAAK,OACnElB,aAAc,CACZ0F,UAAW,kBACXgU,MAAOA,EACPvC,eAAgBA,EAChBU,eAAgBA,GAElBjU,MAAOP,EACPQ,WAAY,SAIQ,uBAAlBR,IACFE,EAAY/H,QAAUA,EACtB+H,EAAYD,UAAYA,GACzBsW,EAAAhjB,EAAA,EAEsBoN,MAAMxK,EAAe,CAC1CyK,OAAQ,OACR/B,QAAS,CACP,eAAgB,oBAElBgC,KAAMC,KAAKC,UAAUb,KACrB,OAE2D,GARvDC,EAAQoW,EAAAriB,EAQduD,QAAQiC,IAAI,+BAAgCyG,EAASgB,QAEhDhB,EAASa,GAAI,CAAFuV,EAAAhjB,EAAA,cACR,IAAIX,MAAM,uBAADsO,OAAwBf,EAASgB,SAAS,cAAAoV,EAAAhjB,EAAA,EAGtC4M,EAASc,OAAM,OACO,GADrClE,EAAMwZ,EAAAriB,EACZuD,QAAQiC,IAAI,sBAAuBqD,KAE/BA,EAAOuC,SAAWvC,EAAOyC,MAAQzC,EAAOyC,KAAK2S,cAAY,CAAAoE,EAAAhjB,EAAA,QAGiC,OAF5FkE,QAAQiC,IAAI,yBAA0BqD,EAAOyC,KAAK2S,aAAa1f,QAC/DgF,QAAQiC,IAAI,iCAAkCqD,EAAOyC,KAAK2S,aAAagC,MAAM,EAAG,IAChF1c,QAAQiC,IAAI,yBAA0BoH,KAAKC,UAAUhE,EAAOyC,KAAK2S,aAAagC,MAAM,EAAG,KAAKoC,EAAApiB,EAAA,EACrF4I,EAAOyC,KAAK2S,cAAY,WACtBpV,EAAOvF,MAAO,CAAF+e,EAAAhjB,EAAA,QACiC,MAAtDkE,QAAQD,MAAM,yBAA0BuF,EAAOvF,OACzC,IAAI5E,MAAMmK,EAAOvF,OAAM,OAEoC,MAAjEC,QAAQD,MAAM,0CAA2CuF,GACnD,IAAInK,MAAM,qBAAoB,OAAA2jB,EAAAhjB,EAAA,eAGK,OAHLgjB,EAAAzjB,EAAA,EAAAwjB,EAAAC,EAAAriB,EAGtCuD,QAAQD,MAAM,qBAAoB8e,GAASC,EAAApiB,EAAA,EACpCkiB,EAAMhC,IAAI,iBAAM,EAAE,IAAC,cAAAkC,EAAApiB,EAAA,KAAAiiB,EAAA,kBAE7BtgB,MAAA,KAAAD,UAAA,CAGD,SAASqJ,EAAgBjB,GAIvB,IAHA,IAAIgB,EAAe,GACfuX,EAAYvY,EAETuY,GAAa,GAClBvX,EAAe0W,OAAOc,aAAcD,EAAY,GAAM,IAAMvX,EAC5DuX,EAAY3H,KAAK6H,MAAMF,EAAY,IAAM,EAG3C,OAAOvX,CACT,CAEA,SAASiJ,EAAazT,GACpB,MAAqB,iBAAVA,EACLkiB,OAAOC,UAAUniB,GACZA,EAAMoiB,eAAe,SAErBpiB,EAAMoiB,eAAe,QAAS,CAAEC,sBAAuB,EAAGC,sBAAuB,IAGrFtiB,CACT,CAEA,SAAS2C,EAAWM,EAASsf,GAC3B,IAAM7V,EAASjP,SAAS2E,eAAe,UACvCsK,EAAO9J,YAAcK,EACrByJ,EAAO8V,UAAY,kBAAoBD,EACvC7V,EAAOrH,MAAMod,QAAU,QAEnB3lB,OAAO4lB,eACTC,aAAa7lB,OAAO4lB,eAGT,YAATH,IACFzlB,OAAO4lB,cAAgB1X,WAAW,WAChC0B,EAAOrH,MAAMod,QAAU,MACzB,EAAG,KAEP,CAEA,SAASlgB,IACP9E,SAAS2E,eAAe,gBAAgBpC,MAAQ,GAChDvC,SAAS2E,eAAe,UAAUiD,MAAMod,QAAU,MACpD,CASA,SAASpf,IACP,IAAMK,EAAUF,aAAaC,QAAQ,wBAC/B+H,EAAYhI,aAAaC,QAAQ,0BACjCmf,EAAanlB,SAAS2E,eAAe,cAEvCsB,GAAW8H,GACboX,EAAWhgB,YAAc,QACzBggB,EAAW3c,UAAUC,IAAI,mBAEzB0c,EAAWhgB,YAAc,KACzBggB,EAAW3c,UAAUO,OAAO,iBAEhC,CAGA,SAASrD,IACP,IAAMO,EAAUF,aAAaC,QAAQ,wBAC/B+H,EAAYhI,aAAaC,QAAQ,0BAEnCC,GAAW8H,EAWf/N,SAAS2E,eAAe,eAAeiD,MAAMod,QAAU,QANrDI,GAEJ,CAQA,SAAS3e,IACPzG,SAAS2E,eAAe,eAAeiD,MAAMod,QAAU,MACzD,CAGA,SAASre,IACP,IACEpB,QAAQiC,IAAI,wBAGZzB,aAAasf,WAAW,wBACxBtf,aAAasf,WAAW,0BAGxBrlB,SAAS2E,eAAe,eAAepC,MAAQ,0BAG/CqD,IAGAa,IAGAvB,EAAW,6BAA8B,UAC3C,CAAE,MAAOI,GACPC,QAAQD,MAAM,0BAA2BA,GACzCJ,EAAW,sBAAuB,QACpC,CACF,CAGA,SAASkgB,IACPplB,SAAS2E,eAAe,aAAaiD,MAAMod,QAAU,OACvD,CAEA,SAAS3e,IACPrG,SAAS2E,eAAe,aAAaiD,MAAMod,QAAU,OACrDhlB,SAAS2E,eAAe,kBAAkBpC,MAAQ,GAClDvC,SAAS2E,eAAe,gBAAgBpC,MAAQ,GAChDvC,SAAS2E,eAAe,cAAciD,MAAMod,QAAU,MACxD,CAAC,SAEcte,IAAa,OAAA4e,EAAA1hB,MAAC,KAADD,UAAA,UAAA2hB,IAgG3B,OAhG2BA,EAAA5hB,EAAAX,IAAAhE,EAA5B,SAAAwmB,IAAA,IAAAtf,EAAAuf,EAAAvX,EAAAX,EAAAmY,EAAA,OAAA1iB,IAAAC,EAAA,SAAA0iB,GAAA,cAAAA,EAAA9kB,EAAA8kB,EAAArkB,GAAA,OAEsE,GAD9D4E,EAAUjG,SAAS2E,eAAe,gBAAgBpC,MAAM4G,OACxDqc,EAAQxlB,SAAS2E,eAAe,kBAAkBpC,MAAM4G,OAElD,CAAFuc,EAAArkB,EAAA,QACmC,OAA3CskB,EAAe,kBAAmB,SAASD,EAAAzjB,EAAA,UAKE,GAA5B,6BACHxB,KAAK+kB,GAAQ,CAAFE,EAAArkB,EAAA,QACoB,OAA7CskB,EAAe,oBAAqB,SAASD,EAAAzjB,EAAA,aAI1CgE,EAAS,CAAFyf,EAAArkB,EAAA,QAC8B,OAAxCskB,EAAe,eAAgB,SAASD,EAAAzjB,EAAA,eAKtCgE,EAAQ1F,OAAS,GAAC,CAAAmlB,EAAArkB,EAAA,QAC6B,OAAjDskB,EAAe,wBAAyB,SAASD,EAAAzjB,EAAA,UAWnD,OANA0jB,EAAe,mBAAoB,QAGnC5f,aAAaG,QAAQ,uBAAwBD,GAC7CF,aAAaG,QAAQ,yBAA0Bsf,GAE/CE,EAAA9kB,EAAA,EAAA8kB,EAAArkB,EAAA,EAEyBoN,MAAMxK,EAAe,CAC1CyK,OAAQ,OACR/B,QAAS,CACP,eAAgB,oBAElBgC,KAAMC,KAAKC,UAAU,CACnB5H,QAAS,MACTwD,aAAc,CACZ+B,YAAa,CAAEd,QAAS,MACxBe,QAAS,EACTC,WAAY,EACZC,QAAS,IAEX0B,MAAO,qBACPpI,QAASA,EACT8H,UAAWyX,MAEb,OAjBY,GAoBU,OApBlBvX,EAAQyX,EAAA1jB,GAoBDiN,OAAc,CAAAyW,EAAArkB,EAAA,QAIyB,OAFlDskB,EAAe,kBAAmB,SAClC5f,aAAasf,WAAW,wBACxBtf,aAAasf,WAAW,0BAA0BK,EAAAzjB,EAAA,iBAAAyjB,EAAArkB,EAAA,EAIjC4M,EAASc,OAAM,OAA5BzB,EAAIoY,EAAA1jB,EACVuD,QAAQiC,IAAI,4BAA6B,CAAEyH,OAAQhB,EAASgB,OAAQ3B,KAAAA,KAG/DA,EAAKF,SAAWE,EAAKhI,OAASgI,EAAKsY,OAGtCD,EADqBrY,EAAKhI,QAAUgI,EAAKsY,MAAQ,kBAAoB,kBACxC,SAC7B7f,aAAasf,WAAW,wBACxBtf,aAAasf,WAAW,4BAGxBM,EAAe,eAAgB,WAG/B/f,IAGoB5F,SAAS2E,eAAe,eAChCpC,MAAQ,qBACpBsE,KAEA0G,WAAW,WACTlH,GACF,EAAG,MACJqf,EAAArkB,EAAA,gBAAAqkB,EAAA9kB,EAAA,EAAA6kB,EAAAC,EAAA1jB,EAEDuD,QAAQD,MAAM,yBAAwBmgB,GACtCE,EAAe,sBAAuB,SACtC5f,aAAasf,WAAW,wBACxBtf,aAAasf,WAAW,0BAA0B,eAAAK,EAAAzjB,EAAA,KAAAsjB,EAAA,kBAErD3hB,MAAA,KAAAD,UAAA,CAED,SAASgiB,EAAengB,EAASsf,GAC/B,IAAMe,EAAY7lB,SAAS2E,eAAe,cAC1CkhB,EAAU1gB,YAAcK,EACxBqgB,EAAUd,UAAY,eAAH/V,OAAkB8V,GACrCe,EAAUje,MAAMod,QAAU,OAC5B,CAEA,SAASrf,KACPT,EAAW,yBAA0B,QAErC,IAAM4gB,EAAgB9lB,SAAS2E,eAAe,UAC1CmhB,GACFA,EAAcC,eAAe,CAAEC,SAAU,SAAUC,MAAO,UAE9D,CAEA,SAASpf,KACP,IAkBIqf,EAlBErgB,EAAc7F,SAAS2E,eAAe,eACtCmJ,EAAgBjI,EAAYtD,MAGlC,GAAsB,uBAAlBuL,IACc/H,aAAaC,QAAQ,wBAKnC,OAHAd,EAAW,+BAAgC,WAC3CW,EAAYtD,MAAQ,+BACpB6iB,IAMJrf,aAAaG,QAAQ,6BAA8B4H,GAKjDoY,EADEpY,EAAc7I,SAAS,QACb,eACH6I,EAAc7I,SAAS,QACpB,eAEA,UAEdC,EAAW,OAAD8J,OAAQkX,EAAS,cAAc,UAC3C,CA6BA,SAAAzhB,KAFC,OAEDA,GAAAf,EAAAX,IAAAhE,EA1BA,SAAAonB,IAAA,IAAAlY,EAAAX,EAAA8Y,EAAA,OAAArjB,IAAAC,EAAA,SAAAqjB,GAAA,cAAAA,EAAAzlB,EAAAylB,EAAAhlB,GAAA,OAGqE,OAHrEglB,EAAAzlB,EAAA,EAEI2E,QAAQiC,IAAI,iCACqD6e,EAAAhlB,EAAA,EAE1CoN,MAFP,kDAEsB,CACpCC,OAAQ,OACR/B,QAAS,CACP,eAAgB,oBAElBgC,KAAMC,KAAKC,UAAU,CAAEpO,MAAM,MAC7B,OAGsD,OATlDwN,EAAQoY,EAAArkB,EAQduD,QAAQiC,IAAI,wBAAyByG,EAASgB,QAC9C1J,QAAQiC,IAAI,yBAA0ByG,EAAStB,SAAS0Z,EAAAhlB,EAAA,EAErC4M,EAASc,OAAM,OAA5BzB,EAAI+Y,EAAArkB,EACVuD,QAAQiC,IAAI,sBAAuB8F,GAEnCpI,EAAW,gBAAiB,WAAWmhB,EAAAhlB,EAAA,eAAAglB,EAAAzlB,EAAA,EAAAwlB,EAAAC,EAAArkB,EAEvCuD,QAAQD,MAAM,sBAAqB8gB,GACnClhB,EAAW,kBAAoBkhB,EAAM5gB,QAAS,SAAS,cAAA6gB,EAAApkB,EAAA,KAAAkkB,EAAA,kBAE1DviB,MAAA,KAAAD,UAAA,UAGcqO,GAAmBsU,EAAAC,GAAA,OAAAC,GAAA5iB,MAAC,KAADD,UAAA,CAqJlC,SAAA6iB,KAHC,OAGDA,GAAA9iB,EAAAX,IAAAhE,EArJA,SAAA0nB,EAAmCzc,EAAS0G,GAAM,IAAAzG,EAAAyc,EAAAvc,EAAA3J,EAAAgK,EAAAmc,EAAAC,EAAAC,EAAAC,EAAA/e,EAAAH,EAAAmf,EAAAC,EAAAC,EAAArG,EAAAsG,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAA5kB,IAAAC,EAAA,SAAA4kB,GAAA,cAAAA,EAAAhnB,EAAAgnB,EAAAvmB,GAAA,OAO9C,GANFkE,QAAQiC,IAAI,0CAA2CkJ,GACjDzG,EAAYD,EAAQgB,SAASC,WAAWC,qBAAoB0c,EAAAhnB,EAAA,EAG5D8lB,EAAe,GAGdhW,EAAOnG,MAAO,CAAFqd,EAAAvmB,EAAA,QAI+B,OAJ/BumB,EAAAhnB,EAAA,GAGPuJ,EAAiBH,EAAQgB,SAASG,qBACzBC,KAAK,CAAC,QAAS,cAAcwc,EAAAvmB,EAAA,EACtC2I,EAAQqB,OAAM,OAEpB,GAAIlB,EAAemB,UAAY,EAE7B,IAAS9K,EAAI,EAAGA,EAAI2J,EAAeoB,MAAMC,MAAMjL,OAAQC,IACrDkmB,EAAajb,KAAKtB,EAAeoB,MAAMC,MAAMhL,SAI/CkmB,EAAajb,KAAKzB,EAAQgB,SAASwH,oBACpCoV,EAAAvmB,EAAA,eAE8E,OAF9EumB,EAAAhnB,EAAA,EAAA8mB,EAAAE,EAAA5lB,EAEDuD,QAAQiC,IAAI,2DAA0DkgB,GAASE,EAAA3lB,EAAA,EACxE,CAAEmL,SAAS,EAAO9H,MAAO,wCAAuC,OAAAsiB,EAAAvmB,EAAA,mBAE/C,QAAjBqP,EAAOnG,OAAoC,OAAjBmG,EAAOnG,MAAc,CAAAqd,EAAAvmB,EAAA,SAGzB,OADzBmJ,EAAYP,EAAUwS,4BAClBrR,KAAK,gBAAgBwc,EAAAvmB,EAAA,EACzB2I,EAAQqB,OAAM,WAEhBb,EAAUkS,aAAc,CAAFkL,EAAAvmB,EAAA,eAAAumB,EAAA3lB,EAAA,EACjB,CAAEmL,SAAS,EAAO9H,MAAO,mBAAkB,OAElDohB,EAAajb,KAAKjB,GAAW,OAAAod,EAAAvmB,EAAA,iBAI/BqlB,EAAajb,KAAKxB,EAAUsI,SAAS7B,EAAOnG,QAAQ,QAItD,IAAAoc,EAAA,EAAAC,EAAoBF,EAAYC,EAAAC,EAAArmB,OAAAomB,IAAhBC,EAAAD,GACRvb,KAAK,CAAC,UAAW,WAAY,gBACpC,OAAAwc,EAAAvmB,EAAA,GACK2I,EAAQqB,OAAM,QAGpB,IADA9F,QAAQiC,IAAI,mCAAoCkf,EAAanmB,QACpDC,EAAI,EAAGA,EAAIkmB,EAAanmB,OAAQC,IACvC+E,QAAQiC,IAAI,SAADwH,OAAUxO,EAAI,EAAC,KAAK,CAC7BkL,QAASgb,EAAalmB,GAAGkL,QACzBO,SAAUya,EAAalmB,GAAGyL,SAC1BE,YAAaua,EAAalmB,GAAG2L,cAuBjC,IAlBM2a,EAAapW,EAAOoW,YAAc,MAClC/e,EAAQ2I,EAAO3I,OAAS,UACxBH,EAAQ8I,EAAO9I,OAAS,aAaxBmf,EAVW,CACf,WAAc,aACd,KAAQ,OACR,QAAW,UACX,OAAU,SACV,IAAO,MACP,WAAc,aACd,aAAgB,gBAGUnf,EAAMwO,gBAAkB,aAGpD4Q,EAAA,EAAAC,EAA0BP,EAAYM,EAAAC,EAAA1mB,OAAAymB,IACpC,GADSpG,EAAWqG,EAAAD,GACD,QAAfF,EAIF,IAAAI,EAAA,EAAAC,EAFoB,CAAC,UAAW,aAAc,WAAY,YAAa,iBAAkB,oBAErDD,EAAAC,EAAA5mB,OAAA2mB,IAAE,CAA3BE,EAAUD,EAAAD,GACnB,KACQG,EAASzG,EAAYlH,OAAOmO,QAAQ7hB,QAAQohB,IAC3Cxf,MAAQmf,EACfM,EAAOtf,MAAQA,EACfsf,EAAOS,OAAS,MAClB,CAAE,MAAO1oB,GAEPmG,QAAQiC,IAAI,YAADwH,OAAaoY,EAAU,KAAKhoB,EAAEoG,QAC3C,CACF,MACK,GAAmB,WAAfshB,EAAyB,CAElC,KACQQ,EAAU1G,EAAYlH,OAAOmO,QAAQ7hB,QAAQ,mBAC3C4B,MAAQmf,EAChBO,EAAQvf,MAAQA,EAChBuf,EAAQQ,OAAS,MACnB,CAAE,MAAO1oB,GACPmG,QAAQiC,IAAI,6BACd,CAEA,KACQ+f,EAAU3G,EAAYlH,OAAOmO,QAAQ7hB,QAAQ,qBAC3C4B,MAAQmf,EAChBQ,EAAQxf,MAAQA,EAChBwf,EAAQO,OAAS,MACnB,CAAE,MAAO1oB,GACPmG,QAAQiC,IAAI,+BACd,CACF,MASQggB,EAPY,CAChB,IAAO,UACP,OAAU,aACV,KAAQ,WACR,MAAS,aAGkBV,EAAW1Q,mBAEhCiR,EAASzG,EAAYlH,OAAOmO,QAAQ7hB,QAAQwhB,IAC3C5f,MAAQmf,EACfM,EAAOtf,MAAQA,EACfsf,EAAOS,OAAS,QAGrB,OAAAF,EAAAvmB,EAAA,GAEK2I,EAAQqB,OAAM,eAAAuc,EAAA3lB,EAAA,EAEb,CACLmL,SAAS,EACT5H,QAAS,qBACV,QAGqD,OAHrDoiB,EAAAhnB,EAAA,GAAA+mB,EAAAC,EAAA5lB,EAGDuD,QAAQD,MAAM,gCAA+BqiB,GAASC,EAAA3lB,EAAA,EAC/C,CACLmL,SAAS,EACT9H,MAAO,sBAAF0J,OAAwB2Y,EAAMniB,WACpC,EAAAihB,EAAA,yBAEJ7iB,MAAA,KAAAD,UAAA,UAKckO,GAAekW,EAAAC,GAAA,OAAAC,GAAArkB,MAAC,KAADD,UAAA,UAAAskB,KAyH7B,OAzH6BA,GAAAvkB,EAAAX,IAAAhE,EAA9B,SAAAmpB,EAA+Ble,EAAS0G,GAAM,IAAAzG,EAAAoI,EAAA8V,EAAApb,EAAAqb,EAAAC,EAAAxb,EAAAyb,EAAA9nB,EAAAqT,EAAA0U,EAAAC,EAAAhe,EAAA2B,EAAAsc,EAAAC,EAAA7c,EAAA8c,EAAA,OAAA5lB,IAAAC,EAAA,SAAA4lB,GAAA,cAAAA,EAAAhoB,EAAAgoB,EAAAvnB,GAAA,OAEsB,GADlEkE,QAAQiC,IAAI,sCAAuCkJ,GAC7CzG,EAAYD,EAAQgB,SAASC,WAAWC,qBAAoB0d,EAAAhoB,EAAA,EAG3D8P,EAAOnG,MAAO,CAAFqe,EAAAvnB,EAAA,eAAAunB,EAAA3mB,EAAA,EACR,CAAEmL,SAAS,EAAO9H,MAAO,gBAAe,OAMjD,GAFI+M,EAAe3B,EAAOnG,OAGtB,WAAW9J,KAAK4R,KAAiB,kBAAkB5R,KAAK4R,GAAa,CAAAuW,EAAAvnB,EAAA,QAE7B,GAApCmJ,EAAYP,EAAUoC,eACZ,CAAFuc,EAAAvnB,EAAA,eAAAunB,EAAA3mB,EAAA,EACL,CAAEmL,SAAS,EAAO9H,MAAO,qBAAoB,OAGzB,OAA7BkF,EAAUY,KAAK,CAAC,aAAawd,EAAAvnB,EAAA,EACvB2I,EAAQqB,OAAM,OAGd0B,EAAesF,EAAawP,MAAM,KAAK,GAC7CxP,EAAe,GAAHrD,OAAMjC,EAAY,MAAAiC,OAAKjC,GAAYiC,OAAGxE,EAAUyB,UAC5D1G,QAAQiC,IAAI,uCAAwC6K,GAAc,OAKU,OADxE+V,EAAane,EAAUsI,SAASF,IAC3BjH,KAAK,CAAC,WAAY,WAAY,cAAe,SAAU,YAAYwd,EAAAvnB,EAAA,EACxE2I,EAAQqB,OAAM,OASpB,GAPA9F,QAAQiC,IAAI,kBAAmB,CAC7BkE,QAAS0c,EAAW1c,QACpBG,SAAUuc,EAAWvc,SACrBI,SAAUmc,EAAWnc,SACrBF,YAAaqc,EAAWrc,cAIrBqc,EAAWvb,OAAQ,CAAF+b,EAAAvnB,EAAA,eAAAunB,EAAA3mB,EAAA,EACb,CACLmL,SAAS,EACT9H,MAAO,uBACR,OAIG+iB,EAAY,GACZxb,EAASub,EAAWvb,OAGtByb,GAAmB,EACd9nB,EAAIqM,EAAOtM,OAAS,EAAC,YAAEC,GAAK,GAAC,CAAAooB,EAAAvnB,EAAA,SACN,GAC1BwS,OADEA,EAAYhH,EAAOrM,GAAG,KACuC,KAAdqT,GAC1B,iBAAdA,GAA+C,KAArBA,EAAU1K,OAAc,CAAAyf,EAAAvnB,EAAA,QACzC,OAApBinB,EAAkB9nB,EAAEooB,EAAA3mB,EAAA,aAJgBzB,IAAGooB,EAAAvnB,EAAA,oBASlB,IAArBinB,EAAsB,CAAAM,EAAAvnB,EAAA,gBAAAunB,EAAA3mB,EAAA,EACjB,CACLmL,SAAS,EACT5H,QAAS,kBACV,QAIH,IAAShF,EAAI,EAAGA,GAAK8nB,EAAiB9nB,KAEhCqT,OADEA,EAAYhH,EAAOrM,GAAG,KACuC,KAAdqT,GAC3B,iBAAdA,GAA+C,KAArBA,EAAU1K,SAG9Ckf,EAAU5c,KAAK2c,EAAWvc,SAAWrL,GAIyC,GAAlF+E,QAAQiC,IAAI,oBAAqB6gB,EAAU9nB,OAAQ,mBAAoB8nB,GAE9C,IAArBA,EAAU9nB,OAAY,CAAAqoB,EAAAvnB,EAAA,gBAAAunB,EAAA3mB,EAAA,EACjB,CACLmL,SAAS,EACT5H,QAAS,mBACV,QAQ6B,OAJhC6iB,EAAUzN,KAAK,SAAC3Y,EAAGpB,GAAC,OAAKA,EAAIoB,CAAC,IAGxBuI,EAAYP,EAAUoC,gBAClBjB,KAAK,CAAC,gBAAgBwd,EAAAvnB,EAAA,GAC1B2I,EAAQqB,OAAM,QAEdc,EAAc3B,EAAU2B,aAAe,IAAGsc,EAAA,EAAAC,EAEzBL,EAAS,aAAAI,EAAAC,EAAAnoB,QAAA,CAAAqoB,EAAAvnB,EAAA,SAIoB,OAJzCwK,EAAQ6c,EAAAD,GACjBljB,QAAQiC,IAAI,gBAAiBqE,EAAW,GAEpB5B,EAAU4L,kBAAkBhK,EAAU,EAAG,EAAGM,GACpD0c,OAAOrkB,MAAMskB,qBAAqBC,IAAIH,EAAAvnB,EAAA,GAC5C2I,EAAQqB,OAAM,QAAAod,IAAAG,EAAAvnB,EAAA,wBAAAunB,EAAA3mB,EAAA,EAGf,CACLmL,SAAS,EACT5H,QAAS,GAAFwJ,OAAKqZ,EAAU9nB,OAAM,sBAC7B,QAGiD,OAHjDqoB,EAAAhoB,EAAA,GAAA+nB,EAAAC,EAAA5mB,EAGDuD,QAAQD,MAAM,4BAA2BqjB,GAASC,EAAA3mB,EAAA,EAC3C,CACLmL,SAAS,EACT9H,MAAO,mBAAF0J,OAAqB2Z,EAAMnjB,WACjC,EAAA0iB,EAAA,mBAEJtkB,MAAA,KAAAD,UAAA,UAEc2N,GAAa0X,EAAAC,GAAA,OAAAC,GAAAtlB,MAAC,KAADD,UAAA,UAAAulB,KAa3B,OAb2BA,GAAAxlB,EAAAX,IAAAhE,EAA5B,SAAAoqB,EAA6Bnf,EAAS0G,GAAM,IAAAzG,EAAAM,EAAA,OAAAxH,IAAAC,EAAA,SAAAomB,GAAA,cAAAA,EAAA/nB,GAAA,OAKF,OAJlC4I,EAAYD,EAAQgB,SAASC,WAAWC,sBACxCX,EAAQmG,EAAOnG,MAAQN,EAAUsI,SAAS7B,EAAOnG,OAASN,EAAUoC,gBAGpEpC,UAAUof,WAAWzlB,MAAM2G,GAAO6e,EAAA/nB,EAAA,EAElC2I,EAAQqB,OAAM,cAAA+d,EAAAnnB,EAAA,EAEb,CACLmL,SAAS,EACT5H,QAAS,iBACV,EAAA2jB,EAAA,KACFvlB,MAAA,KAAAD,UAAA,UAEc4N,GAAa+X,EAAAC,GAAA,OAAAC,GAAA5lB,MAAC,KAADD,UAAA,UAAA6lB,KAoB3B,OApB2BA,GAAA9lB,EAAAX,IAAAhE,EAA5B,SAAA0qB,EAA6Bzf,EAAS0G,GAAM,IAAAzG,EAAA6a,EAAA9G,EAAA0L,EAAA,OAAA3mB,IAAAC,EAAA,SAAA2mB,GAAA,cAAAA,EAAAtoB,GAAA,OAYzC,OAXK4I,EAAYD,EAAQgB,SAASC,WAAWC,qBACxC4Z,EAAOpU,EAAOoU,MAAQ,MACtB9G,EAAWtN,EAAOsN,UAAY,EAC9B0L,EAAQhZ,EAAOgZ,OAAS,EAEjB,QAAT5E,EACY7a,EAAU4L,kBAAkBmI,EAAW,EAAG,EAAG0L,EAAO,GAC5DE,OAAOplB,MAAMqlB,qBAAqBC,MAE1B7f,EAAU4L,kBAAkB,EAAGmI,EAAW,EAAG,EAAG0L,GACxDE,OAAOplB,MAAMqlB,qBAAqBE,OACzCJ,EAAAtoB,EAAA,EAEK2I,EAAQqB,OAAM,cAAAse,EAAA1nB,EAAA,EAEb,CACLmL,SAAS,EACT5H,QAAS,GAAFwJ,OAAK0a,EAAK,OAAA1a,OAAe,QAAT8V,EAAiB,IAAM,IAAG,gBAClD,EAAA2E,EAAA,KACF7lB,MAAA,KAAAD,UAAA,UAEc6N,GAAawY,EAAAC,GAAA,OAAAC,GAAAtmB,MAAC,KAADD,UAAA,UAAAumB,KA8G3B,OA9G2BA,GAAAxmB,EAAAX,IAAAhE,EAA5B,SAAAorB,EAA6BngB,EAAS0G,GAAM,IAAAzG,EAAA8B,EAAAvL,EAAA4pB,EAAAC,EAAAC,EAAAC,EAAApe,EAAAF,EAAA6Y,EAAA9G,EAAA0L,EAAAc,EAAA,OAAAznB,IAAAC,EAAA,SAAAynB,GAAA,cAAAA,EAAAppB,GAAA,OAG1C,GAFM4I,EAAYD,EAAQgB,SAASC,WAAWC,sBAG1CwF,EAAOga,WAAY,CAAFD,EAAAppB,EAAA,SAAAmpB,EACX9Z,EAAOga,WAAUD,EAAAppB,EAClB,WADkBmpB,EACV,EAsBR,QAtBQA,EAsBH,EAeL,YAfKA,EAeI,EA2BT,SA3BSA,EA2BH,sBA9DJ9Z,EAAO5E,OAAQ,CAAF2e,EAAAppB,EAAA,eAAAopB,EAAAxoB,EAAA,EACT,CAAEmL,SAAS,EAAO9H,MAAO,mBAAkB,OAKpD,IADIyG,EAAc,EACTvL,EAAI,EAAGA,EAAIkQ,EAAO5E,OAAOvL,OAAQC,IACxCuL,EAA4B,GAAdA,GAAoB2E,EAAO5E,OAAOqK,WAAW3V,GAAK,IAKd,OAHpDuL,IAEoB9B,EAAU4L,kBAAkB,EAAG9J,EAAa,QAAS,GAC7D8c,OAAOrkB,MAAMskB,qBAAqBnL,MAAM8M,EAAAppB,EAAA,EAC9C2I,EAAQqB,OAAM,cAAAof,EAAAxoB,EAAA,EAEb,CACLmL,SAAS,EACT5H,QAAS,GAAFwJ,OAAK0B,EAAO5E,OAAM,iBAC1B,UAII4E,EAAO9E,IAAK,CAAF6e,EAAAppB,EAAA,eAAAopB,EAAAxoB,EAAA,EACN,CAAEmL,SAAS,EAAO9H,MAAO,mBAAkB,OAIL,OAD9B2E,EAAU4L,kBAAkBnF,EAAO9E,IAAM,EAAG,EAAG,EAAG,OAC1Did,OAAOrkB,MAAMskB,qBAAqBC,IAAI0B,EAAAppB,EAAA,EACzC2I,EAAQqB,OAAM,cAAAof,EAAAxoB,EAAA,EAEb,CACLmL,SAAS,EACT5H,QAAS,GAAFwJ,OAAK0B,EAAO9E,IAAG,iBACvB,UAII8E,EAAOia,aAAgBja,EAAOka,UAAS,CAAAH,EAAAppB,EAAA,eAAAopB,EAAAxoB,EAAA,EACnC,CAAEmL,SAAS,EAAO9H,MAAO,sBAAqB,OAKvD,IADI8kB,EAAa,EAAGC,EAAW,EACtB7pB,EAAI,EAAGA,EAAIkQ,EAAOia,YAAYpqB,OAAQC,IAC7C4pB,EAA0B,GAAbA,GAAmB1Z,EAAOia,YAAYxU,WAAW3V,GAAK,IAErE,IAASA,EAAI,EAAGA,EAAIkQ,EAAOka,UAAUrqB,OAAQC,IAC3C6pB,EAAsB,GAAXA,GAAiB3Z,EAAOka,UAAUzU,WAAW3V,GAAK,IAOV,OALrD4pB,IACAC,IAEMle,EAAcke,EAAWD,EAAa,EACvBngB,EAAU4L,kBAAkB,EAAGuU,EAAY,QAASje,GAC5D0c,OAAOrkB,MAAMskB,qBAAqBnL,MAAM8M,EAAAppB,EAAA,EAC/C2I,EAAQqB,OAAM,cAAAof,EAAAxoB,EAAA,EAEb,CACLmL,SAAS,EACT5H,QAAS,GAAFwJ,OAAK0B,EAAOia,YAAW,KAAA3b,OAAI0B,EAAOka,UAAS,iBACnD,WAIIla,EAAOyE,UAAazE,EAAOma,OAAM,CAAAJ,EAAAppB,EAAA,gBAAAopB,EAAAxoB,EAAA,EAC7B,CAAEmL,SAAS,EAAO9H,MAAO,sBAAqB,QAKP,OAF1C2G,EAAWyE,EAAOma,OAASna,EAAOyE,SAAW,EACjClL,EAAU4L,kBAAkBnF,EAAOyE,SAAW,EAAG,EAAGlJ,EAAU,OACtE4c,OAAOrkB,MAAMskB,qBAAqBC,IAAI0B,EAAAppB,EAAA,GAC1C2I,EAAQqB,OAAM,eAAAof,EAAAxoB,EAAA,EAEb,CACLmL,SAAS,EACT5H,QAAS,GAAFwJ,OAAK0B,EAAOyE,SAAQ,KAAAnG,OAAI0B,EAAOma,OAAM,iBAC7C,eAAAJ,EAAAxoB,EAAA,EAGM,CAAEmL,SAAS,EAAO9H,MAAO,qBAAoB,QAezD,OAVKwf,EAAOpU,EAAOoU,MAAQ,MACtB9G,EAAWtN,EAAOsN,UAAY,EAC9B0L,EAAQhZ,EAAOgZ,OAAS,EAEjB,QAAT5E,EACY7a,EAAU4L,kBAAkBmI,EAAW,EAAG,EAAG0L,EAAO,GAC5Db,OAAOrkB,MAAMskB,qBAAqBC,IAE1B9e,EAAU4L,kBAAkB,EAAGmI,EAAW,EAAG,EAAG0L,GACxDb,OAAOrkB,MAAMskB,qBAAqBnL,MACzC8M,EAAAppB,EAAA,GAEK2I,EAAQqB,OAAM,eAAAof,EAAAxoB,EAAA,EAEb,CACLmL,SAAS,EACT5H,QAAS,GAAFwJ,OAAK0a,EAAK,OAAA1a,OAAe,QAAT8V,EAAiB,IAAM,IAAG,gBAClD,EAAAqF,EAAA,KACFvmB,MAAA,KAAAD,UAAA,UAEc8N,GAAcqZ,EAAAC,GAAA,OAAAC,GAAApnB,MAAC,KAADD,UAAA,UAAAqnB,KAe5B,OAf4BA,GAAAtnB,EAAAX,IAAAhE,EAA7B,SAAAksB,EAA8BjhB,EAAS0G,GAAM,IAAAzG,EAAAM,EAAA,OAAAxH,IAAAC,EAAA,SAAAkoB,GAAA,cAAAA,EAAA7pB,GAAA,OAEwD,GAD7F4I,EAAYD,EAAQgB,SAASC,WAAWC,qBACxCX,EAAQmG,EAAOnG,MAAQN,EAAUsI,SAAS7B,EAAOnG,OAASP,EAAQgB,SAASwH,mBAE5E9B,EAAO+H,QAAS,CAAFyS,EAAA7pB,EAAA,eAAA6pB,EAAAjpB,EAAA,EACV,CAAEmL,SAAS,EAAO9H,MAAO,gBAAe,OAGb,OAApCiF,EAAMwL,SAAW,CAAC,CAACrF,EAAO+H,UAAUyS,EAAA7pB,EAAA,EAC9B2I,EAAQqB,OAAM,cAAA6f,EAAAjpB,EAAA,EAEb,CACLmL,SAAS,EACT5H,QAAS,iBACV,EAAAylB,EAAA,KACFrnB,MAAA,KAAAD,UAAA,UAEcmO,GAAuBqZ,EAAAC,GAAA,OAAAC,GAAAznB,MAAC,KAADD,UAAA,UAAA0nB,KAOrC,OAPqCA,GAAA3nB,EAAAX,IAAAhE,EAAtC,SAAAusB,EAAuCthB,EAAS0G,GAAM,OAAA3N,IAAAC,EAAA,SAAAuoB,GAAA,cAAAA,EAAAlqB,EAAA,OAAAkqB,EAAAtpB,EAAA,EAG7C,CACLmL,SAAS,EACT9H,MAAO,qBACR,EAAAgmB,EAAA,KACF1nB,MAAA,KAAAD,UAAA,UAEcoO,GAAmByZ,EAAAC,GAAA,OAAAC,GAAA9nB,MAAC,KAADD,UAAA,UAAA+nB,KAwIjC,OAxIiCA,GAAAhoB,EAAAX,IAAAhE,EAAlC,SAAA4sB,EAAmC3hB,EAAS0G,GAAM,IAAAzG,EAAAyc,EAAAlc,EAAAohB,EAAAC,EAAAC,EAAA/e,EAAAhB,EAAA5B,EAAA3J,EAAAurB,EAAAC,EAAAC,EAAAnF,EAAAoF,EAAAC,EAAAvL,EAAAwL,EAAAC,EAAAC,EAAA,OAAAvpB,IAAAC,EAAA,SAAAupB,GAAA,cAAAA,EAAA3rB,EAAA2rB,EAAAlrB,GAAA,OAO9C,GANFkE,QAAQiC,IAAI,0CAA2CkJ,GACjDzG,EAAYD,EAAQgB,SAASC,WAAWC,qBAAoBqhB,EAAA3rB,EAAA,EAG5D8lB,EAAe,IAGfhW,EAAOnG,MAAO,CAAFgiB,EAAAlrB,EAAA,YAEO,QAAjBqP,EAAOnG,OAAoC,OAAjBmG,EAAOnG,MAAc,CAAAgiB,EAAAlrB,EAAA,QAIlB,OAH/BkE,QAAQiC,IAAI,uCAENgD,EAAYP,EAAUwS,4BAClBrR,KAAK,gBAAgBmhB,EAAAlrB,EAAA,EACzB2I,EAAQqB,OAAM,WAEhBb,EAAUkS,aAAc,CAAF6P,EAAAlrB,EAAA,QACkD,OAA1EkE,QAAQiC,IAAI,8DAA8D+kB,EAAAtqB,EAAA,EACnE,CAAEmL,SAAS,EAAM5H,QAAS,mCAAkC,OAGI,OAAvEgF,EAAUY,KAAK,CAAC,WAAY,cAAe,WAAY,gBAAgBmhB,EAAAlrB,EAAA,EACjE2I,EAAQqB,OAAM,OAGdugB,EAAejP,KAAKuF,IAAI1X,EAAUyB,SAAW,IAAK,SAClD4f,EAAelP,KAAKuF,IAAI1X,EAAU2B,YAAc,GAAI,OAC1Dua,EAAajb,KAAKxB,EAAU4L,kBAAkB,EAAG,EAAG+V,EAAcC,IAAe,OAAAU,EAAAlrB,EAAA,oBAE1EqP,EAAOnG,MAAM2L,MAAM,mBAAoB,CAAFqW,EAAAlrB,EAAA,QAGJ,GAD1CkE,QAAQiC,IAAI,yBAA0BkJ,EAAOnG,OACvCC,EAAYP,EAAUoC,eACZ,CAAFkgB,EAAAlrB,EAAA,eAAAkrB,EAAAtqB,EAAA,EACL,CAAEmL,SAAS,EAAO9H,MAAO,eAAc,OAGJ,OAA5CkF,EAAUY,KAAK,CAAC,WAAY,gBAAgBmhB,EAAAlrB,EAAA,EACtC2I,EAAQqB,OAAM,OAGd0B,EAAe2D,EAAOnG,MAAMsX,MAAM,KAAK,GACvC9V,EAAcgB,EAAaoJ,WAAW,GAAK,GAGjDuQ,EAAajb,KAAKxB,EAAU4L,kBAAkB,EAAG9J,EAAavB,EAAUyB,SAAU,IAAIsgB,EAAAlrB,EAAA,gBAGtFqlB,EAAajb,KAAKxB,EAAUsI,SAAS7B,EAAOnG,QAAQ,QAAAgiB,EAAAlrB,EAAA,iBAMR,OANQkrB,EAAA3rB,EAAA,IAK9CuJ,EAAiBH,EAAQgB,SAASG,qBACzBC,KAAK,CAAC,QAAS,cAAcmhB,EAAAlrB,EAAA,GACtC2I,EAAQqB,OAAM,QAEpB,GAAIlB,EAAemB,UAAY,EAE7B,IAAS9K,EAAI,EAAGA,EAAI2J,EAAeoB,MAAMC,MAAMjL,OAAQC,IACrDkmB,EAAajb,KAAKtB,EAAeoB,MAAMC,MAAMhL,SAI/CkmB,EAAajb,KAAKzB,EAAQgB,SAASwH,oBACpC+Z,EAAAlrB,EAAA,iBAE8E,OAF9EkrB,EAAA3rB,EAAA,GAAAwrB,EAAAG,EAAAvqB,EAEDuD,QAAQiC,IAAI,2DAA0D4kB,GAASG,EAAAtqB,EAAA,EACxE,CAAEmL,SAAS,EAAO9H,MAAO,wCAAuC,QAK3E,IAAAymB,EAAA,EAAAC,EAAoBtF,EAAYqF,EAAAC,EAAAzrB,OAAAwrB,IAAhBC,EAAAD,GACR3gB,KAAK,CAAC,UAAW,WAAY,gBACpC,OAAAmhB,EAAAlrB,EAAA,GACK2I,EAAQqB,OAAM,QAGpB,IADA9F,QAAQiC,IAAI,oCAAqCkf,EAAanmB,QACrDC,EAAI,EAAGA,EAAIkmB,EAAanmB,OAAQC,IACvC+E,QAAQiC,IAAI,SAADwH,OAAUxO,EAAI,EAAC,KAAK,CAC7BkL,QAASgb,EAAalmB,GAAGkL,QACzBO,SAAUya,EAAalmB,GAAGyL,SAC1BE,YAAaua,EAAalmB,GAAG2L,cAK3B2a,EAAapW,EAAOoW,YAAc,MAExCoF,EAAA,EAAAC,EAC0BzF,EAAY,aAAAwF,EAAAC,EAAA5rB,QAAA,CAAAgsB,EAAAlrB,EAAA,SAAhB,GAAXuf,EAAWuL,EAAAD,GACD,QAAfpF,EAAoB,CAAAyF,EAAAlrB,EAAA,SAEtBuf,EAAYlH,OAAOmO,QAAQ7hB,QAAQxB,MAAMgoB,YAAYC,UAAU7kB,MAAQpD,MAAMkoB,gBAAgBC,KAC7F/L,EAAYlH,OAAOmO,QAAQ7hB,QAAQxB,MAAMgoB,YAAYI,WAAWhlB,MAAQpD,MAAMkoB,gBAAgBC,KAC9F/L,EAAYlH,OAAOmO,QAAQ7hB,QAAQxB,MAAMgoB,YAAYK,SAASjlB,MAAQpD,MAAMkoB,gBAAgBC,KAC5F/L,EAAYlH,OAAOmO,QAAQ7hB,QAAQxB,MAAMgoB,YAAYM,YAAYllB,MAAQpD,MAAMkoB,gBAAgBC,KAC/F/L,EAAYlH,OAAOmO,QAAQ7hB,QAAQxB,MAAMgoB,YAAYO,kBAAkBnlB,MAAQpD,MAAMkoB,gBAAgBC,KACrG/L,EAAYlH,OAAOmO,QAAQ7hB,QAAQxB,MAAMgoB,YAAYQ,gBAAgBplB,MAAQpD,MAAMkoB,gBAAgBC,KAAKJ,EAAAlrB,EAAA,iBAAAgrB,EAGhGvF,EAAUyF,EAAAlrB,EACX,UADWgrB,EACJ,GAGP,SAHOA,EAGD,GAGN,QAHMA,EAGD,GAGL,WAHKA,EAGG,oBARwF,OAAnGzL,EAAYlH,OAAOmO,QAAQ7hB,QAAQxB,MAAMgoB,YAAYI,WAAWhlB,MAAQpD,MAAMkoB,gBAAgBC,KAAKJ,EAAAtqB,EAAA,cAGD,OAAlG2e,EAAYlH,OAAOmO,QAAQ7hB,QAAQxB,MAAMgoB,YAAYC,UAAU7kB,MAAQpD,MAAMkoB,gBAAgBC,KAAKJ,EAAAtqB,EAAA,cAGD,OAAjG2e,EAAYlH,OAAOmO,QAAQ7hB,QAAQxB,MAAMgoB,YAAYK,SAASjlB,MAAQpD,MAAMkoB,gBAAgBC,KAAKJ,EAAAtqB,EAAA,cAGG,OAApG2e,EAAYlH,OAAOmO,QAAQ7hB,QAAQxB,MAAMgoB,YAAYM,YAAYllB,MAAQpD,MAAMkoB,gBAAgBC,KAAKJ,EAAAtqB,EAAA,qBAAAsqB,EAAAtqB,EAAA,EAG7F,CAAEmL,SAAS,EAAO9H,MAAO,kBAAF0J,OAAoB8X,KAAc,QAAAoF,IAAAK,EAAAlrB,EAAA,wBAAAkrB,EAAAlrB,EAAA,GAKlE2I,EAAQqB,OAAM,eAAAkhB,EAAAtqB,EAAA,EAEb,CACLmL,SAAS,EACT5H,QAAS,GAAFwJ,OAAoB,QAAf8X,EAAuB,KAAOA,EAAU,oBACrD,QAGqD,OAHrDyF,EAAA3rB,EAAA,GAAA0rB,EAAAC,EAAAvqB,EAGDuD,QAAQD,MAAM,gCAA+BgnB,GAASC,EAAAtqB,EAAA,EAC/C,CACLmL,SAAS,EACT9H,MAAO,mBAAF0J,OAAqBsd,EAAM9mB,WACjC,EAAAmmB,EAAA,2BAEJ/nB,MAAA,KAAAD,UAAA,C","sources":["webpack://worksai-excel-addon/webpack/bootstrap","webpack://worksai-excel-addon/webpack/runtime/global","webpack://worksai-excel-addon/webpack/runtime/hasOwnProperty shorthand","webpack://worksai-excel-addon/webpack/runtime/publicPath","webpack://worksai-excel-addon/webpack/runtime/jsonp chunk loading","webpack://worksai-excel-addon/./src/taskpane/taskpane.html","webpack://worksai-excel-addon/./src/taskpane/taskpane.js"],"sourcesContent":["// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript && document.currentScript.tagName.toUpperCase() === 'SCRIPT')\n\t\tscriptUrl = document.currentScript.src;\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) {\n\t\t\tvar i = scripts.length - 1;\n\t\t\twhile (i > -1 && (!scriptUrl || !/^http(s?):/.test(scriptUrl))) scriptUrl = scripts[i--].src;\n\t\t}\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/^blob:/, \"\").replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","__webpack_require__.b = document.baseURI || self.location.href;\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t926: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n// no on chunks loaded\n\n// no jsonp function","// Imports\nvar ___HTML_LOADER_IMPORT_0___ = new URL(\"./taskpane.css\", import.meta.url);\n// Module\nvar code = \"<!DOCTYPE html> <html> <head> <meta charset=\\\"UTF-8\\\"/> <meta http-equiv=\\\"X-UA-Compatible\\\" content=\\\"IE=Edge\\\"/> <meta name=\\\"viewport\\\" content=\\\"width=device-width,initial-scale=1\\\"> <title>웍스AI 엑셀 에이전트</title> <\" + \"script src=\\\"https://appsforoffice.microsoft.com/lib/1.1/hosted/office.js\\\"><\" + \"/script> <link rel=\\\"stylesheet\\\" href=\\\"https://static2.sharepointonline.com/files/fabric/office-ui-fabric-js/1.4.0/css/fabric.min.css\\\"/> <link rel=\\\"stylesheet\\\" href=\\\"https://static2.sharepointonline.com/files/fabric/office-ui-fabric-js/1.4.0/css/fabric.components.min.css\\\"/> <link href=\\\"\" + ___HTML_LOADER_IMPORT_0___ + \"\\\" rel=\\\"stylesheet\\\"/> </head> <body class=\\\"ms-font-m ms-welcome ms-Fabric\\\"> <main id=\\\"app-body\\\" class=\\\"ms-welcome__main\\\"> <div class=\\\"container\\\"> <div class=\\\"header-section\\\"> <h2 class=\\\"ms-font-xl\\\" style=\\\"font-weight:700\\\">셀과 나의 연결고리 - 셀리</h2> <p class=\\\"help-text\\\">자연어로 Excel 작업을 요청하세요. (대용량 번역 지원)</p> </div> <div class=\\\"voice-section\\\"> <button id=\\\"voiceButton\\\" class=\\\"voice-button\\\"> <svg width=\\\"24\\\" height=\\\"24\\\" viewBox=\\\"0 0 24 24\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"> <path d=\\\"M12 14c1.66 0 3-1.34 3-3V5c0-1.66-1.34-3-3-3S9 3.34 9 5v6c0 1.66 1.34 3 3 3z\\\"/> <path d=\\\"M17 11c0 2.76-2.24 5-5 5s-5-2.24-5-5H5c0 3.53 2.61 6.43 6 6.92V21h2v-3.08c3.39-.49 6-3.39 6-6.92h-2z\\\"/> </svg> </button> <div class=\\\"voice-status\\\" id=\\\"voiceStatus\\\">음성 인식 준비</div> </div> <div class=\\\"model-selection\\\"> <label for=\\\"modelSelect\\\">AI 모델:</label> <select id=\\\"modelSelect\\\" class=\\\"model-dropdown\\\"> <option value=\\\"gpt-4.1-nano-2025-04-14\\\">GPT-4.1 nano (무료)</option> <option value=\\\"gpt-4.1-mini-2025-04-14\\\">GPT-4.1 mini (무료)</option> <option value=\\\"gpt-4.1-2025-04-14\\\">GPT-4.1 (인증 필요)</option> </select> </div> <div class=\\\"input-container\\\"> <textarea id=\\\"commandInput\\\" placeholder=\\\"예: A1부터 A10까지 합계를 구해줘\\\" rows=\\\"3\\\"></textarea> <div class=\\\"button-container\\\"> <button id=\\\"executeButton\\\" class=\\\"ms-Button ms-Button--primary\\\"> <span class=\\\"ms-Button-label\\\">실행</span> </button> <button id=\\\"clearButton\\\" class=\\\"ms-Button\\\"> <span class=\\\"ms-Button-label\\\">지우기</span> </button> </div> </div> <div id=\\\"status\\\" class=\\\"status-message\\\"></div> <div class=\\\"examples\\\"> <h3>예제 명령어</h3> <div class=\\\"example-list\\\"> <div class=\\\"example-item\\\" data-command=\\\"A1:B5 셀을 병합해줘\\\"> <strong>셀 병합:</strong> A1:B5 셀을 병합해줘 </div> <div class=\\\"example-item\\\" data-command=\\\"A열의 합계를 구해줘\\\"> <strong>합계 계산:</strong> A열의 합계를 구해줘 </div> <div class=\\\"example-item\\\" data-command=\\\"Name 열의 합계를 구해줘\\\"> <strong>레이블로 합계:</strong> Name 열의 합계를 구해줘 </div> <div class=\\\"example-item\\\" data-command=\\\"C열 평균을 구해줘\\\"> <strong>열 평균:</strong> C열 평균을 구해줘 </div> <div class=\\\"example-item\\\" data-command=\\\"3행 평균을 계산해줘\\\"> <strong>행 평균:</strong> 3행 평균을 계산해줘 </div> <div class=\\\"example-item\\\" data-command=\\\"선택한 셀을 굵게 만들고 파란색으로 바꿔줘\\\"> <strong>서식 지정:</strong> 선택한 셀을 굵게 만들고 파란색으로 바꿔줘 </div> <div class=\\\"example-item\\\" data-command=\\\"B열 기준으로 내림차순 정렬해줘\\\"> <strong>정렬:</strong> B열 기준으로 내림차순 정렬해줘 </div> <div class=\\\"example-item\\\" data-command=\\\"값이 100보다 큰 셀은 녹색 배경으로 표시해줘\\\"> <strong>조건부 서식:</strong> 값이 100보다 큰 셀은 녹색 배경으로 표시해줘 </div> <div class=\\\"example-item\\\" data-command=\\\"A1:B10 데이터로 막대 차트를 만들어줘\\\"> <strong>차트 생성:</strong> A1:B10 데이터로 막대 차트를 만들어줘 </div> <div class=\\\"example-item\\\" data-command=\\\"D열을 중국어로 번역해서 다음 열에 추가해줘\\\"> <strong>번역:</strong> D열을 중국어로 번역해서 다음 열에 추가해줘 </div> <div class=\\\"example-item\\\" data-command=\\\"A열의 10000개 행을 영어로 번역해줘\\\"> <strong>대용량 번역:</strong> A열의 10000개 행을 영어로 번역해줘 </div> <div class=\\\"example-item\\\" data-command=\\\"D2:D170 사이의 빈 행을 제거해줘\\\"> <strong>빈 행 제거:</strong> D2:D170 사이의 빈 행을 제거해줘 </div> <div class=\\\"example-item\\\" data-command=\\\"C열의 오른쪽 테두리를 없애줘\\\"> <strong>테두리 제거:</strong> C열의 오른쪽 테두리를 없애줘 </div> </div> </div> <div class=\\\"settings-section\\\"> <button id=\\\"authButton\\\" class=\\\"settings-link\\\">인증</button> <button id=\\\"contactButton\\\" class=\\\"settings-link\\\">문의/요청</button> </div> <div id=\\\"authModal\\\" class=\\\"modal\\\" style=\\\"display:none\\\"> <div class=\\\"modal-content\\\"> <span class=\\\"close\\\">&times;</span> <h3>인증키 입력</h3> <p>GPT-4.1 모델을 사용하려면 인증 정보를 입력하세요.</p> <input type=\\\"email\\\" id=\\\"authEmailInput\\\" placeholder=\\\"회사 이메일 주소\\\" style=\\\"width:100%;margin-bottom:10px;padding:10px;box-sizing:border-box\\\"/> <input type=\\\"text\\\" id=\\\"authKeyInput\\\" placeholder=\\\"인증키를 입력하세요\\\" style=\\\"width:100%;margin-bottom:15px;padding:10px;box-sizing:border-box\\\"/> <button id=\\\"submitAuthKey\\\" class=\\\"ms-Button ms-Button--primary\\\" style=\\\"width:100%;padding:10px\\\"> <span class=\\\"ms-Button-label\\\">인증</span> </button> <div id=\\\"authStatus\\\" class=\\\"auth-status\\\"></div> </div> </div> <div id=\\\"deauthModal\\\" class=\\\"modal\\\" style=\\\"display:none\\\"> <div class=\\\"modal-content\\\"> <h3>인증 해제 확인</h3> <p>더 이상 사용하지 않아 인증을 해제합니다.</p> <p>인증 해제 후 나중에 필요해지면 다시 인증해 사용할 수 있습니다.</p> <p style=\\\"margin-top:16px;font-weight:700\\\">정말 인증을 해제하시겠습니까?</p> <div style=\\\"display:flex;gap:10px;margin-top:20px\\\"> <button id=\\\"confirmDeauth\\\" class=\\\"ms-Button ms-Button--primary\\\" style=\\\"background:#dc2626\\\"> <span class=\\\"ms-Button-label\\\">인증 해제</span> </button> <button id=\\\"cancelDeauth\\\" class=\\\"ms-Button\\\"> <span class=\\\"ms-Button-label\\\">취소</span> </button> </div> </div> </div> <div class=\\\"footer-section\\\"> <p class=\\\"disclaimer\\\" style=\\\"font-style:normal\\\">AI는 잘못된 작업을 할 수 있습니다. 사용자의 데이터는 AI 학습에 일절 활용되지 않습니다.</p> <p class=\\\"disclaimer\\\" style=\\\"margin-top:8px;font-style:normal\\\"> <a href=\\\"https://policies.wrks.ai/sheet-assistant-privacy-policy\\\" target=\\\"_blank\\\" style=\\\"color:#6b7280;text-decoration:underline\\\">개인정보처리방침</a> </p> </div> </div> </main> </body> </html>\";\n// Exports\nexport default code;","/*\n * Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n * See LICENSE in the project root for license information.\n */\n\n/* global document, Office, Excel */\n\n// Voice recognition variables\nlet recognition = null;\nlet isListening = false;\n\n// Backend API URL - Vercel 배포\nconst API_PROXY_URL = process.env.API_PROXY_URL || 'https://excel-addon-backend.vercel.app/api/openai-proxy';\n\nOffice.onReady((info) => {\n  if (info.host === Office.HostType.Excel) {\n    // Test backend connection\n    testBackendConnection();\n    \n    // Assign event handlers\n    document.getElementById(\"executeButton\").onclick = executeCommand;\n    document.getElementById(\"clearButton\").onclick = clearInput;\n    document.getElementById(\"voiceButton\").onclick = () => toggleVoiceRecognition();\n    \n    // Auth and contact buttons\n    document.getElementById(\"authButton\").onclick = handleAuthAction;\n    document.getElementById(\"contactButton\").onclick = showContactInfo;\n    \n    // Update auth button text based on auth state\n    updateAuthButton();\n    \n    // Initialize model selection dropdown\n    const modelSelect = document.getElementById(\"modelSelect\");\n    const savedModel = localStorage.getItem(\"excel_addon_selected_model\");\n    const authKey = localStorage.getItem(\"excel_addon_auth_key\");\n    \n    // If premium model is saved but no auth key, reset to free model\n    if (savedModel === \"gpt-4.1-2025-04-14\" && !authKey) {\n      localStorage.setItem(\"excel_addon_selected_model\", \"gpt-4.1-nano-2025-04-14\");\n      modelSelect.value = \"gpt-4.1-nano-2025-04-14\";\n    } else if (savedModel) {\n      modelSelect.value = savedModel;\n    } else {\n      // Default to free model\n      modelSelect.value = \"gpt-4.1-nano-2025-04-14\";\n      localStorage.setItem(\"excel_addon_selected_model\", \"gpt-4.1-nano-2025-04-14\");\n    }\n    \n    // Modal handlers\n    const authModal = document.getElementById(\"authModal\");\n    const closeBtn = authModal.querySelector(\".close\");\n    closeBtn.onclick = () => hideAuthModal();\n    \n    const deauthModal = document.getElementById(\"deauthModal\");\n    \n    window.onclick = (event) => {\n      if (event.target == authModal) {\n        hideAuthModal();\n      } else if (event.target == deauthModal) {\n        hideDeauthModal();\n      }\n    };\n    \n    document.getElementById(\"submitAuthKey\").onclick = submitAuthKey;\n    document.getElementById(\"confirmDeauth\").onclick = confirmDeauth;\n    document.getElementById(\"cancelDeauth\").onclick = hideDeauthModal;\n    \n    // Model selection handler\n    document.getElementById(\"modelSelect\").onchange = handleModelChange;\n\n    // Handle example clicks\n    const exampleItems = document.querySelectorAll('.example-item');\n    exampleItems.forEach(item => {\n      item.onclick = function() {\n        setCommand(this.getAttribute('data-command'));\n      };\n    });\n\n    // Handle Enter key\n    document.getElementById('commandInput').addEventListener('keydown', function(event) {\n      if (event.key === 'Enter' && !event.shiftKey) {\n        event.preventDefault();\n        executeCommand();\n      }\n    });\n\n    // Initialize speech recognition\n    initializeSpeechRecognition();\n  }\n});\n\n// Initialize speech recognition\nfunction initializeSpeechRecognition() {\n  // Check if we're in a web environment (Excel Online) - disable voice feature\n  const isWebEnvironment = window.location.protocol === 'https:' && \n                          !window.location.hostname.includes('localhost');\n  \n  if (isWebEnvironment) {\n    console.log('Voice recognition disabled in web environment');\n    const voiceButton = document.getElementById('voiceButton');\n    const voiceStatus = document.getElementById('voiceStatus');\n    \n    voiceButton.disabled = true;\n    voiceButton.style.opacity = '0.5';\n    voiceButton.style.cursor = 'not-allowed';\n    voiceStatus.textContent = '웹 환경에서는 음성 인식 미지원';\n    voiceStatus.style.color = '#666';\n    \n    // Add tooltip\n    voiceButton.title = 'Excel Online에서는 보안상 음성 인식을 사용할 수 없습니다. 데스크톱 Excel을 사용해주세요.';\n    \n    return null;\n  }\n  \n  const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n  \n  if (!SpeechRecognition) {\n    showStatus('음성 인식이 지원되지 않는 브라우저입니다.', 'error');\n    document.getElementById('voiceButton').disabled = true;\n    document.getElementById('voiceStatus').textContent = '음성 인식 미지원';\n    return null;\n  }\n  \n  recognition = new SpeechRecognition();\n  recognition.lang = 'ko-KR';\n  recognition.continuous = false;\n  recognition.interimResults = true;\n  recognition.maxAlternatives = 1;\n  \n  recognition.onstart = function() {\n    isListening = true;\n    document.getElementById('voiceButton').classList.add('listening');\n    document.getElementById('voiceStatus').textContent = '듣고 있습니다... 말씀해주세요';\n    document.getElementById('voiceStatus').classList.add('listening');\n  };\n  \n  recognition.onresult = function(event) {\n    const transcript = event.results[0][0].transcript;\n    document.getElementById('commandInput').value = transcript;\n    \n    if (event.results[0].isFinal) {\n      document.getElementById('voiceStatus').textContent = '음성 인식 완료';\n    } else {\n      document.getElementById('voiceStatus').textContent = '인식중: ' + transcript;\n    }\n  };\n  \n  recognition.onerror = function(event) {\n    console.log('Speech recognition error:', event.error, 'Location:', window.location.hostname);\n    isListening = false;\n    document.getElementById('voiceButton').classList.remove('listening');\n    document.getElementById('voiceStatus').classList.remove('listening');\n    \n    let errorMessage = '음성 인식 오류';\n    \n    // Check if we're in a web environment - use broader detection\n    const isWebEnvironment = window.location.protocol === 'https:' && \n                            !window.location.hostname.includes('localhost');\n    \n    switch(event.error) {\n      case 'no-speech':\n        errorMessage = '음성이 감지되지 않았습니다.';\n        break;\n      case 'audio-capture':\n        errorMessage = '마이크를 찾을 수 없습니다.';\n        break;\n      case 'not-allowed':\n        // Always show web environment message for not-allowed in HTTPS contexts\n        if (isWebEnvironment) {\n          errorMessage = 'Excel Online에서는 보안 정책상 음성 인식을 사용할 수 없습니다. 데스크톱 Excel에서 이용해주세요.';\n          document.getElementById('voiceStatus').textContent = '웹 버전 미지원';\n        } else {\n          errorMessage = '마이크 권한이 거부되었습니다. 브라우저 설정을 확인해주세요.';\n        }\n        break;\n      case 'network':\n        errorMessage = '네트워크 오류가 발생했습니다.';\n        break;\n      default:\n        // For any other error in web environment, show the web limitation message\n        if (isWebEnvironment && event.error) {\n          errorMessage = 'Excel Online에서는 보안 정책상 음성 인식을 사용할 수 없습니다. 데스크톱 Excel에서 이용해주세요.';\n          document.getElementById('voiceStatus').textContent = '웹 버전 미지원';\n        }\n        break;\n    }\n    \n    // Override the status text display for web environment\n    if (isWebEnvironment && event.error === 'not-allowed') {\n      document.getElementById('voiceStatus').textContent = '웹 버전 미지원';\n    } else {\n      document.getElementById('voiceStatus').textContent = errorMessage;\n    }\n    \n    showStatus(errorMessage, 'error');\n  };\n  \n  recognition.onend = function() {\n    isListening = false;\n    document.getElementById('voiceButton').classList.remove('listening');\n    document.getElementById('voiceStatus').classList.remove('listening');\n    \n    const command = document.getElementById('commandInput').value.trim();\n    if (command) {\n      document.getElementById('voiceStatus').textContent = '음성 인식 완료. 실행 버튼을 눌러주세요.';\n      document.getElementById('executeButton').focus();\n    } else {\n      document.getElementById('voiceStatus').textContent = '음성 인식 준비';\n    }\n  };\n  \n  return recognition;\n}\n\n// Toggle voice recognition\nfunction toggleVoiceRecognition() {\n  // Check if we're in Excel Online/web environment\n  const isWebEnvironment = window.location.protocol === 'https:' && \n                          !window.location.hostname.includes('localhost');\n  \n  if (isWebEnvironment) {\n    showStatus('Excel Online에서는 보안 정책상 음성 인식을 사용할 수 없습니다. 데스크톱 Excel에서 이용해주세요.', 'error');\n    document.getElementById('voiceStatus').textContent = '웹 버전 미지원';\n    return;\n  }\n  \n  if (!recognition) {\n    // Recognition would be null if unsupported browser\n    showStatus('이 브라우저는 음성 인식을 지원하지 않습니다.', 'error');\n    return;\n  }\n  \n  if (isListening) {\n    recognition.stop();\n  } else {\n    try {\n      recognition.start();\n    } catch (error) {\n      console.error('Voice recognition start error:', error);\n      \n      // More user-friendly error messages\n      if (error.message && error.message.includes('not-allowed')) {\n        showStatus('마이크 권한이 필요합니다. 브라우저 설정에서 마이크 접근을 허용해주세요.', 'error');\n      } else {\n        showStatus('음성 인식을 시작할 수 없습니다.', 'error');\n      }\n    }\n  }\n}\n\n// Execute command\n// Add flag to prevent duplicate execution\nlet isExecuting = false;\n\nasync function executeCommand() {\n  // Prevent duplicate execution\n  if (isExecuting) {\n    console.log('Command already executing, ignoring duplicate call');\n    return;\n  }\n  \n  const command = document.getElementById('commandInput').value.trim();\n  \n  if (!command) {\n    showStatus('명령어를 입력해주세요.', 'error');\n    return;\n  }\n  \n  isExecuting = true;\n  \n  const button = document.getElementById('executeButton');\n  const originalText = '<span class=\"ms-Button-label\">실행</span>';\n  \n  // Show loading state\n  button.disabled = true;\n  button.innerHTML = '<span class=\"loading\"></span><span>처리중...</span>';\n  showStatus('명령을 처리하고 있습니다...', 'info');\n  \n  try {\n    await Excel.run(async (context) => {\n      console.log('Starting Excel.run for command execution');\n      // Get current worksheet context\n      const worksheet = context.workbook.worksheets.getActiveWorksheet();\n      // Handle both single and multiple range selections\n      let activeRangeInfo = null;\n      let isMultipleRanges = false;\n      \n      try {\n        // Try to get selected ranges first\n        const selectedRanges = context.workbook.getSelectedRanges();\n        selectedRanges.load([\"areas\", \"areaCount\"]);\n        await context.sync();\n        \n        if (selectedRanges.areaCount > 1) {\n          // Multiple non-contiguous ranges\n          isMultipleRanges = true;\n          const firstRange = selectedRanges.areas.items[0];\n          firstRange.load([\"address\", \"rowIndex\", \"columnIndex\", \"rowCount\", \"columnCount\"]);\n          await context.sync();\n          \n          // Build combined address string\n          const rangeAddresses = [];\n          for (let i = 0; i < selectedRanges.areas.items.length; i++) {\n            const area = selectedRanges.areas.items[i];\n            area.load(\"address\");\n          }\n          await context.sync();\n          \n          for (let i = 0; i < selectedRanges.areas.items.length; i++) {\n            rangeAddresses.push(selectedRanges.areas.items[i].address);\n          }\n          \n          activeRangeInfo = {\n            address: rangeAddresses.join(','),\n            row: firstRange.rowIndex + 1,\n            column: firstRange.columnIndex + 1,\n            numRows: firstRange.rowCount,\n            numColumns: firstRange.columnCount,\n            isMultipleRanges: true\n          };\n        } else {\n          // Single range\n          const range = selectedRanges.areas.items[0];\n          range.load([\"address\", \"rowIndex\", \"columnIndex\", \"rowCount\", \"columnCount\"]);\n          await context.sync();\n          \n          activeRangeInfo = {\n            address: range.address,\n            row: range.rowIndex + 1,\n            column: range.columnIndex + 1,\n            numRows: range.rowCount,\n            numColumns: range.columnCount,\n            isMultipleRanges: false\n          };\n        }\n      } catch (error) {\n        console.log('Error getting selected ranges, using fallback:', error);\n        // If getting selected ranges fails, provide a default\n        activeRangeInfo = {\n          address: 'A1',\n          row: 1,\n          column: 1,\n          numRows: 1,\n          numColumns: 1,\n          isMultipleRanges: false\n        };\n      }\n      \n      // Load necessary properties\n      worksheet.load(\"name\");\n      \n      // Get sheet data for context\n      const usedRange = worksheet.getUsedRange();\n      usedRange.load([\"rowCount\", \"columnCount\", \"values\"]);\n      \n      await context.sync();\n      \n      // Build sheet context\n      const sheetContext = {\n        sheetName: worksheet.name,\n        activeRange: activeRangeInfo,\n        lastRow: usedRange ? usedRange.rowCount : 0,\n        lastColumn: usedRange ? usedRange.columnCount : 0,\n        headers: [],\n        dataRange: usedRange ? usedRange.values : [],\n        isLargeSheet: usedRange && usedRange.rowCount > 1000\n      };\n      \n      // Extract headers\n      if (usedRange && usedRange.rowCount > 0) {\n        const headerRow = usedRange.values[0];\n        for (let i = 0; i < headerRow.length; i++) {\n          sheetContext.headers.push({\n            column: i + 1,\n            columnLetter: getColumnLetter(i),\n            label: headerRow[i] ? headerRow[i].toString() : ''\n          });\n        }\n      }\n      \n      // Call OpenAI API to interpret the command\n      const interpretation = await callOpenAI(command, sheetContext);\n      \n      if (!interpretation.success) {\n        throw new Error(interpretation.error);\n      }\n      \n      // Execute the interpreted command\n      console.log('Executing interpreted command...');\n      const result = await executeInterpretedCommand(context, interpretation.data);\n      console.log('Command execution result:', result);\n      \n      // Reset button and show success\n      button.disabled = false;\n      button.innerHTML = originalText;\n      \n      if (result.success) {\n        console.log('Operation completed successfully:', result);\n        showStatus(result.message || '명령이 성공적으로 실행되었습니다.', 'success');\n        setTimeout(() => {\n          document.getElementById('commandInput').value = '';\n        }, 1000);\n      } else {\n        console.error('Operation failed:', result);\n        showStatus(result.error || '명령 실행에 실패했습니다.', 'error');\n      }\n      \n      console.log('Excel.run completing...');\n    });\n    console.log('Excel.run completed');\n  } catch (error) {\n    console.error('Error in executeCommand:', error);\n    console.error('Error stack:', error.stack);\n    button.disabled = false;\n    button.innerHTML = originalText;\n    showStatus('오류가 발생했습니다: ' + error.message, 'error');\n  } finally {\n    // Reset execution flag\n    isExecuting = false;\n  }\n}\n\n// Call OpenAI API through proxy\nasync function callOpenAI(command, sheetContext) {\n  try {\n    // Get selected model and auth key\n    const selectedModel = localStorage.getItem(\"excel_addon_selected_model\") || \"gpt-4.1-nano-2025-04-14\";\n    const authKey = localStorage.getItem(\"excel_addon_auth_key\");\n    const authEmail = localStorage.getItem(\"excel_addon_auth_email\");\n    \n    // Only send auth info for premium model\n    const requestBody = {\n      command: command,\n      sheetContext: sheetContext,\n      model: selectedModel,\n      clientType: 'excel' // Identify this as Excel client\n    };\n    \n    // Only add auth info if using premium model\n    if (selectedModel === \"gpt-4.1-2025-04-14\") {\n      requestBody.authKey = authKey;\n      requestBody.authEmail = authEmail;\n    }\n    \n    console.log('Sending request with:', {\n      model: selectedModel,\n      hasAuthKey: !!requestBody.authKey,\n      hasAuthEmail: !!requestBody.authEmail,\n      command: command\n    });\n    \n    const response = await fetch(API_PROXY_URL, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(requestBody)\n    });\n    \n    if (!response.ok) {\n      const errorData = await response.json();\n      return {\n        success: false,\n        error: errorData.error || `서버 오류 (${response.status})`\n      };\n    }\n    \n    return await response.json();\n    \n  } catch (error) {\n    console.error('Proxy API Error:', error);\n    return {\n      success: false,\n      error: `API 요청 오류: ${error.toString()}`\n    };\n  }\n}\n\n// Original OpenAI API call (no longer used)\nasync function callOpenAIDirectly(command, sheetContext) {\n  const systemPrompt = `You are an Excel assistant that interprets natural language commands and returns JSON instructions for Excel operations.\n  \nAvailable operations:\n1. merge: Merge cells\n2. sum: Sum values in a range or column\n3. average: Calculate average\n4. count: Count cells (can count all, numbers only, or based on conditions)\n5. format: Format cells (bold, italic, font color, background color, etc.)\n6. sort: Sort data\n7. filter: Filter data\n8. insert: Insert rows/columns\n9. delete: Delete rows/columns\n10. formula: Add custom formula\n11. chart: Create chart\n12. conditional_format: Add conditional formatting\n13. translate: Translate cell contents to another language\n14. compress: Remove empty rows in a specific column range\n15. retry_translation: Retry translation for failed items marked as [번역 실패]\n\nFor sum operation:\n- If user mentions a column by header name (e.g., \"totalToken 열의 합\", \"totalToken 합산\"), return: { \"sumType\": \"column\", \"columnName\": \"totalToken\" }\n- The system will automatically find the column, determine the data range, and place the sum in the first empty cell below the data\n- For specific range sum, use: { \"sourceRange\": \"A2:A10\" }\n- For adding sum below selection, use: { \"addNewRow\": true }\n\nCurrent sheet context:\n- Active range: ${sheetContext.activeRange.address}\n- Sheet dimensions: ${sheetContext.lastRow} rows x ${sheetContext.lastColumn} columns\n- Headers: ${sheetContext.headers.map(h => `Column ${h.columnLetter}: \"${h.label}\"`).join(', ')}\n\nReturn JSON in this format:\n{\n  \"operation\": \"operation_name\",\n  \"parameters\": {\n    // operation-specific parameters\n  }\n}`;\n\n  const url = 'https://api.openai.com/v1/chat/completions';\n  \n  const payload = {\n    model: 'gpt-4.1-2025-04-14',\n    messages: [\n      { role: 'system', content: systemPrompt },\n      { role: 'user', content: `Current Excel state:\nHeaders: ${sheetContext.headers.map(h => `Column ${h.columnLetter}: \"${h.label}\"`).join(', ')}\nActive sheet: ${sheetContext.sheetName}\n\nUser command: ${command}` }\n    ],\n    temperature: 0.3,\n    max_tokens: 500\n  };\n  \n  try {\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${OPENAI_API_KEY}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(payload)\n    });\n    \n    if (!response.ok) {\n      const errorData = await response.json();\n      if (response.status === 429) {\n        return {\n          success: false,\n          error: 'API 요청 한도를 초과했습니다. 잠시 후 다시 시도해주세요.'\n        };\n      } else if (response.status === 401) {\n        return {\n          success: false,\n          error: 'API 키가 유효하지 않습니다. API 키를 확인해주세요.'\n        };\n      }\n      return {\n        success: false,\n        error: `API 오류 (${response.status}): ${errorData.error?.message || '알 수 없는 오류'}`\n      };\n    }\n    \n    const result = await response.json();\n    \n    if (result.choices && result.choices[0]) {\n      const content = result.choices[0].message.content;\n      try {\n        const parsedCommand = JSON.parse(content);\n        return {\n          success: true,\n          data: parsedCommand\n        };\n      } catch (parseError) {\n        console.error('Failed to parse AI response:', content);\n        return {\n          success: false,\n          error: 'AI 응답을 해석할 수 없습니다. 다시 시도해주세요.'\n        };\n      }\n    } else {\n      return {\n        success: false,\n        error: 'OpenAI API 응답을 파싱할 수 없습니다.'\n      };\n    }\n  } catch (error) {\n    console.error('OpenAI API Error:', error);\n    return {\n      success: false,\n      error: `OpenAI API 오류: ${error.toString()}`\n    };\n  }\n}\n\n// Execute the interpreted command\nasync function executeInterpretedCommand(context, commandData) {\n  // Check if multiple operations\n  if (commandData.operations && Array.isArray(commandData.operations)) {\n    console.log('Executing multiple operations:', commandData.operations.length);\n    const results = [];\n    let successCount = 0;\n    \n    for (const op of commandData.operations) {\n      const result = await executeSingleOperation(context, op.operation, op.parameters || {});\n      results.push(result);\n      if (result.success) successCount++;\n    }\n    \n    return {\n      success: successCount === commandData.operations.length,\n      message: `${successCount}/${commandData.operations.length} 작업이 완료되었습니다.`,\n      results: results\n    };\n  }\n  \n  // Single operation\n  return await executeSingleOperation(context, commandData.operation, commandData.parameters || {});\n}\n\n// Execute a single operation\nasync function executeSingleOperation(context, operation, params) {\n  console.log(`[${new Date().toISOString()}] Executing operation: ${operation} with params:`, params);\n  \n  try {\n    switch (operation) {\n      case 'merge':\n        return await executeMerge(context, params);\n      \n      case 'sum':\n        return await executeSum(context, params);\n      \n      case 'average':\n        return await executeAverage(context, params);\n      \n      case 'count':\n        return await executeCount(context, params);\n      \n      case 'format':\n        return await executeFormat(context, params);\n      \n      case 'sort':\n        return await executeSort(context, params);\n      \n      case 'filter':\n        return await executeFilter(context, params);\n      \n      case 'insert':\n        return await executeInsert(context, params);\n      \n      case 'delete':\n        return await executeDelete(context, params);\n      \n      case 'formula':\n        return await executeFormula(context, params);\n      \n      case 'chart':\n        return await executeChart(context, params);\n      \n      case 'conditional_format':\n        return await executeConditionalFormat(context, params);\n      \n      case 'translate':\n        return await executeTranslate(context, params);\n      \n      case 'compress':\n        return await executeCompress(context, params);\n      \n      case 'retry_translation':\n        return await executeRetryTranslation(context, params);\n      \n      case 'remove_border':\n        return await executeRemoveBorder(context, params);\n      \n      case 'border_format':\n        return await executeBorderFormat(context, params);\n      \n      default:\n        return {\n          success: false,\n          error: `알 수 없는 작업: ${operation}`\n        };\n    }\n  } catch (error) {\n    console.error('Error in executeInterpretedCommand:', error);\n    return {\n      success: false,\n      error: `작업 실행 중 오류: ${error.message || error.toString()}`\n    };\n  }\n}\n\n// Merge cells\nasync function executeMerge(context, params) {\n  console.log('executeMerge started with params:', params);\n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  const range = params.range ? worksheet.getRange(params.range) : context.workbook.getSelectedRange();\n  \n  console.log('Loading range address...');\n  // Load address property before using it\n  range.load('address');\n  await context.sync();\n  \n  console.log('Range address loaded:', range.address);\n  const rangeAddress = range.address;\n  \n  console.log('Merging range...');\n  range.merge();\n  await context.sync();\n  \n  console.log('Merge completed successfully');\n  return {\n    success: true,\n    message: `${rangeAddress} 범위가 병합되었습니다.`\n  };\n}\n\n// Sum values\nasync function executeSum(context, params) {\n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  \n  // Handle row sum\n  if (params.sumType === 'row' && params.row) {\n    console.log('Sum by row:', params.row);\n    \n    // Get the used range to find the maximum possible columns\n    const usedRange = worksheet.getUsedRange();\n    if (!usedRange) {\n      return {\n        success: false,\n        error: '시트에 데이터가 없습니다.'\n      };\n    }\n    \n    usedRange.load([\"columnCount\"]);\n    await context.sync();\n    \n    // Get the specific row to find where data ends\n    const rowRange = worksheet.getRangeByIndexes(\n      params.row - 1,  // row index (0-based)\n      0,               // starting column (A)\n      1,               // 1 row\n      usedRange.columnCount  // check all possible columns\n    );\n    \n    rowRange.load([\"values\"]);\n    await context.sync();\n    \n    // Find the last column with data in this specific row\n    const rowValues = rowRange.values[0];\n    let lastDataColumn = -1;\n    \n    for (let i = rowValues.length - 1; i >= 0; i--) {\n      if (rowValues[i] !== null && rowValues[i] !== '' && rowValues[i] !== undefined) {\n        lastDataColumn = i;\n        break;\n      }\n    }\n    \n    if (lastDataColumn === -1) {\n      return {\n        success: false,\n        error: `${params.row}행에 데이터가 없습니다.`\n      };\n    }\n    \n    // Calculate the column for the sum result (next column after last data)\n    const resultColumn = lastDataColumn + 1;\n    const resultCell = worksheet.getCell(params.row - 1, resultColumn);\n    \n    // Create the sum formula\n    const startCol = 'A';\n    const endCol = getColumnLetter(lastDataColumn);\n    const sumFormula = `=SUM(${startCol}${params.row}:${endCol}${params.row})`;\n    \n    resultCell.formulas = [[sumFormula]];\n    await context.sync();\n    \n    resultCell.load([\"values\", \"address\"]);\n    await context.sync();\n    \n    return {\n      success: true,\n      message: `${params.row}행의 합계를 ${resultCell.address}에 계산했습니다: ${formatNumber(resultCell.values[0][0])}`,\n      value: resultCell.values[0][0]\n    };\n  }\n  \n  // If column name is provided, find the column and create range\n  if (params.columnName || params.sumType === 'column') {\n    console.log('Sum by column name:', params.columnName);\n    \n    // Get sheet context to find column by name\n    const usedRange = worksheet.getUsedRange();\n    usedRange.load([\"values\", \"rowCount\", \"columnCount\"]);\n    await context.sync();\n    \n    if (!usedRange || usedRange.rowCount === 0) {\n      return {\n        success: false,\n        error: '시트에 데이터가 없습니다.'\n      };\n    }\n    \n    let columnIndex = -1;\n    let columnLetter = '';\n    \n    // Check if columnName is a column letter reference (like \"D\", \"AA\", \"ABC\")\n    if (params.columnName && params.columnName.match(/^[A-Z]+$/)) {\n      // Direct column letter reference\n      columnLetter = params.columnName;\n      // Convert column letter(s) to index\n      columnIndex = 0;\n      for (let i = 0; i < columnLetter.length; i++) {\n        columnIndex = columnIndex * 26 + (columnLetter.charCodeAt(i) - 64);\n      }\n      columnIndex--; // Convert to 0-based index\n      console.log('Column letter specified:', columnLetter, 'index:', columnIndex);\n    } else {\n      // Find column by header name\n      const headers = usedRange.values[0];\n      \n      for (let i = 0; i < headers.length; i++) {\n        if (headers[i] && headers[i].toString().toLowerCase() === (params.columnName || '').toLowerCase()) {\n          columnIndex = i;\n          columnLetter = getColumnLetter(i);\n          break;\n        }\n      }\n    }\n    \n    if (columnIndex === -1) {\n      return {\n        success: false,\n        error: `\"${params.columnName}\" 열을 찾을 수 없습니다.`\n      };\n    }\n    \n    // Find last row with data in this column\n    let lastDataRow = 1; // Start from row 2 (after header)\n    for (let row = 1; row < usedRange.rowCount; row++) {\n      if (usedRange.values[row][columnIndex] !== null && \n          usedRange.values[row][columnIndex] !== undefined && \n          usedRange.values[row][columnIndex] !== '') {\n        lastDataRow = row + 1; // +1 because Excel rows are 1-indexed\n      }\n    }\n    \n    // Create range from row 2 to last data row\n    const rangeAddress = `${columnLetter}2:${columnLetter}${lastDataRow}`;\n    \n    // Find first empty cell below the data\n    let targetRow = lastDataRow; // Start from row after last data (0-based becomes 1-based)\n    let foundEmpty = false;\n    \n    // Check up to 10 rows below for an empty cell\n    for (let i = 0; i < 10; i++) {\n      const checkCell = worksheet.getCell(lastDataRow + i, columnIndex);\n      checkCell.load(\"values\");\n      await context.sync();\n      \n      const cellValue = checkCell.values[0][0];\n      if (cellValue === null || cellValue === undefined || cellValue === '') {\n        targetRow = lastDataRow + i;\n        foundEmpty = true;\n        break;\n      }\n    }\n    \n    // If no empty cell found, use the row after last data\n    if (!foundEmpty) {\n      targetRow = lastDataRow;\n    }\n    \n    const sumCell = worksheet.getCell(targetRow, columnIndex);\n    \n    console.log(`Summing range: ${rangeAddress}, placing result in row ${targetRow + 1}`);\n    \n    sumCell.formulas = [[`=SUM(${rangeAddress})`]];\n    await context.sync();\n    \n    sumCell.load([\"values\", \"address\"]);\n    await context.sync();\n    \n    return {\n      success: true,\n      message: `${params.columnName} 열의 합계를 ${sumCell.address}에 계산했습니다: ${formatNumber(sumCell.values[0][0])}`,\n      value: sumCell.values[0][0]\n    };\n  }\n  \n  // Original logic for range-based sum - handle multiple selections\n  let sourceRange;\n  let sumFormula;\n  \n  if (params.sourceRange) {\n    sourceRange = worksheet.getRange(params.sourceRange);\n    sourceRange.load([\"columnIndex\", \"rowIndex\", \"rowCount\", \"address\"]);\n    await context.sync();\n    sumFormula = `=SUM(${sourceRange.address})`;\n  } else {\n    // Handle multiple selections\n    try {\n      const selectedRanges = context.workbook.getSelectedRanges();\n      selectedRanges.load([\"areas\", \"areaCount\"]);\n      await context.sync();\n      \n      if (selectedRanges.areaCount > 1) {\n        // Multiple non-contiguous ranges selected\n        const rangeAddresses = [];\n        \n        for (let i = 0; i < selectedRanges.areas.items.length; i++) {\n          const area = selectedRanges.areas.items[i];\n          area.load(\"address\");\n        }\n        await context.sync();\n        \n        for (let i = 0; i < selectedRanges.areas.items.length; i++) {\n          rangeAddresses.push(selectedRanges.areas.items[i].address);\n        }\n        \n        sumFormula = `=SUM(${rangeAddresses.join(',')})`;\n        sourceRange = selectedRanges.areas.items[0];\n        sourceRange.load([\"columnIndex\", \"rowIndex\", \"rowCount\"]);\n        await context.sync();\n      } else {\n        // Single contiguous range\n        sourceRange = context.workbook.getSelectedRange();\n        sourceRange.load([\"columnIndex\", \"rowIndex\", \"rowCount\", \"address\"]);\n        await context.sync();\n        sumFormula = `=SUM(${sourceRange.address})`;\n      }\n    } catch (error) {\n      console.log('Error getting selected ranges, trying fallback:', error);\n      // For non-contiguous selections, getSelectedRange() fails\n      // Try to get selected ranges differently\n      try {\n        const selectedRanges = context.workbook.getSelectedRanges();\n        selectedRanges.load([\"areas\", \"areaCount\"]);\n        await context.sync();\n        \n        if (selectedRanges.areas.items.length > 0) {\n          const rangeAddresses = [];\n          for (let i = 0; i < selectedRanges.areas.items.length; i++) {\n            const area = selectedRanges.areas.items[i];\n            area.load(\"address\");\n          }\n          await context.sync();\n          \n          for (let i = 0; i < selectedRanges.areas.items.length; i++) {\n            rangeAddresses.push(selectedRanges.areas.items[i].address);\n          }\n          \n          sumFormula = `=SUM(${rangeAddresses.join(',')})`;\n          sourceRange = selectedRanges.areas.items[0];\n          sourceRange.load([\"columnIndex\", \"rowIndex\", \"rowCount\"]);\n          await context.sync();\n        } else {\n          throw new Error('No ranges selected');\n        }\n      } catch (fallbackError) {\n        console.error('Fallback also failed:', fallbackError);\n        return { success: false, error: '선택한 범위를 처리할 수 없습니다. 연속된 범위를 선택해주세요.' };\n      }\n    }\n  }\n  \n  if (params.addNewRow === true) {\n    // Add new row for sum\n    sourceRange.load([\"columnIndex\", \"rowIndex\", \"rowCount\"]);\n    await context.sync();\n    \n    const column = sourceRange.columnIndex;\n    const lastRow = sourceRange.rowIndex + sourceRange.rowCount;\n    const newCell = worksheet.getCell(lastRow, column);\n    \n    newCell.formulas = [[sumFormula]];\n    await context.sync();\n    \n    newCell.load([\"values\", \"address\"]);\n    await context.sync();\n    \n    return {\n      success: true,\n      message: `${newCell.address}에 합계를 계산했습니다: ${formatNumber(newCell.values[0][0])}`,\n      value: newCell.values[0][0]\n    };\n  } else if (params.targetCell) {\n    // Sum to specific cell\n    const targetCell = worksheet.getRange(params.targetCell);\n    targetCell.formulas = [[sumFormula]];\n    await context.sync();\n    \n    targetCell.load([\"values\", \"address\"]);\n    await context.sync();\n    \n    return {\n      success: true,\n      message: `${targetCell.address}에 합계를 계산했습니다: ${formatNumber(targetCell.values[0][0])}`,\n      value: targetCell.values[0][0]\n    };\n  } else {\n    // Default: find an empty cell for the result\n    // For multiple non-contiguous selections, find an empty spot\n    const usedRange = worksheet.getUsedRange();\n    usedRange.load([\"rowCount\", \"columnCount\"]);\n    await context.sync();\n    \n    let targetCell;\n    \n    // If multiple ranges selected (formula contains comma), find empty cell strategically\n    if (sumFormula.includes(',')) {\n      // Multiple ranges - find empty area\n      const lastUsedRow = usedRange ? usedRange.rowCount : 1;\n      const lastUsedCol = usedRange ? usedRange.columnCount : 1;\n      \n      // Try to find empty cell to the right of selection\n      let foundEmpty = false;\n      for (let col = lastUsedCol; col < lastUsedCol + 5; col++) {\n        const checkCell = worksheet.getCell(sourceRange.rowIndex, col);\n        checkCell.load(\"values\");\n        await context.sync();\n        \n        if (!checkCell.values[0][0]) {\n          targetCell = checkCell;\n          foundEmpty = true;\n          break;\n        }\n      }\n      \n      // If not found to the right, try below the used range\n      if (!foundEmpty) {\n        for (let row = lastUsedRow; row < lastUsedRow + 5; row++) {\n          const checkCell = worksheet.getCell(row, 0);\n          checkCell.load(\"values\");\n          await context.sync();\n          \n          if (!checkCell.values[0][0]) {\n            targetCell = checkCell;\n            foundEmpty = true;\n            break;\n          }\n        }\n      }\n      \n      // If still not found, use a safe location below all data\n      if (!foundEmpty) {\n        targetCell = worksheet.getCell(lastUsedRow + 2, 0);\n      }\n    } else {\n      // Single range - find empty cell below the range\n      sourceRange.load([\"columnIndex\", \"rowIndex\", \"rowCount\"]);\n      await context.sync();\n      \n      const column = sourceRange.columnIndex;\n      const startRow = sourceRange.rowIndex + sourceRange.rowCount;\n      \n      let targetRow = startRow;\n      let foundEmpty = false;\n      \n      // Check up to 10 rows below for an empty cell\n      for (let i = 0; i < 10; i++) {\n        const checkCell = worksheet.getCell(startRow + i, column);\n        checkCell.load(\"values\");\n        await context.sync();\n        \n        const cellValue = checkCell.values[0][0];\n        if (cellValue === null || cellValue === undefined || cellValue === '') {\n          targetRow = startRow + i;\n          foundEmpty = true;\n          break;\n        }\n      }\n      \n      // If no empty cell found in the next 10 rows, use the immediate next row\n      if (!foundEmpty) {\n        targetRow = startRow;\n      }\n      \n      targetCell = worksheet.getCell(targetRow, column);\n    }\n    \n    targetCell.formulas = [[sumFormula]];\n    await context.sync();\n    \n    targetCell.load([\"values\", \"address\"]);\n    await context.sync();\n    \n    return {\n      success: true,\n      message: `${targetCell.address}에 합계를 계산했습니다: ${formatNumber(targetCell.values[0][0])}`,\n      value: targetCell.values[0][0]\n    };\n  }\n}\n\n// Helper function to get headers\nasync function getHeaders(context) {\n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  const usedRange = worksheet.getUsedRange();\n  \n  if (!usedRange) {\n    return [];\n  }\n  \n  usedRange.load([\"values\", \"columnCount\"]);\n  await context.sync();\n  \n  const headers = [];\n  const headerRow = usedRange.values[0];\n  \n  if (headerRow) {\n    for (let i = 0; i < headerRow.length; i++) {\n      headers.push({\n        column: i + 1,\n        columnLetter: getColumnLetter(i),\n        label: headerRow[i] ? headerRow[i].toString() : ''\n      });\n    }\n  }\n  \n  return headers;\n}\n\n// Calculate average\nasync function executeAverage(context, params) {\n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  let sourceRange;\n  let rangeDescription = '';\n  let averageFormula = '';\n  \n  try {\n    // Handle different average types\n    if (params.averageType === 'column') {\n      if (params.column) {\n        // Column specified by letter (e.g., \"C\")\n        const usedRange = worksheet.getUsedRange();\n        if (!usedRange) {\n          return { success: false, error: '데이터가 없습니다.' };\n        }\n        \n        usedRange.load([\"rowCount\", \"columnCount\"]);\n        await context.sync();\n        \n        const columnIndex = params.column.charCodeAt(0) - 65;\n        if (columnIndex < 0 || columnIndex >= usedRange.columnCount) {\n          return { success: false, error: '유효하지 않은 열입니다.' };\n        }\n        \n        // Get column data starting from row 2 (skip header)\n        if (usedRange.rowCount > 1) {\n          sourceRange = worksheet.getRangeByIndexes(1, columnIndex, usedRange.rowCount - 1, 1);\n          rangeDescription = `${params.column}열`;\n        } else {\n          return { success: false, error: '평균을 계산할 데이터가 없습니다.' };\n        }\n        \n        sourceRange.load([\"address\"]);\n        await context.sync();\n        averageFormula = `=AVERAGE(${sourceRange.address})`;\n        \n      } else if (params.columnName) {\n        // Check if columnName is a column letter reference (like \"E\", \"AA\", \"ABC\")\n        if (params.columnName.match(/^[A-Z]+$/)) {\n          // Direct column letter reference\n          const columnLetter = params.columnName;\n          // Convert column letter(s) to index (A=0, B=1, ..., Z=25, AA=26, AB=27, ...)\n          let columnIndex = 0;\n          for (let i = 0; i < columnLetter.length; i++) {\n            columnIndex = columnIndex * 26 + (columnLetter.charCodeAt(i) - 64);\n          }\n          columnIndex--; // Convert to 0-based index\n          \n          const usedRange = worksheet.getUsedRange();\n          if (!usedRange) {\n            return { success: false, error: '데이터가 없습니다.' };\n          }\n          \n          usedRange.load([\"rowCount\", \"columnCount\"]);\n          await context.sync();\n          \n          if (columnIndex < 0 || columnIndex >= usedRange.columnCount) {\n            return { success: false, error: '유효하지 않은 열입니다.' };\n          }\n          \n          // Get column data starting from row 2 (skip header)\n          if (usedRange.rowCount > 1) {\n            sourceRange = worksheet.getRangeByIndexes(1, columnIndex, usedRange.rowCount - 1, 1);\n            rangeDescription = `${params.columnName}열`;\n          } else {\n            return { success: false, error: '평균을 계산할 데이터가 없습니다.' };\n          }\n          \n          sourceRange.load([\"address\"]);\n          await context.sync();\n          averageFormula = `=AVERAGE(${sourceRange.address})`;\n        } else {\n          // Column specified by header name\n          const headers = await getHeaders(context);\n          const columnInfo = headers.find(h => h.label === params.columnName);\n          \n          if (!columnInfo) {\n            return { success: false, error: `\"${params.columnName}\" 열을 찾을 수 없습니다.` };\n          }\n          \n          const usedRange = worksheet.getUsedRange();\n          usedRange.load([\"rowCount\"]);\n          await context.sync();\n          \n          if (usedRange.rowCount > 1) {\n            sourceRange = worksheet.getRangeByIndexes(1, columnInfo.column - 1, usedRange.rowCount - 1, 1);\n            rangeDescription = `\"${params.columnName}\" 열`;\n          } else {\n            return { success: false, error: '평균을 계산할 데이터가 없습니다.' };\n          }\n          \n          sourceRange.load([\"address\"]);\n          await context.sync();\n          averageFormula = `=AVERAGE(${sourceRange.address})`;\n        }\n      }\n    } else if (params.averageType === 'row') {\n      // Row average (e.g., \"3행 평균\")\n      const usedRange = worksheet.getUsedRange();\n      if (!usedRange) {\n        return { success: false, error: '데이터가 없습니다.' };\n      }\n      \n      usedRange.load([\"rowCount\", \"columnCount\"]);\n      await context.sync();\n      \n      const rowIndex = params.row - 1; // Convert to 0-based\n      if (rowIndex < 0 || rowIndex >= usedRange.rowCount) {\n        return { success: false, error: '유효하지 않은 행입니다.' };\n      }\n      \n      // Get entire row data\n      sourceRange = worksheet.getRangeByIndexes(rowIndex, 0, 1, usedRange.columnCount);\n      rangeDescription = `${params.row}행`;\n      \n      sourceRange.load([\"address\", \"rowIndex\", \"columnIndex\", \"columnCount\"]);\n      await context.sync();\n      averageFormula = `=AVERAGE(${sourceRange.address})`;\n      \n    } else if (params.sourceRange) {\n      // Specific range (e.g., \"C1:C100\")\n      sourceRange = worksheet.getRange(params.sourceRange);\n      rangeDescription = params.sourceRange;\n      \n      sourceRange.load([\"address\"]);\n      await context.sync();\n      averageFormula = `=AVERAGE(${sourceRange.address})`;\n      \n    } else {\n      // Default: use selected range(s) - handle multiple selections\n      try {\n        // Try to get multiple selected ranges (for non-contiguous selections)\n        const selectedRanges = context.workbook.getSelectedRanges();\n        selectedRanges.load([\"areas\", \"areaCount\"]);\n        await context.sync();\n        \n        if (selectedRanges.areaCount > 1) {\n          // Multiple non-contiguous ranges selected\n          const rangeAddresses = [];\n          \n          for (let i = 0; i < selectedRanges.areas.items.length; i++) {\n            const area = selectedRanges.areas.items[i];\n            area.load(\"address\");\n          }\n          await context.sync();\n          \n          for (let i = 0; i < selectedRanges.areas.items.length; i++) {\n            rangeAddresses.push(selectedRanges.areas.items[i].address);\n          }\n          \n          averageFormula = `=AVERAGE(${rangeAddresses.join(',')})`;\n          rangeDescription = '선택한 셀';\n          \n          // Use the first selected range for positioning\n          sourceRange = selectedRanges.areas.items[0];\n          sourceRange.load([\"columnIndex\", \"rowIndex\", \"rowCount\", \"columnCount\"]);\n          await context.sync();\n          \n        } else {\n          // Single contiguous range\n          sourceRange = context.workbook.getSelectedRange();\n          rangeDescription = '선택한 범위';\n          \n          sourceRange.load([\"columnIndex\", \"rowIndex\", \"rowCount\", \"columnCount\", \"address\"]);\n          await context.sync();\n          averageFormula = `=AVERAGE(${sourceRange.address})`;\n        }\n        \n      } catch (error) {\n        console.log('Error getting selected ranges for average, trying fallback:', error);\n        // For non-contiguous selections, getSelectedRange() fails\n        try {\n          const selectedRanges = context.workbook.getSelectedRanges();\n          selectedRanges.load([\"areas\", \"areaCount\"]);\n          await context.sync();\n          \n          if (selectedRanges.areas.items.length > 0) {\n            const rangeAddresses = [];\n            for (let i = 0; i < selectedRanges.areas.items.length; i++) {\n              const area = selectedRanges.areas.items[i];\n              area.load(\"address\");\n            }\n            await context.sync();\n            \n            for (let i = 0; i < selectedRanges.areas.items.length; i++) {\n              rangeAddresses.push(selectedRanges.areas.items[i].address);\n            }\n            \n            averageFormula = `=AVERAGE(${rangeAddresses.join(',')})`;\n            rangeDescription = '선택한 셀';\n            sourceRange = selectedRanges.areas.items[0];\n            sourceRange.load([\"columnIndex\", \"rowIndex\", \"rowCount\", \"columnCount\"]);\n            await context.sync();\n          } else {\n            throw new Error('No ranges selected');\n          }\n        } catch (fallbackError) {\n          console.error('Average fallback also failed:', fallbackError);\n          return { success: false, error: '선택한 범위를 처리할 수 없습니다. 연속된 범위를 선택해주세요.' };\n        }\n      }\n    }\n    \n    // Load sourceRange properties before using them\n    sourceRange.load([\"columnIndex\", \"rowIndex\", \"rowCount\", \"columnCount\"]);\n    await context.sync();\n    \n    // Determine where to place the result\n    let targetCell;\n    if (params.targetCell) {\n      targetCell = worksheet.getRange(params.targetCell);\n    } else if (params.averageType === 'row') {\n      // For row average, place result at the end of the row\n      const lastColumn = sourceRange.columnIndex + sourceRange.columnCount;\n      targetCell = worksheet.getCell(sourceRange.rowIndex, lastColumn);\n    } else {\n      // For column average or range, find first empty cell below the range\n      const column = sourceRange.columnIndex;\n      const startRow = sourceRange.rowIndex + sourceRange.rowCount;\n      \n      // Find the first empty cell below the selected range\n      let targetRow = startRow;\n      let foundEmpty = false;\n      \n      // Check up to 10 rows below for an empty cell\n      for (let i = 0; i < 10; i++) {\n        const checkCell = worksheet.getCell(startRow + i, column);\n        checkCell.load(\"values\");\n        await context.sync();\n        \n        const cellValue = checkCell.values[0][0];\n        if (cellValue === null || cellValue === undefined || cellValue === '') {\n          targetRow = startRow + i;\n          foundEmpty = true;\n          break;\n        }\n      }\n      \n      // If no empty cell found in the next 10 rows, use the immediate next row\n      if (!foundEmpty) {\n        targetRow = startRow;\n      }\n      \n      targetCell = worksheet.getCell(targetRow, column);\n    }\n    \n    // Apply AVERAGE formula\n    targetCell.formulas = [[averageFormula]];\n    targetCell.numberFormat = [[\"#,##0.00\"]]; // Format as number with 2 decimal places\n    await context.sync();\n    \n    targetCell.load([\"values\", \"address\"]);\n    await context.sync();\n    \n    return {\n      success: true,\n      message: `${rangeDescription}의 평균을 ${targetCell.address}에 계산했습니다: ${formatNumber(targetCell.values[0][0])}`,\n      value: targetCell.values[0][0]\n    };\n    \n  } catch (error) {\n    console.error('Error in executeAverage:', error);\n    return {\n      success: false,\n      error: `평균 계산 중 오류 발생: ${error.message}`\n    };\n  }\n}\n\n// Count cells\nasync function executeCount(context, params) {\n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  const sourceRange = params.sourceRange ? worksheet.getRange(params.sourceRange) : context.workbook.getSelectedRange();\n  \n  sourceRange.load([\"address\"]);\n  await context.sync();\n  \n  let formula;\n  if (params.countType === 'countif' && params.condition !== undefined) {\n    let criteria;\n    if (params.operator === 'contains') {\n      criteria = `\"*${params.condition}*\"`;\n    } else if (params.operator === 'equals') {\n      criteria = typeof params.condition === 'string' ? `\"${params.condition}\"` : params.condition;\n    } else if (params.operator && ['>', '<', '>=', '<=', '<>'].includes(params.operator)) {\n      criteria = `\"${params.operator}${params.condition}\"`;\n    } else {\n      if (typeof params.condition === 'string') {\n        criteria = `\"*${params.condition}*\"`;\n      } else {\n        criteria = params.condition;\n      }\n    }\n    formula = `=COUNTIF(${sourceRange.address}, ${criteria})`;\n  } else if (params.countType === 'counta') {\n    formula = `=COUNTA(${sourceRange.address})`;\n  } else {\n    formula = `=COUNT(${sourceRange.address})`;\n  }\n  \n  let resultCell;\n  if (params.targetCell) {\n    resultCell = worksheet.getRange(params.targetCell);\n  } else {\n    const usedRange = worksheet.getUsedRange();\n    await context.sync();\n    \n    const lastRow = usedRange ? usedRange.rowCount : 1;\n    const lastCol = usedRange ? usedRange.columnCount : 1;\n    resultCell = worksheet.getCell(lastRow, lastCol);\n  }\n  \n  resultCell.formulas = [[formula]];\n  await context.sync();\n  \n  resultCell.load(\"values\");\n  await context.sync();\n  \n  return {\n    success: true,\n    message: params.countType === 'countif' ? \n      `\"${params.condition}\"을(를) 포함하는 셀의 개수: ${formatNumber(resultCell.values[0][0])}개` :\n      `개수를 계산했습니다: ${formatNumber(resultCell.values[0][0])}개`,\n    value: resultCell.values[0][0]\n  };\n}\n\n// Format cells\nasync function executeFormat(context, params) {\n  console.log('executeFormat called with params:', params);\n  \n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  let ranges = [];\n  \n  if (params.range) {\n    ranges.push(worksheet.getRange(params.range));\n  } else {\n    // Handle multiple selections\n    try {\n      const selectedRanges = context.workbook.getSelectedRanges();\n      selectedRanges.load([\"areas\", \"areaCount\"]);\n      await context.sync();\n      \n      if (selectedRanges.areaCount > 1) {\n        // Multiple non-contiguous ranges selected\n        for (let i = 0; i < selectedRanges.areas.items.length; i++) {\n          ranges.push(selectedRanges.areas.items[i]);\n        }\n      } else {\n        // Single contiguous range\n        ranges.push(context.workbook.getSelectedRange());\n      }\n    } catch (error) {\n      console.log('Error getting selected ranges for format:', error);\n      return { success: false, error: '선택한 범위를 처리할 수 없습니다. 연속된 범위를 선택해주세요.' };\n    }\n  }\n  \n  // Load format for all ranges\n  for (const range of ranges) {\n    range.load(\"format\");\n  }\n  await context.sync();\n  \n  // Apply formatting to all ranges\n  for (const range of ranges) {\n    if (params.bold !== undefined) {\n      range.format.font.bold = params.bold;\n    }\n    \n    if (params.italic !== undefined) {\n      range.format.font.italic = params.italic;\n    }\n    \n    if (params.fontSize) {\n      range.format.font.size = params.fontSize;\n    }\n    \n    if (params.fontColor) {\n      range.format.font.color = params.fontColor;\n    }\n    \n    if (params.backgroundColor) {\n      range.format.fill.color = params.backgroundColor;\n    }\n    \n    if (params.horizontalAlignment) {\n      range.format.horizontalAlignment = params.horizontalAlignment === 'left' ? 'Left' :\n                                       params.horizontalAlignment === 'center' ? 'Center' :\n                                       params.horizontalAlignment === 'right' ? 'Right' : 'General';\n    }\n    \n    if (params.numberFormat) {\n      // Handle specific format types\n      let format = params.numberFormat;\n      if (format === 'number' || format === '숫자') {\n        format = '#,##0';\n      } else if (format === 'currency' || format === '원화' || format === 'won' || format === '통화') {\n        format = '₩#,##0';\n      } else if (format === 'currency_decimal' || format === '원화_소수') {\n        format = '₩#,##0.00';\n      } else if (format === 'percentage' || format === '퍼센트' || format === '백분율') {\n        format = '0%';\n      } else if (format === 'percentage_decimal' || format === '퍼센트_소수') {\n        format = '0.00%';\n      } else if (format === 'date' || format === '날짜') {\n        format = 'yyyy-mm-dd';\n      } else if (format === 'time' || format === '시간') {\n        format = 'hh:mm:ss';\n      } else if (format === 'text' || format === '텍스트') {\n        format = '@';\n      } else if (format === 'general' || format === '일반') {\n        format = 'General';\n      }\n      \n      // Set number format for the range\n      range.numberFormat = format;\n    }\n  }\n  \n  await context.sync();\n  \n  return {\n    success: true,\n    message: '서식이 적용되었습니다.'\n  };\n}\n\n// Sort data\nasync function executeSort(context, params) {\n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  const range = params.range ? worksheet.getRange(params.range) : worksheet.getUsedRange();\n  \n  const column = params.column || 1;\n  const ascending = params.ascending !== undefined ? params.ascending : true;\n  \n  range.sort.apply([\n    {\n      key: column - 1, // Excel API uses 0-based index\n      ascending: ascending\n    }\n  ]);\n  \n  await context.sync();\n  \n  const columnLetter = getColumnLetter(column - 1);\n  \n  return {\n    success: true,\n    message: `${columnLetter}열 기준으로 ${ascending ? '오름차순' : '내림차순'} 정렬되었습니다.`\n  };\n}\n\n// Create chart\nasync function executeChart(context, params) {\n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  let sourceData;\n  let dataAddress = '';\n  \n  console.log('Creating chart with params:', params);\n  \n  if (params.range) {\n    sourceData = worksheet.getRange(params.range);\n    sourceData.load([\"address\", \"values\"]);\n    await context.sync();\n    dataAddress = sourceData.address;\n  } else {\n    // Handle multiple selections for chart data\n    try {\n      const selectedRanges = context.workbook.getSelectedRanges();\n      selectedRanges.load([\"areas\", \"areaCount\"]);\n      await context.sync();\n      \n      if (selectedRanges.areaCount > 1) {\n        // For charts with multiple non-contiguous ranges, create a temporary data range\n        console.log('Multiple ranges selected for chart, need to consolidate data');\n        \n        // Collect all selected ranges\n        const allRanges = [];\n        for (let i = 0; i < selectedRanges.areas.items.length; i++) {\n          const area = selectedRanges.areas.items[i];\n          area.load([\"address\", \"values\", \"rowIndex\", \"columnIndex\"]);\n          allRanges.push(area);\n        }\n        await context.sync();\n        \n        // Find an empty area to create temporary consolidated data\n        const usedRange = worksheet.getUsedRangeOrNullObject();\n        usedRange.load([\"isNullObject\", \"rowCount\", \"columnCount\"]);\n        await context.sync();\n        \n        const tempStartRow = !usedRange.isNullObject ? usedRange.rowCount + 2 : 1;\n        const tempStartCol = 0;\n        \n        // Consolidate data into a contiguous range - handle individual cells\n        const consolidatedData = [];\n        let maxColumns = 1;\n        \n        for (const range of allRanges) {\n          if (range.values && range.values.length > 0) {\n            // Each range might be a single cell or a range of cells\n            for (const row of range.values) {\n              consolidatedData.push(row);\n              maxColumns = Math.max(maxColumns, row.length);\n            }\n          }\n        }\n        \n        // Write consolidated data to temporary location\n        if (consolidatedData.length > 0) {\n          console.log('Consolidated data:', consolidatedData);\n          console.log('Number of ranges:', allRanges.length);\n          \n          try {\n            // For individual cells, reorganize data for chart\n            if (consolidatedData.every(row => row.length === 1)) {\n              // All are single cells - create label-value pairs\n              const reorganizedData = [];\n              for (let i = 0; i < consolidatedData.length; i++) {\n                const value = consolidatedData[i][0];\n                // Skip empty cells\n                if (value !== null && value !== undefined && value !== '') {\n                  reorganizedData.push([`Item ${i+1}`, value]);\n                }\n              }\n              \n              if (reorganizedData.length === 0) {\n                return { success: false, error: '선택한 셀에 유효한 데이터가 없습니다.' };\n              }\n              \n              console.log('Reorganized data for chart:', reorganizedData);\n              \n              const tempRange = worksheet.getRangeByIndexes(\n                tempStartRow, \n                tempStartCol, \n                reorganizedData.length, \n                2  // Always 2 columns for label-value pairs\n              );\n              \n              tempRange.values = reorganizedData;\n              await context.sync();\n              \n              sourceData = tempRange;\n            } else {\n              // Mixed or multi-column data - use as-is\n              const tempRange = worksheet.getRangeByIndexes(\n                tempStartRow, \n                tempStartCol, \n                consolidatedData.length, \n                maxColumns\n              );\n              \n              tempRange.values = consolidatedData;\n              await context.sync();\n              \n              sourceData = tempRange;\n            }\n            \n            sourceData.load([\"address\", \"values\", \"rowCount\", \"columnCount\"]);\n            await context.sync();\n            \n            console.log('Temp range created:', {\n              address: sourceData.address,\n              rowCount: sourceData.rowCount,\n              columnCount: sourceData.columnCount,\n              firstValue: sourceData.values[0]\n            });\n            \n            dataAddress = sourceData.address;\n          } catch (error) {\n            console.error('Error creating temporary range:', error);\n            return { success: false, error: '임시 데이터 범위 생성 중 오류가 발생했습니다.' };\n          }\n        } else {\n          return { success: false, error: '선택한 셀에 데이터가 없습니다.' };\n        }\n      } else {\n        // Single contiguous range\n        sourceData = context.workbook.getSelectedRange();\n        sourceData.load([\"address\", \"values\"]);\n        await context.sync();\n        dataAddress = sourceData.address;\n      }\n    } catch (error) {\n      console.log('Error getting selected ranges for chart:', error);\n      return { success: false, error: '선택한 범위를 처리할 수 없습니다. 연속된 범위를 선택해주세요.' };\n    }\n  }\n  \n  console.log('Chart data range:', dataAddress);\n  \n  // Determine chart type\n  let chartType;\n  if (params.chartType === 'bar' || params.chartType === '막대') {\n    chartType = Excel.ChartType.columnClustered;\n  } else if (params.chartType === 'line' || params.chartType === '선') {\n    chartType = Excel.ChartType.line;\n  } else if (params.chartType === 'pie' || params.chartType === '원') {\n    chartType = Excel.ChartType.pie;\n  } else if (params.chartType === 'scatter' || params.chartType === '분산형') {\n    chartType = Excel.ChartType.xyscatter;\n  } else {\n    // Default to column chart\n    chartType = Excel.ChartType.columnClustered;\n  }\n  \n  try {\n    // Validate source data before creating chart\n    if (!sourceData) {\n      return { success: false, error: '차트 데이터가 없습니다.' };\n    }\n    \n    // Create the chart with error handling\n    console.log('Creating chart with type:', chartType);\n    console.log('Source data address:', dataAddress);\n    \n    const chart = worksheet.charts.add(chartType, sourceData, Excel.ChartSeriesBy.auto);\n    \n    // Set chart properties\n    chart.title.text = params.title || '차트';\n    chart.height = 300;\n    chart.width = 400;\n    \n    // Position the chart\n    chart.left = params.offsetX || 100;\n    chart.top = params.offsetY || 100;\n    \n    // Set legend position\n    chart.legend.position = Excel.ChartLegendPosition.bottom;\n    chart.legend.visible = true;\n    \n    await context.sync();\n    \n    console.log('Chart created successfully');\n  } catch (chartError) {\n    console.error('Error creating chart:', chartError);\n    console.error('Chart error details:', {\n      message: chartError.message,\n      stack: chartError.stack,\n      chartType: chartType,\n      dataAddress: dataAddress\n    });\n    \n    // Try a simpler chart type as fallback\n    if (chartType !== Excel.ChartType.columnClustered) {\n      console.log('Trying fallback to column chart...');\n      try {\n        const chart = worksheet.charts.add(Excel.ChartType.columnClustered, sourceData, Excel.ChartSeriesBy.auto);\n        chart.title.text = params.title || '차트';\n        chart.height = 300;\n        chart.width = 400;\n        chart.left = params.offsetX || 100;\n        chart.top = params.offsetY || 100;\n        await context.sync();\n        \n        return {\n          success: true,\n          message: `${dataAddress} 범위로 막대 차트가 생성되었습니다. (원래 요청한 차트 타입이 지원되지 않아 막대 차트로 대체되었습니다.)`\n        };\n      } catch (fallbackError) {\n        console.error('Fallback chart also failed:', fallbackError);\n        return { success: false, error: '차트 생성에 실패했습니다. 데이터 형식을 확인해주세요.' };\n      }\n    }\n    \n    return { success: false, error: `차트 생성 중 오류: ${chartError.message}` };\n  }\n  \n  return {\n    success: true,\n    message: `${dataAddress} 범위로 ${params.chartType || '막대'} 차트가 생성되었습니다.`\n  };\n}\n\n// Add conditional formatting\nasync function executeConditionalFormat(context, params) {\n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  let ranges = [];\n  \n  console.log('Applying conditional format with params:', params);\n  \n  if (params.range) {\n    ranges.push(worksheet.getRange(params.range));\n  } else {\n    // If no range specified, use the entire used range of the worksheet\n    console.log('No range specified for conditional format, using entire sheet');\n    const usedRange = worksheet.getUsedRangeOrNullObject();\n    usedRange.load(\"isNullObject\");\n    await context.sync();\n    \n    if (!usedRange.isNullObject) {\n      // Use the entire used range\n      ranges.push(usedRange);\n    } else {\n      // If no used range, apply to a large default range\n      // Excel will optimize this automatically\n      const defaultRange = worksheet.getRange(\"A1:XFD1048576\");\n      ranges.push(defaultRange);\n    }\n  }\n  \n  // Apply conditional formatting to all ranges\n  try {\n    for (const range of ranges) {\n      // Load range to ensure it's valid\n      range.load(\"address\");\n      await context.sync();\n      \n      console.log('Applying conditional format to range:', range.address);\n      \n      // Simply apply conditional format to the entire range\n      // Excel will automatically skip non-numeric cells for numeric comparisons\n      const conditionalFormat = range.conditionalFormats.add(Excel.ConditionalFormatType.cellValue);\n      \n      // Set the rule based on condition\n      if (params.condition === 'greater_than' && params.value !== undefined) {\n        conditionalFormat.cellValue.rule = {\n          formula1: params.value.toString(),\n          operator: Excel.ConditionalCellValueOperator.greaterThan\n        };\n      } else if (params.condition === 'less_than' && params.value !== undefined) {\n        conditionalFormat.cellValue.rule = {\n          formula1: params.value.toString(),\n          operator: Excel.ConditionalCellValueOperator.lessThan\n        };\n      } else if (params.condition === 'equal_to' && params.value !== undefined) {\n        conditionalFormat.cellValue.rule = {\n          formula1: params.value.toString(),\n          operator: Excel.ConditionalCellValueOperator.equalTo\n        };\n      } else if (params.condition === 'text_contains' && params.value !== undefined) {\n        conditionalFormat.cellValue.rule = {\n          formula1: params.value.toString(),\n          operator: Excel.ConditionalCellValueOperator.containsText\n        };\n      } else {\n        // Default to greater than\n        conditionalFormat.cellValue.rule = {\n          formula1: (params.value || 0).toString(),\n          operator: Excel.ConditionalCellValueOperator.greaterThan\n        };\n      }\n      \n      // Set the format\n      conditionalFormat.cellValue.format.fill.color = params.backgroundColor || \"#00FF00\";\n      if (params.fontColor) {\n        conditionalFormat.cellValue.format.font.color = params.fontColor;\n      }\n      if (params.bold) {\n        conditionalFormat.cellValue.format.font.bold = true;\n      }\n    }\n  } catch (formatError) {\n    console.error('Error applying conditional format:', formatError);\n    return {\n      success: false,\n      error: `조건부 서식 적용 중 오류: ${formatError.message}`\n    };\n  }\n  \n  await context.sync();\n  \n  return {\n    success: true,\n    message: `조건부 서식이 적용되었습니다. (${params.condition} ${params.value || ''})`\n  };\n}\n\n// Translate column contents\nasync function executeTranslate(context, params) {\n  console.log('executeTranslate called with params:', params);\n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  \n  if (!params.targetLanguage) {\n    return { success: false, error: '대상 언어를 지정해주세요.' };\n  }\n  \n  let sourceRange;\n  let targetColumnIndex;\n  \n  if (params.sourceRange) {\n    // Handle column ranges like \"C:C\" by intersecting with used range\n    if (params.sourceRange.match(/^[A-Z]+:[A-Z]+$/)) {\n      console.log('Handling column range:', params.sourceRange);\n      const usedRange = worksheet.getUsedRange();\n      if (!usedRange) {\n        return { success: false, error: '번역할 데이터가 없습니다.' };\n      }\n      \n      usedRange.load([\"rowCount\", \"columnCount\"]);\n      await context.sync();\n      \n      console.log('Used range:', {\n        rowCount: usedRange.rowCount,\n        columnCount: usedRange.columnCount\n      });\n      \n      // Get the column letter from the range (e.g., \"C\" from \"C:C\")\n      const columnLetter = params.sourceRange.split(':')[0];\n      const columnIndex = columnLetter.charCodeAt(0) - 65;\n      \n      // Get only the used portion of the column, starting from row 2 (skip header)\n      if (usedRange.rowCount > 1) {\n        sourceRange = worksheet.getRangeByIndexes(1, columnIndex, usedRange.rowCount - 1, 1);\n      } else {\n        return { success: false, error: '번역할 데이터가 없습니다.' };\n      }\n      \n      // Handle target range similarly\n      if (params.targetRange && params.targetRange.match(/^[A-Z]+:[A-Z]+$/)) {\n        const targetColumnLetter = params.targetRange.split(':')[0];\n        targetColumnIndex = targetColumnLetter.charCodeAt(0) - 65;\n        console.log('Target column calculation:', {\n          targetRange: params.targetRange,\n          targetColumnLetter,\n          targetColumnIndex\n        });\n      } else {\n        // If no target specified, use next column\n        targetColumnIndex = columnIndex + 1;\n        console.log('Using next column as target:', {\n          sourceColumnIndex: columnIndex,\n          targetColumnIndex\n        });\n      }\n    } else {\n      // Handle specific ranges like \"B2:B40\"\n      sourceRange = worksheet.getRange(params.sourceRange);\n      \n      // Parse target column if specified\n      if (params.targetRange) {\n        if (params.targetRange.match(/^[A-Z]+:[A-Z]+$/)) {\n          // Extract column letter from targetRange like \"E:E\"\n          const targetColumnLetter = params.targetRange.split(':')[0];\n          targetColumnIndex = targetColumnLetter.charCodeAt(0) - 65;\n          console.log('Target column parsed from targetRange:', {\n            targetRange: params.targetRange,\n            targetColumnLetter,\n            targetColumnIndex\n          });\n        }\n      }\n    }\n  } else if (params.sourceColumn) {\n    const columnIndex = params.sourceColumn.charCodeAt(0) - 65;\n    const usedRange = worksheet.getUsedRange();\n    usedRange.load([\"rowCount\"]);\n    await context.sync();\n    \n    if (usedRange.rowCount > 1) {\n      sourceRange = worksheet.getRangeByIndexes(1, columnIndex, usedRange.rowCount - 1, 1);\n    } else {\n      return { success: false, error: '번역할 데이터가 없습니다.' };\n    }\n    \n    targetColumnIndex = params.targetColumn === 'next' ? columnIndex + 1 :\n                       params.targetColumn ? params.targetColumn.charCodeAt(0) - 65 : columnIndex + 1;\n  } else {\n    return { success: false, error: '번역할 열을 지정해주세요.' };\n  }\n  \n  sourceRange.load([\"values\", \"rowIndex\", \"columnIndex\", \"rowCount\"]);\n  await context.sync();\n  \n  console.log('Source range loaded:', {\n    rowIndex: sourceRange.rowIndex,\n    columnIndex: sourceRange.columnIndex,\n    rowCount: sourceRange.rowCount,\n    values: sourceRange.values ? `${sourceRange.values.length} rows` : 'null'\n  });\n  \n  const sourceValues = sourceRange.values;\n  if (!sourceValues || sourceValues.length === 0) {\n    return { success: false, error: '번역할 데이터가 없습니다.' };\n  }\n  \n  const translations = [];\n  const batchSize = 20;\n  \n  // Translate in batches\n  for (let i = 0; i < sourceValues.length; i += batchSize) {\n    const batch = sourceValues.slice(i, Math.min(i + batchSize, sourceValues.length));\n    const batchTexts = batch.map(row => row[0]).filter(text => text);\n    \n    if (batchTexts.length > 0) {\n      const translatedBatch = await translateBatch(batchTexts, params.targetLanguage, params.sourceLanguage);\n      \n      // Check if translatedBatch is valid\n      if (!translatedBatch || !Array.isArray(translatedBatch)) {\n        console.error('Invalid translation batch received:', translatedBatch);\n        // Mark all as translation failed\n        for (let j = 0; j < batch.length; j++) {\n          if (batch[j][0]) {\n            translations.push([{ text: '번역 실패', isError: true }]);\n          } else {\n            translations.push([{ text: '', isError: false }]);\n          }\n        }\n      } else {\n        console.log('Processing translation batch:', {\n          batchLength: batch.length,\n          translatedBatchLength: translatedBatch.length,\n          sampleTranslations: translatedBatch.slice(0, 3),\n          firstTranslation: translatedBatch[0],\n          translationType: typeof translatedBatch[0],\n          rawData: JSON.stringify(translatedBatch.slice(0, 3))\n        });\n        \n        let translationIndex = 0;\n        for (let j = 0; j < batch.length; j++) {\n          if (batch[j][0]) {\n            const translatedText = translatedBatch[translationIndex] || '';\n            // Check if translation is empty or failed\n            if (!translatedText || translatedText.trim() === '') {\n              translations.push([{ text: '번역 실패', isError: true }]);\n            } else {\n              translations.push([{ text: translatedText, isError: false }]);\n            }\n            if (j < 3) {\n              console.log(`Translation ${j}: \"${batch[j][0]}\" -> \"${translatedText}\"`);\n            }\n            translationIndex++;\n          } else {\n            // Keep empty rows as empty\n            translations.push([{ text: '', isError: false }]);\n          }\n        }\n      }\n    } else {\n      for (let j = 0; j < batch.length; j++) {\n        translations.push([{ text: '', isError: false }]);\n      }\n    }\n    \n    // Show progress\n    if (i % 100 === 0 && i > 0) {\n      showStatus(`번역 중... ${Math.round((i / sourceValues.length) * 100)}%`, 'info');\n    }\n  }\n  \n  // Write translations\n  console.log('Writing translations to target column:', {\n    rowIndex: sourceRange.rowIndex,\n    targetColumnIndex: targetColumnIndex || sourceRange.columnIndex + 1,\n    translationsCount: translations.length,\n    sampleTranslations: translations.slice(0, 3).map(t => t[0])\n  });\n  console.log('First 5 translations raw:', JSON.stringify(translations.slice(0, 5)));\n  console.log('Translation content check:', {\n    first: translations[0] ? translations[0][0] : 'null',\n    second: translations[1] ? translations[1][0] : 'null',\n    third: translations[2] ? translations[2][0] : 'null',\n    isEmpty: translations[0] && translations[0][0] === ''\n  });\n  \n  // DEBUG: Check if translations contain original text instead of translations\n  console.log('DEBUG: Comparing source and translations:');\n  for (let i = 0; i < Math.min(5, translations.length); i++) {\n    console.log(`  [${i}] Source: \"${sourceValues[i][0]}\" -> Translation: \"${translations[i][0]}\"`);\n  }\n  \n  // Ensure targetColumnIndex is set correctly\n  if (targetColumnIndex === undefined) {\n    // If no target column specified, use the next column after source\n    targetColumnIndex = sourceRange.columnIndex + 1;\n    console.log('No target column specified, using next column:', targetColumnIndex);\n  }\n  \n  const targetRange = worksheet.getRangeByIndexes(\n    sourceRange.rowIndex,\n    targetColumnIndex,\n    translations.length,\n    1\n  );\n  \n  targetRange.load([\"address\", \"values\"]);\n  await context.sync();\n  console.log('Target range address:', targetRange.address);\n  console.log('Existing target values (first 3):', targetRange.values.slice(0, 3));\n  \n  // Clear existing values first\n  targetRange.clear(Excel.ClearApplyTo.contents);\n  await context.sync();\n  console.log('Target range cleared');\n  \n  // Ensure translations are properly formatted as 2D array\n  console.log('Setting target range values:', {\n    translationsLength: translations.length,\n    firstTranslation: translations[0],\n    isArray: Array.isArray(translations),\n    is2DArray: Array.isArray(translations[0])\n  });\n  \n  // Process translations and prepare values\n  const stringTranslations = [];\n  const errorRows = [];\n  \n  for (let i = 0; i < translations.length; i++) {\n    const translation = translations[i][0];\n    if (translation && typeof translation === 'object') {\n      stringTranslations.push([translation.text]);\n      if (translation.isError) {\n        errorRows.push(i);\n      }\n    } else {\n      // Handle legacy format\n      stringTranslations.push([String(translation || '')]);\n    }\n  }\n  \n  console.log('String translations (first 3):', stringTranslations.slice(0, 3));\n  console.log('Error rows:', errorRows.length, 'rows marked as errors');\n  \n  // Set the values\n  targetRange.values = stringTranslations;\n  await context.sync();\n  \n  // Apply error styling to failed translations\n  if (errorRows.length > 0) {\n    for (const rowIndex of errorRows) {\n      const errorCell = targetRange.getCell(rowIndex, 0);\n      errorCell.format.fill.color = \"#FFE6E6\"; // Light red background\n      errorCell.format.font.color = \"#CC0000\"; // Dark red text\n      errorCell.format.font.bold = true;\n    }\n    await context.sync();\n  }\n  \n  console.log('Translations written to Excel with error styling applied');\n  \n  // Verify the values were actually written\n  targetRange.load([\"values\", \"text\", \"valueTypes\"]);\n  await context.sync();\n  console.log('Verification - Target range:', {\n    address: targetRange.address,\n    values: targetRange.values.slice(0, 3),\n    text: targetRange.text.slice(0, 3),\n    valueTypes: targetRange.valueTypes.slice(0, 3),\n    actualFirstValue: targetRange.values[0] ? targetRange.values[0][0] : 'null',\n    firstThreeValues: [\n      targetRange.values[0] ? targetRange.values[0][0] : 'empty',\n      targetRange.values[1] ? targetRange.values[1][0] : 'empty',\n      targetRange.values[2] ? targetRange.values[2][0] : 'empty'\n    ]\n  });\n  \n  // Try alternative method - set each cell individually for debugging\n  if (translations.length > 0) {\n    const isEmpty = !targetRange.values[0] || !targetRange.values[0][0] || targetRange.values[0][0] === '';\n    console.log('Checking if values are empty:', {\n      isEmpty,\n      firstValue: targetRange.values[0] ? targetRange.values[0][0] : 'null',\n      firstValueLength: targetRange.values[0] && targetRange.values[0][0] ? targetRange.values[0][0].length : 0\n    });\n    \n    if (isEmpty) {\n      console.log('Values not visible, trying individual cell approach...');\n      // Try setting just the first few cells individually\n      for (let i = 0; i < Math.min(3, translations.length); i++) {\n        const cellRow = sourceRange.rowIndex + i;\n        const cellCol = targetColumnIndex || sourceRange.columnIndex + 1;\n        const cell = worksheet.getCell(cellRow, cellCol);\n        const cellValue = stringTranslations[i][0];\n        \n        console.log(`Setting cell (${cellRow},${cellCol}) to: \"${cellValue}\"`);\n        cell.values = [[cellValue]];\n        \n        await context.sync();\n        \n        // Verify it was set\n        cell.load(\"values\");\n        await context.sync();\n        console.log(`Cell ${i} after setting:`, cell.values[0][0]);\n      }\n    }\n  }\n  \n  // Add header\n  const headerCell = worksheet.getCell(0, targetColumnIndex || sourceRange.columnIndex + 1);\n  const sourceHeaderCell = worksheet.getCell(0, sourceRange.columnIndex);\n  sourceHeaderCell.load(\"values\");\n  await context.sync();\n  \n  headerCell.values = [[`${sourceHeaderCell.values[0][0]} (${params.targetLanguage})`]];\n  await context.sync();\n  \n  return {\n    success: true,\n    message: `번역이 완료되었습니다. (${sourceValues.length}개 항목)`\n  };\n}\n\n// Translate a batch of texts through proxy\nasync function translateBatch(texts, targetLanguage, sourceLanguage) {\n  try {\n    console.log('translateBatch called with', texts.length, 'texts');\n    \n    // Get selected model and auth key\n    const selectedModel = localStorage.getItem(\"excel_addon_selected_model\") || \"gpt-4.1-nano-2025-04-14\";\n    const authKey = localStorage.getItem(\"excel_addon_auth_key\");\n    const authEmail = localStorage.getItem(\"excel_addon_auth_email\");\n    \n    // Only send auth info for premium model\n    const requestBody = {\n      command: `Translate these items to ${targetLanguage}: ${texts.join(', ')}`,\n      sheetContext: {\n        operation: 'translate_batch',\n        texts: texts,\n        targetLanguage: targetLanguage,\n        sourceLanguage: sourceLanguage\n      },\n      model: selectedModel,\n      clientType: 'excel' // Identify this as Excel client\n    };\n    \n    // Only add auth info if using premium model\n    if (selectedModel === \"gpt-4.1-2025-04-14\") {\n      requestBody.authKey = authKey;\n      requestBody.authEmail = authEmail;\n    }\n    \n    const response = await fetch(API_PROXY_URL, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(requestBody)\n    });\n    \n    console.log('Translation response status:', response.status);\n    \n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    \n    const result = await response.json();\n    console.log('Translation result:', result);\n    \n    if (result.success && result.data && result.data.translations) {\n      console.log('Translations received:', result.data.translations.length);\n      console.log('First 3 translations from API:', result.data.translations.slice(0, 3));\n      console.log('Raw translations data:', JSON.stringify(result.data.translations.slice(0, 5)));\n      return result.data.translations;\n    } else if (result.error) {\n      console.error('Translation API error:', result.error);\n      throw new Error(result.error);\n    } else {\n      console.error('Invalid translation response structure:', result);\n      throw new Error('번역 응답을 받을 수 없습니다.');\n    }\n  } catch (error) {\n    console.error('Translation error:', error);\n    return texts.map(() => '');\n  }\n}\n\n// Helper functions\nfunction getColumnLetter(columnIndex) {\n  let columnLetter = '';\n  let tempIndex = columnIndex;\n  \n  while (tempIndex >= 0) {\n    columnLetter = String.fromCharCode((tempIndex % 26) + 65) + columnLetter;\n    tempIndex = Math.floor(tempIndex / 26) - 1;\n  }\n  \n  return columnLetter;\n}\n\nfunction formatNumber(value) {\n  if (typeof value === 'number') {\n    if (Number.isInteger(value)) {\n      return value.toLocaleString('ko-KR');\n    } else {\n      return value.toLocaleString('ko-KR', { minimumFractionDigits: 0, maximumFractionDigits: 2 });\n    }\n  }\n  return value;\n}\n\nfunction showStatus(message, type) {\n  const status = document.getElementById('status');\n  status.textContent = message;\n  status.className = 'status-message ' + type;\n  status.style.display = 'block';\n  \n  if (window.statusTimeout) {\n    clearTimeout(window.statusTimeout);\n  }\n  \n  if (type === 'success') {\n    window.statusTimeout = setTimeout(() => {\n      status.style.display = 'none';\n    }, 5000);\n  }\n}\n\nfunction clearInput() {\n  document.getElementById('commandInput').value = '';\n  document.getElementById('status').style.display = 'none';\n}\n\nfunction setCommand(command) {\n  document.getElementById('commandInput').value = command;\n  document.getElementById('commandInput').focus();\n}\n\n// Auth modal functions\n// Update auth button based on authentication state\nfunction updateAuthButton() {\n  const authKey = localStorage.getItem(\"excel_addon_auth_key\");\n  const authEmail = localStorage.getItem(\"excel_addon_auth_email\");\n  const authButton = document.getElementById(\"authButton\");\n  \n  if (authKey && authEmail) {\n    authButton.textContent = \"인증 해제\";\n    authButton.classList.add(\"authenticated\");\n  } else {\n    authButton.textContent = \"인증\";\n    authButton.classList.remove(\"authenticated\");\n  }\n}\n\n// Handle auth button click based on state\nfunction handleAuthAction() {\n  const authKey = localStorage.getItem(\"excel_addon_auth_key\");\n  const authEmail = localStorage.getItem(\"excel_addon_auth_email\");\n  \n  if (authKey && authEmail) {\n    // Show deauth confirmation modal\n    showDeauthModal();\n  } else {\n    // Show auth modal\n    showAuthModal();\n  }\n}\n\n// Show deauth modal\nfunction showDeauthModal() {\n  document.getElementById(\"deauthModal\").style.display = \"block\";\n}\n\n// Hide deauth modal\nfunction hideDeauthModal() {\n  document.getElementById(\"deauthModal\").style.display = \"none\";\n}\n\n// Confirm deauth action\nfunction confirmDeauth() {\n  try {\n    console.log(\"confirmDeauth called\");\n    \n    // Clear auth data\n    localStorage.removeItem(\"excel_addon_auth_key\");\n    localStorage.removeItem(\"excel_addon_auth_email\");\n    \n    // Reset model to free version\n    document.getElementById(\"modelSelect\").value = \"gpt-4.1-nano-2025-04-14\";\n    \n    // Update button text\n    updateAuthButton();\n    \n    // Hide modal\n    hideDeauthModal();\n    \n    // Show success message\n    showStatus(\"인증이 해제되었습니다. 무료 모델로 전환됩니다.\", \"success\");\n  } catch (error) {\n    console.error(\"Error in confirmDeauth:\", error);\n    showStatus(\"인증 해제 중 오류가 발생했습니다.\", \"error\");\n  }\n}\n\n\nfunction showAuthModal() {\n  document.getElementById(\"authModal\").style.display = \"block\";\n}\n\nfunction hideAuthModal() {\n  document.getElementById(\"authModal\").style.display = \"none\";\n  document.getElementById(\"authEmailInput\").value = \"\";\n  document.getElementById(\"authKeyInput\").value = \"\";\n  document.getElementById(\"authStatus\").style.display = \"none\";\n}\n\nasync function submitAuthKey() {\n  const authKey = document.getElementById(\"authKeyInput\").value.trim();\n  const email = document.getElementById(\"authEmailInput\").value.trim();\n  \n  if (!email) {\n    showAuthStatus(\"이메일 주소를 입력해주세요.\", \"error\");\n    return;\n  }\n  \n  // 이메일 유효성 검사\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  if (!emailRegex.test(email)) {\n    showAuthStatus(\"올바른 이메일 형식이 아닙니다.\", \"error\");\n    return;\n  }\n  \n  if (!authKey) {\n    showAuthStatus(\"인증키를 입력해주세요.\", \"error\");\n    return;\n  }\n  \n  // Validate auth key format\n  if (authKey.length < 8) {\n    showAuthStatus(\"인증키는 최소 8자 이상이어야 합니다.\", \"error\");\n    return;\n  }\n  \n  // Test authentication with backend\n  showAuthStatus(\"인증을 확인하고 있습니다...\", \"info\");\n  \n  // Store temporarily for validation\n  localStorage.setItem(\"excel_addon_auth_key\", authKey);\n  localStorage.setItem(\"excel_addon_auth_email\", email);\n  \n  // Test with a simple API call that requires auth\n  try {\n    const response = await fetch(API_PROXY_URL, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        command: \"테스트\",\n        sheetContext: { \n          activeRange: { address: \"A1\" },\n          lastRow: 1,\n          lastColumn: 1,\n          headers: []\n        },\n        model: \"gpt-4.1-2025-04-14\",  // Force premium model to trigger auth check\n        authKey: authKey,\n        authEmail: email\n      })\n    });\n    \n    // Check response status first\n    if (response.status === 403) {\n      // Definitely invalid auth key\n      showAuthStatus(\"유효하지 않은 인증키입니다.\", \"error\");\n      localStorage.removeItem(\"excel_addon_auth_key\");\n      localStorage.removeItem(\"excel_addon_auth_email\");\n      return;\n    }\n    \n    const data = await response.json();\n    console.log('Auth validation response:', { status: response.status, data });\n    \n    // Check for any error in response or debug info\n    if (!data.success || data.error || data.debug) {\n      // Invalid auth key or other error\n      const errorMessage = data.error || (data.debug ? \"유효하지 않은 인증키입니다.\" : \"인증 오류가 발생했습니다.\");\n      showAuthStatus(errorMessage, \"error\");\n      localStorage.removeItem(\"excel_addon_auth_key\");\n      localStorage.removeItem(\"excel_addon_auth_email\");\n    } else {\n      // Valid auth key - command was processed successfully\n      showAuthStatus(\"인증이 완료되었습니다.\", \"success\");\n      \n      // Update auth button text\n      updateAuthButton();\n      \n      // Enable GPT-4.1 model\n      const modelSelect = document.getElementById(\"modelSelect\");\n      modelSelect.value = \"gpt-4.1-2025-04-14\";\n      handleModelChange();\n      \n      setTimeout(() => {\n        hideAuthModal();\n      }, 2000);\n    }\n  } catch (error) {\n    console.error(\"Auth validation error:\", error);\n    showAuthStatus(\"인증 확인 중 오류가 발생했습니다.\", \"error\");\n    localStorage.removeItem(\"excel_addon_auth_key\");\n    localStorage.removeItem(\"excel_addon_auth_email\");\n  }\n}\n\nfunction showAuthStatus(message, type) {\n  const statusDiv = document.getElementById(\"authStatus\");\n  statusDiv.textContent = message;\n  statusDiv.className = `auth-status ${type}`;\n  statusDiv.style.display = \"block\";\n}\n\nfunction showContactInfo() {\n  showStatus('문의/요청: support@wrks.ai', 'info');\n  // 상태 표시바로 스크롤\n  const statusElement = document.getElementById('status');\n  if (statusElement) {\n    statusElement.scrollIntoView({ behavior: 'smooth', block: 'center' });\n  }\n}\n\nfunction handleModelChange() {\n  const modelSelect = document.getElementById(\"modelSelect\");\n  const selectedModel = modelSelect.value;\n  \n  // Check if premium model is selected\n  if (selectedModel === \"gpt-4.1-2025-04-14\") {\n    const authKey = localStorage.getItem(\"excel_addon_auth_key\");\n    if (!authKey) {\n      showStatus(\"GPT-4.1 모델을 사용하려면 인증이 필요합니다.\", \"warning\");\n      modelSelect.value = \"gpt-4.1-nano-2025-04-14\"; // Reset to free model\n      showAuthModal();\n      return;\n    }\n  }\n  \n  // Store selected model\n  localStorage.setItem(\"excel_addon_selected_model\", selectedModel);\n  \n  // Show appropriate model name\n  let modelName;\n  if (selectedModel.includes(\"nano\")) {\n    modelName = \"GPT-4.1 nano\";\n  } else if (selectedModel.includes(\"mini\")) {\n    modelName = \"GPT-4.1 mini\";\n  } else {\n    modelName = \"GPT-4.1\";\n  }\n  showStatus(`모델이 ${modelName}로 변경되었습니다.`, \"success\");\n}\n\n// Test backend connection\nasync function testBackendConnection() {\n  try {\n    console.log('Testing backend connection...');\n    const testUrl = 'https://excel-addon-backend.vercel.app/api/test';\n    \n    const response = await fetch(testUrl, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({ test: true })\n    });\n    \n    console.log('Test response status:', response.status);\n    console.log('Test response headers:', response.headers);\n    \n    const data = await response.json();\n    console.log('Test response data:', data);\n    \n    showStatus('백엔드 연결 테스트 성공', 'success');\n  } catch (error) {\n    console.error('Backend test error:', error);\n    showStatus('백엔드 연결 테스트 실패: ' + error.message, 'error');\n  }\n}\n\n// Format cell borders\nasync function executeBorderFormat(context, params) {\n  console.log('executeBorderFormat called with params:', params);\n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  \n  try {\n    let targetRanges = [];\n    \n    // Determine the range based on params\n    if (!params.range) {\n      // No range specified - handle multiple selections\n      try {\n        const selectedRanges = context.workbook.getSelectedRanges();\n        selectedRanges.load([\"areas\", \"areaCount\"]);\n        await context.sync();\n        \n        if (selectedRanges.areaCount > 1) {\n          // Multiple non-contiguous ranges selected\n          for (let i = 0; i < selectedRanges.areas.items.length; i++) {\n            targetRanges.push(selectedRanges.areas.items[i]);\n          }\n        } else {\n          // Single contiguous range\n          targetRanges.push(context.workbook.getSelectedRange());\n        }\n      } catch (error) {\n        console.log('Error getting selected ranges for border format/removal:', error);\n        return { success: false, error: '선택한 범위를 처리할 수 없습니다. 연속된 범위를 선택해주세요.' };\n      }\n    } else if (params.range === 'all' || params.range === '전체') {\n      // Entire sheet\n      const usedRange = worksheet.getUsedRangeOrNullObject();\n      usedRange.load(\"isNullObject\");\n      await context.sync();\n      \n      if (usedRange.isNullObject) {\n        return { success: false, error: '시트에 데이터가 없습니다.' };\n      } else {\n        targetRanges.push(usedRange);\n      }\n    } else {\n      // Specific range provided\n      targetRanges.push(worksheet.getRange(params.range));\n    }\n    \n    // Load all ranges\n    for (const range of targetRanges) {\n      range.load([\"address\", \"rowCount\", \"columnCount\"]);\n    }\n    await context.sync();\n    \n    console.log('Target ranges for border format:', targetRanges.length);\n    for (let i = 0; i < targetRanges.length; i++) {\n      console.log(`Range ${i + 1}:`, {\n        address: targetRanges[i].address,\n        rowCount: targetRanges[i].rowCount,\n        columnCount: targetRanges[i].columnCount\n      });\n    }\n    \n    // Determine which borders to format\n    const borderType = params.borderType || 'all';\n    const color = params.color || '#000000';\n    const style = params.style || 'Continuous';\n    \n    // Map style names to Excel constants\n    const styleMap = {\n      'continuous': 'Continuous',\n      'dash': 'Dash',\n      'dashdot': 'DashDot',\n      'double': 'Double',\n      'dot': 'Dot',\n      'dashdotdot': 'DashDotDot',\n      'slantdashdot': 'SlantDashDot'\n    };\n    \n    const excelStyle = styleMap[style.toLowerCase()] || 'Continuous';\n    \n    // Apply border formatting to all selected ranges\n    for (const targetRange of targetRanges) {\n      if (borderType === 'all') {\n        // Format all borders\n        const borderItems = ['EdgeTop', 'EdgeBottom', 'EdgeLeft', 'EdgeRight', 'InsideVertical', 'InsideHorizontal'];\n        \n        for (const borderItem of borderItems) {\n          try {\n            const border = targetRange.format.borders.getItem(borderItem);\n            border.style = excelStyle;\n            border.color = color;\n            border.weight = 'Thin';\n          } catch (e) {\n            // Some border items might not be applicable (e.g., InsideVertical for single cell)\n            console.log(`Skipping ${borderItem}:`, e.message);\n          }\n        }\n      } else if (borderType === 'inside') {\n        // Format only inside borders\n        try {\n          const insideV = targetRange.format.borders.getItem('InsideVertical');\n          insideV.style = excelStyle;\n          insideV.color = color;\n          insideV.weight = 'Thin';\n        } catch (e) {\n          console.log('No inside vertical borders');\n        }\n        \n        try {\n          const insideH = targetRange.format.borders.getItem('InsideHorizontal');\n          insideH.style = excelStyle;\n          insideH.color = color;\n          insideH.weight = 'Thin';\n        } catch (e) {\n          console.log('No inside horizontal borders');\n        }\n      } else {\n        // Format specific border\n        const borderMap = {\n          'top': 'EdgeTop',\n          'bottom': 'EdgeBottom',\n          'left': 'EdgeLeft',\n          'right': 'EdgeRight'\n        };\n        \n        const borderName = borderMap[borderType.toLowerCase()];\n        if (borderName) {\n          const border = targetRange.format.borders.getItem(borderName);\n          border.style = excelStyle;\n          border.color = color;\n          border.weight = 'Thin';\n        }\n      }\n    }\n    \n    await context.sync();\n    \n    return {\n      success: true,\n      message: '테두리 서식이 적용되었습니다.'\n    };\n    \n  } catch (error) {\n    console.error('Error in executeBorderFormat:', error);\n    return {\n      success: false,\n      error: `테두리 서식 적용 중 오류 발생: ${error.message}`\n    };\n  }\n}\n\n// Additional operations (compress, filter, insert, delete, formula, retry_translation)\n// These would need to be implemented based on Excel JavaScript API capabilities\n\nasync function executeCompress(context, params) {\n  console.log('executeCompress called with params:', params);\n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  \n  try {\n    if (!params.range) {\n      return { success: false, error: '범위를 지정해주세요.' };\n    }\n    \n    // Handle column reference like \"J\" or \"J:J\"\n    let rangeAddress = params.range;\n    \n    // Check if this is a column reference without row numbers\n    if (/^[A-Z]+$/.test(rangeAddress) || /^[A-Z]+:[A-Z]+$/.test(rangeAddress)) {\n      // Get used range to determine the actual data range\n      const usedRange = worksheet.getUsedRange();\n      if (!usedRange) {\n        return { success: false, error: '워크시트에 데이터가 없습니다.' };\n      }\n      \n      usedRange.load([\"rowCount\"]);\n      await context.sync();\n      \n      // Convert column reference to full range (e.g., \"J\" -> \"J1:J{rowCount}\")\n      const columnLetter = rangeAddress.split(':')[0];\n      rangeAddress = `${columnLetter}1:${columnLetter}${usedRange.rowCount}`;\n      console.log('Converted column reference to range:', rangeAddress);\n    }\n    \n    // Get the specified range\n    const checkRange = worksheet.getRange(rangeAddress);\n    checkRange.load([\"rowIndex\", \"rowCount\", \"columnIndex\", \"values\", \"address\"]);\n    await context.sync();\n    \n    console.log('Compress range:', {\n      address: checkRange.address,\n      rowIndex: checkRange.rowIndex,\n      rowCount: checkRange.rowCount,\n      columnIndex: checkRange.columnIndex\n    });\n    \n    // Check if values is null or undefined\n    if (!checkRange.values) {\n      return {\n        success: false,\n        error: '지정된 범위를 읽을 수 없습니다.'\n      };\n    }\n    \n    // Find empty rows in the specified column\n    const emptyRows = [];\n    const values = checkRange.values;\n    \n    // Find the last row with data\n    let lastRowWithData = -1;\n    for (let i = values.length - 1; i >= 0; i--) {\n      const cellValue = values[i][0];\n      if (cellValue !== null && cellValue !== undefined && cellValue !== '' && \n          !(typeof cellValue === 'string' && cellValue.trim() === '')) {\n        lastRowWithData = i;\n        break;\n      }\n    }\n    \n    if (lastRowWithData === -1) {\n      return {\n        success: true,\n        message: '모든 행이 비어있습니다.'\n      };\n    }\n    \n    // Check each row up to the last row with data\n    for (let i = 0; i <= lastRowWithData; i++) {\n      const cellValue = values[i][0]; // First column of the range\n      if (cellValue === null || cellValue === undefined || cellValue === '' || \n          (typeof cellValue === 'string' && cellValue.trim() === '')) {\n        // This row is empty in the specified column\n        // Store the actual row index (rowIndex + i)\n        emptyRows.push(checkRange.rowIndex + i);\n      }\n    }\n    \n    console.log('Found empty rows:', emptyRows.length, 'rows at indices:', emptyRows);\n    \n    if (emptyRows.length === 0) {\n      return {\n        success: true,\n        message: '제거할 빈 행이 없습니다.'\n      };\n    }\n    \n    // Delete rows from bottom to top to avoid index shifting\n    emptyRows.sort((a, b) => b - a); // Sort in descending order\n    \n    // Get the used range to determine column count\n    const usedRange = worksheet.getUsedRange();\n    usedRange.load([\"columnCount\"]);\n    await context.sync();\n    \n    const columnCount = usedRange.columnCount || 100;\n    \n    for (const rowIndex of emptyRows) {\n      console.log('Deleting row:', rowIndex + 1); // Display 1-based for user\n      // Get the entire row\n      const rowToDelete = worksheet.getRangeByIndexes(rowIndex, 0, 1, columnCount);\n      rowToDelete.delete(Excel.DeleteShiftDirection.up);\n      await context.sync();\n    }\n    \n    return {\n      success: true,\n      message: `${emptyRows.length}개의 빈 행이 제거되었습니다.`\n    };\n    \n  } catch (error) {\n    console.error('Error in executeCompress:', error);\n    return {\n      success: false,\n      error: `빈 행 제거 중 오류 발생: ${error.message}`\n    };\n  }\n}\n\nasync function executeFilter(context, params) {\n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  const range = params.range ? worksheet.getRange(params.range) : worksheet.getUsedRange();\n  \n  // Apply autofilter\n  range.worksheet.autoFilter.apply(range);\n  \n  await context.sync();\n  \n  return {\n    success: true,\n    message: '필터가 적용되었습니다.'\n  };\n}\n\nasync function executeInsert(context, params) {\n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  const type = params.type || 'row';\n  const position = params.position || 1;\n  const count = params.count || 1;\n  \n  if (type === 'row') {\n    const range = worksheet.getRangeByIndexes(position - 1, 0, count, 1);\n    range.insert(Excel.InsertShiftDirection.down);\n  } else {\n    const range = worksheet.getRangeByIndexes(0, position - 1, 1, count);\n    range.insert(Excel.InsertShiftDirection.right);\n  }\n  \n  await context.sync();\n  \n  return {\n    success: true,\n    message: `${count}개의 ${type === 'row' ? '행' : '열'}이 삽입되었습니다.`\n  };\n}\n\nasync function executeDelete(context, params) {\n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  \n  // Handle new parameter format\n  if (params.deleteType) {\n    switch (params.deleteType) {\n      case 'column':\n        // Delete single column\n        if (!params.column) {\n          return { success: false, error: '삭제할 열을 지정해주세요.' };\n        }\n        \n        // Convert column letter to index\n        let columnIndex = 0;\n        for (let i = 0; i < params.column.length; i++) {\n          columnIndex = columnIndex * 26 + (params.column.charCodeAt(i) - 64);\n        }\n        columnIndex--; // Convert to 0-based index\n        \n        const columnRange = worksheet.getRangeByIndexes(0, columnIndex, 1048576, 1); // Full column\n        columnRange.delete(Excel.DeleteShiftDirection.left);\n        await context.sync();\n        \n        return {\n          success: true,\n          message: `${params.column}열이 삭제되었습니다.`\n        };\n        \n      case 'row':\n        // Delete single row\n        if (!params.row) {\n          return { success: false, error: '삭제할 행을 지정해주세요.' };\n        }\n        \n        const rowRange = worksheet.getRangeByIndexes(params.row - 1, 0, 1, 16384); // Full row\n        rowRange.delete(Excel.DeleteShiftDirection.up);\n        await context.sync();\n        \n        return {\n          success: true,\n          message: `${params.row}행이 삭제되었습니다.`\n        };\n        \n      case 'columns':\n        // Delete multiple columns\n        if (!params.startColumn || !params.endColumn) {\n          return { success: false, error: '삭제할 열 범위를 지정해주세요.' };\n        }\n        \n        // Convert column letters to indices\n        let startIndex = 0, endIndex = 0;\n        for (let i = 0; i < params.startColumn.length; i++) {\n          startIndex = startIndex * 26 + (params.startColumn.charCodeAt(i) - 64);\n        }\n        for (let i = 0; i < params.endColumn.length; i++) {\n          endIndex = endIndex * 26 + (params.endColumn.charCodeAt(i) - 64);\n        }\n        startIndex--; // Convert to 0-based\n        endIndex--;   // Convert to 0-based\n        \n        const columnCount = endIndex - startIndex + 1;\n        const columnsRange = worksheet.getRangeByIndexes(0, startIndex, 1048576, columnCount);\n        columnsRange.delete(Excel.DeleteShiftDirection.left);\n        await context.sync();\n        \n        return {\n          success: true,\n          message: `${params.startColumn}-${params.endColumn}열이 삭제되었습니다.`\n        };\n        \n      case 'rows':\n        // Delete multiple rows\n        if (!params.startRow || !params.endRow) {\n          return { success: false, error: '삭제할 행 범위를 지정해주세요.' };\n        }\n        \n        const rowCount = params.endRow - params.startRow + 1;\n        const rowsRange = worksheet.getRangeByIndexes(params.startRow - 1, 0, rowCount, 16384);\n        rowsRange.delete(Excel.DeleteShiftDirection.up);\n        await context.sync();\n        \n        return {\n          success: true,\n          message: `${params.startRow}-${params.endRow}행이 삭제되었습니다.`\n        };\n        \n      default:\n        return { success: false, error: '알 수 없는 삭제 유형입니다.' };\n    }\n  }\n  \n  // Handle old parameter format (backward compatibility)\n  const type = params.type || 'row';\n  const position = params.position || 1;\n  const count = params.count || 1;\n  \n  if (type === 'row') {\n    const range = worksheet.getRangeByIndexes(position - 1, 0, count, 1);\n    range.delete(Excel.DeleteShiftDirection.up);\n  } else {\n    const range = worksheet.getRangeByIndexes(0, position - 1, 1, count);\n    range.delete(Excel.DeleteShiftDirection.left);\n  }\n  \n  await context.sync();\n  \n  return {\n    success: true,\n    message: `${count}개의 ${type === 'row' ? '행' : '열'}이 삭제되었습니다.`\n  };\n}\n\nasync function executeFormula(context, params) {\n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  const range = params.range ? worksheet.getRange(params.range) : context.workbook.getSelectedRange();\n  \n  if (!params.formula) {\n    return { success: false, error: '수식을 지정해주세요.' };\n  }\n  \n  range.formulas = [[params.formula]];\n  await context.sync();\n  \n  return {\n    success: true,\n    message: '수식이 적용되었습니다.'\n  };\n}\n\nasync function executeRetryTranslation(context, params) {\n  // Implementation would be similar to Google Sheets version\n  // but using Excel JavaScript API\n  return {\n    success: false,\n    error: '이 기능은 현재 구현 중입니다.'\n  };\n}\n\nasync function executeRemoveBorder(context, params) {\n  console.log('executeRemoveBorder called with params:', params);\n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  \n  try {\n    let targetRanges = [];\n    \n    // Determine the range to apply border removal\n    if (params.range) {\n      // Handle special case for entire sheet\n      if (params.range === 'all' || params.range === '전체') {\n        console.log('Removing borders from entire sheet');\n        // Use getUsedRangeOrNullObject to get the actual used range\n        const usedRange = worksheet.getUsedRangeOrNullObject();\n        usedRange.load(\"isNullObject\");\n        await context.sync();\n        \n        if (usedRange.isNullObject) {\n          console.log('No used range in the sheet, nothing to remove borders from');\n          return { success: true, message: '시트에 데이터가 없어 테두리를 제거할 필요가 없습니다.' };\n        } else {\n          // Expand the used range to ensure we get all cells that might have borders\n          usedRange.load([\"rowCount\", \"columnCount\", \"rowIndex\", \"columnIndex\"]);\n          await context.sync();\n          \n          // Get a slightly larger range to ensure we capture all borders\n          const expandedRows = Math.min(usedRange.rowCount + 100, 1048576);\n          const expandedCols = Math.min(usedRange.columnCount + 20, 16384);\n          targetRanges.push(worksheet.getRangeByIndexes(0, 0, expandedRows, expandedCols));\n        }\n      } else if (params.range.match(/^[A-Z]+:[A-Z]+$/)) {\n        // Handle column ranges like \"C:C\"\n        console.log('Handling column range:', params.range);\n        const usedRange = worksheet.getUsedRange();\n        if (!usedRange) {\n          return { success: false, error: '데이터가 없습니다.' };\n        }\n        \n        usedRange.load([\"rowCount\", \"columnCount\"]);\n        await context.sync();\n        \n        // Get the column letter from the range (e.g., \"C\" from \"C:C\")\n        const columnLetter = params.range.split(':')[0];\n        const columnIndex = columnLetter.charCodeAt(0) - 65;\n        \n        // Get the entire used portion of the column\n        targetRanges.push(worksheet.getRangeByIndexes(0, columnIndex, usedRange.rowCount, 1));\n      } else {\n        // Handle specific ranges like \"A1:B10\"\n        targetRanges.push(worksheet.getRange(params.range));\n      }\n    } else {\n      // If no range specified, handle multiple selections\n      try {\n        const selectedRanges = context.workbook.getSelectedRanges();\n        selectedRanges.load([\"areas\", \"areaCount\"]);\n        await context.sync();\n        \n        if (selectedRanges.areaCount > 1) {\n          // Multiple non-contiguous ranges selected\n          for (let i = 0; i < selectedRanges.areas.items.length; i++) {\n            targetRanges.push(selectedRanges.areas.items[i]);\n          }\n        } else {\n          // Single contiguous range\n          targetRanges.push(context.workbook.getSelectedRange());\n        }\n      } catch (error) {\n        console.log('Error getting selected ranges for border format/removal:', error);\n        return { success: false, error: '선택한 범위를 처리할 수 없습니다. 연속된 범위를 선택해주세요.' };\n      }\n    }\n    \n    // Load all ranges\n    for (const range of targetRanges) {\n      range.load([\"address\", \"rowCount\", \"columnCount\"]);\n    }\n    await context.sync();\n    \n    console.log('Target ranges for border removal:', targetRanges.length);\n    for (let i = 0; i < targetRanges.length; i++) {\n      console.log(`Range ${i + 1}:`, {\n        address: targetRanges[i].address,\n        rowCount: targetRanges[i].rowCount,\n        columnCount: targetRanges[i].columnCount\n      });\n    }\n    \n    // Determine which borders to remove\n    const borderType = params.borderType || 'all';\n    \n    // Apply border removal to all selected ranges\n    for (const targetRange of targetRanges) {\n      if (borderType === 'all') {\n        // Remove all borders\n        targetRange.format.borders.getItem(Excel.BorderIndex.edgeLeft).style = Excel.BorderLineStyle.none;\n        targetRange.format.borders.getItem(Excel.BorderIndex.edgeRight).style = Excel.BorderLineStyle.none;\n        targetRange.format.borders.getItem(Excel.BorderIndex.edgeTop).style = Excel.BorderLineStyle.none;\n        targetRange.format.borders.getItem(Excel.BorderIndex.edgeBottom).style = Excel.BorderLineStyle.none;\n        targetRange.format.borders.getItem(Excel.BorderIndex.insideHorizontal).style = Excel.BorderLineStyle.none;\n        targetRange.format.borders.getItem(Excel.BorderIndex.insideVertical).style = Excel.BorderLineStyle.none;\n      } else {\n        // Remove specific border\n        switch (borderType) {\n          case 'right':\n            targetRange.format.borders.getItem(Excel.BorderIndex.edgeRight).style = Excel.BorderLineStyle.none;\n            break;\n          case 'left':\n            targetRange.format.borders.getItem(Excel.BorderIndex.edgeLeft).style = Excel.BorderLineStyle.none;\n            break;\n          case 'top':\n            targetRange.format.borders.getItem(Excel.BorderIndex.edgeTop).style = Excel.BorderLineStyle.none;\n            break;\n          case 'bottom':\n            targetRange.format.borders.getItem(Excel.BorderIndex.edgeBottom).style = Excel.BorderLineStyle.none;\n            break;\n          default:\n            return { success: false, error: `알 수 없는 테두리 유형: ${borderType}` };\n        }\n      }\n    }\n    \n    await context.sync();\n    \n    return {\n      success: true,\n      message: `${borderType === 'all' ? '모든' : borderType} 테두리가 제거되었습니다.`\n    };\n    \n  } catch (error) {\n    console.error('Error in executeRemoveBorder:', error);\n    return {\n      success: false,\n      error: `테두리 제거 중 오류 발생: ${error.message}`\n    };\n  }\n}"],"names":["__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","m","g","globalThis","this","Function","e","window","o","obj","prop","Object","prototype","hasOwnProperty","call","scriptUrl","importScripts","location","document","currentScript","tagName","toUpperCase","src","scripts","getElementsByTagName","length","i","test","Error","replace","p","b","baseURI","self","href","URL","t","r","Symbol","n","iterator","toStringTag","c","Generator","u","create","_regeneratorDefine2","f","y","G","v","a","d","bind","l","TypeError","done","value","return","GeneratorFunction","GeneratorFunctionPrototype","getPrototypeOf","setPrototypeOf","__proto__","displayName","_regenerator","w","defineProperty","_invoke","enumerable","configurable","writable","asyncGeneratorStep","Promise","resolve","then","_asyncToGenerator","arguments","apply","_next","_throw","recognition","isListening","API_PROXY_URL","process","Office","onReady","info","host","HostType","Excel","_testBackendConnection","testBackendConnection","getElementById","onclick","executeCommand","clearInput","protocol","hostname","includes","showStatus","textContent","stop","start","error","console","message","toggleVoiceRecognition","handleAuthAction","showContactInfo","updateAuthButton","modelSelect","savedModel","localStorage","getItem","authKey","setItem","authModal","querySelector","hideAuthModal","deauthModal","event","target","hideDeauthModal","submitAuthKey","confirmDeauth","onchange","handleModelChange","querySelectorAll","forEach","item","command","getAttribute","focus","addEventListener","key","shiftKey","preventDefault","log","voiceButton","voiceStatus","disabled","style","opacity","cursor","color","title","SpeechRecognition","webkitSpeechRecognition","lang","continuous","interimResults","maxAlternatives","onstart","classList","add","onresult","transcript","results","isFinal","onerror","remove","errorMessage","isWebEnvironment","onend","trim","initializeSpeechRecognition","isExecuting","_executeCommand","_callee2","button","originalText","_t2","_context2","innerHTML","run","_ref","_callee","context","worksheet","activeRangeInfo","selectedRanges","firstRange","rangeAddresses","_i","range","usedRange","sheetContext","headerRow","_i2","interpretation","result","_t","_context","workbook","worksheets","getActiveWorksheet","getSelectedRanges","load","sync","areaCount","areas","items","push","address","join","row","rowIndex","column","columnIndex","numRows","rowCount","numColumns","columnCount","isMultipleRanges","getUsedRange","sheetName","name","activeRange","lastRow","lastColumn","headers","dataRange","values","isLargeSheet","columnLetter","getColumnLetter","label","toString","callOpenAI","success","executeInterpretedCommand","data","setTimeout","_x46","stack","_x","_x2","_callOpenAI","_callee3","selectedModel","authEmail","requestBody","response","errorData","_t3","_context3","model","clientType","hasAuthKey","hasAuthEmail","fetch","method","body","JSON","stringify","ok","json","concat","status","_x5","_x6","_executeInterpretedCommand","_callee5","commandData","successCount","_iterator","_step","op","_t6","_context5","operations","Array","isArray","_createForOfIteratorHelper","s","executeSingleOperation","operation","parameters","_x7","_x8","_x9","_executeSingleOperation","_callee6","params","_t7","_t8","_context6","Date","toISOString","executeMerge","executeSum","executeAverage","executeCount","executeFormat","executeSort","executeFilter","executeInsert","executeDelete","executeFormula","executeChart","executeConditionalFormat","executeTranslate","executeCompress","executeRetryTranslation","executeRemoveBorder","executeBorderFormat","_x0","_x1","_executeMerge","_callee7","rangeAddress","_context7","getRange","getSelectedRange","merge","_x10","_x11","_executeSum","_callee8","rowRange","rowValues","lastDataColumn","resultColumn","resultCell","endCol","_sumFormula","_usedRange","_i3","_i4","lastDataRow","targetRow","foundEmpty","_i5","checkCell","cellValue","sumCell","sourceRange","sumFormula","_i6","_i7","_selectedRanges","_rangeAddresses","_i8","_i9","newCell","targetCell","_usedRange2","_targetCell","lastUsedRow","lastUsedCol","_foundEmpty","col","_checkCell","_row","_checkCell2","_column","startRow","_targetRow","_foundEmpty2","_i0","_checkCell3","_cellValue","_t9","_t0","_context8","sumType","getRangeByIndexes","getCell","formulas","formatNumber","columnName","match","charCodeAt","toLowerCase","addNewRow","getHeaders","_x12","_getHeaders","_callee9","_context9","_x13","_x14","_executeAverage","_callee0","rangeDescription","averageFormula","_columnIndex","_usedRange3","columnInfo","_usedRange4","_usedRange5","_i1","_i10","_selectedRanges2","_rangeAddresses2","_i11","_i12","_i13","_t1","_t10","_t11","_context0","averageType","find","h","numberFormat","_x15","_x16","_executeCount","_callee1","formula","criteria","lastCol","_context1","countType","condition","operator","_x17","_x18","_executeFormat","_callee10","ranges","_i14","_ranges","_i15","_ranges2","_range","format","_t12","_context10","bold","font","italic","fontSize","size","fontColor","backgroundColor","fill","horizontalAlignment","_x19","_x20","_executeSort","_callee11","ascending","_context11","sort","_x21","_x22","_executeChart","_callee12","sourceData","dataAddress","allRanges","area","tempStartRow","tempStartCol","consolidatedData","maxColumns","_i16","_allRanges","_iterator2","_step2","reorganizedData","_i17","tempRange","_tempRange","chartType","chart","_chart","_t13","_t14","_t15","_t16","_context12","getUsedRangeOrNullObject","isNullObject","Math","max","err","every","firstValue","ChartType","columnClustered","line","pie","xyscatter","charts","ChartSeriesBy","auto","text","height","width","left","offsetX","top","offsetY","legend","position","ChartLegendPosition","bottom","visible","_x23","_x24","_executeConditionalFormat","_callee13","defaultRange","_i18","_ranges3","conditionalFormat","_t17","_context13","conditionalFormats","ConditionalFormatType","rule","formula1","ConditionalCellValueOperator","greaterThan","lessThan","equalTo","containsText","_x25","_x26","_executeTranslate","_callee14","targetColumnIndex","targetColumnLetter","_targetColumnLetter","_columnIndex2","_usedRange6","sourceValues","translations","batchSize","batch","batchTexts","translatedBatch","j","translationIndex","_j","translatedText","_j2","_i19","targetRange","stringTranslations","errorRows","_i20","translation","_iterator3","_step3","errorCell","isEmpty","_i21","cellRow","cellCol","cell","headerCell","sourceHeaderCell","_context14","targetLanguage","split","sourceColumnIndex","sourceColumn","targetColumn","slice","min","map","filter","translateBatch","sourceLanguage","batchLength","translatedBatchLength","sampleTranslations","firstTranslation","translationType","_typeof","rawData","isError","round","translationsCount","first","second","third","clear","ClearApplyTo","contents","translationsLength","is2DArray","String","valueTypes","actualFirstValue","firstThreeValues","firstValueLength","_x27","_x28","_x29","_translateBatch","_callee15","texts","_t18","_context15","tempIndex","fromCharCode","floor","Number","isInteger","toLocaleString","minimumFractionDigits","maximumFractionDigits","type","className","display","statusTimeout","clearTimeout","authButton","showAuthModal","removeItem","_submitAuthKey","_callee16","email","_t19","_context16","showAuthStatus","debug","statusDiv","statusElement","scrollIntoView","behavior","block","modelName","_callee17","_t20","_context17","_x30","_x31","_executeBorderFormat","_callee18","targetRanges","_i22","_targetRanges","_i23","borderType","excelStyle","_i24","_targetRanges2","_i25","_borderItems","borderItem","border","insideV","insideH","borderName","_border","_t21","_t22","_context18","borders","weight","_x32","_x33","_executeCompress","_callee19","_usedRange7","checkRange","emptyRows","lastRowWithData","_i26","_cellValue2","_i27","_emptyRows","_t23","_context19","delete","DeleteShiftDirection","up","_x34","_x35","_executeFilter","_callee20","_context20","autoFilter","_x36","_x37","_executeInsert","_callee21","count","_context21","insert","InsertShiftDirection","down","right","_x38","_x39","_executeDelete","_callee22","startIndex","endIndex","_i28","_i29","_t24","_context22","deleteType","startColumn","endColumn","endRow","_x40","_x41","_executeFormula","_callee23","_context23","_x42","_x43","_executeRetryTranslation","_callee24","_context24","_x44","_x45","_executeRemoveBorder","_callee25","expandedRows","expandedCols","_usedRange8","_i30","_targetRanges3","_i31","_i32","_targetRanges4","_t25","_t26","_t27","_context25","BorderIndex","edgeLeft","BorderLineStyle","none","edgeRight","edgeTop","edgeBottom","insideHorizontal","insideVertical"],"sourceRoot":""}