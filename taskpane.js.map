{"version":3,"file":"taskpane.js","mappings":"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","sources":["webpack://worksai-excel-addon/webpack/bootstrap","webpack://worksai-excel-addon/webpack/runtime/global","webpack://worksai-excel-addon/webpack/runtime/hasOwnProperty shorthand","webpack://worksai-excel-addon/webpack/runtime/publicPath","webpack://worksai-excel-addon/webpack/runtime/jsonp chunk loading","webpack://worksai-excel-addon/./src/taskpane/taskpane.html","webpack://worksai-excel-addon/./src/taskpane/taskpane.js"],"sourcesContent":["// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript && document.currentScript.tagName.toUpperCase() === 'SCRIPT')\n\t\tscriptUrl = document.currentScript.src;\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) {\n\t\t\tvar i = scripts.length - 1;\n\t\t\twhile (i > -1 && (!scriptUrl || !/^http(s?):/.test(scriptUrl))) scriptUrl = scripts[i--].src;\n\t\t}\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/^blob:/, \"\").replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","__webpack_require__.b = document.baseURI || self.location.href;\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t926: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n// no on chunks loaded\n\n// no jsonp function","// Imports\nvar ___HTML_LOADER_IMPORT_0___ = new URL(\"./taskpane.css\", import.meta.url);\n// Module\nvar code = \"<!DOCTYPE html> <html> <head> <meta charset=\\\"UTF-8\\\"/> <meta http-equiv=\\\"X-UA-Compatible\\\" content=\\\"IE=Edge\\\"/> <meta name=\\\"viewport\\\" content=\\\"width=device-width,initial-scale=1\\\"> <title>웍스AI 엑셀 도우미</title> <\" + \"script src=\\\"https://appsforoffice.microsoft.com/lib/1.1/hosted/office.js\\\"><\" + \"/script> <link rel=\\\"stylesheet\\\" href=\\\"https://static2.sharepointonline.com/files/fabric/office-ui-fabric-js/1.4.0/css/fabric.min.css\\\"/> <link rel=\\\"stylesheet\\\" href=\\\"https://static2.sharepointonline.com/files/fabric/office-ui-fabric-js/1.4.0/css/fabric.components.min.css\\\"/> <link href=\\\"\" + ___HTML_LOADER_IMPORT_0___ + \"\\\" rel=\\\"stylesheet\\\"/> </head> <body class=\\\"ms-font-m ms-welcome ms-Fabric\\\"> <main id=\\\"app-body\\\" class=\\\"ms-welcome__main\\\"> <div class=\\\"container\\\"> <div class=\\\"header-section\\\"> <h2 class=\\\"ms-font-xl\\\" style=\\\"font-weight:700\\\">웍스AI 엑셀 도우미</h2> <p class=\\\"help-text\\\">자연어로 Excel 작업을 요청하세요. (대용량 번역 지원)</p> </div> <div class=\\\"voice-section\\\"> <button id=\\\"voiceButton\\\" class=\\\"voice-button\\\"> <svg width=\\\"24\\\" height=\\\"24\\\" viewBox=\\\"0 0 24 24\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"> <path d=\\\"M12 14c1.66 0 3-1.34 3-3V5c0-1.66-1.34-3-3-3S9 3.34 9 5v6c0 1.66 1.34 3 3 3z\\\"/> <path d=\\\"M17 11c0 2.76-2.24 5-5 5s-5-2.24-5-5H5c0 3.53 2.61 6.43 6 6.92V21h2v-3.08c3.39-.49 6-3.39 6-6.92h-2z\\\"/> </svg> </button> <div class=\\\"voice-status\\\" id=\\\"voiceStatus\\\">음성 인식 준비</div> </div> <div class=\\\"input-container\\\"> <textarea id=\\\"commandInput\\\" placeholder=\\\"예: A1부터 A10까지 합계를 구해줘\\\" rows=\\\"3\\\"></textarea> <div class=\\\"button-container\\\"> <button id=\\\"executeButton\\\" class=\\\"ms-Button ms-Button--primary\\\"> <span class=\\\"ms-Button-label\\\">실행</span> </button> <button id=\\\"clearButton\\\" class=\\\"ms-Button\\\"> <span class=\\\"ms-Button-label\\\">지우기</span> </button> </div> </div> <div id=\\\"status\\\" class=\\\"status-message\\\"></div> <div class=\\\"examples\\\"> <h3>예제 명령어</h3> <div class=\\\"example-list\\\"> <div class=\\\"example-item\\\" data-command=\\\"A1:B5 셀을 병합해줘\\\"> <strong>셀 병합:</strong> A1:B5 셀을 병합해줘 </div> <div class=\\\"example-item\\\" data-command=\\\"A열의 합계를 구해줘\\\"> <strong>합계 계산:</strong> A열의 합계를 구해줘 </div> <div class=\\\"example-item\\\" data-command=\\\"Name 열의 합계를 구해줘\\\"> <strong>레이블로 합계:</strong> Name 열의 합계를 구해줘 </div> <div class=\\\"example-item\\\" data-command=\\\"C열 평균을 구해줘\\\"> <strong>열 평균:</strong> C열 평균을 구해줘 </div> <div class=\\\"example-item\\\" data-command=\\\"3행 평균을 계산해줘\\\"> <strong>행 평균:</strong> 3행 평균을 계산해줘 </div> <div class=\\\"example-item\\\" data-command=\\\"선택한 셀을 굵게 만들고 파란색으로 바꿔줘\\\"> <strong>서식 지정:</strong> 선택한 셀을 굵게 만들고 파란색으로 바꿔줘 </div> <div class=\\\"example-item\\\" data-command=\\\"B열 기준으로 내림차순 정렬해줘\\\"> <strong>정렬:</strong> B열 기준으로 내림차순 정렬해줘 </div> <div class=\\\"example-item\\\" data-command=\\\"값이 100보다 큰 셀은 녹색 배경으로 표시해줘\\\"> <strong>조건부 서식:</strong> 값이 100보다 큰 셀은 녹색 배경으로 표시해줘 </div> <div class=\\\"example-item\\\" data-command=\\\"A1:B10 데이터로 막대 차트를 만들어줘\\\"> <strong>차트 생성:</strong> A1:B10 데이터로 막대 차트를 만들어줘 </div> <div class=\\\"example-item\\\" data-command=\\\"D열을 중국어로 번역해서 다음 열에 추가해줘\\\"> <strong>번역:</strong> D열을 중국어로 번역해서 다음 열에 추가해줘 </div> <div class=\\\"example-item\\\" data-command=\\\"A열의 10000개 행을 영어로 번역해줘\\\"> <strong>대용량 번역:</strong> A열의 10000개 행을 영어로 번역해줘 </div> <div class=\\\"example-item\\\" data-command=\\\"D2:D170 사이의 빈 행을 제거해줘\\\"> <strong>빈 행 제거:</strong> D2:D170 사이의 빈 행을 제거해줘 </div> <div class=\\\"example-item\\\" data-command=\\\"C열의 오른쪽 테두리를 없애줘\\\"> <strong>테두리 제거:</strong> C열의 오른쪽 테두리를 없애줘 </div> </div> </div> <div class=\\\"settings-section\\\"> <button id=\\\"settingsButton\\\" class=\\\"settings-link\\\">설정</button> </div> </div> </main> </body> </html>\";\n// Exports\nexport default code;","/*\n * Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n * See LICENSE in the project root for license information.\n */\n\n/* global document, Office, Excel */\n\n// Voice recognition variables\nlet recognition = null;\nlet isListening = false;\n\n// Backend API URL - Vercel 배포 후 실제 URL로 변경해주세요\n// 디버그용 URL 사용 중 (CORS 문제 해결 후 원래 URL로 변경 필요)\nconst API_PROXY_URL = process.env.API_PROXY_URL || 'https://excel-addon-backend.vercel.app/api/openai-proxy-debug';\n\nOffice.onReady((info) => {\n  if (info.host === Office.HostType.Excel) {\n    // Test backend connection\n    testBackendConnection();\n    \n    // Assign event handlers\n    document.getElementById(\"executeButton\").onclick = executeCommand;\n    document.getElementById(\"clearButton\").onclick = clearInput;\n    document.getElementById(\"voiceButton\").onclick = () => toggleVoiceRecognition();\n    document.getElementById(\"settingsButton\").onclick = showSettings;\n\n    // Handle example clicks\n    const exampleItems = document.querySelectorAll('.example-item');\n    exampleItems.forEach(item => {\n      item.onclick = function() {\n        setCommand(this.getAttribute('data-command'));\n      };\n    });\n\n    // Handle Enter key\n    document.getElementById('commandInput').addEventListener('keydown', function(event) {\n      if (event.key === 'Enter' && !event.shiftKey) {\n        event.preventDefault();\n        executeCommand();\n      }\n    });\n\n    // Initialize speech recognition\n    initializeSpeechRecognition();\n  }\n});\n\n// Initialize speech recognition\nfunction initializeSpeechRecognition() {\n  // Check if we're in a web environment (Excel Online) - disable voice feature\n  const isWebEnvironment = window.location.protocol === 'https:' && \n                          !window.location.hostname.includes('localhost');\n  \n  if (isWebEnvironment) {\n    console.log('Voice recognition disabled in web environment');\n    const voiceButton = document.getElementById('voiceButton');\n    const voiceStatus = document.getElementById('voiceStatus');\n    \n    voiceButton.disabled = true;\n    voiceButton.style.opacity = '0.5';\n    voiceButton.style.cursor = 'not-allowed';\n    voiceStatus.textContent = '웹 환경에서는 음성 인식 미지원';\n    voiceStatus.style.color = '#666';\n    \n    // Add tooltip\n    voiceButton.title = 'Excel Online에서는 보안상 음성 인식을 사용할 수 없습니다. 데스크톱 Excel을 사용해주세요.';\n    \n    return null;\n  }\n  \n  const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n  \n  if (!SpeechRecognition) {\n    showStatus('음성 인식이 지원되지 않는 브라우저입니다.', 'error');\n    document.getElementById('voiceButton').disabled = true;\n    document.getElementById('voiceStatus').textContent = '음성 인식 미지원';\n    return null;\n  }\n  \n  recognition = new SpeechRecognition();\n  recognition.lang = 'ko-KR';\n  recognition.continuous = false;\n  recognition.interimResults = true;\n  recognition.maxAlternatives = 1;\n  \n  recognition.onstart = function() {\n    isListening = true;\n    document.getElementById('voiceButton').classList.add('listening');\n    document.getElementById('voiceStatus').textContent = '듣고 있습니다... 말씀해주세요';\n    document.getElementById('voiceStatus').classList.add('listening');\n  };\n  \n  recognition.onresult = function(event) {\n    const transcript = event.results[0][0].transcript;\n    document.getElementById('commandInput').value = transcript;\n    \n    if (event.results[0].isFinal) {\n      document.getElementById('voiceStatus').textContent = '음성 인식 완료';\n    } else {\n      document.getElementById('voiceStatus').textContent = '인식중: ' + transcript;\n    }\n  };\n  \n  recognition.onerror = function(event) {\n    console.log('Speech recognition error:', event.error, 'Location:', window.location.hostname);\n    isListening = false;\n    document.getElementById('voiceButton').classList.remove('listening');\n    document.getElementById('voiceStatus').classList.remove('listening');\n    \n    let errorMessage = '음성 인식 오류';\n    \n    // Check if we're in a web environment - use broader detection\n    const isWebEnvironment = window.location.protocol === 'https:' && \n                            !window.location.hostname.includes('localhost');\n    \n    switch(event.error) {\n      case 'no-speech':\n        errorMessage = '음성이 감지되지 않았습니다.';\n        break;\n      case 'audio-capture':\n        errorMessage = '마이크를 찾을 수 없습니다.';\n        break;\n      case 'not-allowed':\n        // Always show web environment message for not-allowed in HTTPS contexts\n        if (isWebEnvironment) {\n          errorMessage = 'Excel Online에서는 보안 정책상 음성 인식을 사용할 수 없습니다. 데스크톱 Excel에서 이용해주세요.';\n          document.getElementById('voiceStatus').textContent = '웹 버전 미지원';\n        } else {\n          errorMessage = '마이크 권한이 거부되었습니다. 브라우저 설정을 확인해주세요.';\n        }\n        break;\n      case 'network':\n        errorMessage = '네트워크 오류가 발생했습니다.';\n        break;\n      default:\n        // For any other error in web environment, show the web limitation message\n        if (isWebEnvironment && event.error) {\n          errorMessage = 'Excel Online에서는 보안 정책상 음성 인식을 사용할 수 없습니다. 데스크톱 Excel에서 이용해주세요.';\n          document.getElementById('voiceStatus').textContent = '웹 버전 미지원';\n        }\n        break;\n    }\n    \n    // Override the status text display for web environment\n    if (isWebEnvironment && event.error === 'not-allowed') {\n      document.getElementById('voiceStatus').textContent = '웹 버전 미지원';\n    } else {\n      document.getElementById('voiceStatus').textContent = errorMessage;\n    }\n    \n    showStatus(errorMessage, 'error');\n  };\n  \n  recognition.onend = function() {\n    isListening = false;\n    document.getElementById('voiceButton').classList.remove('listening');\n    document.getElementById('voiceStatus').classList.remove('listening');\n    \n    const command = document.getElementById('commandInput').value.trim();\n    if (command) {\n      document.getElementById('voiceStatus').textContent = '음성 인식 완료. 실행 버튼을 눌러주세요.';\n      document.getElementById('executeButton').focus();\n    } else {\n      document.getElementById('voiceStatus').textContent = '음성 인식 준비';\n    }\n  };\n  \n  return recognition;\n}\n\n// Toggle voice recognition\nfunction toggleVoiceRecognition() {\n  // Check if we're in Excel Online/web environment\n  const isWebEnvironment = window.location.protocol === 'https:' && \n                          !window.location.hostname.includes('localhost');\n  \n  if (isWebEnvironment) {\n    showStatus('Excel Online에서는 보안 정책상 음성 인식을 사용할 수 없습니다. 데스크톱 Excel에서 이용해주세요.', 'error');\n    document.getElementById('voiceStatus').textContent = '웹 버전 미지원';\n    return;\n  }\n  \n  if (!recognition) {\n    // Recognition would be null if unsupported browser\n    showStatus('이 브라우저는 음성 인식을 지원하지 않습니다.', 'error');\n    return;\n  }\n  \n  if (isListening) {\n    recognition.stop();\n  } else {\n    try {\n      recognition.start();\n    } catch (error) {\n      console.error('Voice recognition start error:', error);\n      \n      // More user-friendly error messages\n      if (error.message && error.message.includes('not-allowed')) {\n        showStatus('마이크 권한이 필요합니다. 브라우저 설정에서 마이크 접근을 허용해주세요.', 'error');\n      } else {\n        showStatus('음성 인식을 시작할 수 없습니다.', 'error');\n      }\n    }\n  }\n}\n\n// Execute command\n// Add flag to prevent duplicate execution\nlet isExecuting = false;\n\nasync function executeCommand() {\n  // Prevent duplicate execution\n  if (isExecuting) {\n    console.log('Command already executing, ignoring duplicate call');\n    return;\n  }\n  \n  const command = document.getElementById('commandInput').value.trim();\n  \n  if (!command) {\n    showStatus('명령어를 입력해주세요.', 'error');\n    return;\n  }\n  \n  isExecuting = true;\n  \n  const button = document.getElementById('executeButton');\n  const originalText = '<span class=\"ms-Button-label\">실행</span>';\n  \n  // Show loading state\n  button.disabled = true;\n  button.innerHTML = '<span class=\"loading\"></span><span>처리중...</span>';\n  showStatus('명령을 처리하고 있습니다...', 'info');\n  \n  try {\n    await Excel.run(async (context) => {\n      console.log('Starting Excel.run for command execution');\n      // Get current worksheet context\n      const worksheet = context.workbook.worksheets.getActiveWorksheet();\n      // Handle both single and multiple range selections\n      let activeRangeInfo = null;\n      let isMultipleRanges = false;\n      \n      try {\n        // Try to get selected ranges first\n        const selectedRanges = context.workbook.getSelectedRanges();\n        selectedRanges.load([\"areas\", \"areaCount\"]);\n        await context.sync();\n        \n        if (selectedRanges.areaCount > 1) {\n          // Multiple non-contiguous ranges\n          isMultipleRanges = true;\n          const firstRange = selectedRanges.areas.items[0];\n          firstRange.load([\"address\", \"rowIndex\", \"columnIndex\", \"rowCount\", \"columnCount\"]);\n          await context.sync();\n          \n          // Build combined address string\n          const rangeAddresses = [];\n          for (let i = 0; i < selectedRanges.areas.items.length; i++) {\n            const area = selectedRanges.areas.items[i];\n            area.load(\"address\");\n          }\n          await context.sync();\n          \n          for (let i = 0; i < selectedRanges.areas.items.length; i++) {\n            rangeAddresses.push(selectedRanges.areas.items[i].address);\n          }\n          \n          activeRangeInfo = {\n            address: rangeAddresses.join(','),\n            row: firstRange.rowIndex + 1,\n            column: firstRange.columnIndex + 1,\n            numRows: firstRange.rowCount,\n            numColumns: firstRange.columnCount,\n            isMultipleRanges: true\n          };\n        } else {\n          // Single range\n          const range = selectedRanges.areas.items[0];\n          range.load([\"address\", \"rowIndex\", \"columnIndex\", \"rowCount\", \"columnCount\"]);\n          await context.sync();\n          \n          activeRangeInfo = {\n            address: range.address,\n            row: range.rowIndex + 1,\n            column: range.columnIndex + 1,\n            numRows: range.rowCount,\n            numColumns: range.columnCount,\n            isMultipleRanges: false\n          };\n        }\n      } catch (error) {\n        console.log('Error getting selected ranges, using fallback:', error);\n        // If getting selected ranges fails, provide a default\n        activeRangeInfo = {\n          address: 'A1',\n          row: 1,\n          column: 1,\n          numRows: 1,\n          numColumns: 1,\n          isMultipleRanges: false\n        };\n      }\n      \n      // Load necessary properties\n      worksheet.load(\"name\");\n      \n      // Get sheet data for context\n      const usedRange = worksheet.getUsedRange();\n      usedRange.load([\"rowCount\", \"columnCount\", \"values\"]);\n      \n      await context.sync();\n      \n      // Build sheet context\n      const sheetContext = {\n        sheetName: worksheet.name,\n        activeRange: activeRangeInfo,\n        lastRow: usedRange ? usedRange.rowCount : 0,\n        lastColumn: usedRange ? usedRange.columnCount : 0,\n        headers: [],\n        dataRange: usedRange ? usedRange.values : [],\n        isLargeSheet: usedRange && usedRange.rowCount > 1000\n      };\n      \n      // Extract headers\n      if (usedRange && usedRange.rowCount > 0) {\n        const headerRow = usedRange.values[0];\n        for (let i = 0; i < headerRow.length; i++) {\n          sheetContext.headers.push({\n            column: i + 1,\n            columnLetter: getColumnLetter(i),\n            label: headerRow[i] ? headerRow[i].toString() : ''\n          });\n        }\n      }\n      \n      // Call OpenAI API to interpret the command\n      const interpretation = await callOpenAI(command, sheetContext);\n      \n      if (!interpretation.success) {\n        throw new Error(interpretation.error);\n      }\n      \n      // Execute the interpreted command\n      console.log('Executing interpreted command...');\n      const result = await executeInterpretedCommand(context, interpretation.data);\n      console.log('Command execution result:', result);\n      \n      // Reset button and show success\n      button.disabled = false;\n      button.innerHTML = originalText;\n      \n      if (result.success) {\n        console.log('Operation completed successfully:', result);\n        showStatus(result.message || '명령이 성공적으로 실행되었습니다.', 'success');\n        setTimeout(() => {\n          document.getElementById('commandInput').value = '';\n        }, 1000);\n      } else {\n        console.error('Operation failed:', result);\n        showStatus(result.error || '명령 실행에 실패했습니다.', 'error');\n      }\n      \n      console.log('Excel.run completing...');\n    });\n    console.log('Excel.run completed');\n  } catch (error) {\n    console.error('Error in executeCommand:', error);\n    console.error('Error stack:', error.stack);\n    button.disabled = false;\n    button.innerHTML = originalText;\n    showStatus('오류가 발생했습니다: ' + error.message, 'error');\n  } finally {\n    // Reset execution flag\n    isExecuting = false;\n  }\n}\n\n// Call OpenAI API through proxy\nasync function callOpenAI(command, sheetContext) {\n  try {\n    const response = await fetch(API_PROXY_URL, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        command: command,\n        sheetContext: sheetContext\n      })\n    });\n    \n    if (!response.ok) {\n      const errorData = await response.json();\n      return {\n        success: false,\n        error: errorData.error || `서버 오류 (${response.status})`\n      };\n    }\n    \n    return await response.json();\n    \n  } catch (error) {\n    console.error('Proxy API Error:', error);\n    return {\n      success: false,\n      error: `API 요청 오류: ${error.toString()}`\n    };\n  }\n}\n\n// Original OpenAI API call (no longer used)\nasync function callOpenAIDirectly(command, sheetContext) {\n  const systemPrompt = `You are an Excel assistant that interprets natural language commands and returns JSON instructions for Excel operations.\n  \nAvailable operations:\n1. merge: Merge cells\n2. sum: Sum values in a range or column\n3. average: Calculate average\n4. count: Count cells (can count all, numbers only, or based on conditions)\n5. format: Format cells (bold, italic, font color, background color, etc.)\n6. sort: Sort data\n7. filter: Filter data\n8. insert: Insert rows/columns\n9. delete: Delete rows/columns\n10. formula: Add custom formula\n11. chart: Create chart\n12. conditional_format: Add conditional formatting\n13. translate: Translate cell contents to another language\n14. compress: Remove empty rows in a specific column range\n15. retry_translation: Retry translation for failed items marked as [번역 실패]\n\nFor sum operation:\n- If user mentions a column by header name (e.g., \"totalToken 열의 합\", \"totalToken 합산\"), return: { \"sumType\": \"column\", \"columnName\": \"totalToken\" }\n- The system will automatically find the column, determine the data range, and place the sum in the first empty cell below the data\n- For specific range sum, use: { \"sourceRange\": \"A2:A10\" }\n- For adding sum below selection, use: { \"addNewRow\": true }\n\nCurrent sheet context:\n- Active range: ${sheetContext.activeRange.address}\n- Sheet dimensions: ${sheetContext.lastRow} rows x ${sheetContext.lastColumn} columns\n- Headers: ${sheetContext.headers.map(h => `Column ${h.columnLetter}: \"${h.label}\"`).join(', ')}\n\nReturn JSON in this format:\n{\n  \"operation\": \"operation_name\",\n  \"parameters\": {\n    // operation-specific parameters\n  }\n}`;\n\n  const url = 'https://api.openai.com/v1/chat/completions';\n  \n  const payload = {\n    model: 'gpt-4.1-2025-04-14',\n    messages: [\n      { role: 'system', content: systemPrompt },\n      { role: 'user', content: `Current Excel state:\nHeaders: ${sheetContext.headers.map(h => `Column ${h.columnLetter}: \"${h.label}\"`).join(', ')}\nActive sheet: ${sheetContext.sheetName}\n\nUser command: ${command}` }\n    ],\n    temperature: 0.3,\n    max_tokens: 500\n  };\n  \n  try {\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${OPENAI_API_KEY}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(payload)\n    });\n    \n    if (!response.ok) {\n      const errorData = await response.json();\n      if (response.status === 429) {\n        return {\n          success: false,\n          error: 'API 요청 한도를 초과했습니다. 잠시 후 다시 시도해주세요.'\n        };\n      } else if (response.status === 401) {\n        return {\n          success: false,\n          error: 'API 키가 유효하지 않습니다. API 키를 확인해주세요.'\n        };\n      }\n      return {\n        success: false,\n        error: `API 오류 (${response.status}): ${errorData.error?.message || '알 수 없는 오류'}`\n      };\n    }\n    \n    const result = await response.json();\n    \n    if (result.choices && result.choices[0]) {\n      const content = result.choices[0].message.content;\n      try {\n        const parsedCommand = JSON.parse(content);\n        return {\n          success: true,\n          data: parsedCommand\n        };\n      } catch (parseError) {\n        console.error('Failed to parse AI response:', content);\n        return {\n          success: false,\n          error: 'AI 응답을 해석할 수 없습니다. 다시 시도해주세요.'\n        };\n      }\n    } else {\n      return {\n        success: false,\n        error: 'OpenAI API 응답을 파싱할 수 없습니다.'\n      };\n    }\n  } catch (error) {\n    console.error('OpenAI API Error:', error);\n    return {\n      success: false,\n      error: `OpenAI API 오류: ${error.toString()}`\n    };\n  }\n}\n\n// Execute the interpreted command\nasync function executeInterpretedCommand(context, commandData) {\n  // Check if multiple operations\n  if (commandData.operations && Array.isArray(commandData.operations)) {\n    console.log('Executing multiple operations:', commandData.operations.length);\n    const results = [];\n    let successCount = 0;\n    \n    for (const op of commandData.operations) {\n      const result = await executeSingleOperation(context, op.operation, op.parameters || {});\n      results.push(result);\n      if (result.success) successCount++;\n    }\n    \n    return {\n      success: successCount === commandData.operations.length,\n      message: `${successCount}/${commandData.operations.length} 작업이 완료되었습니다.`,\n      results: results\n    };\n  }\n  \n  // Single operation\n  return await executeSingleOperation(context, commandData.operation, commandData.parameters || {});\n}\n\n// Execute a single operation\nasync function executeSingleOperation(context, operation, params) {\n  console.log(`[${new Date().toISOString()}] Executing operation: ${operation} with params:`, params);\n  \n  try {\n    switch (operation) {\n      case 'merge':\n        return await executeMerge(context, params);\n      \n      case 'sum':\n        return await executeSum(context, params);\n      \n      case 'average':\n        return await executeAverage(context, params);\n      \n      case 'count':\n        return await executeCount(context, params);\n      \n      case 'format':\n        return await executeFormat(context, params);\n      \n      case 'sort':\n        return await executeSort(context, params);\n      \n      case 'filter':\n        return await executeFilter(context, params);\n      \n      case 'insert':\n        return await executeInsert(context, params);\n      \n      case 'delete':\n        return await executeDelete(context, params);\n      \n      case 'formula':\n        return await executeFormula(context, params);\n      \n      case 'chart':\n        return await executeChart(context, params);\n      \n      case 'conditional_format':\n        return await executeConditionalFormat(context, params);\n      \n      case 'translate':\n        return await executeTranslate(context, params);\n      \n      case 'compress':\n        return await executeCompress(context, params);\n      \n      case 'retry_translation':\n        return await executeRetryTranslation(context, params);\n      \n      case 'remove_border':\n        return await executeRemoveBorder(context, params);\n      \n      case 'border_format':\n        return await executeBorderFormat(context, params);\n      \n      default:\n        return {\n          success: false,\n          error: `알 수 없는 작업: ${operation}`\n        };\n    }\n  } catch (error) {\n    console.error('Error in executeInterpretedCommand:', error);\n    return {\n      success: false,\n      error: `작업 실행 중 오류: ${error.message || error.toString()}`\n    };\n  }\n}\n\n// Merge cells\nasync function executeMerge(context, params) {\n  console.log('executeMerge started with params:', params);\n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  const range = params.range ? worksheet.getRange(params.range) : context.workbook.getSelectedRange();\n  \n  console.log('Loading range address...');\n  // Load address property before using it\n  range.load('address');\n  await context.sync();\n  \n  console.log('Range address loaded:', range.address);\n  const rangeAddress = range.address;\n  \n  console.log('Merging range...');\n  range.merge();\n  await context.sync();\n  \n  console.log('Merge completed successfully');\n  return {\n    success: true,\n    message: `${rangeAddress} 범위가 병합되었습니다.`\n  };\n}\n\n// Sum values\nasync function executeSum(context, params) {\n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  \n  // If column name is provided, find the column and create range\n  if (params.columnName || params.sumType === 'column') {\n    console.log('Sum by column name:', params.columnName);\n    \n    // Get sheet context to find column by name\n    const usedRange = worksheet.getUsedRange();\n    usedRange.load([\"values\", \"rowCount\", \"columnCount\"]);\n    await context.sync();\n    \n    if (!usedRange || usedRange.rowCount === 0) {\n      return {\n        success: false,\n        error: '시트에 데이터가 없습니다.'\n      };\n    }\n    \n    let columnIndex = -1;\n    let columnLetter = '';\n    \n    // Check if columnName is a single letter (column letter like \"D\")\n    if (params.columnName && params.columnName.match(/^[A-Z]$/)) {\n      // Direct column letter reference\n      columnLetter = params.columnName;\n      columnIndex = columnLetter.charCodeAt(0) - 65;\n      console.log('Column letter specified:', columnLetter, 'index:', columnIndex);\n    } else {\n      // Find column by header name\n      const headers = usedRange.values[0];\n      \n      for (let i = 0; i < headers.length; i++) {\n        if (headers[i] && headers[i].toString().toLowerCase() === (params.columnName || '').toLowerCase()) {\n          columnIndex = i;\n          columnLetter = getColumnLetter(i);\n          break;\n        }\n      }\n    }\n    \n    if (columnIndex === -1) {\n      return {\n        success: false,\n        error: `\"${params.columnName}\" 열을 찾을 수 없습니다.`\n      };\n    }\n    \n    // Find last row with data in this column\n    let lastDataRow = 1; // Start from row 2 (after header)\n    for (let row = 1; row < usedRange.rowCount; row++) {\n      if (usedRange.values[row][columnIndex] !== null && \n          usedRange.values[row][columnIndex] !== undefined && \n          usedRange.values[row][columnIndex] !== '') {\n        lastDataRow = row + 1; // +1 because Excel rows are 1-indexed\n      }\n    }\n    \n    // Create range from row 2 to last data row\n    const rangeAddress = `${columnLetter}2:${columnLetter}${lastDataRow}`;\n    \n    // Find first empty cell below the data\n    let targetRow = lastDataRow; // Start from row after last data (0-based becomes 1-based)\n    let foundEmpty = false;\n    \n    // Check up to 10 rows below for an empty cell\n    for (let i = 0; i < 10; i++) {\n      const checkCell = worksheet.getCell(lastDataRow + i, columnIndex);\n      checkCell.load(\"values\");\n      await context.sync();\n      \n      const cellValue = checkCell.values[0][0];\n      if (cellValue === null || cellValue === undefined || cellValue === '') {\n        targetRow = lastDataRow + i;\n        foundEmpty = true;\n        break;\n      }\n    }\n    \n    // If no empty cell found, use the row after last data\n    if (!foundEmpty) {\n      targetRow = lastDataRow;\n    }\n    \n    const sumCell = worksheet.getCell(targetRow, columnIndex);\n    \n    console.log(`Summing range: ${rangeAddress}, placing result in row ${targetRow + 1}`);\n    \n    sumCell.formulas = [[`=SUM(${rangeAddress})`]];\n    await context.sync();\n    \n    sumCell.load([\"values\", \"address\"]);\n    await context.sync();\n    \n    return {\n      success: true,\n      message: `${params.columnName} 열의 합계를 ${sumCell.address}에 계산했습니다: ${formatNumber(sumCell.values[0][0])}`,\n      value: sumCell.values[0][0]\n    };\n  }\n  \n  // Original logic for range-based sum - handle multiple selections\n  let sourceRange;\n  let sumFormula;\n  \n  if (params.sourceRange) {\n    sourceRange = worksheet.getRange(params.sourceRange);\n    sourceRange.load([\"columnIndex\", \"rowIndex\", \"rowCount\", \"address\"]);\n    await context.sync();\n    sumFormula = `=SUM(${sourceRange.address})`;\n  } else {\n    // Handle multiple selections\n    try {\n      const selectedRanges = context.workbook.getSelectedRanges();\n      selectedRanges.load([\"areas\", \"areaCount\"]);\n      await context.sync();\n      \n      if (selectedRanges.areaCount > 1) {\n        // Multiple non-contiguous ranges selected\n        const rangeAddresses = [];\n        \n        for (let i = 0; i < selectedRanges.areas.items.length; i++) {\n          const area = selectedRanges.areas.items[i];\n          area.load(\"address\");\n        }\n        await context.sync();\n        \n        for (let i = 0; i < selectedRanges.areas.items.length; i++) {\n          rangeAddresses.push(selectedRanges.areas.items[i].address);\n        }\n        \n        sumFormula = `=SUM(${rangeAddresses.join(',')})`;\n        sourceRange = selectedRanges.areas.items[0];\n        sourceRange.load([\"columnIndex\", \"rowIndex\", \"rowCount\"]);\n        await context.sync();\n      } else {\n        // Single contiguous range\n        sourceRange = context.workbook.getSelectedRange();\n        sourceRange.load([\"columnIndex\", \"rowIndex\", \"rowCount\", \"address\"]);\n        await context.sync();\n        sumFormula = `=SUM(${sourceRange.address})`;\n      }\n    } catch (error) {\n      console.log('Error getting selected ranges, trying fallback:', error);\n      // For non-contiguous selections, getSelectedRange() fails\n      // Try to get selected ranges differently\n      try {\n        const selectedRanges = context.workbook.getSelectedRanges();\n        selectedRanges.load([\"areas\", \"areaCount\"]);\n        await context.sync();\n        \n        if (selectedRanges.areas.items.length > 0) {\n          const rangeAddresses = [];\n          for (let i = 0; i < selectedRanges.areas.items.length; i++) {\n            const area = selectedRanges.areas.items[i];\n            area.load(\"address\");\n          }\n          await context.sync();\n          \n          for (let i = 0; i < selectedRanges.areas.items.length; i++) {\n            rangeAddresses.push(selectedRanges.areas.items[i].address);\n          }\n          \n          sumFormula = `=SUM(${rangeAddresses.join(',')})`;\n          sourceRange = selectedRanges.areas.items[0];\n          sourceRange.load([\"columnIndex\", \"rowIndex\", \"rowCount\"]);\n          await context.sync();\n        } else {\n          throw new Error('No ranges selected');\n        }\n      } catch (fallbackError) {\n        console.error('Fallback also failed:', fallbackError);\n        return { success: false, error: '선택한 범위를 처리할 수 없습니다. 연속된 범위를 선택해주세요.' };\n      }\n    }\n  }\n  \n  if (params.addNewRow === true) {\n    // Add new row for sum\n    const column = sourceRange.columnIndex;\n    const lastRow = sourceRange.rowIndex + sourceRange.rowCount;\n    const newCell = worksheet.getCell(lastRow, column);\n    \n    newCell.formulas = [[sumFormula]];\n    await context.sync();\n    \n    newCell.load([\"values\", \"address\"]);\n    await context.sync();\n    \n    return {\n      success: true,\n      message: `${newCell.address}에 합계를 계산했습니다: ${formatNumber(newCell.values[0][0])}`,\n      value: newCell.values[0][0]\n    };\n  } else if (params.targetCell) {\n    // Sum to specific cell\n    const targetCell = worksheet.getRange(params.targetCell);\n    targetCell.formulas = [[sumFormula]];\n    await context.sync();\n    \n    targetCell.load([\"values\", \"address\"]);\n    await context.sync();\n    \n    return {\n      success: true,\n      message: `${targetCell.address}에 합계를 계산했습니다: ${formatNumber(targetCell.values[0][0])}`,\n      value: targetCell.values[0][0]\n    };\n  } else {\n    // Default: find an empty cell for the result\n    // For multiple non-contiguous selections, find an empty spot\n    const usedRange = worksheet.getUsedRange();\n    usedRange.load([\"rowCount\", \"columnCount\"]);\n    await context.sync();\n    \n    let targetCell;\n    \n    // If multiple ranges selected (formula contains comma), find empty cell strategically\n    if (sumFormula.includes(',')) {\n      // Multiple ranges - find empty area\n      const lastUsedRow = usedRange ? usedRange.rowCount : 1;\n      const lastUsedCol = usedRange ? usedRange.columnCount : 1;\n      \n      // Try to find empty cell to the right of selection\n      let foundEmpty = false;\n      for (let col = lastUsedCol; col < lastUsedCol + 5; col++) {\n        const checkCell = worksheet.getCell(sourceRange.rowIndex, col);\n        checkCell.load(\"values\");\n        await context.sync();\n        \n        if (!checkCell.values[0][0]) {\n          targetCell = checkCell;\n          foundEmpty = true;\n          break;\n        }\n      }\n      \n      // If not found to the right, try below the used range\n      if (!foundEmpty) {\n        for (let row = lastUsedRow; row < lastUsedRow + 5; row++) {\n          const checkCell = worksheet.getCell(row, 0);\n          checkCell.load(\"values\");\n          await context.sync();\n          \n          if (!checkCell.values[0][0]) {\n            targetCell = checkCell;\n            foundEmpty = true;\n            break;\n          }\n        }\n      }\n      \n      // If still not found, use a safe location below all data\n      if (!foundEmpty) {\n        targetCell = worksheet.getCell(lastUsedRow + 2, 0);\n      }\n    } else {\n      // Single range - find empty cell below the range\n      const column = sourceRange.columnIndex;\n      const startRow = sourceRange.rowIndex + sourceRange.rowCount;\n      \n      let targetRow = startRow;\n      let foundEmpty = false;\n      \n      // Check up to 10 rows below for an empty cell\n      for (let i = 0; i < 10; i++) {\n        const checkCell = worksheet.getCell(startRow + i, column);\n        checkCell.load(\"values\");\n        await context.sync();\n        \n        const cellValue = checkCell.values[0][0];\n        if (cellValue === null || cellValue === undefined || cellValue === '') {\n          targetRow = startRow + i;\n          foundEmpty = true;\n          break;\n        }\n      }\n      \n      // If no empty cell found in the next 10 rows, use the immediate next row\n      if (!foundEmpty) {\n        targetRow = startRow;\n      }\n      \n      targetCell = worksheet.getCell(targetRow, column);\n    }\n    \n    targetCell.formulas = [[sumFormula]];\n    await context.sync();\n    \n    targetCell.load([\"values\", \"address\"]);\n    await context.sync();\n    \n    return {\n      success: true,\n      message: `${targetCell.address}에 합계를 계산했습니다: ${formatNumber(targetCell.values[0][0])}`,\n      value: targetCell.values[0][0]\n    };\n  }\n}\n\n// Helper function to get headers\nasync function getHeaders(context) {\n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  const usedRange = worksheet.getUsedRange();\n  \n  if (!usedRange) {\n    return [];\n  }\n  \n  usedRange.load([\"values\", \"columnCount\"]);\n  await context.sync();\n  \n  const headers = [];\n  const headerRow = usedRange.values[0];\n  \n  if (headerRow) {\n    for (let i = 0; i < headerRow.length; i++) {\n      headers.push({\n        column: i + 1,\n        columnLetter: getColumnLetter(i),\n        label: headerRow[i] ? headerRow[i].toString() : ''\n      });\n    }\n  }\n  \n  return headers;\n}\n\n// Calculate average\nasync function executeAverage(context, params) {\n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  let sourceRange;\n  let rangeDescription = '';\n  let averageFormula = '';\n  \n  try {\n    // Handle different average types\n    if (params.averageType === 'column') {\n      if (params.column) {\n        // Column specified by letter (e.g., \"C\")\n        const usedRange = worksheet.getUsedRange();\n        if (!usedRange) {\n          return { success: false, error: '데이터가 없습니다.' };\n        }\n        \n        usedRange.load([\"rowCount\", \"columnCount\"]);\n        await context.sync();\n        \n        const columnIndex = params.column.charCodeAt(0) - 65;\n        if (columnIndex < 0 || columnIndex >= usedRange.columnCount) {\n          return { success: false, error: '유효하지 않은 열입니다.' };\n        }\n        \n        // Get column data starting from row 2 (skip header)\n        if (usedRange.rowCount > 1) {\n          sourceRange = worksheet.getRangeByIndexes(1, columnIndex, usedRange.rowCount - 1, 1);\n          rangeDescription = `${params.column}열`;\n        } else {\n          return { success: false, error: '평균을 계산할 데이터가 없습니다.' };\n        }\n        \n        sourceRange.load([\"address\"]);\n        await context.sync();\n        averageFormula = `=AVERAGE(${sourceRange.address})`;\n        \n      } else if (params.columnName) {\n        // Column specified by header name\n        const headers = await getHeaders(context);\n        const columnInfo = headers.find(h => h.label === params.columnName);\n        \n        if (!columnInfo) {\n          return { success: false, error: `\"${params.columnName}\" 열을 찾을 수 없습니다.` };\n        }\n        \n        const usedRange = worksheet.getUsedRange();\n        usedRange.load([\"rowCount\"]);\n        await context.sync();\n        \n        if (usedRange.rowCount > 1) {\n          sourceRange = worksheet.getRangeByIndexes(1, columnInfo.column - 1, usedRange.rowCount - 1, 1);\n          rangeDescription = `\"${params.columnName}\" 열`;\n        } else {\n          return { success: false, error: '평균을 계산할 데이터가 없습니다.' };\n        }\n        \n        sourceRange.load([\"address\"]);\n        await context.sync();\n        averageFormula = `=AVERAGE(${sourceRange.address})`;\n      }\n    } else if (params.averageType === 'row') {\n      // Row average (e.g., \"3행 평균\")\n      const usedRange = worksheet.getUsedRange();\n      if (!usedRange) {\n        return { success: false, error: '데이터가 없습니다.' };\n      }\n      \n      usedRange.load([\"rowCount\", \"columnCount\"]);\n      await context.sync();\n      \n      const rowIndex = params.row - 1; // Convert to 0-based\n      if (rowIndex < 0 || rowIndex >= usedRange.rowCount) {\n        return { success: false, error: '유효하지 않은 행입니다.' };\n      }\n      \n      // Get entire row data\n      sourceRange = worksheet.getRangeByIndexes(rowIndex, 0, 1, usedRange.columnCount);\n      rangeDescription = `${params.row}행`;\n      \n      sourceRange.load([\"address\", \"rowIndex\", \"columnIndex\", \"columnCount\"]);\n      await context.sync();\n      averageFormula = `=AVERAGE(${sourceRange.address})`;\n      \n    } else if (params.sourceRange) {\n      // Specific range (e.g., \"C1:C100\")\n      sourceRange = worksheet.getRange(params.sourceRange);\n      rangeDescription = params.sourceRange;\n      \n      sourceRange.load([\"address\"]);\n      await context.sync();\n      averageFormula = `=AVERAGE(${sourceRange.address})`;\n      \n    } else {\n      // Default: use selected range(s) - handle multiple selections\n      try {\n        // Try to get multiple selected ranges (for non-contiguous selections)\n        const selectedRanges = context.workbook.getSelectedRanges();\n        selectedRanges.load([\"areas\", \"areaCount\"]);\n        await context.sync();\n        \n        if (selectedRanges.areaCount > 1) {\n          // Multiple non-contiguous ranges selected\n          const rangeAddresses = [];\n          \n          for (let i = 0; i < selectedRanges.areas.items.length; i++) {\n            const area = selectedRanges.areas.items[i];\n            area.load(\"address\");\n          }\n          await context.sync();\n          \n          for (let i = 0; i < selectedRanges.areas.items.length; i++) {\n            rangeAddresses.push(selectedRanges.areas.items[i].address);\n          }\n          \n          averageFormula = `=AVERAGE(${rangeAddresses.join(',')})`;\n          rangeDescription = '선택한 셀';\n          \n          // Use the first selected range for positioning\n          sourceRange = selectedRanges.areas.items[0];\n          sourceRange.load([\"columnIndex\", \"rowIndex\", \"rowCount\", \"columnCount\"]);\n          await context.sync();\n          \n        } else {\n          // Single contiguous range\n          sourceRange = context.workbook.getSelectedRange();\n          rangeDescription = '선택한 범위';\n          \n          sourceRange.load([\"columnIndex\", \"rowIndex\", \"rowCount\", \"columnCount\", \"address\"]);\n          await context.sync();\n          averageFormula = `=AVERAGE(${sourceRange.address})`;\n        }\n        \n      } catch (error) {\n        console.log('Error getting selected ranges for average, trying fallback:', error);\n        // For non-contiguous selections, getSelectedRange() fails\n        try {\n          const selectedRanges = context.workbook.getSelectedRanges();\n          selectedRanges.load([\"areas\", \"areaCount\"]);\n          await context.sync();\n          \n          if (selectedRanges.areas.items.length > 0) {\n            const rangeAddresses = [];\n            for (let i = 0; i < selectedRanges.areas.items.length; i++) {\n              const area = selectedRanges.areas.items[i];\n              area.load(\"address\");\n            }\n            await context.sync();\n            \n            for (let i = 0; i < selectedRanges.areas.items.length; i++) {\n              rangeAddresses.push(selectedRanges.areas.items[i].address);\n            }\n            \n            averageFormula = `=AVERAGE(${rangeAddresses.join(',')})`;\n            rangeDescription = '선택한 셀';\n            sourceRange = selectedRanges.areas.items[0];\n            sourceRange.load([\"columnIndex\", \"rowIndex\", \"rowCount\", \"columnCount\"]);\n            await context.sync();\n          } else {\n            throw new Error('No ranges selected');\n          }\n        } catch (fallbackError) {\n          console.error('Average fallback also failed:', fallbackError);\n          return { success: false, error: '선택한 범위를 처리할 수 없습니다. 연속된 범위를 선택해주세요.' };\n        }\n      }\n    }\n    \n    // Determine where to place the result\n    let targetCell;\n    if (params.targetCell) {\n      targetCell = worksheet.getRange(params.targetCell);\n    } else if (params.averageType === 'row') {\n      // For row average, place result at the end of the row\n      const lastColumn = sourceRange.columnIndex + sourceRange.columnCount;\n      targetCell = worksheet.getCell(sourceRange.rowIndex, lastColumn);\n    } else {\n      // For column average or range, find first empty cell below the range\n      const column = sourceRange.columnIndex;\n      const startRow = sourceRange.rowIndex + sourceRange.rowCount;\n      \n      // Find the first empty cell below the selected range\n      let targetRow = startRow;\n      let foundEmpty = false;\n      \n      // Check up to 10 rows below for an empty cell\n      for (let i = 0; i < 10; i++) {\n        const checkCell = worksheet.getCell(startRow + i, column);\n        checkCell.load(\"values\");\n        await context.sync();\n        \n        const cellValue = checkCell.values[0][0];\n        if (cellValue === null || cellValue === undefined || cellValue === '') {\n          targetRow = startRow + i;\n          foundEmpty = true;\n          break;\n        }\n      }\n      \n      // If no empty cell found in the next 10 rows, use the immediate next row\n      if (!foundEmpty) {\n        targetRow = startRow;\n      }\n      \n      targetCell = worksheet.getCell(targetRow, column);\n    }\n    \n    // Apply AVERAGE formula\n    targetCell.formulas = [[averageFormula]];\n    targetCell.numberFormat = [[\"#,##0.00\"]]; // Format as number with 2 decimal places\n    await context.sync();\n    \n    targetCell.load([\"values\", \"address\"]);\n    await context.sync();\n    \n    return {\n      success: true,\n      message: `${rangeDescription}의 평균을 ${targetCell.address}에 계산했습니다: ${formatNumber(targetCell.values[0][0])}`,\n      value: targetCell.values[0][0]\n    };\n    \n  } catch (error) {\n    console.error('Error in executeAverage:', error);\n    return {\n      success: false,\n      error: `평균 계산 중 오류 발생: ${error.message}`\n    };\n  }\n}\n\n// Count cells\nasync function executeCount(context, params) {\n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  const sourceRange = params.sourceRange ? worksheet.getRange(params.sourceRange) : context.workbook.getSelectedRange();\n  \n  sourceRange.load([\"address\"]);\n  await context.sync();\n  \n  let formula;\n  if (params.countType === 'countif' && params.condition !== undefined) {\n    let criteria;\n    if (params.operator === 'contains') {\n      criteria = `\"*${params.condition}*\"`;\n    } else if (params.operator === 'equals') {\n      criteria = typeof params.condition === 'string' ? `\"${params.condition}\"` : params.condition;\n    } else if (params.operator && ['>', '<', '>=', '<=', '<>'].includes(params.operator)) {\n      criteria = `\"${params.operator}${params.condition}\"`;\n    } else {\n      if (typeof params.condition === 'string') {\n        criteria = `\"*${params.condition}*\"`;\n      } else {\n        criteria = params.condition;\n      }\n    }\n    formula = `=COUNTIF(${sourceRange.address}, ${criteria})`;\n  } else if (params.countType === 'counta') {\n    formula = `=COUNTA(${sourceRange.address})`;\n  } else {\n    formula = `=COUNT(${sourceRange.address})`;\n  }\n  \n  let resultCell;\n  if (params.targetCell) {\n    resultCell = worksheet.getRange(params.targetCell);\n  } else {\n    const usedRange = worksheet.getUsedRange();\n    await context.sync();\n    \n    const lastRow = usedRange ? usedRange.rowCount : 1;\n    const lastCol = usedRange ? usedRange.columnCount : 1;\n    resultCell = worksheet.getCell(lastRow, lastCol);\n  }\n  \n  resultCell.formulas = [[formula]];\n  await context.sync();\n  \n  resultCell.load(\"values\");\n  await context.sync();\n  \n  return {\n    success: true,\n    message: params.countType === 'countif' ? \n      `\"${params.condition}\"을(를) 포함하는 셀의 개수: ${formatNumber(resultCell.values[0][0])}개` :\n      `개수를 계산했습니다: ${formatNumber(resultCell.values[0][0])}개`,\n    value: resultCell.values[0][0]\n  };\n}\n\n// Format cells\nasync function executeFormat(context, params) {\n  console.log('executeFormat called with params:', params);\n  \n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  let ranges = [];\n  \n  if (params.range) {\n    ranges.push(worksheet.getRange(params.range));\n  } else {\n    // Handle multiple selections\n    try {\n      const selectedRanges = context.workbook.getSelectedRanges();\n      selectedRanges.load([\"areas\", \"areaCount\"]);\n      await context.sync();\n      \n      if (selectedRanges.areaCount > 1) {\n        // Multiple non-contiguous ranges selected\n        for (let i = 0; i < selectedRanges.areas.items.length; i++) {\n          ranges.push(selectedRanges.areas.items[i]);\n        }\n      } else {\n        // Single contiguous range\n        ranges.push(context.workbook.getSelectedRange());\n      }\n    } catch (error) {\n      console.log('Error getting selected ranges for format:', error);\n      return { success: false, error: '선택한 범위를 처리할 수 없습니다. 연속된 범위를 선택해주세요.' };\n    }\n  }\n  \n  // Load format for all ranges\n  for (const range of ranges) {\n    range.load(\"format\");\n  }\n  await context.sync();\n  \n  // Apply formatting to all ranges\n  for (const range of ranges) {\n    if (params.bold !== undefined) {\n      range.format.font.bold = params.bold;\n    }\n    \n    if (params.italic !== undefined) {\n      range.format.font.italic = params.italic;\n    }\n    \n    if (params.fontSize) {\n      range.format.font.size = params.fontSize;\n    }\n    \n    if (params.fontColor) {\n      range.format.font.color = params.fontColor;\n    }\n    \n    if (params.backgroundColor) {\n      range.format.fill.color = params.backgroundColor;\n    }\n    \n    if (params.horizontalAlignment) {\n      range.format.horizontalAlignment = params.horizontalAlignment === 'left' ? 'Left' :\n                                       params.horizontalAlignment === 'center' ? 'Center' :\n                                       params.horizontalAlignment === 'right' ? 'Right' : 'General';\n    }\n    \n    if (params.numberFormat) {\n      // Handle specific format types\n      let format = params.numberFormat;\n      if (format === 'number' || format === '숫자') {\n        format = '#,##0';\n      } else if (format === 'currency' || format === '원화' || format === 'won' || format === '통화') {\n        format = '₩#,##0';\n      } else if (format === 'currency_decimal' || format === '원화_소수') {\n        format = '₩#,##0.00';\n      } else if (format === 'percentage' || format === '퍼센트' || format === '백분율') {\n        format = '0%';\n      } else if (format === 'percentage_decimal' || format === '퍼센트_소수') {\n        format = '0.00%';\n      } else if (format === 'date' || format === '날짜') {\n        format = 'yyyy-mm-dd';\n      } else if (format === 'time' || format === '시간') {\n        format = 'hh:mm:ss';\n      } else if (format === 'text' || format === '텍스트') {\n        format = '@';\n      } else if (format === 'general' || format === '일반') {\n        format = 'General';\n      }\n      \n      // Set number format for the range\n      range.numberFormat = format;\n    }\n  }\n  \n  await context.sync();\n  \n  return {\n    success: true,\n    message: '서식이 적용되었습니다.'\n  };\n}\n\n// Sort data\nasync function executeSort(context, params) {\n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  const range = params.range ? worksheet.getRange(params.range) : worksheet.getUsedRange();\n  \n  const column = params.column || 1;\n  const ascending = params.ascending !== undefined ? params.ascending : true;\n  \n  range.sort.apply([\n    {\n      key: column - 1, // Excel API uses 0-based index\n      ascending: ascending\n    }\n  ]);\n  \n  await context.sync();\n  \n  const columnLetter = getColumnLetter(column - 1);\n  \n  return {\n    success: true,\n    message: `${columnLetter}열 기준으로 ${ascending ? '오름차순' : '내림차순'} 정렬되었습니다.`\n  };\n}\n\n// Create chart\nasync function executeChart(context, params) {\n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  let sourceData;\n  let dataAddress = '';\n  \n  console.log('Creating chart with params:', params);\n  \n  if (params.range) {\n    sourceData = worksheet.getRange(params.range);\n    sourceData.load([\"address\", \"values\"]);\n    await context.sync();\n    dataAddress = sourceData.address;\n  } else {\n    // Handle multiple selections for chart data\n    try {\n      const selectedRanges = context.workbook.getSelectedRanges();\n      selectedRanges.load([\"areas\", \"areaCount\"]);\n      await context.sync();\n      \n      if (selectedRanges.areaCount > 1) {\n        // For charts with multiple non-contiguous ranges, create a temporary data range\n        console.log('Multiple ranges selected for chart, need to consolidate data');\n        \n        // Collect all selected ranges\n        const allRanges = [];\n        for (let i = 0; i < selectedRanges.areas.items.length; i++) {\n          const area = selectedRanges.areas.items[i];\n          area.load([\"address\", \"values\", \"rowIndex\", \"columnIndex\"]);\n          allRanges.push(area);\n        }\n        await context.sync();\n        \n        // Find an empty area to create temporary consolidated data\n        const usedRange = worksheet.getUsedRangeOrNullObject();\n        usedRange.load([\"isNullObject\", \"rowCount\", \"columnCount\"]);\n        await context.sync();\n        \n        const tempStartRow = !usedRange.isNullObject ? usedRange.rowCount + 2 : 1;\n        const tempStartCol = 0;\n        \n        // Consolidate data into a contiguous range - handle individual cells\n        const consolidatedData = [];\n        let maxColumns = 1;\n        \n        for (const range of allRanges) {\n          if (range.values && range.values.length > 0) {\n            // Each range might be a single cell or a range of cells\n            for (const row of range.values) {\n              consolidatedData.push(row);\n              maxColumns = Math.max(maxColumns, row.length);\n            }\n          }\n        }\n        \n        // Write consolidated data to temporary location\n        if (consolidatedData.length > 0) {\n          console.log('Consolidated data:', consolidatedData);\n          console.log('Number of ranges:', allRanges.length);\n          \n          try {\n            // For individual cells, reorganize data for chart\n            if (consolidatedData.every(row => row.length === 1)) {\n              // All are single cells - create label-value pairs\n              const reorganizedData = [];\n              for (let i = 0; i < consolidatedData.length; i++) {\n                const value = consolidatedData[i][0];\n                // Skip empty cells\n                if (value !== null && value !== undefined && value !== '') {\n                  reorganizedData.push([`Item ${i+1}`, value]);\n                }\n              }\n              \n              if (reorganizedData.length === 0) {\n                return { success: false, error: '선택한 셀에 유효한 데이터가 없습니다.' };\n              }\n              \n              console.log('Reorganized data for chart:', reorganizedData);\n              \n              const tempRange = worksheet.getRangeByIndexes(\n                tempStartRow, \n                tempStartCol, \n                reorganizedData.length, \n                2  // Always 2 columns for label-value pairs\n              );\n              \n              tempRange.values = reorganizedData;\n              await context.sync();\n              \n              sourceData = tempRange;\n            } else {\n              // Mixed or multi-column data - use as-is\n              const tempRange = worksheet.getRangeByIndexes(\n                tempStartRow, \n                tempStartCol, \n                consolidatedData.length, \n                maxColumns\n              );\n              \n              tempRange.values = consolidatedData;\n              await context.sync();\n              \n              sourceData = tempRange;\n            }\n            \n            sourceData.load([\"address\", \"values\", \"rowCount\", \"columnCount\"]);\n            await context.sync();\n            \n            console.log('Temp range created:', {\n              address: sourceData.address,\n              rowCount: sourceData.rowCount,\n              columnCount: sourceData.columnCount,\n              firstValue: sourceData.values[0]\n            });\n            \n            dataAddress = sourceData.address;\n          } catch (error) {\n            console.error('Error creating temporary range:', error);\n            return { success: false, error: '임시 데이터 범위 생성 중 오류가 발생했습니다.' };\n          }\n        } else {\n          return { success: false, error: '선택한 셀에 데이터가 없습니다.' };\n        }\n      } else {\n        // Single contiguous range\n        sourceData = context.workbook.getSelectedRange();\n        sourceData.load([\"address\", \"values\"]);\n        await context.sync();\n        dataAddress = sourceData.address;\n      }\n    } catch (error) {\n      console.log('Error getting selected ranges for chart:', error);\n      return { success: false, error: '선택한 범위를 처리할 수 없습니다. 연속된 범위를 선택해주세요.' };\n    }\n  }\n  \n  console.log('Chart data range:', dataAddress);\n  \n  // Determine chart type\n  let chartType;\n  if (params.chartType === 'bar' || params.chartType === '막대') {\n    chartType = Excel.ChartType.columnClustered;\n  } else if (params.chartType === 'line' || params.chartType === '선') {\n    chartType = Excel.ChartType.line;\n  } else if (params.chartType === 'pie' || params.chartType === '원') {\n    chartType = Excel.ChartType.pie;\n  } else if (params.chartType === 'scatter' || params.chartType === '분산형') {\n    chartType = Excel.ChartType.xyscatter;\n  } else {\n    // Default to column chart\n    chartType = Excel.ChartType.columnClustered;\n  }\n  \n  try {\n    // Validate source data before creating chart\n    if (!sourceData) {\n      return { success: false, error: '차트 데이터가 없습니다.' };\n    }\n    \n    // Create the chart with error handling\n    console.log('Creating chart with type:', chartType);\n    console.log('Source data address:', dataAddress);\n    \n    const chart = worksheet.charts.add(chartType, sourceData, Excel.ChartSeriesBy.auto);\n    \n    // Set chart properties\n    chart.title.text = params.title || '차트';\n    chart.height = 300;\n    chart.width = 400;\n    \n    // Position the chart\n    chart.left = params.offsetX || 100;\n    chart.top = params.offsetY || 100;\n    \n    // Set legend position\n    chart.legend.position = Excel.ChartLegendPosition.bottom;\n    chart.legend.visible = true;\n    \n    await context.sync();\n    \n    console.log('Chart created successfully');\n  } catch (chartError) {\n    console.error('Error creating chart:', chartError);\n    console.error('Chart error details:', {\n      message: chartError.message,\n      stack: chartError.stack,\n      chartType: chartType,\n      dataAddress: dataAddress\n    });\n    \n    // Try a simpler chart type as fallback\n    if (chartType !== Excel.ChartType.columnClustered) {\n      console.log('Trying fallback to column chart...');\n      try {\n        const chart = worksheet.charts.add(Excel.ChartType.columnClustered, sourceData, Excel.ChartSeriesBy.auto);\n        chart.title.text = params.title || '차트';\n        chart.height = 300;\n        chart.width = 400;\n        chart.left = params.offsetX || 100;\n        chart.top = params.offsetY || 100;\n        await context.sync();\n        \n        return {\n          success: true,\n          message: `${dataAddress} 범위로 막대 차트가 생성되었습니다. (원래 요청한 차트 타입이 지원되지 않아 막대 차트로 대체되었습니다.)`\n        };\n      } catch (fallbackError) {\n        console.error('Fallback chart also failed:', fallbackError);\n        return { success: false, error: '차트 생성에 실패했습니다. 데이터 형식을 확인해주세요.' };\n      }\n    }\n    \n    return { success: false, error: `차트 생성 중 오류: ${chartError.message}` };\n  }\n  \n  return {\n    success: true,\n    message: `${dataAddress} 범위로 ${params.chartType || '막대'} 차트가 생성되었습니다.`\n  };\n}\n\n// Add conditional formatting\nasync function executeConditionalFormat(context, params) {\n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  let ranges = [];\n  \n  console.log('Applying conditional format with params:', params);\n  \n  if (params.range) {\n    ranges.push(worksheet.getRange(params.range));\n  } else {\n    // If no range specified, use the entire used range of the worksheet\n    console.log('No range specified for conditional format, using entire sheet');\n    const usedRange = worksheet.getUsedRangeOrNullObject();\n    usedRange.load(\"isNullObject\");\n    await context.sync();\n    \n    if (!usedRange.isNullObject) {\n      // Use the entire used range\n      ranges.push(usedRange);\n    } else {\n      // If no used range, apply to a large default range\n      // Excel will optimize this automatically\n      const defaultRange = worksheet.getRange(\"A1:XFD1048576\");\n      ranges.push(defaultRange);\n    }\n  }\n  \n  // Apply conditional formatting to all ranges\n  try {\n    for (const range of ranges) {\n      // Load range to ensure it's valid\n      range.load(\"address\");\n      await context.sync();\n      \n      console.log('Applying conditional format to range:', range.address);\n      \n      // Simply apply conditional format to the entire range\n      // Excel will automatically skip non-numeric cells for numeric comparisons\n      const conditionalFormat = range.conditionalFormats.add(Excel.ConditionalFormatType.cellValue);\n      \n      // Set the rule based on condition\n      if (params.condition === 'greater_than' && params.value !== undefined) {\n        conditionalFormat.cellValue.rule = {\n          formula1: params.value.toString(),\n          operator: Excel.ConditionalCellValueOperator.greaterThan\n        };\n      } else if (params.condition === 'less_than' && params.value !== undefined) {\n        conditionalFormat.cellValue.rule = {\n          formula1: params.value.toString(),\n          operator: Excel.ConditionalCellValueOperator.lessThan\n        };\n      } else if (params.condition === 'equal_to' && params.value !== undefined) {\n        conditionalFormat.cellValue.rule = {\n          formula1: params.value.toString(),\n          operator: Excel.ConditionalCellValueOperator.equalTo\n        };\n      } else if (params.condition === 'text_contains' && params.value !== undefined) {\n        conditionalFormat.cellValue.rule = {\n          formula1: params.value.toString(),\n          operator: Excel.ConditionalCellValueOperator.containsText\n        };\n      } else {\n        // Default to greater than\n        conditionalFormat.cellValue.rule = {\n          formula1: (params.value || 0).toString(),\n          operator: Excel.ConditionalCellValueOperator.greaterThan\n        };\n      }\n      \n      // Set the format\n      conditionalFormat.cellValue.format.fill.color = params.backgroundColor || \"#00FF00\";\n      if (params.fontColor) {\n        conditionalFormat.cellValue.format.font.color = params.fontColor;\n      }\n      if (params.bold) {\n        conditionalFormat.cellValue.format.font.bold = true;\n      }\n    }\n  } catch (formatError) {\n    console.error('Error applying conditional format:', formatError);\n    return {\n      success: false,\n      error: `조건부 서식 적용 중 오류: ${formatError.message}`\n    };\n  }\n  \n  await context.sync();\n  \n  return {\n    success: true,\n    message: `조건부 서식이 적용되었습니다. (${params.condition} ${params.value || ''})`\n  };\n}\n\n// Translate column contents\nasync function executeTranslate(context, params) {\n  console.log('executeTranslate called with params:', params);\n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  \n  if (!params.targetLanguage) {\n    return { success: false, error: '대상 언어를 지정해주세요.' };\n  }\n  \n  let sourceRange;\n  let targetColumnIndex;\n  \n  if (params.sourceRange) {\n    // Handle column ranges like \"C:C\" by intersecting with used range\n    if (params.sourceRange.match(/^[A-Z]+:[A-Z]+$/)) {\n      console.log('Handling column range:', params.sourceRange);\n      const usedRange = worksheet.getUsedRange();\n      if (!usedRange) {\n        return { success: false, error: '번역할 데이터가 없습니다.' };\n      }\n      \n      usedRange.load([\"rowCount\", \"columnCount\"]);\n      await context.sync();\n      \n      console.log('Used range:', {\n        rowCount: usedRange.rowCount,\n        columnCount: usedRange.columnCount\n      });\n      \n      // Get the column letter from the range (e.g., \"C\" from \"C:C\")\n      const columnLetter = params.sourceRange.split(':')[0];\n      const columnIndex = columnLetter.charCodeAt(0) - 65;\n      \n      // Get only the used portion of the column, starting from row 2 (skip header)\n      if (usedRange.rowCount > 1) {\n        sourceRange = worksheet.getRangeByIndexes(1, columnIndex, usedRange.rowCount - 1, 1);\n      } else {\n        return { success: false, error: '번역할 데이터가 없습니다.' };\n      }\n      \n      // Handle target range similarly\n      if (params.targetRange && params.targetRange.match(/^[A-Z]+:[A-Z]+$/)) {\n        const targetColumnLetter = params.targetRange.split(':')[0];\n        targetColumnIndex = targetColumnLetter.charCodeAt(0) - 65;\n        console.log('Target column calculation:', {\n          targetRange: params.targetRange,\n          targetColumnLetter,\n          targetColumnIndex\n        });\n      } else {\n        // If no target specified, use next column\n        targetColumnIndex = columnIndex + 1;\n        console.log('Using next column as target:', {\n          sourceColumnIndex: columnIndex,\n          targetColumnIndex\n        });\n      }\n    } else {\n      // Handle specific ranges like \"B2:B40\"\n      sourceRange = worksheet.getRange(params.sourceRange);\n      \n      // Parse target column if specified\n      if (params.targetRange) {\n        if (params.targetRange.match(/^[A-Z]+:[A-Z]+$/)) {\n          // Extract column letter from targetRange like \"E:E\"\n          const targetColumnLetter = params.targetRange.split(':')[0];\n          targetColumnIndex = targetColumnLetter.charCodeAt(0) - 65;\n          console.log('Target column parsed from targetRange:', {\n            targetRange: params.targetRange,\n            targetColumnLetter,\n            targetColumnIndex\n          });\n        }\n      }\n    }\n  } else if (params.sourceColumn) {\n    const columnIndex = params.sourceColumn.charCodeAt(0) - 65;\n    const usedRange = worksheet.getUsedRange();\n    usedRange.load([\"rowCount\"]);\n    await context.sync();\n    \n    if (usedRange.rowCount > 1) {\n      sourceRange = worksheet.getRangeByIndexes(1, columnIndex, usedRange.rowCount - 1, 1);\n    } else {\n      return { success: false, error: '번역할 데이터가 없습니다.' };\n    }\n    \n    targetColumnIndex = params.targetColumn === 'next' ? columnIndex + 1 :\n                       params.targetColumn ? params.targetColumn.charCodeAt(0) - 65 : columnIndex + 1;\n  } else {\n    return { success: false, error: '번역할 열을 지정해주세요.' };\n  }\n  \n  sourceRange.load([\"values\", \"rowIndex\", \"columnIndex\", \"rowCount\"]);\n  await context.sync();\n  \n  console.log('Source range loaded:', {\n    rowIndex: sourceRange.rowIndex,\n    columnIndex: sourceRange.columnIndex,\n    rowCount: sourceRange.rowCount,\n    values: sourceRange.values ? `${sourceRange.values.length} rows` : 'null'\n  });\n  \n  const sourceValues = sourceRange.values;\n  if (!sourceValues || sourceValues.length === 0) {\n    return { success: false, error: '번역할 데이터가 없습니다.' };\n  }\n  \n  const translations = [];\n  const batchSize = 20;\n  \n  // Translate in batches\n  for (let i = 0; i < sourceValues.length; i += batchSize) {\n    const batch = sourceValues.slice(i, Math.min(i + batchSize, sourceValues.length));\n    const batchTexts = batch.map(row => row[0]).filter(text => text);\n    \n    if (batchTexts.length > 0) {\n      const translatedBatch = await translateBatch(batchTexts, params.targetLanguage, params.sourceLanguage);\n      \n      // Check if translatedBatch is valid\n      if (!translatedBatch || !Array.isArray(translatedBatch)) {\n        console.error('Invalid translation batch received:', translatedBatch);\n        // Mark all as translation failed\n        for (let j = 0; j < batch.length; j++) {\n          if (batch[j][0]) {\n            translations.push([{ text: '번역 실패', isError: true }]);\n          } else {\n            translations.push([{ text: '', isError: false }]);\n          }\n        }\n      } else {\n        console.log('Processing translation batch:', {\n          batchLength: batch.length,\n          translatedBatchLength: translatedBatch.length,\n          sampleTranslations: translatedBatch.slice(0, 3),\n          firstTranslation: translatedBatch[0],\n          translationType: typeof translatedBatch[0],\n          rawData: JSON.stringify(translatedBatch.slice(0, 3))\n        });\n        \n        let translationIndex = 0;\n        for (let j = 0; j < batch.length; j++) {\n          if (batch[j][0]) {\n            const translatedText = translatedBatch[translationIndex] || '';\n            // Check if translation is empty or failed\n            if (!translatedText || translatedText.trim() === '') {\n              translations.push([{ text: '번역 실패', isError: true }]);\n            } else {\n              translations.push([{ text: translatedText, isError: false }]);\n            }\n            if (j < 3) {\n              console.log(`Translation ${j}: \"${batch[j][0]}\" -> \"${translatedText}\"`);\n            }\n            translationIndex++;\n          } else {\n            // Keep empty rows as empty\n            translations.push([{ text: '', isError: false }]);\n          }\n        }\n      }\n    } else {\n      for (let j = 0; j < batch.length; j++) {\n        translations.push([{ text: '', isError: false }]);\n      }\n    }\n    \n    // Show progress\n    if (i % 100 === 0 && i > 0) {\n      showStatus(`번역 중... ${Math.round((i / sourceValues.length) * 100)}%`, 'info');\n    }\n  }\n  \n  // Write translations\n  console.log('Writing translations to target column:', {\n    rowIndex: sourceRange.rowIndex,\n    targetColumnIndex: targetColumnIndex || sourceRange.columnIndex + 1,\n    translationsCount: translations.length,\n    sampleTranslations: translations.slice(0, 3).map(t => t[0])\n  });\n  console.log('First 5 translations raw:', JSON.stringify(translations.slice(0, 5)));\n  console.log('Translation content check:', {\n    first: translations[0] ? translations[0][0] : 'null',\n    second: translations[1] ? translations[1][0] : 'null',\n    third: translations[2] ? translations[2][0] : 'null',\n    isEmpty: translations[0] && translations[0][0] === ''\n  });\n  \n  // DEBUG: Check if translations contain original text instead of translations\n  console.log('DEBUG: Comparing source and translations:');\n  for (let i = 0; i < Math.min(5, translations.length); i++) {\n    console.log(`  [${i}] Source: \"${sourceValues[i][0]}\" -> Translation: \"${translations[i][0]}\"`);\n  }\n  \n  // Ensure targetColumnIndex is set correctly\n  if (targetColumnIndex === undefined) {\n    // If no target column specified, use the next column after source\n    targetColumnIndex = sourceRange.columnIndex + 1;\n    console.log('No target column specified, using next column:', targetColumnIndex);\n  }\n  \n  const targetRange = worksheet.getRangeByIndexes(\n    sourceRange.rowIndex,\n    targetColumnIndex,\n    translations.length,\n    1\n  );\n  \n  targetRange.load([\"address\", \"values\"]);\n  await context.sync();\n  console.log('Target range address:', targetRange.address);\n  console.log('Existing target values (first 3):', targetRange.values.slice(0, 3));\n  \n  // Clear existing values first\n  targetRange.clear(Excel.ClearApplyTo.contents);\n  await context.sync();\n  console.log('Target range cleared');\n  \n  // Ensure translations are properly formatted as 2D array\n  console.log('Setting target range values:', {\n    translationsLength: translations.length,\n    firstTranslation: translations[0],\n    isArray: Array.isArray(translations),\n    is2DArray: Array.isArray(translations[0])\n  });\n  \n  // Process translations and prepare values\n  const stringTranslations = [];\n  const errorRows = [];\n  \n  for (let i = 0; i < translations.length; i++) {\n    const translation = translations[i][0];\n    if (translation && typeof translation === 'object') {\n      stringTranslations.push([translation.text]);\n      if (translation.isError) {\n        errorRows.push(i);\n      }\n    } else {\n      // Handle legacy format\n      stringTranslations.push([String(translation || '')]);\n    }\n  }\n  \n  console.log('String translations (first 3):', stringTranslations.slice(0, 3));\n  console.log('Error rows:', errorRows.length, 'rows marked as errors');\n  \n  // Set the values\n  targetRange.values = stringTranslations;\n  await context.sync();\n  \n  // Apply error styling to failed translations\n  if (errorRows.length > 0) {\n    for (const rowIndex of errorRows) {\n      const errorCell = targetRange.getCell(rowIndex, 0);\n      errorCell.format.fill.color = \"#FFE6E6\"; // Light red background\n      errorCell.format.font.color = \"#CC0000\"; // Dark red text\n      errorCell.format.font.bold = true;\n    }\n    await context.sync();\n  }\n  \n  console.log('Translations written to Excel with error styling applied');\n  \n  // Verify the values were actually written\n  targetRange.load([\"values\", \"text\", \"valueTypes\"]);\n  await context.sync();\n  console.log('Verification - Target range:', {\n    address: targetRange.address,\n    values: targetRange.values.slice(0, 3),\n    text: targetRange.text.slice(0, 3),\n    valueTypes: targetRange.valueTypes.slice(0, 3),\n    actualFirstValue: targetRange.values[0] ? targetRange.values[0][0] : 'null',\n    firstThreeValues: [\n      targetRange.values[0] ? targetRange.values[0][0] : 'empty',\n      targetRange.values[1] ? targetRange.values[1][0] : 'empty',\n      targetRange.values[2] ? targetRange.values[2][0] : 'empty'\n    ]\n  });\n  \n  // Try alternative method - set each cell individually for debugging\n  if (translations.length > 0) {\n    const isEmpty = !targetRange.values[0] || !targetRange.values[0][0] || targetRange.values[0][0] === '';\n    console.log('Checking if values are empty:', {\n      isEmpty,\n      firstValue: targetRange.values[0] ? targetRange.values[0][0] : 'null',\n      firstValueLength: targetRange.values[0] && targetRange.values[0][0] ? targetRange.values[0][0].length : 0\n    });\n    \n    if (isEmpty) {\n      console.log('Values not visible, trying individual cell approach...');\n      // Try setting just the first few cells individually\n      for (let i = 0; i < Math.min(3, translations.length); i++) {\n        const cellRow = sourceRange.rowIndex + i;\n        const cellCol = targetColumnIndex || sourceRange.columnIndex + 1;\n        const cell = worksheet.getCell(cellRow, cellCol);\n        const cellValue = stringTranslations[i][0];\n        \n        console.log(`Setting cell (${cellRow},${cellCol}) to: \"${cellValue}\"`);\n        cell.values = [[cellValue]];\n        \n        await context.sync();\n        \n        // Verify it was set\n        cell.load(\"values\");\n        await context.sync();\n        console.log(`Cell ${i} after setting:`, cell.values[0][0]);\n      }\n    }\n  }\n  \n  // Add header\n  const headerCell = worksheet.getCell(0, targetColumnIndex || sourceRange.columnIndex + 1);\n  const sourceHeaderCell = worksheet.getCell(0, sourceRange.columnIndex);\n  sourceHeaderCell.load(\"values\");\n  await context.sync();\n  \n  headerCell.values = [[`${sourceHeaderCell.values[0][0]} (${params.targetLanguage})`]];\n  await context.sync();\n  \n  return {\n    success: true,\n    message: `번역이 완료되었습니다. (${sourceValues.length}개 항목)`\n  };\n}\n\n// Translate a batch of texts through proxy\nasync function translateBatch(texts, targetLanguage, sourceLanguage) {\n  try {\n    console.log('translateBatch called with', texts.length, 'texts');\n    const response = await fetch(API_PROXY_URL, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        command: `Translate these items to ${targetLanguage}: ${texts.join(', ')}`,\n        sheetContext: {\n          operation: 'translate_batch',\n          texts: texts,\n          targetLanguage: targetLanguage,\n          sourceLanguage: sourceLanguage\n        }\n      })\n    });\n    \n    console.log('Translation response status:', response.status);\n    \n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    \n    const result = await response.json();\n    console.log('Translation result:', result);\n    \n    if (result.success && result.data && result.data.translations) {\n      console.log('Translations received:', result.data.translations.length);\n      console.log('First 3 translations from API:', result.data.translations.slice(0, 3));\n      console.log('Raw translations data:', JSON.stringify(result.data.translations.slice(0, 5)));\n      return result.data.translations;\n    } else if (result.error) {\n      console.error('Translation API error:', result.error);\n      throw new Error(result.error);\n    } else {\n      console.error('Invalid translation response structure:', result);\n      throw new Error('번역 응답을 받을 수 없습니다.');\n    }\n  } catch (error) {\n    console.error('Translation error:', error);\n    return texts.map(() => '');\n  }\n}\n\n// Helper functions\nfunction getColumnLetter(columnIndex) {\n  let columnLetter = '';\n  let tempIndex = columnIndex;\n  \n  while (tempIndex >= 0) {\n    columnLetter = String.fromCharCode((tempIndex % 26) + 65) + columnLetter;\n    tempIndex = Math.floor(tempIndex / 26) - 1;\n  }\n  \n  return columnLetter;\n}\n\nfunction formatNumber(value) {\n  if (typeof value === 'number') {\n    if (Number.isInteger(value)) {\n      return value.toLocaleString('ko-KR');\n    } else {\n      return value.toLocaleString('ko-KR', { minimumFractionDigits: 0, maximumFractionDigits: 2 });\n    }\n  }\n  return value;\n}\n\nfunction showStatus(message, type) {\n  const status = document.getElementById('status');\n  status.textContent = message;\n  status.className = 'status-message ' + type;\n  status.style.display = 'block';\n  \n  if (window.statusTimeout) {\n    clearTimeout(window.statusTimeout);\n  }\n  \n  if (type === 'success') {\n    window.statusTimeout = setTimeout(() => {\n      status.style.display = 'none';\n    }, 5000);\n  }\n}\n\nfunction clearInput() {\n  document.getElementById('commandInput').value = '';\n  document.getElementById('status').style.display = 'none';\n}\n\nfunction setCommand(command) {\n  document.getElementById('commandInput').value = command;\n  document.getElementById('commandInput').focus();\n}\n\nfunction showSettings() {\n  showStatus('이 애드인은 보안 서버를 통해 AI 기능을 제공합니다. 별도의 API 키 설정이 필요하지 않습니다.', 'info');\n}\n\n// Test backend connection\nasync function testBackendConnection() {\n  try {\n    console.log('Testing backend connection...');\n    const testUrl = 'https://excel-addon-backend.vercel.app/api/test';\n    \n    const response = await fetch(testUrl, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({ test: true })\n    });\n    \n    console.log('Test response status:', response.status);\n    console.log('Test response headers:', response.headers);\n    \n    const data = await response.json();\n    console.log('Test response data:', data);\n    \n    showStatus('백엔드 연결 테스트 성공', 'success');\n  } catch (error) {\n    console.error('Backend test error:', error);\n    showStatus('백엔드 연결 테스트 실패: ' + error.message, 'error');\n  }\n}\n\n// Format cell borders\nasync function executeBorderFormat(context, params) {\n  console.log('executeBorderFormat called with params:', params);\n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  \n  try {\n    let targetRanges = [];\n    \n    // Determine the range based on params\n    if (!params.range) {\n      // No range specified - handle multiple selections\n      try {\n        const selectedRanges = context.workbook.getSelectedRanges();\n        selectedRanges.load([\"areas\", \"areaCount\"]);\n        await context.sync();\n        \n        if (selectedRanges.areaCount > 1) {\n          // Multiple non-contiguous ranges selected\n          for (let i = 0; i < selectedRanges.areas.items.length; i++) {\n            targetRanges.push(selectedRanges.areas.items[i]);\n          }\n        } else {\n          // Single contiguous range\n          targetRanges.push(context.workbook.getSelectedRange());\n        }\n      } catch (error) {\n        console.log('Error getting selected ranges for border format/removal:', error);\n        return { success: false, error: '선택한 범위를 처리할 수 없습니다. 연속된 범위를 선택해주세요.' };\n      }\n    } else if (params.range === 'all' || params.range === '전체') {\n      // Entire sheet\n      const usedRange = worksheet.getUsedRangeOrNullObject();\n      usedRange.load(\"isNullObject\");\n      await context.sync();\n      \n      if (usedRange.isNullObject) {\n        return { success: false, error: '시트에 데이터가 없습니다.' };\n      } else {\n        targetRanges.push(usedRange);\n      }\n    } else {\n      // Specific range provided\n      targetRanges.push(worksheet.getRange(params.range));\n    }\n    \n    // Load all ranges\n    for (const range of targetRanges) {\n      range.load([\"address\", \"rowCount\", \"columnCount\"]);\n    }\n    await context.sync();\n    \n    console.log('Target ranges for border format:', targetRanges.length);\n    for (let i = 0; i < targetRanges.length; i++) {\n      console.log(`Range ${i + 1}:`, {\n        address: targetRanges[i].address,\n        rowCount: targetRanges[i].rowCount,\n        columnCount: targetRanges[i].columnCount\n      });\n    }\n    \n    // Determine which borders to format\n    const borderType = params.borderType || 'all';\n    const color = params.color || '#000000';\n    const style = params.style || 'Continuous';\n    \n    // Map style names to Excel constants\n    const styleMap = {\n      'continuous': 'Continuous',\n      'dash': 'Dash',\n      'dashdot': 'DashDot',\n      'double': 'Double',\n      'dot': 'Dot',\n      'dashdotdot': 'DashDotDot',\n      'slantdashdot': 'SlantDashDot'\n    };\n    \n    const excelStyle = styleMap[style.toLowerCase()] || 'Continuous';\n    \n    // Apply border formatting to all selected ranges\n    for (const targetRange of targetRanges) {\n      if (borderType === 'all') {\n        // Format all borders\n        const borderItems = ['EdgeTop', 'EdgeBottom', 'EdgeLeft', 'EdgeRight', 'InsideVertical', 'InsideHorizontal'];\n        \n        for (const borderItem of borderItems) {\n          try {\n            const border = targetRange.format.borders.getItem(borderItem);\n            border.style = excelStyle;\n            border.color = color;\n            border.weight = 'Thin';\n          } catch (e) {\n            // Some border items might not be applicable (e.g., InsideVertical for single cell)\n            console.log(`Skipping ${borderItem}:`, e.message);\n          }\n        }\n      } else if (borderType === 'inside') {\n        // Format only inside borders\n        try {\n          const insideV = targetRange.format.borders.getItem('InsideVertical');\n          insideV.style = excelStyle;\n          insideV.color = color;\n          insideV.weight = 'Thin';\n        } catch (e) {\n          console.log('No inside vertical borders');\n        }\n        \n        try {\n          const insideH = targetRange.format.borders.getItem('InsideHorizontal');\n          insideH.style = excelStyle;\n          insideH.color = color;\n          insideH.weight = 'Thin';\n        } catch (e) {\n          console.log('No inside horizontal borders');\n        }\n      } else {\n        // Format specific border\n        const borderMap = {\n          'top': 'EdgeTop',\n          'bottom': 'EdgeBottom',\n          'left': 'EdgeLeft',\n          'right': 'EdgeRight'\n        };\n        \n        const borderName = borderMap[borderType.toLowerCase()];\n        if (borderName) {\n          const border = targetRange.format.borders.getItem(borderName);\n          border.style = excelStyle;\n          border.color = color;\n          border.weight = 'Thin';\n        }\n      }\n    }\n    \n    await context.sync();\n    \n    return {\n      success: true,\n      message: '테두리 서식이 적용되었습니다.'\n    };\n    \n  } catch (error) {\n    console.error('Error in executeBorderFormat:', error);\n    return {\n      success: false,\n      error: `테두리 서식 적용 중 오류 발생: ${error.message}`\n    };\n  }\n}\n\n// Additional operations (compress, filter, insert, delete, formula, retry_translation)\n// These would need to be implemented based on Excel JavaScript API capabilities\n\nasync function executeCompress(context, params) {\n  console.log('executeCompress called with params:', params);\n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  \n  try {\n    if (!params.range) {\n      return { success: false, error: '범위를 지정해주세요.' };\n    }\n    \n    // Get the specified range\n    const checkRange = worksheet.getRange(params.range);\n    checkRange.load([\"rowIndex\", \"rowCount\", \"columnIndex\", \"values\", \"address\"]);\n    await context.sync();\n    \n    console.log('Compress range:', {\n      address: checkRange.address,\n      rowIndex: checkRange.rowIndex,\n      rowCount: checkRange.rowCount,\n      columnIndex: checkRange.columnIndex\n    });\n    \n    // Find empty rows in the specified column\n    const emptyRows = [];\n    const values = checkRange.values;\n    \n    // Check each row in the range\n    for (let i = 0; i < values.length; i++) {\n      const cellValue = values[i][0]; // First column of the range\n      if (cellValue === null || cellValue === undefined || cellValue === '' || \n          (typeof cellValue === 'string' && cellValue.trim() === '')) {\n        // This row is empty in the specified column\n        // Store the actual row index (rowIndex + i)\n        emptyRows.push(checkRange.rowIndex + i);\n      }\n    }\n    \n    console.log('Found empty rows:', emptyRows.length, 'rows at indices:', emptyRows);\n    \n    if (emptyRows.length === 0) {\n      return {\n        success: true,\n        message: '제거할 빈 행이 없습니다.'\n      };\n    }\n    \n    // IMPORTANT: Only delete rows that are within the specified range\n    // This prevents accidentally deleting rows outside the range (like A1)\n    const minRowIndex = checkRange.rowIndex;\n    const maxRowIndex = checkRange.rowIndex + checkRange.rowCount - 1;\n    \n    // Filter out any row indices that are outside the specified range\n    const rowsToDelete = emptyRows.filter(rowIdx => rowIdx >= minRowIndex && rowIdx <= maxRowIndex);\n    \n    console.log('Rows to delete (filtered):', rowsToDelete);\n    \n    // Delete rows from bottom to top to avoid index shifting\n    rowsToDelete.sort((a, b) => b - a); // Sort in descending order\n    \n    for (const rowIndex of rowsToDelete) {\n      console.log('Deleting row:', rowIndex + 1); // Display 1-based for user\n      // Get the entire row using a fixed large column count to avoid getUsedRange() issues\n      const rowToDelete = worksheet.getRangeByIndexes(rowIndex, 0, 1, 1000);\n      rowToDelete.delete(Excel.DeleteShiftDirection.up);\n      await context.sync();\n    }\n    \n    return {\n      success: true,\n      message: `${rowsToDelete.length}개의 빈 행이 제거되었습니다.`\n    };\n    \n  } catch (error) {\n    console.error('Error in executeCompress:', error);\n    return {\n      success: false,\n      error: `빈 행 제거 중 오류 발생: ${error.message}`\n    };\n  }\n}\n\nasync function executeFilter(context, params) {\n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  const range = params.range ? worksheet.getRange(params.range) : worksheet.getUsedRange();\n  \n  // Apply autofilter\n  range.worksheet.autoFilter.apply(range);\n  \n  await context.sync();\n  \n  return {\n    success: true,\n    message: '필터가 적용되었습니다.'\n  };\n}\n\nasync function executeInsert(context, params) {\n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  const type = params.type || 'row';\n  const position = params.position || 1;\n  const count = params.count || 1;\n  \n  if (type === 'row') {\n    const range = worksheet.getRangeByIndexes(position - 1, 0, count, 1);\n    range.insert(Excel.InsertShiftDirection.down);\n  } else {\n    const range = worksheet.getRangeByIndexes(0, position - 1, 1, count);\n    range.insert(Excel.InsertShiftDirection.right);\n  }\n  \n  await context.sync();\n  \n  return {\n    success: true,\n    message: `${count}개의 ${type === 'row' ? '행' : '열'}이 삽입되었습니다.`\n  };\n}\n\nasync function executeDelete(context, params) {\n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  const type = params.type || 'row';\n  const position = params.position || 1;\n  const count = params.count || 1;\n  \n  if (type === 'row') {\n    const range = worksheet.getRangeByIndexes(position - 1, 0, count, 1);\n    range.delete(Excel.DeleteShiftDirection.up);\n  } else {\n    const range = worksheet.getRangeByIndexes(0, position - 1, 1, count);\n    range.delete(Excel.DeleteShiftDirection.left);\n  }\n  \n  await context.sync();\n  \n  return {\n    success: true,\n    message: `${count}개의 ${type === 'row' ? '행' : '열'}이 삭제되었습니다.`\n  };\n}\n\nasync function executeFormula(context, params) {\n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  const range = params.range ? worksheet.getRange(params.range) : context.workbook.getSelectedRange();\n  \n  if (!params.formula) {\n    return { success: false, error: '수식을 지정해주세요.' };\n  }\n  \n  range.formulas = [[params.formula]];\n  await context.sync();\n  \n  return {\n    success: true,\n    message: '수식이 적용되었습니다.'\n  };\n}\n\nasync function executeRetryTranslation(context, params) {\n  // Implementation would be similar to Google Sheets version\n  // but using Excel JavaScript API\n  return {\n    success: false,\n    error: '이 기능은 현재 구현 중입니다.'\n  };\n}\n\nasync function executeRemoveBorder(context, params) {\n  console.log('executeRemoveBorder called with params:', params);\n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  \n  try {\n    let targetRanges = [];\n    \n    // Determine the range to apply border removal\n    if (params.range) {\n      // Handle special case for entire sheet\n      if (params.range === 'all' || params.range === '전체') {\n        console.log('Removing borders from entire sheet');\n        // Use getUsedRangeOrNullObject to get the actual used range\n        const usedRange = worksheet.getUsedRangeOrNullObject();\n        usedRange.load(\"isNullObject\");\n        await context.sync();\n        \n        if (usedRange.isNullObject) {\n          console.log('No used range in the sheet, nothing to remove borders from');\n          return { success: true, message: '시트에 데이터가 없어 테두리를 제거할 필요가 없습니다.' };\n        } else {\n          // Expand the used range to ensure we get all cells that might have borders\n          usedRange.load([\"rowCount\", \"columnCount\", \"rowIndex\", \"columnIndex\"]);\n          await context.sync();\n          \n          // Get a slightly larger range to ensure we capture all borders\n          const expandedRows = Math.min(usedRange.rowCount + 100, 1048576);\n          const expandedCols = Math.min(usedRange.columnCount + 20, 16384);\n          targetRanges.push(worksheet.getRangeByIndexes(0, 0, expandedRows, expandedCols));\n        }\n      } else if (params.range.match(/^[A-Z]+:[A-Z]+$/)) {\n        // Handle column ranges like \"C:C\"\n        console.log('Handling column range:', params.range);\n        const usedRange = worksheet.getUsedRange();\n        if (!usedRange) {\n          return { success: false, error: '데이터가 없습니다.' };\n        }\n        \n        usedRange.load([\"rowCount\", \"columnCount\"]);\n        await context.sync();\n        \n        // Get the column letter from the range (e.g., \"C\" from \"C:C\")\n        const columnLetter = params.range.split(':')[0];\n        const columnIndex = columnLetter.charCodeAt(0) - 65;\n        \n        // Get the entire used portion of the column\n        targetRanges.push(worksheet.getRangeByIndexes(0, columnIndex, usedRange.rowCount, 1));\n      } else {\n        // Handle specific ranges like \"A1:B10\"\n        targetRanges.push(worksheet.getRange(params.range));\n      }\n    } else {\n      // If no range specified, handle multiple selections\n      try {\n        const selectedRanges = context.workbook.getSelectedRanges();\n        selectedRanges.load([\"areas\", \"areaCount\"]);\n        await context.sync();\n        \n        if (selectedRanges.areaCount > 1) {\n          // Multiple non-contiguous ranges selected\n          for (let i = 0; i < selectedRanges.areas.items.length; i++) {\n            targetRanges.push(selectedRanges.areas.items[i]);\n          }\n        } else {\n          // Single contiguous range\n          targetRanges.push(context.workbook.getSelectedRange());\n        }\n      } catch (error) {\n        console.log('Error getting selected ranges for border format/removal:', error);\n        return { success: false, error: '선택한 범위를 처리할 수 없습니다. 연속된 범위를 선택해주세요.' };\n      }\n    }\n    \n    // Load all ranges\n    for (const range of targetRanges) {\n      range.load([\"address\", \"rowCount\", \"columnCount\"]);\n    }\n    await context.sync();\n    \n    console.log('Target ranges for border removal:', targetRanges.length);\n    for (let i = 0; i < targetRanges.length; i++) {\n      console.log(`Range ${i + 1}:`, {\n        address: targetRanges[i].address,\n        rowCount: targetRanges[i].rowCount,\n        columnCount: targetRanges[i].columnCount\n      });\n    }\n    \n    // Determine which borders to remove\n    const borderType = params.borderType || 'all';\n    \n    // Apply border removal to all selected ranges\n    for (const targetRange of targetRanges) {\n      if (borderType === 'all') {\n        // Remove all borders\n        targetRange.format.borders.getItem(Excel.BorderIndex.edgeLeft).style = Excel.BorderLineStyle.none;\n        targetRange.format.borders.getItem(Excel.BorderIndex.edgeRight).style = Excel.BorderLineStyle.none;\n        targetRange.format.borders.getItem(Excel.BorderIndex.edgeTop).style = Excel.BorderLineStyle.none;\n        targetRange.format.borders.getItem(Excel.BorderIndex.edgeBottom).style = Excel.BorderLineStyle.none;\n        targetRange.format.borders.getItem(Excel.BorderIndex.insideHorizontal).style = Excel.BorderLineStyle.none;\n        targetRange.format.borders.getItem(Excel.BorderIndex.insideVertical).style = Excel.BorderLineStyle.none;\n      } else {\n        // Remove specific border\n        switch (borderType) {\n          case 'right':\n            targetRange.format.borders.getItem(Excel.BorderIndex.edgeRight).style = Excel.BorderLineStyle.none;\n            break;\n          case 'left':\n            targetRange.format.borders.getItem(Excel.BorderIndex.edgeLeft).style = Excel.BorderLineStyle.none;\n            break;\n          case 'top':\n            targetRange.format.borders.getItem(Excel.BorderIndex.edgeTop).style = Excel.BorderLineStyle.none;\n            break;\n          case 'bottom':\n            targetRange.format.borders.getItem(Excel.BorderIndex.edgeBottom).style = Excel.BorderLineStyle.none;\n            break;\n          default:\n            return { success: false, error: `알 수 없는 테두리 유형: ${borderType}` };\n        }\n      }\n    }\n    \n    await context.sync();\n    \n    return {\n      success: true,\n      message: `${borderType === 'all' ? '모든' : borderType} 테두리가 제거되었습니다.`\n    };\n    \n  } catch (error) {\n    console.error('Error in executeRemoveBorder:', error);\n    return {\n      success: false,\n      error: `테두리 제거 중 오류 발생: ${error.message}`\n    };\n  }\n}"],"names":["__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","m","g","globalThis","this","Function","e","window","o","obj","prop","Object","prototype","hasOwnProperty","call","scriptUrl","importScripts","location","document","currentScript","tagName","toUpperCase","src","scripts","getElementsByTagName","length","i","test","Error","replace","p","b","baseURI","self","href","URL","t","r","Symbol","n","iterator","toStringTag","c","Generator","u","create","_regeneratorDefine2","f","y","G","v","a","d","bind","l","TypeError","done","value","return","GeneratorFunction","GeneratorFunctionPrototype","getPrototypeOf","setPrototypeOf","__proto__","displayName","_regenerator","w","defineProperty","_invoke","enumerable","configurable","writable","asyncGeneratorStep","Promise","resolve","then","_asyncToGenerator","arguments","apply","_next","_throw","recognition","isListening","API_PROXY_URL","process","Office","onReady","info","host","HostType","Excel","_testBackendConnection","testBackendConnection","getElementById","onclick","executeCommand","clearInput","protocol","hostname","includes","showStatus","textContent","stop","start","error","console","message","toggleVoiceRecognition","showSettings","querySelectorAll","forEach","item","command","getAttribute","focus","addEventListener","event","key","shiftKey","preventDefault","log","voiceButton","voiceStatus","disabled","style","opacity","cursor","color","title","SpeechRecognition","webkitSpeechRecognition","lang","continuous","interimResults","maxAlternatives","onstart","classList","add","onresult","transcript","results","isFinal","onerror","remove","errorMessage","isWebEnvironment","onend","trim","initializeSpeechRecognition","isExecuting","_executeCommand","_callee2","button","originalText","_t2","_context2","innerHTML","run","_ref","_callee","context","worksheet","activeRangeInfo","selectedRanges","firstRange","rangeAddresses","_i","range","usedRange","sheetContext","headerRow","_i2","interpretation","result","_t","_context","workbook","worksheets","getActiveWorksheet","getSelectedRanges","load","sync","areaCount","areas","items","push","address","join","row","rowIndex","column","columnIndex","numRows","rowCount","numColumns","columnCount","isMultipleRanges","getUsedRange","sheetName","name","activeRange","lastRow","lastColumn","headers","dataRange","values","isLargeSheet","columnLetter","getColumnLetter","label","toString","callOpenAI","success","executeInterpretedCommand","data","setTimeout","_x46","stack","_x","_x2","_callOpenAI","_callee3","response","errorData","_t3","_context3","fetch","method","body","JSON","stringify","ok","json","concat","status","_x5","_x6","_executeInterpretedCommand","_callee5","commandData","successCount","_iterator","_step","op","_t6","_context5","operations","Array","isArray","_createForOfIteratorHelper","s","executeSingleOperation","operation","parameters","_x7","_x8","_x9","_executeSingleOperation","_callee6","params","_t7","_t8","_context6","Date","toISOString","executeMerge","executeSum","executeAverage","executeCount","executeFormat","executeSort","executeFilter","executeInsert","executeDelete","executeFormula","executeChart","executeConditionalFormat","executeTranslate","executeCompress","executeRetryTranslation","executeRemoveBorder","executeBorderFormat","_x0","_x1","_executeMerge","_callee7","rangeAddress","_context7","getRange","getSelectedRange","merge","_x10","_x11","_executeSum","_callee8","lastDataRow","targetRow","foundEmpty","_i3","checkCell","cellValue","sumCell","sourceRange","sumFormula","_i4","_i5","_selectedRanges","_rangeAddresses","_i6","_i7","newCell","targetCell","_usedRange","_targetCell","lastUsedRow","lastUsedCol","_foundEmpty","col","_checkCell","_row","_checkCell2","_column","startRow","_targetRow","_foundEmpty2","_i8","_checkCell3","_cellValue","_t9","_t0","_context8","columnName","sumType","match","charCodeAt","toLowerCase","getCell","formulas","formatNumber","addNewRow","getHeaders","_x12","_getHeaders","_callee9","_context9","_x13","_x14","_executeAverage","_callee0","rangeDescription","averageFormula","columnInfo","_usedRange2","_usedRange3","_i9","_selectedRanges2","_rangeAddresses2","_i0","_i1","_i10","_t1","_t10","_t11","_context0","averageType","getRangeByIndexes","find","h","numberFormat","_x15","_x16","_executeCount","_callee1","formula","criteria","resultCell","lastCol","_context1","countType","condition","operator","_x17","_x18","_executeFormat","_callee10","ranges","_i11","_ranges","_i12","_ranges2","_range","format","_t12","_context10","bold","font","italic","fontSize","size","fontColor","backgroundColor","fill","horizontalAlignment","_x19","_x20","_executeSort","_callee11","ascending","_context11","sort","_x21","_x22","_executeChart","_callee12","sourceData","dataAddress","allRanges","area","tempStartRow","tempStartCol","consolidatedData","maxColumns","_i13","_allRanges","_iterator2","_step2","reorganizedData","_i14","tempRange","_tempRange","chartType","chart","_chart","_t13","_t14","_t15","_t16","_context12","getUsedRangeOrNullObject","isNullObject","Math","max","err","every","firstValue","ChartType","columnClustered","line","pie","xyscatter","charts","ChartSeriesBy","auto","text","height","width","left","offsetX","top","offsetY","legend","position","ChartLegendPosition","bottom","visible","_x23","_x24","_executeConditionalFormat","_callee13","defaultRange","_i15","_ranges3","conditionalFormat","_t17","_context13","conditionalFormats","ConditionalFormatType","rule","formula1","ConditionalCellValueOperator","greaterThan","lessThan","equalTo","containsText","_x25","_x26","_executeTranslate","_callee14","targetColumnIndex","targetColumnLetter","_targetColumnLetter","_columnIndex","_usedRange4","sourceValues","translations","batchSize","batch","batchTexts","translatedBatch","j","translationIndex","_j","translatedText","_j2","_i16","targetRange","stringTranslations","errorRows","_i17","translation","_iterator3","_step3","errorCell","isEmpty","_i18","cellRow","cellCol","cell","headerCell","sourceHeaderCell","_context14","targetLanguage","split","sourceColumnIndex","sourceColumn","targetColumn","slice","min","map","filter","translateBatch","sourceLanguage","batchLength","translatedBatchLength","sampleTranslations","firstTranslation","translationType","_typeof","rawData","isError","round","translationsCount","first","second","third","clear","ClearApplyTo","contents","translationsLength","is2DArray","String","valueTypes","actualFirstValue","firstThreeValues","firstValueLength","_x27","_x28","_x29","_translateBatch","_callee15","texts","_t18","_context15","tempIndex","fromCharCode","floor","Number","isInteger","toLocaleString","minimumFractionDigits","maximumFractionDigits","type","className","display","statusTimeout","clearTimeout","_callee16","_t19","_context16","_x30","_x31","_executeBorderFormat","_callee17","targetRanges","_i19","_targetRanges","_i20","borderType","excelStyle","_i21","_targetRanges2","_i22","_borderItems","borderItem","border","insideV","insideH","borderName","_border","_t20","_t21","_context17","borders","getItem","weight","_x32","_x33","_executeCompress","_callee18","checkRange","emptyRows","minRowIndex","maxRowIndex","rowsToDelete","_iterator4","_step4","_t22","_t23","_context18","rowIdx","delete","DeleteShiftDirection","up","_x34","_x35","_executeFilter","_callee19","_context19","autoFilter","_x36","_x37","_executeInsert","_callee20","count","_context20","insert","InsertShiftDirection","down","right","_x38","_x39","_executeDelete","_callee21","_context21","_x40","_x41","_executeFormula","_callee22","_context22","_x42","_x43","_executeRetryTranslation","_callee23","_context23","_x44","_x45","_executeRemoveBorder","_callee24","expandedRows","expandedCols","_usedRange5","_i23","_targetRanges3","_i24","_i25","_targetRanges4","_t24","_t25","_t26","_context24","BorderIndex","edgeLeft","BorderLineStyle","none","edgeRight","edgeTop","edgeBottom","insideHorizontal","insideVertical"],"sourceRoot":""}