{"version":3,"file":"taskpane.js","mappings":"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","sources":["webpack://worksai-excel-addon/webpack/bootstrap","webpack://worksai-excel-addon/webpack/runtime/global","webpack://worksai-excel-addon/webpack/runtime/hasOwnProperty shorthand","webpack://worksai-excel-addon/webpack/runtime/publicPath","webpack://worksai-excel-addon/webpack/runtime/jsonp chunk loading","webpack://worksai-excel-addon/./src/taskpane/taskpane.html","webpack://worksai-excel-addon/./src/taskpane/taskpane.js"],"sourcesContent":["// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript && document.currentScript.tagName.toUpperCase() === 'SCRIPT')\n\t\tscriptUrl = document.currentScript.src;\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) {\n\t\t\tvar i = scripts.length - 1;\n\t\t\twhile (i > -1 && (!scriptUrl || !/^http(s?):/.test(scriptUrl))) scriptUrl = scripts[i--].src;\n\t\t}\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/^blob:/, \"\").replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","__webpack_require__.b = document.baseURI || self.location.href;\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t926: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n// no on chunks loaded\n\n// no jsonp function","// Imports\nvar ___HTML_LOADER_IMPORT_0___ = new URL(\"./taskpane.css\", import.meta.url);\n// Module\nvar code = \"<!DOCTYPE html> <html> <head> <meta charset=\\\"UTF-8\\\"/> <meta http-equiv=\\\"X-UA-Compatible\\\" content=\\\"IE=Edge\\\"/> <meta name=\\\"viewport\\\" content=\\\"width=device-width,initial-scale=1\\\"> <title>웍스AI 엑셀 도우미</title> <\" + \"script src=\\\"https://appsforoffice.microsoft.com/lib/1.1/hosted/office.js\\\"><\" + \"/script> <link rel=\\\"stylesheet\\\" href=\\\"https://static2.sharepointonline.com/files/fabric/office-ui-fabric-js/1.4.0/css/fabric.min.css\\\"/> <link rel=\\\"stylesheet\\\" href=\\\"https://static2.sharepointonline.com/files/fabric/office-ui-fabric-js/1.4.0/css/fabric.components.min.css\\\"/> <link href=\\\"\" + ___HTML_LOADER_IMPORT_0___ + \"\\\" rel=\\\"stylesheet\\\"/> </head> <body class=\\\"ms-font-m ms-welcome ms-Fabric\\\"> <main id=\\\"app-body\\\" class=\\\"ms-welcome__main\\\"> <div class=\\\"container\\\"> <div class=\\\"header-section\\\"> <h2 class=\\\"ms-font-xl\\\">웍스AI 엑셀 도우미</h2> <p class=\\\"help-text\\\">자연어로 Excel 작업을 요청하세요. (대용량 번역 지원)</p> </div> <div class=\\\"voice-section\\\"> <button id=\\\"voiceButton\\\" class=\\\"voice-button\\\"> <svg width=\\\"24\\\" height=\\\"24\\\" viewBox=\\\"0 0 24 24\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"> <path d=\\\"M12 14c1.66 0 3-1.34 3-3V5c0-1.66-1.34-3-3-3S9 3.34 9 5v6c0 1.66 1.34 3 3 3z\\\"/> <path d=\\\"M17 11c0 2.76-2.24 5-5 5s-5-2.24-5-5H5c0 3.53 2.61 6.43 6 6.92V21h2v-3.08c3.39-.49 6-3.39 6-6.92h-2z\\\"/> </svg> </button> <div class=\\\"voice-status\\\" id=\\\"voiceStatus\\\">음성 인식 준비</div> </div> <div class=\\\"input-container\\\"> <textarea id=\\\"commandInput\\\" placeholder=\\\"예: A1부터 A10까지 합계를 구해줘\\\" rows=\\\"3\\\"></textarea> <div class=\\\"button-container\\\"> <button id=\\\"executeButton\\\" class=\\\"ms-Button ms-Button--primary\\\"> <span class=\\\"ms-Button-label\\\">실행</span> </button> <button id=\\\"clearButton\\\" class=\\\"ms-Button\\\"> <span class=\\\"ms-Button-label\\\">지우기</span> </button> </div> </div> <div id=\\\"status\\\" class=\\\"status-message\\\"></div> <div class=\\\"examples\\\"> <h3>예제 명령어</h3> <div class=\\\"example-list\\\"> <div class=\\\"example-item\\\" data-command=\\\"A1:B5 셀을 병합해줘\\\"> <strong>셀 병합:</strong> A1:B5 셀을 병합해줘 </div> <div class=\\\"example-item\\\" data-command=\\\"A열의 합계를 구해줘\\\"> <strong>합계 계산:</strong> A열의 합계를 구해줘 </div> <div class=\\\"example-item\\\" data-command=\\\"Name 열의 합계를 구해줘\\\"> <strong>레이블로 합계:</strong> Name 열의 합계를 구해줘 </div> <div class=\\\"example-item\\\" data-command=\\\"선택한 셀을 굵게 만들고 파란색으로 바꿔줘\\\"> <strong>서식 지정:</strong> 선택한 셀을 굵게 만들고 파란색으로 바꿔줘 </div> <div class=\\\"example-item\\\" data-command=\\\"B열 기준으로 내림차순 정렬해줘\\\"> <strong>정렬:</strong> B열 기준으로 내림차순 정렬해줘 </div> <div class=\\\"example-item\\\" data-command=\\\"값이 100보다 큰 셀은 녹색 배경으로 표시해줘\\\"> <strong>조건부 서식:</strong> 값이 100보다 큰 셀은 녹색 배경으로 표시해줘 </div> <div class=\\\"example-item\\\" data-command=\\\"A1:B10 데이터로 막대 차트를 만들어줘\\\"> <strong>차트 생성:</strong> A1:B10 데이터로 막대 차트를 만들어줘 </div> <div class=\\\"example-item\\\" data-command=\\\"D열을 중국어로 번역해서 다음 열에 추가해줘\\\"> <strong>번역:</strong> D열을 중국어로 번역해서 다음 열에 추가해줘 </div> <div class=\\\"example-item\\\" data-command=\\\"A열의 10000개 행을 영어로 번역해줘\\\"> <strong>대용량 번역:</strong> A열의 10000개 행을 영어로 번역해줘 </div> <div class=\\\"example-item\\\" data-command=\\\"D2:D170 사이의 빈 행을 제거해줘\\\"> <strong>빈 행 제거:</strong> D2:D170 사이의 빈 행을 제거해줘 </div> </div> </div> <div class=\\\"settings-section\\\"> <button id=\\\"settingsButton\\\" class=\\\"settings-link\\\">설정</button> </div> </div> </main> </body> </html>\";\n// Exports\nexport default code;","/*\n * Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n * See LICENSE in the project root for license information.\n */\n\n/* global document, Office, Excel */\n\n// Voice recognition variables\nlet recognition = null;\nlet isListening = false;\n\n// Backend API URL - Vercel 배포 후 실제 URL로 변경해주세요\n// 디버그용 URL 사용 중 (CORS 문제 해결 후 원래 URL로 변경 필요)\nconst API_PROXY_URL = process.env.API_PROXY_URL || 'https://excel-addon-backend.vercel.app/api/openai-proxy-debug';\n\nOffice.onReady((info) => {\n  if (info.host === Office.HostType.Excel) {\n    // Test backend connection\n    testBackendConnection();\n    \n    // Assign event handlers\n    document.getElementById(\"executeButton\").onclick = executeCommand;\n    document.getElementById(\"clearButton\").onclick = clearInput;\n    document.getElementById(\"voiceButton\").onclick = toggleVoiceRecognition;\n    document.getElementById(\"settingsButton\").onclick = showSettings;\n\n    // Handle example clicks\n    const exampleItems = document.querySelectorAll('.example-item');\n    exampleItems.forEach(item => {\n      item.onclick = function() {\n        setCommand(this.getAttribute('data-command'));\n      };\n    });\n\n    // Handle Enter key\n    document.getElementById('commandInput').addEventListener('keydown', function(event) {\n      if (event.key === 'Enter' && !event.shiftKey) {\n        event.preventDefault();\n        executeCommand();\n      }\n    });\n\n    // Initialize speech recognition\n    initializeSpeechRecognition();\n  }\n});\n\n// Initialize speech recognition\nfunction initializeSpeechRecognition() {\n  const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n  \n  if (!SpeechRecognition) {\n    showStatus('음성 인식이 지원되지 않는 브라우저입니다.', 'error');\n    document.getElementById('voiceButton').disabled = true;\n    document.getElementById('voiceStatus').textContent = '음성 인식 미지원';\n    return null;\n  }\n  \n  recognition = new SpeechRecognition();\n  recognition.lang = 'ko-KR';\n  recognition.continuous = false;\n  recognition.interimResults = true;\n  recognition.maxAlternatives = 1;\n  \n  recognition.onstart = function() {\n    isListening = true;\n    document.getElementById('voiceButton').classList.add('listening');\n    document.getElementById('voiceStatus').textContent = '듣고 있습니다... 말씀해주세요';\n    document.getElementById('voiceStatus').classList.add('listening');\n  };\n  \n  recognition.onresult = function(event) {\n    const transcript = event.results[0][0].transcript;\n    document.getElementById('commandInput').value = transcript;\n    \n    if (event.results[0].isFinal) {\n      document.getElementById('voiceStatus').textContent = '음성 인식 완료';\n    } else {\n      document.getElementById('voiceStatus').textContent = '인식중: ' + transcript;\n    }\n  };\n  \n  recognition.onerror = function(event) {\n    isListening = false;\n    document.getElementById('voiceButton').classList.remove('listening');\n    document.getElementById('voiceStatus').classList.remove('listening');\n    \n    let errorMessage = '음성 인식 오류';\n    switch(event.error) {\n      case 'no-speech':\n        errorMessage = '음성이 감지되지 않았습니다.';\n        break;\n      case 'audio-capture':\n        errorMessage = '마이크를 찾을 수 없습니다.';\n        break;\n      case 'not-allowed':\n        errorMessage = '마이크 권한이 거부되었습니다.';\n        break;\n      case 'network':\n        errorMessage = '네트워크 오류가 발생했습니다.';\n        break;\n    }\n    \n    document.getElementById('voiceStatus').textContent = errorMessage;\n    showStatus(errorMessage, 'error');\n  };\n  \n  recognition.onend = function() {\n    isListening = false;\n    document.getElementById('voiceButton').classList.remove('listening');\n    document.getElementById('voiceStatus').classList.remove('listening');\n    \n    const command = document.getElementById('commandInput').value.trim();\n    if (command) {\n      document.getElementById('voiceStatus').textContent = '음성 인식 완료. 실행 버튼을 눌러주세요.';\n      document.getElementById('executeButton').focus();\n    } else {\n      document.getElementById('voiceStatus').textContent = '음성 인식 준비';\n    }\n  };\n  \n  return recognition;\n}\n\n// Toggle voice recognition\nfunction toggleVoiceRecognition() {\n  if (!recognition) {\n    recognition = initializeSpeechRecognition();\n    if (!recognition) return;\n  }\n  \n  if (isListening) {\n    recognition.stop();\n  } else {\n    recognition.start();\n  }\n}\n\n// Execute command\n// Add flag to prevent duplicate execution\nlet isExecuting = false;\n\nasync function executeCommand() {\n  // Prevent duplicate execution\n  if (isExecuting) {\n    console.log('Command already executing, ignoring duplicate call');\n    return;\n  }\n  \n  const command = document.getElementById('commandInput').value.trim();\n  \n  if (!command) {\n    showStatus('명령어를 입력해주세요.', 'error');\n    return;\n  }\n  \n  isExecuting = true;\n  \n  const button = document.getElementById('executeButton');\n  const originalText = '<span class=\"ms-Button-label\">실행</span>';\n  \n  // Show loading state\n  button.disabled = true;\n  button.innerHTML = '<span class=\"loading\"></span><span>처리중...</span>';\n  showStatus('명령을 처리하고 있습니다...', 'info');\n  \n  try {\n    await Excel.run(async (context) => {\n      console.log('Starting Excel.run for command execution');\n      // Get current worksheet context\n      const worksheet = context.workbook.worksheets.getActiveWorksheet();\n      const range = context.workbook.getSelectedRange();\n      \n      // Load necessary properties\n      worksheet.load(\"name\");\n      range.load([\"address\", \"rowIndex\", \"columnIndex\", \"rowCount\", \"columnCount\"]);\n      \n      // Get sheet data for context\n      const usedRange = worksheet.getUsedRange();\n      usedRange.load([\"rowCount\", \"columnCount\", \"values\"]);\n      \n      await context.sync();\n      \n      // Build sheet context\n      const sheetContext = {\n        sheetName: worksheet.name,\n        activeRange: {\n          address: range.address,\n          row: range.rowIndex + 1,\n          column: range.columnIndex + 1,\n          numRows: range.rowCount,\n          numColumns: range.columnCount\n        },\n        lastRow: usedRange ? usedRange.rowCount : 0,\n        lastColumn: usedRange ? usedRange.columnCount : 0,\n        headers: [],\n        dataRange: usedRange ? usedRange.values : [],\n        isLargeSheet: usedRange && usedRange.rowCount > 1000\n      };\n      \n      // Extract headers\n      if (usedRange && usedRange.rowCount > 0) {\n        const headerRow = usedRange.values[0];\n        for (let i = 0; i < headerRow.length; i++) {\n          sheetContext.headers.push({\n            column: i + 1,\n            columnLetter: getColumnLetter(i),\n            label: headerRow[i] ? headerRow[i].toString() : ''\n          });\n        }\n      }\n      \n      // Call OpenAI API to interpret the command\n      const interpretation = await callOpenAI(command, sheetContext);\n      \n      if (!interpretation.success) {\n        throw new Error(interpretation.error);\n      }\n      \n      // Execute the interpreted command\n      console.log('Executing interpreted command...');\n      const result = await executeInterpretedCommand(context, interpretation.data);\n      console.log('Command execution result:', result);\n      \n      // Reset button and show success\n      button.disabled = false;\n      button.innerHTML = originalText;\n      \n      if (result.success) {\n        console.log('Operation completed successfully:', result);\n        showStatus(result.message || '명령이 성공적으로 실행되었습니다.', 'success');\n        setTimeout(() => {\n          document.getElementById('commandInput').value = '';\n        }, 1000);\n      } else {\n        console.error('Operation failed:', result);\n        showStatus(result.error || '명령 실행에 실패했습니다.', 'error');\n      }\n      \n      console.log('Excel.run completing...');\n    });\n    console.log('Excel.run completed');\n  } catch (error) {\n    console.error('Error in executeCommand:', error);\n    console.error('Error stack:', error.stack);\n    button.disabled = false;\n    button.innerHTML = originalText;\n    showStatus('오류가 발생했습니다: ' + error.message, 'error');\n  } finally {\n    // Reset execution flag\n    isExecuting = false;\n  }\n}\n\n// Call OpenAI API through proxy\nasync function callOpenAI(command, sheetContext) {\n  try {\n    const response = await fetch(API_PROXY_URL, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        command: command,\n        sheetContext: sheetContext\n      })\n    });\n    \n    if (!response.ok) {\n      const errorData = await response.json();\n      return {\n        success: false,\n        error: errorData.error || `서버 오류 (${response.status})`\n      };\n    }\n    \n    return await response.json();\n    \n  } catch (error) {\n    console.error('Proxy API Error:', error);\n    return {\n      success: false,\n      error: `API 요청 오류: ${error.toString()}`\n    };\n  }\n}\n\n// Original OpenAI API call (no longer used)\nasync function callOpenAIDirectly(command, sheetContext) {\n  const systemPrompt = `You are an Excel assistant that interprets natural language commands and returns JSON instructions for Excel operations.\n  \nAvailable operations:\n1. merge: Merge cells\n2. sum: Sum values in a range\n3. average: Calculate average\n4. count: Count cells (can count all, numbers only, or based on conditions)\n5. format: Format cells (bold, italic, font color, background color, etc.)\n6. sort: Sort data\n7. filter: Filter data\n8. insert: Insert rows/columns\n9. delete: Delete rows/columns\n10. formula: Add custom formula\n11. chart: Create chart\n12. conditional_format: Add conditional formatting\n13. translate: Translate cell contents to another language\n14. compress: Remove empty rows in a specific column range\n15. retry_translation: Retry translation for failed items marked as [번역 실패]\n\nThe JSON response format and parameter details are the same as the Google Sheets version.\n\nCurrent sheet context:\n- Active range: ${sheetContext.activeRange.address}\n- Sheet dimensions: ${sheetContext.lastRow} rows x ${sheetContext.lastColumn} columns\n- Headers: ${sheetContext.headers.map(h => `Column ${h.columnLetter}: \"${h.label}\"`).join(', ')}\n\nReturn JSON in this format:\n{\n  \"operation\": \"operation_name\",\n  \"parameters\": {\n    // operation-specific parameters\n  }\n}`;\n\n  const url = 'https://api.openai.com/v1/chat/completions';\n  \n  const payload = {\n    model: 'gpt-4.1-2025-04-14',\n    messages: [\n      { role: 'system', content: systemPrompt },\n      { role: 'user', content: `Current Excel state:\nHeaders: ${sheetContext.headers.map(h => `Column ${h.columnLetter}: \"${h.label}\"`).join(', ')}\nActive sheet: ${sheetContext.sheetName}\n\nUser command: ${command}` }\n    ],\n    temperature: 0.3,\n    max_tokens: 500\n  };\n  \n  try {\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${OPENAI_API_KEY}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(payload)\n    });\n    \n    if (!response.ok) {\n      const errorData = await response.json();\n      if (response.status === 429) {\n        return {\n          success: false,\n          error: 'API 요청 한도를 초과했습니다. 잠시 후 다시 시도해주세요.'\n        };\n      } else if (response.status === 401) {\n        return {\n          success: false,\n          error: 'API 키가 유효하지 않습니다. API 키를 확인해주세요.'\n        };\n      }\n      return {\n        success: false,\n        error: `API 오류 (${response.status}): ${errorData.error?.message || '알 수 없는 오류'}`\n      };\n    }\n    \n    const result = await response.json();\n    \n    if (result.choices && result.choices[0]) {\n      const content = result.choices[0].message.content;\n      try {\n        const parsedCommand = JSON.parse(content);\n        return {\n          success: true,\n          data: parsedCommand\n        };\n      } catch (parseError) {\n        console.error('Failed to parse AI response:', content);\n        return {\n          success: false,\n          error: 'AI 응답을 해석할 수 없습니다. 다시 시도해주세요.'\n        };\n      }\n    } else {\n      return {\n        success: false,\n        error: 'OpenAI API 응답을 파싱할 수 없습니다.'\n      };\n    }\n  } catch (error) {\n    console.error('OpenAI API Error:', error);\n    return {\n      success: false,\n      error: `OpenAI API 오류: ${error.toString()}`\n    };\n  }\n}\n\n// Execute the interpreted command\nasync function executeInterpretedCommand(context, commandData) {\n  const operation = commandData.operation;\n  const params = commandData.parameters || {};\n  \n  console.log(`[${new Date().toISOString()}] Executing operation: ${operation} with params:`, params);\n  \n  try {\n    switch (operation) {\n      case 'merge':\n        return await executeMerge(context, params);\n      \n      case 'sum':\n        return await executeSum(context, params);\n      \n      case 'average':\n        return await executeAverage(context, params);\n      \n      case 'count':\n        return await executeCount(context, params);\n      \n      case 'format':\n        return await executeFormat(context, params);\n      \n      case 'sort':\n        return await executeSort(context, params);\n      \n      case 'filter':\n        return await executeFilter(context, params);\n      \n      case 'insert':\n        return await executeInsert(context, params);\n      \n      case 'delete':\n        return await executeDelete(context, params);\n      \n      case 'formula':\n        return await executeFormula(context, params);\n      \n      case 'chart':\n        return await executeChart(context, params);\n      \n      case 'conditional_format':\n        return await executeConditionalFormat(context, params);\n      \n      case 'translate':\n        return await executeTranslate(context, params);\n      \n      case 'compress':\n        return await executeCompress(context, params);\n      \n      case 'retry_translation':\n        return await executeRetryTranslation(context, params);\n      \n      default:\n        return {\n          success: false,\n          error: `알 수 없는 작업: ${operation}`\n        };\n    }\n  } catch (error) {\n    console.error('Error in executeInterpretedCommand:', error);\n    return {\n      success: false,\n      error: `작업 실행 중 오류: ${error.message || error.toString()}`\n    };\n  }\n}\n\n// Merge cells\nasync function executeMerge(context, params) {\n  console.log('executeMerge started with params:', params);\n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  const range = params.range ? worksheet.getRange(params.range) : context.workbook.getSelectedRange();\n  \n  console.log('Loading range address...');\n  // Load address property before using it\n  range.load('address');\n  await context.sync();\n  \n  console.log('Range address loaded:', range.address);\n  const rangeAddress = range.address;\n  \n  console.log('Merging range...');\n  range.merge();\n  await context.sync();\n  \n  console.log('Merge completed successfully');\n  return {\n    success: true,\n    message: `${rangeAddress} 범위가 병합되었습니다.`\n  };\n}\n\n// Sum values\nasync function executeSum(context, params) {\n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  const sourceRange = params.sourceRange ? worksheet.getRange(params.sourceRange) : context.workbook.getSelectedRange();\n  \n  sourceRange.load([\"columnIndex\", \"rowIndex\", \"rowCount\", \"address\"]);\n  await context.sync();\n  \n  if (params.addNewRow === true) {\n    // Add new row for sum\n    const column = sourceRange.columnIndex;\n    const lastRow = sourceRange.rowIndex + sourceRange.rowCount;\n    const newCell = worksheet.getCell(lastRow, column);\n    \n    newCell.formulas = [[`=SUM(${sourceRange.address})`]];\n    await context.sync();\n    \n    newCell.load([\"values\", \"address\"]);\n    await context.sync();\n    \n    return {\n      success: true,\n      message: `${newCell.address}에 합계를 계산했습니다: ${formatNumber(newCell.values[0][0])}`,\n      value: newCell.values[0][0]\n    };\n  } else if (params.targetCell) {\n    // Sum to specific cell\n    const targetCell = worksheet.getRange(params.targetCell);\n    targetCell.formulas = [[`=SUM(${sourceRange.address})`]];\n    await context.sync();\n    \n    targetCell.load([\"values\", \"address\"]);\n    await context.sync();\n    \n    return {\n      success: true,\n      message: `${targetCell.address}에 합계를 계산했습니다: ${formatNumber(targetCell.values[0][0])}`,\n      value: targetCell.values[0][0]\n    };\n  } else {\n    // Default: add sum below the range\n    const column = sourceRange.columnIndex;\n    const lastRow = sourceRange.rowIndex + sourceRange.rowCount;\n    const newCell = worksheet.getCell(lastRow, column);\n    \n    newCell.formulas = [[`=SUM(${sourceRange.address})`]];\n    await context.sync();\n    \n    newCell.load([\"values\", \"address\"]);\n    await context.sync();\n    \n    return {\n      success: true,\n      message: `${newCell.address}에 합계를 계산했습니다: ${formatNumber(newCell.values[0][0])}`,\n      value: newCell.values[0][0]\n    };\n  }\n}\n\n// Calculate average\nasync function executeAverage(context, params) {\n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  const sourceRange = params.sourceRange ? worksheet.getRange(params.sourceRange) : context.workbook.getSelectedRange();\n  \n  sourceRange.load([\"columnIndex\", \"rowIndex\", \"rowCount\", \"address\"]);\n  await context.sync();\n  \n  if (params.targetCell) {\n    const targetCell = worksheet.getRange(params.targetCell);\n    targetCell.formulas = [[`=AVERAGE(${sourceRange.address})`]];\n    await context.sync();\n    \n    targetCell.load([\"values\", \"address\"]);\n    await context.sync();\n    \n    return {\n      success: true,\n      message: `${targetCell.address}에 평균을 계산했습니다: ${formatNumber(targetCell.values[0][0])}`,\n      value: targetCell.values[0][0]\n    };\n  } else {\n    const column = sourceRange.columnIndex;\n    const lastRow = sourceRange.rowIndex + sourceRange.rowCount;\n    const newCell = worksheet.getCell(lastRow, column);\n    \n    newCell.formulas = [[`=AVERAGE(${sourceRange.address})`]];\n    await context.sync();\n    \n    newCell.load([\"values\", \"address\"]);\n    await context.sync();\n    \n    return {\n      success: true,\n      message: `${newCell.address}에 평균을 계산했습니다: ${formatNumber(newCell.values[0][0])}`,\n      value: newCell.values[0][0]\n    };\n  }\n}\n\n// Count cells\nasync function executeCount(context, params) {\n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  const sourceRange = params.sourceRange ? worksheet.getRange(params.sourceRange) : context.workbook.getSelectedRange();\n  \n  sourceRange.load([\"address\"]);\n  await context.sync();\n  \n  let formula;\n  if (params.countType === 'countif' && params.condition !== undefined) {\n    let criteria;\n    if (params.operator === 'contains') {\n      criteria = `\"*${params.condition}*\"`;\n    } else if (params.operator === 'equals') {\n      criteria = typeof params.condition === 'string' ? `\"${params.condition}\"` : params.condition;\n    } else if (params.operator && ['>', '<', '>=', '<=', '<>'].includes(params.operator)) {\n      criteria = `\"${params.operator}${params.condition}\"`;\n    } else {\n      if (typeof params.condition === 'string') {\n        criteria = `\"*${params.condition}*\"`;\n      } else {\n        criteria = params.condition;\n      }\n    }\n    formula = `=COUNTIF(${sourceRange.address}, ${criteria})`;\n  } else if (params.countType === 'counta') {\n    formula = `=COUNTA(${sourceRange.address})`;\n  } else {\n    formula = `=COUNT(${sourceRange.address})`;\n  }\n  \n  let resultCell;\n  if (params.targetCell) {\n    resultCell = worksheet.getRange(params.targetCell);\n  } else {\n    const usedRange = worksheet.getUsedRange();\n    await context.sync();\n    \n    const lastRow = usedRange ? usedRange.rowCount : 1;\n    const lastCol = usedRange ? usedRange.columnCount : 1;\n    resultCell = worksheet.getCell(lastRow, lastCol);\n  }\n  \n  resultCell.formulas = [[formula]];\n  await context.sync();\n  \n  resultCell.load(\"values\");\n  await context.sync();\n  \n  return {\n    success: true,\n    message: params.countType === 'countif' ? \n      `\"${params.condition}\"을(를) 포함하는 셀의 개수: ${formatNumber(resultCell.values[0][0])}개` :\n      `개수를 계산했습니다: ${formatNumber(resultCell.values[0][0])}개`,\n    value: resultCell.values[0][0]\n  };\n}\n\n// Format cells\nasync function executeFormat(context, params) {\n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  const range = params.range ? worksheet.getRange(params.range) : context.workbook.getSelectedRange();\n  \n  range.load(\"format\");\n  await context.sync();\n  \n  if (params.bold !== undefined) {\n    range.format.font.bold = params.bold;\n  }\n  \n  if (params.italic !== undefined) {\n    range.format.font.italic = params.italic;\n  }\n  \n  if (params.fontSize) {\n    range.format.font.size = params.fontSize;\n  }\n  \n  if (params.fontColor) {\n    range.format.font.color = params.fontColor;\n  }\n  \n  if (params.backgroundColor) {\n    range.format.fill.color = params.backgroundColor;\n  }\n  \n  if (params.horizontalAlignment) {\n    range.format.horizontalAlignment = params.horizontalAlignment === 'left' ? 'Left' :\n                                     params.horizontalAlignment === 'center' ? 'Center' :\n                                     params.horizontalAlignment === 'right' ? 'Right' : 'General';\n  }\n  \n  if (params.numberFormat) {\n    range.numberFormat = [[params.numberFormat]];\n  }\n  \n  await context.sync();\n  \n  return {\n    success: true,\n    message: '서식이 적용되었습니다.'\n  };\n}\n\n// Sort data\nasync function executeSort(context, params) {\n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  const range = params.range ? worksheet.getRange(params.range) : worksheet.getUsedRange();\n  \n  const column = params.column || 1;\n  const ascending = params.ascending !== undefined ? params.ascending : true;\n  \n  range.sort.apply([\n    {\n      key: column - 1, // Excel API uses 0-based index\n      ascending: ascending\n    }\n  ]);\n  \n  await context.sync();\n  \n  const columnLetter = getColumnLetter(column - 1);\n  \n  return {\n    success: true,\n    message: `${columnLetter}열 기준으로 ${ascending ? '오름차순' : '내림차순'} 정렬되었습니다.`\n  };\n}\n\n// Create chart\nasync function executeChart(context, params) {\n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  const sourceData = params.range ? worksheet.getRange(params.range) : context.workbook.getSelectedRange();\n  \n  const chart = worksheet.charts.add(\n    params.chartType === 'bar' ? 'ColumnClustered' : 'ColumnClustered',\n    sourceData,\n    'Auto'\n  );\n  \n  if (params.title) {\n    chart.title.text = params.title;\n  }\n  \n  // Position the chart\n  chart.left = params.offsetX || 100;\n  chart.top = params.offsetY || 100;\n  \n  await context.sync();\n  \n  return {\n    success: true,\n    message: '차트가 생성되었습니다.'\n  };\n}\n\n// Add conditional formatting\nasync function executeConditionalFormat(context, params) {\n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  const range = params.range ? worksheet.getRange(params.range) : worksheet.getUsedRange();\n  \n  const conditionalFormat = range.conditionalFormats.add(Excel.ConditionalFormatType.cellValue);\n  \n  // Set the rule based on condition\n  if (params.condition === 'greater_than' && params.value !== undefined) {\n    conditionalFormat.cellValue.rule = {\n      formula1: params.value.toString(),\n      operator: Excel.ConditionalCellValueOperator.greaterThan\n    };\n  } else if (params.condition === 'less_than' && params.value !== undefined) {\n    conditionalFormat.cellValue.rule = {\n      formula1: params.value.toString(),\n      operator: Excel.ConditionalCellValueOperator.lessThan\n    };\n  } else if (params.condition === 'equal_to' && params.value !== undefined) {\n    conditionalFormat.cellValue.rule = {\n      formula1: params.value.toString(),\n      operator: Excel.ConditionalCellValueOperator.equalTo\n    };\n  } else {\n    // Default to greater than\n    conditionalFormat.cellValue.rule = {\n      formula1: (params.value || 0).toString(),\n      operator: Excel.ConditionalCellValueOperator.greaterThan\n    };\n  }\n  \n  // Set the format\n  conditionalFormat.cellValue.format.fill.color = params.backgroundColor || \"#00ff00\";\n  if (params.fontColor) {\n    conditionalFormat.cellValue.format.font.color = params.fontColor;\n  }\n  if (params.bold) {\n    conditionalFormat.cellValue.format.font.bold = true;\n  }\n  \n  await context.sync();\n  \n  return {\n    success: true,\n    message: `조건부 서식이 적용되었습니다. (${params.condition} ${params.value})`\n  };\n}\n\n// Translate column contents\nasync function executeTranslate(context, params) {\n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  \n  if (!params.targetLanguage) {\n    return { success: false, error: '대상 언어를 지정해주세요.' };\n  }\n  \n  let sourceRange;\n  let targetColumnIndex;\n  \n  if (params.sourceRange) {\n    sourceRange = worksheet.getRange(params.sourceRange);\n  } else if (params.sourceColumn) {\n    const columnIndex = params.sourceColumn.charCodeAt(0) - 65;\n    const usedRange = worksheet.getUsedRange();\n    usedRange.load([\"rowCount\"]);\n    await context.sync();\n    \n    if (usedRange.rowCount > 1) {\n      sourceRange = worksheet.getRangeByIndexes(1, columnIndex, usedRange.rowCount - 1, 1);\n    } else {\n      return { success: false, error: '번역할 데이터가 없습니다.' };\n    }\n    \n    targetColumnIndex = params.targetColumn === 'next' ? columnIndex + 1 :\n                       params.targetColumn ? params.targetColumn.charCodeAt(0) - 65 : columnIndex + 1;\n  } else {\n    return { success: false, error: '번역할 열을 지정해주세요.' };\n  }\n  \n  sourceRange.load([\"values\", \"rowIndex\", \"columnIndex\", \"rowCount\"]);\n  await context.sync();\n  \n  const sourceValues = sourceRange.values;\n  const translations = [];\n  const batchSize = 20;\n  \n  // Translate in batches\n  for (let i = 0; i < sourceValues.length; i += batchSize) {\n    const batch = sourceValues.slice(i, Math.min(i + batchSize, sourceValues.length));\n    const batchTexts = batch.map(row => row[0]).filter(text => text);\n    \n    if (batchTexts.length > 0) {\n      const translatedBatch = await translateBatch(batchTexts, params.targetLanguage, params.sourceLanguage);\n      \n      let translationIndex = 0;\n      for (let j = 0; j < batch.length; j++) {\n        if (batch[j][0]) {\n          translations.push([translatedBatch[translationIndex]]);\n          translationIndex++;\n        } else {\n          translations.push(['']);\n        }\n      }\n    } else {\n      for (let j = 0; j < batch.length; j++) {\n        translations.push(['']);\n      }\n    }\n    \n    // Show progress\n    if (i % 100 === 0 && i > 0) {\n      showStatus(`번역 중... ${Math.round((i / sourceValues.length) * 100)}%`, 'info');\n    }\n  }\n  \n  // Write translations\n  const targetRange = worksheet.getRangeByIndexes(\n    sourceRange.rowIndex,\n    targetColumnIndex || sourceRange.columnIndex + 1,\n    translations.length,\n    1\n  );\n  \n  targetRange.values = translations;\n  await context.sync();\n  \n  // Add header\n  const headerCell = worksheet.getCell(0, targetColumnIndex || sourceRange.columnIndex + 1);\n  const sourceHeaderCell = worksheet.getCell(0, sourceRange.columnIndex);\n  sourceHeaderCell.load(\"values\");\n  await context.sync();\n  \n  headerCell.values = [[`${sourceHeaderCell.values[0][0]} (${params.targetLanguage})`]];\n  await context.sync();\n  \n  return {\n    success: true,\n    message: `번역이 완료되었습니다. (${sourceValues.length}개 항목)`\n  };\n}\n\n// Translate a batch of texts through proxy\nasync function translateBatch(texts, targetLanguage, sourceLanguage) {\n  try {\n    const response = await fetch(API_PROXY_URL, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        command: `Translate these items to ${targetLanguage}: ${texts.join(', ')}`,\n        sheetContext: {\n          operation: 'translate_batch',\n          texts: texts,\n          targetLanguage: targetLanguage,\n          sourceLanguage: sourceLanguage\n        }\n      })\n    });\n    \n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    \n    const result = await response.json();\n    \n    if (result.success && result.data && result.data.translations) {\n      return result.data.translations;\n    } else if (result.error) {\n      throw new Error(result.error);\n    } else {\n      throw new Error('번역 응답을 받을 수 없습니다.');\n    }\n  } catch (error) {\n    console.error('Translation error:', error);\n    return texts.map(() => '');\n  }\n}\n\n// Helper functions\nfunction getColumnLetter(columnIndex) {\n  let columnLetter = '';\n  let tempIndex = columnIndex;\n  \n  while (tempIndex >= 0) {\n    columnLetter = String.fromCharCode((tempIndex % 26) + 65) + columnLetter;\n    tempIndex = Math.floor(tempIndex / 26) - 1;\n  }\n  \n  return columnLetter;\n}\n\nfunction formatNumber(value) {\n  if (typeof value === 'number') {\n    if (Number.isInteger(value)) {\n      return value.toLocaleString('ko-KR');\n    } else {\n      return value.toLocaleString('ko-KR', { minimumFractionDigits: 0, maximumFractionDigits: 2 });\n    }\n  }\n  return value;\n}\n\nfunction showStatus(message, type) {\n  const status = document.getElementById('status');\n  status.textContent = message;\n  status.className = 'status-message ' + type;\n  status.style.display = 'block';\n  \n  if (window.statusTimeout) {\n    clearTimeout(window.statusTimeout);\n  }\n  \n  if (type === 'success') {\n    window.statusTimeout = setTimeout(() => {\n      status.style.display = 'none';\n    }, 5000);\n  }\n}\n\nfunction clearInput() {\n  document.getElementById('commandInput').value = '';\n  document.getElementById('status').style.display = 'none';\n}\n\nfunction setCommand(command) {\n  document.getElementById('commandInput').value = command;\n  document.getElementById('commandInput').focus();\n}\n\nfunction showSettings() {\n  showStatus('이 애드인은 보안 서버를 통해 AI 기능을 제공합니다. 별도의 API 키 설정이 필요하지 않습니다.', 'info');\n}\n\n// Test backend connection\nasync function testBackendConnection() {\n  try {\n    console.log('Testing backend connection...');\n    const testUrl = 'https://excel-addon-backend.vercel.app/api/test';\n    \n    const response = await fetch(testUrl, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({ test: true })\n    });\n    \n    console.log('Test response status:', response.status);\n    console.log('Test response headers:', response.headers);\n    \n    const data = await response.json();\n    console.log('Test response data:', data);\n    \n    showStatus('백엔드 연결 테스트 성공', 'success');\n  } catch (error) {\n    console.error('Backend test error:', error);\n    showStatus('백엔드 연결 테스트 실패: ' + error.message, 'error');\n  }\n}\n\n// Additional operations (compress, filter, insert, delete, formula, retry_translation)\n// These would need to be implemented based on Excel JavaScript API capabilities\n\nasync function executeCompress(context, params) {\n  // Implementation would be similar to Google Sheets version\n  // but using Excel JavaScript API\n  return {\n    success: false,\n    error: '이 기능은 현재 구현 중입니다.'\n  };\n}\n\nasync function executeFilter(context, params) {\n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  const range = params.range ? worksheet.getRange(params.range) : worksheet.getUsedRange();\n  \n  // Apply autofilter\n  range.worksheet.autoFilter.apply(range);\n  \n  await context.sync();\n  \n  return {\n    success: true,\n    message: '필터가 적용되었습니다.'\n  };\n}\n\nasync function executeInsert(context, params) {\n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  const type = params.type || 'row';\n  const position = params.position || 1;\n  const count = params.count || 1;\n  \n  if (type === 'row') {\n    const range = worksheet.getRangeByIndexes(position - 1, 0, count, 1);\n    range.insert(Excel.InsertShiftDirection.down);\n  } else {\n    const range = worksheet.getRangeByIndexes(0, position - 1, 1, count);\n    range.insert(Excel.InsertShiftDirection.right);\n  }\n  \n  await context.sync();\n  \n  return {\n    success: true,\n    message: `${count}개의 ${type === 'row' ? '행' : '열'}이 삽입되었습니다.`\n  };\n}\n\nasync function executeDelete(context, params) {\n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  const type = params.type || 'row';\n  const position = params.position || 1;\n  const count = params.count || 1;\n  \n  if (type === 'row') {\n    const range = worksheet.getRangeByIndexes(position - 1, 0, count, 1);\n    range.delete(Excel.DeleteShiftDirection.up);\n  } else {\n    const range = worksheet.getRangeByIndexes(0, position - 1, 1, count);\n    range.delete(Excel.DeleteShiftDirection.left);\n  }\n  \n  await context.sync();\n  \n  return {\n    success: true,\n    message: `${count}개의 ${type === 'row' ? '행' : '열'}이 삭제되었습니다.`\n  };\n}\n\nasync function executeFormula(context, params) {\n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  const range = params.range ? worksheet.getRange(params.range) : context.workbook.getSelectedRange();\n  \n  if (!params.formula) {\n    return { success: false, error: '수식을 지정해주세요.' };\n  }\n  \n  range.formulas = [[params.formula]];\n  await context.sync();\n  \n  return {\n    success: true,\n    message: '수식이 적용되었습니다.'\n  };\n}\n\nasync function executeRetryTranslation(context, params) {\n  // Implementation would be similar to Google Sheets version\n  // but using Excel JavaScript API\n  return {\n    success: false,\n    error: '이 기능은 현재 구현 중입니다.'\n  };\n}"],"names":["__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","m","g","globalThis","this","Function","e","window","o","obj","prop","Object","prototype","hasOwnProperty","call","scriptUrl","importScripts","location","document","currentScript","tagName","toUpperCase","src","scripts","getElementsByTagName","length","i","test","Error","replace","p","b","baseURI","self","href","URL","t","r","Symbol","n","iterator","toStringTag","c","Generator","u","create","_regeneratorDefine2","f","y","G","v","a","d","bind","l","TypeError","done","value","return","GeneratorFunction","GeneratorFunctionPrototype","getPrototypeOf","setPrototypeOf","__proto__","displayName","_regenerator","w","defineProperty","_invoke","enumerable","configurable","writable","asyncGeneratorStep","Promise","resolve","then","_asyncToGenerator","arguments","apply","_next","_throw","recognition","isListening","API_PROXY_URL","process","initializeSpeechRecognition","SpeechRecognition","webkitSpeechRecognition","lang","continuous","interimResults","maxAlternatives","onstart","getElementById","classList","add","textContent","onresult","event","transcript","results","isFinal","onerror","remove","errorMessage","error","showStatus","onend","trim","focus","disabled","toggleVoiceRecognition","stop","start","Office","onReady","info","host","HostType","Excel","_testBackendConnection","testBackendConnection","onclick","executeCommand","clearInput","showSettings","querySelectorAll","forEach","item","command","getAttribute","addEventListener","key","shiftKey","preventDefault","isExecuting","_executeCommand","_callee2","button","originalText","_t","_context2","console","log","innerHTML","run","_ref","_callee","context","worksheet","range","usedRange","sheetContext","headerRow","interpretation","result","_context","workbook","worksheets","getActiveWorksheet","getSelectedRange","load","getUsedRange","sync","sheetName","name","activeRange","address","row","rowIndex","column","columnIndex","numRows","rowCount","numColumns","columnCount","lastRow","lastColumn","headers","dataRange","values","isLargeSheet","push","columnLetter","getColumnLetter","label","toString","callOpenAI","success","executeInterpretedCommand","data","message","setTimeout","_x38","stack","_x","_x2","_callOpenAI","_callee3","response","errorData","_t2","_context3","fetch","method","body","JSON","stringify","ok","json","concat","status","_x5","_x6","_executeInterpretedCommand","_callee5","commandData","operation","params","_t5","_t6","_context5","parameters","Date","toISOString","executeMerge","executeSum","executeAverage","executeCount","executeFormat","executeSort","executeFilter","executeInsert","executeDelete","executeFormula","executeChart","executeConditionalFormat","executeTranslate","executeCompress","executeRetryTranslation","_x7","_x8","_executeMerge","_callee6","rangeAddress","_context6","getRange","merge","_x9","_x0","_executeSum","_callee7","sourceRange","newCell","targetCell","_column","_lastRow","_newCell","_context7","addNewRow","getCell","formulas","formatNumber","_x1","_x10","_executeAverage","_callee8","_context8","_x11","_x12","_executeCount","_callee9","formula","criteria","resultCell","lastCol","_context9","countType","condition","operator","includes","_x13","_x14","_executeFormat","_callee0","_context0","bold","format","font","italic","fontSize","size","fontColor","color","backgroundColor","fill","horizontalAlignment","numberFormat","_x15","_x16","_executeSort","_callee1","ascending","_context1","sort","_x17","_x18","_executeChart","_callee10","sourceData","chart","_context10","charts","chartType","title","text","left","offsetX","top","offsetY","_x19","_x20","_executeConditionalFormat","_callee11","conditionalFormat","_context11","conditionalFormats","ConditionalFormatType","cellValue","rule","formula1","ConditionalCellValueOperator","greaterThan","lessThan","equalTo","_x21","_x22","_executeTranslate","_callee12","targetColumnIndex","sourceValues","translations","batchSize","batch","batchTexts","translatedBatch","translationIndex","j","_j","headerCell","sourceHeaderCell","_context12","targetLanguage","sourceColumn","charCodeAt","getRangeByIndexes","targetColumn","slice","Math","min","map","filter","translateBatch","sourceLanguage","round","_x23","_x24","_x25","_translateBatch","_callee13","texts","_t7","_context13","join","tempIndex","String","fromCharCode","floor","Number","isInteger","toLocaleString","minimumFractionDigits","maximumFractionDigits","type","className","style","display","statusTimeout","clearTimeout","_callee14","_t8","_context14","_x26","_x27","_executeCompress","_callee15","_context15","_x28","_x29","_executeFilter","_callee16","_context16","autoFilter","_x30","_x31","_executeInsert","_callee17","position","count","_context17","insert","InsertShiftDirection","down","right","_x32","_x33","_executeDelete","_callee18","_context18","delete","DeleteShiftDirection","up","_x34","_x35","_executeFormula","_callee19","_context19","_x36","_x37","_executeRetryTranslation","_callee20","_context20"],"sourceRoot":""}