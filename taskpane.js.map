{"version":3,"file":"taskpane.js","mappings":";iGACIA,EAA2B,CAAC,EAGhC,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAaE,QAGrB,IAAIC,EAASN,EAAyBE,GAAY,CAGjDG,QAAS,CAAC,GAOX,OAHAE,EAAoBL,GAAUI,EAAQA,EAAOD,QAASJ,GAG/CK,EAAOD,OACf,CAGAJ,EAAoBO,EAAID,ECzBxBN,EAAoBQ,EAAI,WACvB,GAA0B,iBAAfC,WAAyB,OAAOA,WAC3C,IACC,OAAOC,MAAQ,IAAIC,SAAS,cAAb,EAChB,CAAE,MAAOC,GACR,GAAsB,iBAAXC,OAAqB,OAAOA,MACxC,CACA,CAPuB,GCAxBb,EAAoBc,EAAI,SAASC,EAAKC,GAAQ,OAAOC,OAAOC,UAAUC,eAAeC,KAAKL,EAAKC,EAAO,E,WCAtG,IAAIK,EACArB,EAAoBQ,EAAEc,gBAAeD,EAAYrB,EAAoBQ,EAAEe,SAAW,IACtF,IAAIC,EAAWxB,EAAoBQ,EAAEgB,SACrC,IAAKH,GAAaG,IACbA,EAASC,eAAkE,WAAjDD,EAASC,cAAcC,QAAQC,gBAC5DN,EAAYG,EAASC,cAAcG,MAC/BP,GAAW,CACf,IAAIQ,EAAUL,EAASM,qBAAqB,UAC5C,GAAGD,EAAQE,OAEV,IADA,IAAIC,EAAIH,EAAQE,OAAS,EAClBC,GAAK,KAAOX,IAAc,aAAaY,KAAKZ,KAAaA,EAAYQ,EAAQG,KAAKJ,GAE3F,CAID,IAAKP,EAAW,MAAM,IAAIa,MAAM,yDAChCb,EAAYA,EAAUc,QAAQ,SAAU,IAAIA,QAAQ,OAAQ,IAAIA,QAAQ,QAAS,IAAIA,QAAQ,YAAa,KAC1GnC,EAAoBoC,EAAIf,C,IClBxBrB,EAAoBqC,EAAIb,SAASc,SAAWC,KAAKhB,SAASiB,K,wBCCzB,IAAIC,IAAI,a,uvCCAzC,IAAA7B,EAAA8B,EAAAC,EAAA,mBAAAC,OAAAA,OAAA,GAAAC,EAAAF,EAAAG,UAAA,aAAAhC,EAAA6B,EAAAI,aAAA,yBAAAf,EAAAW,EAAAE,EAAA/B,EAAAkB,GAAA,IAAAgB,EAAAH,GAAAA,EAAA3B,qBAAA+B,EAAAJ,EAAAI,EAAAC,EAAAjC,OAAAkC,OAAAH,EAAA9B,WAAA,OAAAkC,EAAAF,EAAA,mBAAAP,EAAAE,EAAA/B,GAAA,IAAAkB,EAAAgB,EAAAE,EAAAG,EAAA,EAAAjB,EAAAtB,GAAA,GAAAwC,GAAA,EAAAC,EAAA,CAAAnB,EAAA,EAAAS,EAAA,EAAAW,EAAA5C,EAAA6C,EAAAC,EAAAL,EAAAK,EAAAC,KAAA/C,EAAA,GAAA8C,EAAA,SAAAhB,EAAAC,GAAA,OAAAX,EAAAU,EAAAM,EAAA,EAAAE,EAAAtC,EAAA2C,EAAAV,EAAAF,EAAAc,CAAA,YAAAC,EAAAf,EAAAE,GAAA,IAAAG,EAAAL,EAAAO,EAAAL,EAAAH,EAAA,GAAAY,GAAAD,IAAAvC,GAAA4B,EAAAN,EAAAL,OAAAW,IAAA,KAAA5B,EAAAkB,EAAAI,EAAAM,GAAAgB,EAAAH,EAAAnB,EAAAwB,EAAA5B,EAAA,GAAAW,EAAA,GAAA7B,EAAA8C,IAAAf,KAAAK,EAAAlB,GAAAgB,EAAAhB,EAAA,OAAAgB,EAAA,MAAAhB,EAAA,GAAAA,EAAA,GAAApB,GAAAoB,EAAA,IAAA0B,KAAA5C,EAAA6B,EAAA,GAAAe,EAAA1B,EAAA,KAAAgB,EAAA,EAAAO,EAAAC,EAAAX,EAAAU,EAAAV,EAAAb,EAAA,IAAA0B,EAAAE,IAAA9C,EAAA6B,EAAA,GAAAX,EAAA,GAAAa,GAAAA,EAAAe,KAAA5B,EAAA,GAAAW,EAAAX,EAAA,GAAAa,EAAAU,EAAAV,EAAAe,EAAAZ,EAAA,OAAAlC,GAAA6B,EAAA,SAAAc,EAAA,MAAAH,GAAA,EAAAT,CAAA,iBAAA/B,EAAAsB,EAAAwB,GAAA,GAAAP,EAAA,QAAAQ,UAAA,oCAAAP,GAAA,IAAAlB,GAAAsB,EAAAtB,EAAAwB,GAAAZ,EAAAZ,EAAAc,EAAAU,GAAAlB,EAAAM,EAAA,EAAApC,EAAAsC,KAAAI,GAAA,CAAAtB,IAAAgB,EAAAA,EAAA,GAAAA,EAAA,IAAAO,EAAAV,GAAA,GAAAa,EAAAV,EAAAE,IAAAK,EAAAV,EAAAK,EAAAK,EAAAC,EAAAN,GAAA,OAAAG,EAAA,EAAArB,EAAA,IAAAgB,IAAAlC,EAAA,QAAA4B,EAAAV,EAAAlB,GAAA,MAAA4B,EAAAA,EAAAtB,KAAAY,EAAAkB,IAAA,MAAAW,UAAA,wCAAAnB,EAAAoB,KAAA,OAAApB,EAAAQ,EAAAR,EAAAqB,MAAAf,EAAA,IAAAA,EAAA,YAAAA,IAAAN,EAAAV,EAAAgC,SAAAtB,EAAAtB,KAAAY,GAAAgB,EAAA,IAAAE,EAAAW,UAAA,oCAAA/C,EAAA,YAAAkC,EAAA,GAAAhB,EAAApB,CAAA,UAAA8B,GAAAY,EAAAC,EAAAV,EAAA,GAAAK,EAAAP,EAAAvB,KAAAyB,EAAAU,MAAAE,EAAA,YAAAf,GAAAV,EAAApB,EAAAoC,EAAA,EAAAE,EAAAR,CAAA,SAAAW,EAAA,UAAAU,MAAArB,EAAAoB,KAAAR,EAAA,GAAAX,EAAA7B,EAAAkB,IAAA,GAAAkB,CAAA,KAAAO,EAAA,YAAAR,IAAA,UAAAgB,IAAA,UAAAC,IAAA,CAAAxB,EAAAzB,OAAAkD,eAAA,IAAAnB,EAAA,GAAAH,GAAAH,EAAAA,EAAA,GAAAG,QAAAO,EAAAV,EAAA,GAAAG,EAAA,yBAAAH,GAAAQ,EAAAgB,EAAAhD,UAAA+B,EAAA/B,UAAAD,OAAAkC,OAAAH,GAAA,SAAAK,EAAAzC,GAAA,OAAAK,OAAAmD,eAAAnD,OAAAmD,eAAAxD,EAAAsD,IAAAtD,EAAAyD,UAAAH,EAAAd,EAAAxC,EAAAE,EAAA,sBAAAF,EAAAM,UAAAD,OAAAkC,OAAAD,GAAAtC,CAAA,QAAAqD,EAAA/C,UAAAgD,EAAAd,EAAAF,EAAA,cAAAgB,GAAAd,EAAAc,EAAA,cAAAD,GAAAA,EAAAK,YAAA,oBAAAlB,EAAAc,EAAApD,EAAA,qBAAAsC,EAAAF,GAAAE,EAAAF,EAAApC,EAAA,aAAAsC,EAAAF,EAAAL,EAAA,yBAAAO,EAAAF,EAAA,oDAAAqB,EAAA,kBAAAC,EAAAxC,EAAAzB,EAAA8C,EAAA,cAAAD,EAAAxC,EAAA+B,EAAAE,EAAAH,GAAA,IAAAV,EAAAf,OAAAwD,eAAA,IAAAzC,EAAA,gBAAApB,GAAAoB,EAAA,EAAAoB,EAAA,SAAAxC,EAAA+B,EAAAE,EAAAH,GAAA,SAAA5B,EAAA6B,EAAAE,GAAAO,EAAAxC,EAAA+B,EAAA,SAAA/B,GAAA,YAAA8D,QAAA/B,EAAAE,EAAAjC,EAAA,GAAA+B,EAAAX,EAAAA,EAAApB,EAAA+B,EAAA,CAAAoB,MAAAlB,EAAA8B,YAAAjC,EAAAkC,cAAAlC,EAAAmC,UAAAnC,IAAA9B,EAAA+B,GAAAE,GAAA/B,EAAA,UAAAA,EAAA,WAAAA,EAAA,cAAAsC,EAAAxC,EAAA+B,EAAAE,EAAAH,EAAA,UAAAoC,EAAAjC,EAAAH,EAAA9B,EAAA+B,EAAA7B,EAAA2C,EAAAT,GAAA,QAAAhB,EAAAa,EAAAY,GAAAT,GAAAE,EAAAlB,EAAA+B,KAAA,OAAAlB,GAAA,YAAAjC,EAAAiC,EAAA,CAAAb,EAAA8B,KAAApB,EAAAQ,GAAA6B,QAAAC,QAAA9B,GAAA+B,KAAAtC,EAAA7B,EAAA,UAAAoE,EAAArC,GAAA,sBAAAH,EAAA,KAAA9B,EAAAuE,UAAA,WAAAJ,QAAA,SAAApC,EAAA7B,GAAA,IAAA2C,EAAAZ,EAAAuC,MAAA1C,EAAA9B,GAAA,SAAAyE,EAAAxC,GAAAiC,EAAArB,EAAAd,EAAA7B,EAAAuE,EAAAC,EAAA,OAAAzC,EAAA,UAAAyC,EAAAzC,GAAAiC,EAAArB,EAAAd,EAAA7B,EAAAuE,EAAAC,EAAA,QAAAzC,EAAA,CAAAwC,OAAA,MAOA,IAAIE,EAAc,KACdC,GAAc,EAGZC,EAAgBC,0DAEtBC,OAAOC,QAAQ,SAACC,GACd,GAAIA,EAAKC,OAASH,OAAOI,SAASC,MAAO,EA27E3C,WACoCC,GAAAb,MAAC,KAADD,UAAA,CA17EhCe,GAGA1E,SAAS2E,eAAe,iBAAiBC,QAAUC,EACnD7E,SAAS2E,eAAe,eAAeC,QAAUE,EACjD9E,SAAS2E,eAAe,eAAeC,QAAU,kBA+LrD,WAKE,GAHsD,WAA7BvF,OAAOU,SAASgF,WAChB1F,OAAOU,SAASiF,SAASC,SAAS,aAKzD,OAFAC,EAAW,iEAAkE,cAC7ElF,SAAS2E,eAAe,eAAeQ,YAAc,YAIvD,GAAKpB,EAML,GAAIC,EACFD,EAAYqB,YAEZ,IACErB,EAAYsB,OACd,CAAE,MAAOC,GAGHA,EAAMC,SAAWD,EAAMC,QAAQN,SAAS,eAC1CC,EAAW,2CAA4C,SAEvDA,EAAW,qBAAsB,QAErC,MAjBAA,EAAW,4BAA6B,QAmB5C,CA/N2DM,EAAwB,EAG/ExF,SAAS2E,eAAe,cAAcC,QAAUa,EAChDzF,SAAS2E,eAAe,iBAAiBC,QAAUc,GAGnDC,IAGA,IAAMC,EAAc5F,SAAS2E,eAAe,eACtCkB,EAAaC,aAAaC,QAAQ,8BAClCC,EAAUF,aAAaC,QAAQ,wBAGlB,qBAAfF,GAAsCG,EAG/BH,EACTD,EAAYrD,MAAQsD,GAGpBD,EAAYrD,MAAQ,wBACpBuD,aAAaG,QAAQ,6BAA8B,2BAPnDH,aAAaG,QAAQ,6BAA8B,yBACnDL,EAAYrD,MAAQ,yBAUtB,IAAM2D,EAAYlG,SAAS2E,eAAe,aACzBuB,EAAUC,cAAc,UAChCvB,QAAU,kBAAMwB,GAAe,EAExC,IAAMC,EAAcrG,SAAS2E,eAAe,eAE5CtF,OAAOuF,QAAU,SAAC0B,GACZA,EAAMC,QAAUL,EAClBE,IACSE,EAAMC,QAAUF,GACzBG,GAEJ,EAEAxG,SAAS2E,eAAe,iBAAiBC,QAAU6B,EACnDzG,SAAS2E,eAAe,iBAAiBC,QAAU8B,EACnD1G,SAAS2E,eAAe,gBAAgBC,QAAU4B,EAGlDxG,SAAS2E,eAAe,eAAegC,SAAWC,GAG7B5G,SAAS6G,iBAAiB,iBAClCC,QAAQ,SAAAC,GACnBA,EAAKnC,QAAU,WAuqErB,IAAoBoC,IAtqED9H,KAAK+H,aAAa,gBAuqEnCjH,SAAS2E,eAAe,gBAAgBpC,MAAQyE,EAChDhH,SAAS2E,eAAe,gBAAgBuC,OAvqEpC,CACF,GAGAlH,SAAS2E,eAAe,gBAAgBwC,iBAAiB,UAAW,SAASb,GACzD,UAAdA,EAAMc,KAAoBd,EAAMe,WAClCf,EAAMgB,iBACNzC,IAEJ,GAQJ,WAKE,GAHsD,WAA7BxF,OAAOU,SAASgF,WAChB1F,OAAOU,SAASiF,SAASC,SAAS,aAErC,CACpB,IAAMsC,EAAcvH,SAAS2E,eAAe,eACtC6C,EAAcxH,SAAS2E,eAAe,eAW5C,OATA4C,EAAYE,UAAW,EACvBF,EAAYG,MAAMC,QAAU,MAC5BJ,EAAYG,MAAME,OAAS,cAC3BJ,EAAYrC,YAAc,oBAC1BqC,EAAYE,MAAMG,MAAQ,OAG1BN,EAAYO,MAAQ,6DAEb,IACT,CAEA,IAAMC,EAAoB1I,OAAO0I,mBAAqB1I,OAAO2I,wBAE7D,IAAKD,EAIH,OAHA7C,EAAW,0BAA2B,SACtClF,SAAS2E,eAAe,eAAe8C,UAAW,EAClDzH,SAAS2E,eAAe,eAAeQ,YAAc,YAC9C,MAGTpB,EAAc,IAAIgE,GACNE,KAAO,QACnBlE,EAAYmE,YAAa,EACzBnE,EAAYoE,gBAAiB,EAC7BpE,EAAYqE,gBAAkB,EAE9BrE,EAAYsE,QAAU,WACpBrE,GAAc,EACdhE,SAAS2E,eAAe,eAAe2D,UAAUC,IAAI,aACrDvI,SAAS2E,eAAe,eAAeQ,YAAc,oBACrDnF,SAAS2E,eAAe,eAAe2D,UAAUC,IAAI,YACvD,EAEAxE,EAAYyE,SAAW,SAASlC,GAC9B,IAAMmC,EAAanC,EAAMoC,QAAQ,GAAG,GAAGD,WACvCzI,SAAS2E,eAAe,gBAAgBpC,MAAQkG,EAE5CnC,EAAMoC,QAAQ,GAAGC,QACnB3I,SAAS2E,eAAe,eAAeQ,YAAc,WAErDnF,SAAS2E,eAAe,eAAeQ,YAAc,QAAUsD,CAEnE,EAEA1E,EAAY6E,QAAU,SAAStC,GAC7BtC,GAAc,EACdhE,SAAS2E,eAAe,eAAe2D,UAAUO,OAAO,aACxD7I,SAAS2E,eAAe,eAAe2D,UAAUO,OAAO,aAExD,IAAIC,EAAe,WAGbC,EAAgD,WAA7B1J,OAAOU,SAASgF,WAChB1F,OAAOU,SAASiF,SAASC,SAAS,aAE3D,OAAOqB,EAAMhB,OACX,IAAK,YACHwD,EAAe,kBACf,MACF,IAAK,gBACHA,EAAe,kBACf,MACF,IAAK,cAECC,GACFD,EAAe,iEACf9I,SAAS2E,eAAe,eAAeQ,YAAc,YAErD2D,EAAe,oCAEjB,MACF,IAAK,UACHA,EAAe,mBACf,MACF,QAEMC,GAAoBzC,EAAMhB,QAC5BwD,EAAe,iEACf9I,SAAS2E,eAAe,eAAeQ,YAAc,YAMvD4D,GAAoC,gBAAhBzC,EAAMhB,MAC5BtF,SAAS2E,eAAe,eAAeQ,YAAc,WAErDnF,SAAS2E,eAAe,eAAeQ,YAAc2D,EAGvD5D,EAAW4D,EAAc,QAC3B,EAEA/E,EAAYiF,MAAQ,WAClBhF,GAAc,EACdhE,SAAS2E,eAAe,eAAe2D,UAAUO,OAAO,aACxD7I,SAAS2E,eAAe,eAAe2D,UAAUO,OAAO,aAExC7I,SAAS2E,eAAe,gBAAgBpC,MAAM0G,QAE5DjJ,SAAS2E,eAAe,eAAeQ,YAAc,0BACrDnF,SAAS2E,eAAe,iBAAiBuC,SAEzClH,SAAS2E,eAAe,eAAeQ,YAAc,UAEzD,CAGF,CA3HI+D,EACF,CACF,GAgKA,IAAIC,GAAc,EAAM,SAETtE,IAAc,OAAAuE,EAAAxF,MAAC,KAADD,UAAA,CAkN7B,SAAAyF,IAFC,OAEDA,EAAA1F,EAAAX,IAAAhE,EAlNA,SAAAsK,IAAA,IAAArC,EAAAsC,EAAAC,EAAAC,EAAA,OAAAzG,IAAAC,EAAA,SAAAyG,GAAA,cAAAA,EAAA7I,EAAA6I,EAAApI,GAAA,WAEM8H,EAAa,CAAFM,EAAApI,EAAA,eAAAoI,EAAAxH,EAAA,UAIqD,GAA9D+E,EAAUhH,SAAS2E,eAAe,gBAAgBpC,MAAM0G,OAEhD,CAAFQ,EAAApI,EAAA,QAC0B,OAApC6D,EAAW,eAAgB,SAASuE,EAAAxH,EAAA,UAYC,OARvCkH,GAAc,EAERG,EAAStJ,SAAS2E,eAAe,iBACjC4E,EAAe,0CAGrBD,EAAO7B,UAAW,EAClB6B,EAAOI,UAAY,mDACnBxE,EAAW,mBAAoB,QAAQuE,EAAA7I,EAAA,EAAA6I,EAAApI,EAAA,EAG/BmD,MAAMmF,IAAG,eAAAC,EAAAlG,EAAAX,IAAAhE,EAAC,SAAA8K,EAAOC,GAAO,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA3J,EAAA4J,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAA7H,IAAAC,EAAA,SAAA6H,GAAA,cAAAA,EAAAjK,EAAAiK,EAAAxJ,GAAA,OAUkB,OARxC0I,EAAYD,EAAQgB,SAASC,WAAWC,qBAE1ChB,EAAkB,KACMa,EAAAjK,EAAA,GAIpBqJ,EAAiBH,EAAQgB,SAASG,qBACzBC,KAAK,CAAC,QAAS,cAAcL,EAAAxJ,EAAA,EACtCyI,EAAQqB,OAAM,YAEhBlB,EAAemB,UAAY,GAAC,CAAAP,EAAAxJ,EAAA,QAIqD,OAD7E6I,EAAaD,EAAeoB,MAAMC,MAAM,IACnCJ,KAAK,CAAC,UAAW,WAAY,cAAe,WAAY,gBAAgBL,EAAAxJ,EAAA,EAC7EyI,EAAQqB,OAAM,OAIpB,IADMhB,EAAiB,GACd3J,EAAI,EAAGA,EAAIyJ,EAAeoB,MAAMC,MAAM/K,OAAQC,IACxCyJ,EAAeoB,MAAMC,MAAM9K,GACnC0K,KAAK,WACX,OAAAL,EAAAxJ,EAAA,EACKyI,EAAQqB,OAAM,OAEpB,IAAS3K,EAAI,EAAGA,EAAIyJ,EAAeoB,MAAMC,MAAM/K,OAAQC,IACrD2J,EAAeoB,KAAKtB,EAAeoB,MAAMC,MAAM9K,GAAGgL,SAGpDxB,EAAkB,CAChBwB,QAASrB,EAAesB,KAAK,KAC7BC,IAAKxB,EAAWyB,SAAW,EAC3BC,OAAQ1B,EAAW2B,YAAc,EACjCC,QAAS5B,EAAW6B,SACpBC,WAAY9B,EAAW+B,YACvBC,kBAAkB,GAClBrB,EAAAxJ,EAAA,eAI4E,OADxEgJ,EAAQJ,EAAeoB,MAAMC,MAAM,IACnCJ,KAAK,CAAC,UAAW,WAAY,cAAe,WAAY,gBAAgBL,EAAAxJ,EAAA,EACxEyI,EAAQqB,OAAM,OAEpBnB,EAAkB,CAChBwB,QAASnB,EAAMmB,QACfE,IAAKrB,EAAMsB,SAAW,EACtBC,OAAQvB,EAAMwB,YAAc,EAC5BC,QAASzB,EAAM0B,SACfC,WAAY3B,EAAM4B,YAClBC,kBAAkB,GAClB,OAAArB,EAAAxJ,EAAA,eAAAwJ,EAAAjK,EAAA,EAAAiK,EAAA7I,EAIJgI,EAAkB,CAChBwB,QAAS,KACTE,IAAK,EACLE,OAAQ,EACRE,QAAS,EACTE,WAAY,EACZE,kBAAkB,GAClB,OAQkD,OAJtDnC,EAAUmB,KAAK,SAGTZ,EAAYP,EAAUoC,gBAClBjB,KAAK,CAAC,WAAY,cAAe,WAAWL,EAAAxJ,EAAA,GAEhDyI,EAAQqB,OAAM,QAcpB,GAXMZ,EAAe,CACnB6B,UAAWrC,EAAUsC,KACrBC,YAAatC,EACbuC,QAASjC,EAAYA,EAAUyB,SAAW,EAC1CS,WAAYlC,EAAYA,EAAU2B,YAAc,EAChDQ,QAAS,GACTC,UAAWpC,EAAYA,EAAUqC,OAAS,GAC1CC,aAActC,GAAaA,EAAUyB,SAAW,KAI9CzB,GAAaA,EAAUyB,SAAW,EAEpC,IADMvB,EAAYF,EAAUqC,OAAO,GAC1BnM,EAAI,EAAGA,EAAIgK,EAAUjK,OAAQC,IACpC+J,EAAakC,QAAQlB,KAAK,CACxBK,OAAQpL,EAAI,EACZqM,aAAcC,EAAgBtM,GAC9BuM,MAAOvC,EAAUhK,GAAKgK,EAAUhK,GAAGwM,WAAa,KAKtD,OAAAnC,EAAAxJ,EAAA,GAC6B4L,EAAWjG,EAASuD,GAAa,QAGjB,GAHvCG,EAAcG,EAAA7I,EAGpBkL,QAAQC,IAAI,gBAAiBzC,GAExBA,EAAe0C,QAAS,CAAFvC,EAAAxJ,EAAA,eACnB,IAAIX,MAAMgK,EAAepF,OAAM,WAIlCoF,EAAe2C,KAAM,CAAFxC,EAAAxJ,EAAA,eAChB,IAAIX,MAAM,sBAAqB,QAMvC,IAFIiK,EAAcD,EAAe2C,MAGhBC,WAAc3C,EAAY4C,WAAU,CAAA1C,EAAAxJ,EAAA,cAE/CsJ,EAAY6C,SAAW7C,EAAY8C,aAAe9C,EAAY+C,WAAS,CAAA7C,EAAAxJ,EAAA,SAEzEsJ,EAAc,CACZ2C,UAAW,MACXK,WAAYjD,EAAe2C,MAC3BxC,EAAAxJ,EAAA,sBACOsJ,EAAYiD,aAAgBjD,EAAYiB,SAAWjB,EAAYkD,YAAW,CAAAhD,EAAAxJ,EAAA,SAEnFsJ,EAAc,CACZ2C,UAAW,UACXK,WAAYjD,EAAe2C,MAC3BxC,EAAAxJ,EAAA,2BAC4B1C,IAArBgM,EAAYmD,MAAsBnD,EAAYoD,WAAapD,EAAYqD,iBAAmBrD,EAAYsD,cAAY,CAAApD,EAAAxJ,EAAA,SAE3HsJ,EAAc,CACZ2C,UAAW,SACXK,WAAYjD,EAAe2C,MAC3BxC,EAAAxJ,EAAA,qBACOsJ,EAAYkD,WAAY,CAAFhD,EAAAxJ,EAAA,SAE/BsJ,EAAc,CACZ2C,UAAW,SACXK,WAAYjD,EAAe2C,MAC3BxC,EAAAxJ,EAAA,qBACOsJ,EAAYuD,YAAevD,EAAY6C,QAAO,CAAA3C,EAAAxJ,EAAA,SAGvDsJ,EAAc,CACZ2C,UAAW,MACXK,WAAYjD,EAAe2C,MAC3BxC,EAAAxJ,EAAA,iBAE8E,MAAhF6L,QAAQ5H,MAAM,4CAA6CoF,EAAe2C,MACpE,IAAI3M,MAAM,0BAAyB,QAG3CwM,QAAQC,IAAI,6CAA8CxC,GAAa,eAAAE,EAAAxJ,EAAA,GAIpD8M,EAA0BrE,EAASa,GAAY,QAA9DC,EAAMC,EAAA7I,EAGZsH,EAAO7B,UAAW,EAClB6B,EAAOI,UAAYH,EAEfqB,EAAOwC,SACTlI,EAAW0F,EAAOrF,SAAW,qBAAsB,WACnD6I,WAAW,WACTpO,SAAS2E,eAAe,gBAAgBpC,MAAQ,EAClD,EAAG,MAEH2C,EAAW0F,EAAOtF,OAAS,iBAAkB,SAC9C,eAAAuF,EAAA5I,EAAA,KAAA4H,EAAA,iBAEF,gBAAAwE,GAAA,OAAAzE,EAAAhG,MAAA,KAAAD,UAAA,EA/Kc,IA+Kb,OAAA8F,EAAApI,EAAA,eAAAoI,EAAA7I,EAAA,EAAA4I,EAAAC,EAAAzH,EAEFsH,EAAO7B,UAAW,EAClB6B,EAAOI,UAAYH,EACnBrE,EAAW,eAAiBsE,EAAMjE,QAAS,SAAS,OAGhC,OAHgCkE,EAAA7I,EAAA,EAGpDuI,GAAc,EAAMM,EAAA5H,EAAA,iBAAA4H,EAAAxH,EAAA,KAAAoH,EAAA,qBAEvBD,EAAAxF,MAAA,KAAAD,UAAA,UAGcsJ,EAAUqB,EAAAC,GAAA,OAAAC,EAAA5K,MAAC,KAADD,UAAA,CA6DzB,SAAA6K,IAFC,OAEDA,EAAA9K,EAAAX,IAAAhE,EA7DA,SAAA0P,EAA0BzH,EAASuD,GAAY,IAAAmE,EAAA1I,EAAA2I,EAAAC,EAAAC,EAAA/F,EAAAgG,EAAAC,EAAAnE,EAAAoE,EAAA,OAAAjM,IAAAC,EAAA,SAAAiM,GAAA,cAAAA,EAAArO,EAAAqO,EAAA5N,GAAA,OAmB1C,OAnB0C4N,EAAArO,EAAA,EAGrC8N,EAAgB5I,aAAaC,QAAQ,+BAAiC,wBACtEC,EAAUF,aAAaC,QAAQ,wBAC/B4I,EAAY7I,aAAaC,QAAQ,0BAGjC6I,EAAc,CAClB5H,QAASA,EACTuD,aAAcA,EACd2E,MAAOR,EACPS,WAAY,SAIQ,qBAAlBT,IACFE,EAAY5I,QAAUA,EACtB4I,EAAYD,UAAYA,GACzBM,EAAA5N,EAAA,EAGsB+N,MAAMnL,EAAe,CAC1CoL,OAAQ,OACR5C,QAAS,CACP,eAAgB,oBAElB6C,KAAMC,KAAKC,UAAUZ,KACrB,OANY,IAARC,EAAQI,EAAAjN,GAQAyN,GAAI,CAAFR,EAAA5N,EAAA,QAC8B,OAAxCyH,EAAe,UAAH4G,OAAab,EAASc,OAAM,KAAAV,EAAArO,EAAA,EAAAqO,EAAA5N,EAAA,EAElBwN,EAASe,OAAM,OAAjCd,EAASG,EAAAjN,EACf8G,EAAegG,EAAUxJ,OAASwD,EAAamG,EAAA5N,EAAA,sBAAA4N,EAAArO,EAAA,EAAAqO,EAAAjN,EAAAiN,EAAArO,EAAA,EAAAqO,EAAA5N,EAAA,EAIrBwN,EAASgB,OAAM,OAAjCd,EAASE,EAAAjN,EACf8G,EAAeiG,EAAUe,UAAU,EAAG,KAAO,MAAMb,EAAA5N,EAAA,eAAA4N,EAAArO,EAAA,EAAAqO,EAAAjN,EAEnD8G,EAAe,UAAH4G,OAAab,EAASc,OAAM,KAAAD,OAAIb,EAASkB,YAAa,cAAAd,EAAAhN,EAAA,EAG/D,CACLmL,SAAS,EACT9H,MAAOwD,IACR,cAAAmG,EAAA5N,EAAA,GAGkBwN,EAASe,OAAM,QAAxB,OAANhF,EAAMqE,EAAAjN,EAAAiN,EAAAhN,EAAA,EACL2I,GAAM,eAAAqE,EAAArO,EAAA,GAAAoO,EAAAC,EAAAjN,EAAAiN,EAAAhN,EAAA,EAGN,CACLmL,SAAS,EACT9H,MAAO,cAAFoK,OAAgBV,EAAMhC,cAC5B,EAAAyB,EAAA,+BAEJ7K,MAAA,KAAAD,UAAA,CAmHA,SAGcwK,EAAyB6B,EAAAC,GAAA,OAAAC,EAAAtM,MAAC,KAADD,UAAA,CAuBxC,SAAAuM,IAFC,OAEDA,EAAAxM,EAAAX,IAAAhE,EAvBA,SAAAoR,EAAyCrG,EAASa,GAAW,IAAAjC,EAAA0H,EAAAC,EAAAC,EAAAC,EAAA3F,EAAA4F,EAAA,OAAAzN,IAAAC,EAAA,SAAAyN,GAAA,cAAAA,EAAA7P,EAAA6P,EAAApP,GAAA,WAEvDsJ,EAAY4C,aAAcmD,MAAMC,QAAQhG,EAAY4C,YAAW,CAAAkD,EAAApP,EAAA,QAC3DqH,EAAU,GACZ0H,EAAe,EAACC,EAAAO,EAEHjG,EAAY4C,YAAUkD,EAAA7P,EAAA,EAAAyP,EAAAQ,IAAA,WAAAP,EAAAD,EAAAhP,KAAAiB,KAAE,CAAFmO,EAAApP,EAAA,QAA1B,OAAFkP,EAAED,EAAA/N,MAAAkO,EAAApP,EAAA,EACUyP,EAAuBhH,EAASyG,EAAGjD,UAAWiD,EAAG5C,YAAc,CAAC,GAAE,OAAjF/C,EAAM6F,EAAAzO,EACZ0G,EAAQ6C,KAAKX,GACTA,EAAOwC,SAASgD,IAAe,OAAAK,EAAApP,EAAA,eAAAoP,EAAApP,EAAA,eAAAoP,EAAA7P,EAAA,EAAA4P,EAAAC,EAAAzO,EAAAqO,EAAAjR,EAAAoR,GAAA,cAAAC,EAAA7P,EAAA,EAAAyP,EAAAxO,IAAA4O,EAAA5O,EAAA,iBAAA4O,EAAAxO,EAAA,EAG9B,CACLmL,QAASgD,IAAiBzF,EAAY4C,WAAWhN,OACjDgF,QAAS,GAAFmK,OAAKU,EAAY,KAAAV,OAAI/E,EAAY4C,WAAWhN,OAAM,iBACzDmI,QAASA,IACV,cAAA+H,EAAApP,EAAA,GAIUyP,EAAuBhH,EAASa,EAAY2C,UAAW3C,EAAYgD,YAAc,CAAC,GAAE,eAAA8C,EAAAxO,EAAA,EAAAwO,EAAAzO,GAAA,EAAAmO,EAAA,sBAClGvM,MAAA,KAAAD,UAAA,UAGcmN,EAAsBC,EAAAC,EAAAC,GAAA,OAAAC,EAAAtN,MAAC,KAADD,UAAA,CAiFrC,SAAAuN,IAFC,OAEDA,EAAAxN,EAAAX,IAAAhE,EAjFA,SAAAoS,EAAsCrH,EAASwD,EAAW8D,GAAM,IAAAC,EAAAC,EAAA,OAAAvO,IAAAC,EAAA,SAAAuO,GAAA,cAAAA,EAAA3Q,EAAA2Q,EAAAlQ,GAAA,OAAAkQ,EAAA3Q,EAAA,EAAAyQ,EAGpD/D,EAASiE,EAAAlQ,EACV,UADUgQ,EACH,EAGP,QAHOA,EAGF,EAGL,YAHKA,EAGI,EAGT,UAHSA,EAGF,EAGP,WAHOA,EAGC,EAGR,SAHQA,EAGF,GAGN,WAHMA,EAGE,GAGR,WAHQA,EAGA,GAGR,WAHQA,EAGA,GAGR,YAHQA,EAGC,GAGT,UAHSA,EAGF,GAGP,uBAHOA,EAGa,GAGpB,cAHoBA,EAGT,GAGX,aAHWA,EAGD,GAGV,sBAHUA,EAGS,GAGnB,kBAHmBA,EAGJ,GAGf,kBAHeA,EAGA,GAGf,uBAHeA,EAGK,GAGpB,cAHoBA,EAGT,GAGX,sBAHWA,EAGQ,GAGnB,uBAHmBA,EAGC,0BAAAE,EAAAlQ,EAAA,EA3DVmQ,EAAa1H,EAASsH,GAAO,OAGF,OAGI,OAGF,OAGC,QAGF,QAGE,QAGA,QAGA,QAGC,QAGF,QAGY,QAGR,QAGD,QAGQ,QAGJ,QAGA,QAGJ,QAGT,QAGQ,QAGU,eAAAG,EAAAtP,EAAA,EAAAsP,EAAAvP,GA5DZ,cAAAuP,EAAAlQ,EAAA,EAG7BoQ,EAAW3H,EAASsH,GAAO,cAAAG,EAAAlQ,EAAA,EAG3BqQ,EAAe5H,EAASsH,GAAO,cAAAG,EAAAlQ,EAAA,EAG/BsQ,EAAa7H,EAASsH,GAAO,cAAAG,EAAAlQ,EAAA,GAG7BuQ,EAAc9H,EAASsH,GAAO,eAAAG,EAAAlQ,EAAA,GAG9BwQ,EAAY/H,EAASsH,GAAO,eAAAG,EAAAlQ,EAAA,GAG5ByQ,GAAchI,EAASsH,GAAO,eAAAG,EAAAlQ,EAAA,GAG9B0Q,GAAcjI,EAASsH,GAAO,eAAAG,EAAAlQ,EAAA,GAG9B2Q,GAAclI,EAASsH,GAAO,eAAAG,EAAAlQ,EAAA,GAG9B4Q,GAAenI,EAASsH,GAAO,eAAAG,EAAAlQ,EAAA,GAG/B6Q,EAAapI,EAASsH,GAAO,eAAAG,EAAAlQ,EAAA,GAG7B8Q,EAAyBrI,EAASsH,GAAO,eAAAG,EAAAlQ,EAAA,GAGzC+Q,EAAiBtI,EAASsH,GAAO,eAAAG,EAAAlQ,EAAA,GAGjCgR,GAAgBvI,EAASsH,GAAO,eAAAG,EAAAlQ,EAAA,GAGhCiR,GAAwBxI,EAASsH,GAAO,eAAAG,EAAAlQ,EAAA,GAGxCkR,GAAoBzI,EAASsH,GAAO,eAAAG,EAAAlQ,EAAA,GAGpCmR,GAAoB1I,EAASsH,GAAO,eAAAG,EAAAlQ,EAAA,GAGpCoR,GAAyBrB,GAAO,eAAAG,EAAAlQ,EAAA,GAGhCqR,GAAgBtB,GAAO,eAAAG,EAAAlQ,EAAA,GAGvBsR,GAAwBvB,GAAO,eAAAG,EAAAlQ,EAAA,GAG/BuR,GAAyB9I,EAASsH,GAAO,eAAAG,EAAAtP,EAAA,EAG/C,CACLmL,SAAS,EACT9H,MAAO,cAAFoK,OAAgBpC,KACtB,QAAAiE,EAAAlQ,EAAA,wBAAAkQ,EAAA3Q,EAAA,GAAA0Q,EAAAC,EAAAvP,EAAAuP,EAAAtP,EAAA,EAGE,CACLmL,SAAS,EACT9H,MAAO,eAAFoK,OAAiB4B,EAAM/L,SAAW+L,EAAMtE,cAC9C,eAAAuE,EAAAtP,EAAA,KAAAkP,EAAA,mBAEJvN,MAAA,KAAAD,UAAA,UAGc6N,EAAYqB,EAAAC,GAAA,OAAAC,EAAAnP,MAAC,KAADD,UAAA,CAmB3B,SAAAoP,IAFC,OAEDA,EAAArP,EAAAX,IAAAhE,EAnBA,SAAAiU,EAA4BlJ,EAASsH,GAAM,IAAArH,EAAAM,EAAA4I,EAAA,OAAAlQ,IAAAC,EAAA,SAAAkQ,GAAA,cAAAA,EAAA7R,GAAA,OAKnB,OAJhB0I,EAAYD,EAAQgB,SAASC,WAAWC,sBACxCX,EAAQ+G,EAAO/G,MAAQN,EAAUoJ,SAAS/B,EAAO/G,OAASP,EAAQgB,SAASsI,oBAG3ElI,KAAK,WAAWgI,EAAA7R,EAAA,EAChByI,EAAQqB,OAAM,OAIN,OAFR8H,EAAe5I,EAAMmB,QAE3BnB,EAAMgJ,QAAQH,EAAA7R,EAAA,EACRyI,EAAQqB,OAAM,cAAA+H,EAAAjR,EAAA,EAEb,CACLmL,SAAS,EACT7H,QAAS,GAAFmK,OAAKuD,EAAY,mBACzB,EAAAD,EAAA,KACFpP,MAAA,KAAAD,UAAA,UAGc8N,EAAU6B,EAAAC,GAAA,OAAAC,EAAA5P,MAAC,KAADD,UAAA,CA2YzB,SAAA6P,IAFC,OAEDA,EAAA9P,EAAAX,IAAAhE,EA3YA,SAAA0U,EAA0B3J,EAASsH,GAAM,IAAArH,EAAAO,EAAAoJ,EAAAC,EAAAC,EAAApT,EAAAqT,EAAAC,EAAAC,EAAAC,EAAAC,EAAApI,EAAAgB,EAAAqH,EAAAzH,EAAA0H,EAAAC,EAAA1I,EAAAuH,EAAAoB,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAjH,EAAAkH,EAAA1K,EAAAE,EAAAyK,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAArJ,EAAAW,EAAA2I,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GAAAlJ,GAAAmJ,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAA,OAAAvT,IAAAC,EAAA,SAAAuT,GAAA,cAAAA,EAAA3V,EAAA2V,EAAAlV,GAAA,OAGvC,GAFM0I,EAAYD,EAAQgB,SAASC,WAAWC,qBAGvB,QAAnBoG,EAAO5D,UAAqB4D,EAAO1F,IAAG,CAAA6K,EAAAlV,EAAA,SAGE,GAApCiJ,EAAYP,EAAUoC,eACZ,CAAFoK,EAAAlV,EAAA,eAAAkV,EAAAtU,EAAA,EACL,CACLmL,SAAS,EACT9H,MAAO,mBACR,OAG6B,OAAhCgF,EAAUY,KAAK,CAAC,gBAAgBqL,EAAAlV,EAAA,EAC1ByI,EAAQqB,OAAM,OAUM,OAPpBuI,EAAW3J,EAAUyM,kBACzBpF,EAAO1F,IAAM,EACb,EACA,EACApB,EAAU2B,cAGHf,KAAK,CAAC,WAAWqL,EAAAlV,EAAA,EACpByI,EAAQqB,OAAM,OAGdwI,EAAYD,EAAS/G,OAAO,GAC9BiH,GAAkB,EAEbpT,EAAImT,EAAUpT,OAAS,EAAC,YAAEC,GAAK,GAAC,CAAA+V,EAAAlV,EAAA,WAClB,OAAjBsS,EAAUnT,IAAgC,KAAjBmT,EAAUnT,SAA8B7B,IAAjBgV,EAAUnT,GAAgB,CAAA+V,EAAAlV,EAAA,QACzD,OAAnBuS,EAAiBpT,EAAE+V,EAAAtU,EAAA,YAFoBzB,IAAG+V,EAAAlV,EAAA,mBAOtB,IAApBuS,EAAqB,CAAA2C,EAAAlV,EAAA,eAAAkV,EAAAtU,EAAA,EAChB,CACLmL,SAAS,EACT9H,MAAO,GAAFoK,OAAK0B,EAAO1F,IAAG,mBACrB,OAYkC,OAR/BmI,EAAeD,EAAiB,EAChCE,EAAa/J,EAAU0M,QAAQrF,EAAO1F,IAAM,EAAGmI,GAI/CE,EAASjH,EAAgB8G,GACzBe,EAAa,QAAHjF,OAFC,KAEkBA,OAAG0B,EAAO1F,IAAG,KAAAgE,OAAIqE,GAAMrE,OAAG0B,EAAO1F,IAAG,KAEvEoI,EAAW4C,SAAW,CAAC,CAAC/B,IAAa4B,EAAAlV,EAAA,EAC/ByI,EAAQqB,OAAM,OAEmB,OAAvC2I,EAAW5I,KAAK,CAAC,SAAU,YAAYqL,EAAAlV,EAAA,EACjCyI,EAAQqB,OAAM,cAAAoL,EAAAtU,EAAA,EAEb,CACLmL,SAAS,EACT7H,QAAS,GAAFmK,OAAK0B,EAAO1F,IAAG,WAAAgE,OAAUoE,EAAWtI,QAAO,cAAAkE,OAAaiH,EAAa7C,EAAWnH,OAAO,GAAG,KACjGpK,MAAOuR,EAAWnH,OAAO,GAAG,KAC7B,YAICyE,EAAOlD,YAAiC,WAAnBkD,EAAO5D,QAAoB,CAAA+I,EAAAlV,EAAA,SAII,OADhDiJ,EAAYP,EAAUoC,gBAClBjB,KAAK,CAAC,SAAU,WAAY,gBAAgBqL,EAAAlV,EAAA,GAChDyI,EAAQqB,OAAM,WAEfb,GAAoC,IAAvBA,EAAUyB,SAAc,CAAAwK,EAAAlV,EAAA,gBAAAkV,EAAAtU,EAAA,EACjC,CACLmL,SAAS,EACT9H,MAAO,mBACR,QAMH,GAHIuG,GAAe,EACfgB,EAAe,IAGfuE,EAAOlD,aAAckD,EAAOlD,WAAW0I,MAAM,YAAW,CAAAL,EAAAlV,EAAA,SAK1D,IAHAwL,EAAeuE,EAAOlD,WAEtBrC,EAAc,EACLrL,EAAI,EAAGA,EAAIqM,EAAatM,OAAQC,IACvCqL,EAA4B,GAAdA,GAAoBgB,EAAagK,WAAWrW,GAAK,IAEjEqL,IAAe0K,EAAAlV,EAAA,iBAGToL,EAAUnC,EAAUqC,OAAO,GAExBnM,EAAI,EAAC,aAAEA,EAAIiM,EAAQlM,QAAM,CAAAgW,EAAAlV,EAAA,aAC5BoL,EAAQjM,IAAMiM,EAAQjM,GAAGwM,WAAW8J,iBAAmB1F,EAAOlD,YAAc,IAAI4I,cAAa,CAAAP,EAAAlV,EAAA,SAE7D,OADlCwK,EAAcrL,EACdqM,EAAeC,EAAgBtM,GAAG+V,EAAAtU,EAAA,cAHFzB,IAAG+V,EAAAlV,EAAA,qBASpB,IAAjBwK,EAAkB,CAAA0K,EAAAlV,EAAA,gBAAAkV,EAAAtU,EAAA,EACb,CACLmL,SAAS,EACT9H,MAAO,IAAFoK,OAAM0B,EAAOlD,WAAU,qBAC7B,QAKH,IADIkG,EAAc,EACT1I,EAAM,EAAGA,EAAMpB,EAAUyB,SAAUL,IACC,OAAvCpB,EAAUqC,OAAOjB,GAAKG,SACiBlN,IAAvC2L,EAAUqC,OAAOjB,GAAKG,IACiB,KAAvCvB,EAAUqC,OAAOjB,GAAKG,KACxBuI,EAAc1I,EAAM,GAKlBuH,EAAe,GAAHvD,OAAM7C,EAAY,MAAA6C,OAAK7C,GAAY6C,OAAG0E,GAGpDC,EAAYD,EACZE,GAAa,EAGR9T,EAAI,EAAC,aAAEA,EAAI,IAAE,CAAA+V,EAAAlV,EAAA,SAEK,OADnBmT,EAAYzK,EAAU0M,QAAQrC,EAAc5T,EAAGqL,IAC3CX,KAAK,UAAUqL,EAAAlV,EAAA,GACnByI,EAAQqB,OAAM,QAEoB,GACpCsJ,OADEA,EAAYD,EAAU7H,OAAO,GAAG,KAC6B,KAAd8H,EAAgB,CAAA8B,EAAAlV,EAAA,SAEjD,OADlBgT,EAAYD,EAAc5T,EAC1B8T,GAAa,EAAKiC,EAAAtU,EAAA,cAREzB,IAAG+V,EAAAlV,EAAA,iBAqBoB,OAP1CiT,IACHD,EAAYD,IAGRM,EAAU3K,EAAU0M,QAAQpC,EAAWxI,IAGrC6K,SAAW,CAAC,CAAC,QAADhH,OAASuD,EAAY,OAAMsD,EAAAlV,EAAA,GACzCyI,EAAQqB,OAAM,QAEgB,OAApCuJ,EAAQxJ,KAAK,CAAC,SAAU,YAAYqL,EAAAlV,EAAA,GAC9ByI,EAAQqB,OAAM,eAAAoL,EAAAtU,EAAA,EAEb,CACLmL,SAAS,EACT7H,QAAS,GAAFmK,OAAK0B,EAAOlD,WAAU,YAAAwB,OAAWgF,EAAQlJ,QAAO,cAAAkE,OAAaiH,EAAajC,EAAQ/H,OAAO,GAAG,KACnGpK,MAAOmS,EAAQ/H,OAAO,GAAG,KAC1B,YAOCyE,EAAO3D,YAAa,CAAF8I,EAAAlV,EAAA,SAEiD,OADrEoM,EAAc1D,EAAUoJ,SAAS/B,EAAO3D,cAC5BvC,KAAK,CAAC,cAAe,WAAY,WAAY,YAAYqL,EAAAlV,EAAA,GAC/DyI,EAAQqB,OAAM,QACpBwJ,EAAa,QAAHjF,OAAWjC,EAAYjC,QAAO,KAAI+K,EAAAlV,EAAA,iBAKE,OALFkV,EAAA3V,EAAA,IAIpCqJ,EAAiBH,EAAQgB,SAASG,qBACzBC,KAAK,CAAC,QAAS,cAAcqL,EAAAlV,EAAA,GACtCyI,EAAQqB,OAAM,aAEhBlB,EAAemB,UAAY,GAAC,CAAAmL,EAAAlV,EAAA,SAI9B,IAFM8I,EAAiB,GAEd3J,EAAI,EAAGA,EAAIyJ,EAAeoB,MAAMC,MAAM/K,OAAQC,IACxCyJ,EAAeoB,MAAMC,MAAM9K,GACnC0K,KAAK,WACX,OAAAqL,EAAAlV,EAAA,GACKyI,EAAQqB,OAAM,QAEpB,IAAS3K,EAAI,EAAGA,EAAIyJ,EAAeoB,MAAMC,MAAM/K,OAAQC,IACrD2J,EAAeoB,KAAKtB,EAAeoB,MAAMC,MAAM9K,GAAGgL,SAKM,OAF1DmJ,EAAa,QAAHjF,OAAWvF,EAAesB,KAAK,KAAI,MAC7CgC,EAAcxD,EAAeoB,MAAMC,MAAM,IAC7BJ,KAAK,CAAC,cAAe,WAAY,aAAaqL,EAAAlV,EAAA,GACpDyI,EAAQqB,OAAM,QAAAoL,EAAAlV,EAAA,iBAIiD,OADrEoM,EAAc3D,EAAQgB,SAASsI,oBACnBlI,KAAK,CAAC,cAAe,WAAY,WAAY,YAAYqL,EAAAlV,EAAA,GAC/DyI,EAAQqB,OAAM,QACpBwJ,EAAa,QAAHjF,OAAWjC,EAAYjC,QAAO,KAAI,QAAA+K,EAAAlV,EAAA,iBAOA,OAPAkV,EAAA3V,EAAA,GAAA2V,EAAAvU,EAAAuU,EAAA3V,EAAA,IAMtCqJ,EAAiBH,EAAQgB,SAASG,qBACzBC,KAAK,CAAC,QAAS,cAAcqL,EAAAlV,EAAA,GACtCyI,EAAQqB,OAAM,aAEhBlB,EAAeoB,MAAMC,MAAM/K,OAAS,GAAC,CAAAgW,EAAAlV,EAAA,SAEvC,IADM8I,EAAiB,GACd3J,EAAI,EAAGA,EAAIyJ,EAAeoB,MAAMC,MAAM/K,OAAQC,IACxCyJ,EAAeoB,MAAMC,MAAM9K,GACnC0K,KAAK,WACX,OAAAqL,EAAAlV,EAAA,GACKyI,EAAQqB,OAAM,QAEpB,IAAS3K,EAAI,EAAGA,EAAIyJ,EAAeoB,MAAMC,MAAM/K,OAAQC,IACrD2J,EAAeoB,KAAKtB,EAAeoB,MAAMC,MAAM9K,GAAGgL,SAKM,OAF1DmJ,EAAa,QAAHjF,OAAWvF,EAAesB,KAAK,KAAI,MAC7CgC,EAAcxD,EAAeoB,MAAMC,MAAM,IAC7BJ,KAAK,CAAC,cAAe,WAAY,aAAaqL,EAAAlV,EAAA,GACpDyI,EAAQqB,OAAM,QAAAoL,EAAAlV,EAAA,uBAEd,IAAIX,MAAM,sBAAqB,QAAA6V,EAAAlV,EAAA,wBAAAkV,EAAA3V,EAAA,GAAA2V,EAAAvU,EAAAuU,EAAAtU,EAAA,EAGhC,CAAEmL,SAAS,EAAO9H,MAAO,wCAAuC,YAKpD,IAArB8L,EAAO1D,UAAkB,CAAA6I,EAAAlV,EAAA,SAE+B,OAA1DoM,EAAYvC,KAAK,CAAC,cAAe,WAAY,aAAaqL,EAAAlV,EAAA,GACpDyI,EAAQqB,OAAM,QAMc,OAJ5BS,EAAS6B,EAAY5B,YACrBU,EAAUkB,EAAY9B,SAAW8B,EAAY1B,UAC7CmJ,EAAUnL,EAAU0M,QAAQlK,EAASX,IAEnC8K,SAAW,CAAC,CAAC/B,IAAa4B,EAAAlV,EAAA,GAC5ByI,EAAQqB,OAAM,QAEgB,OAApC+J,EAAQhK,KAAK,CAAC,SAAU,YAAYqL,EAAAlV,EAAA,GAC9ByI,EAAQqB,OAAM,eAAAoL,EAAAtU,EAAA,EAEb,CACLmL,SAAS,EACT7H,QAAS,GAAFmK,OAAKwF,EAAQ1J,QAAO,kBAAAkE,OAAiBiH,EAAazB,EAAQvI,OAAO,GAAG,KAC3EpK,MAAO2S,EAAQvI,OAAO,GAAG,KAC1B,YACQyE,EAAO+D,WAAY,CAAFoB,EAAAlV,EAAA,SAGW,OAD/B8T,EAAapL,EAAUoJ,SAAS/B,EAAO+D,aAClCuB,SAAW,CAAC,CAAC/B,IAAa4B,EAAAlV,EAAA,GAC/ByI,EAAQqB,OAAM,QAEmB,OAAvCgK,EAAWjK,KAAK,CAAC,SAAU,YAAYqL,EAAAlV,EAAA,GACjCyI,EAAQqB,OAAM,eAAAoL,EAAAtU,EAAA,EAEb,CACLmL,SAAS,EACT7H,QAAS,GAAFmK,OAAKyF,EAAW3J,QAAO,kBAAAkE,OAAiBiH,EAAaxB,EAAWxI,OAAO,GAAG,KACjFpK,MAAO4S,EAAWxI,OAAO,GAAG,KAC7B,QAK2C,OADtCrC,EAAYP,EAAUoC,gBAClBjB,KAAK,CAAC,WAAY,gBAAgBqL,EAAAlV,EAAA,GACtCyI,EAAQqB,OAAM,YAKhBwJ,EAAW1P,SAAS,KAAM,CAAFsR,EAAAlV,EAAA,SAEpBiU,EAAchL,EAAYA,EAAUyB,SAAW,EAC/CwJ,EAAcjL,EAAYA,EAAU2B,YAAc,EAGpDqI,GAAa,EACRmB,EAAMF,EAAW,aAAEE,EAAMF,EAAc,GAAC,CAAAgB,EAAAlV,EAAA,SAEtB,OADnBmT,EAAYzK,EAAU0M,QAAQhJ,EAAY9B,SAAU8J,IAChDvK,KAAK,UAAUqL,EAAAlV,EAAA,GACnByI,EAAQqB,OAAM,WAEfqJ,EAAU7H,OAAO,GAAG,GAAI,CAAF4J,EAAAlV,EAAA,SAEP,OADlB8T,EAAaX,EACbF,GAAa,EAAKiC,EAAAtU,EAAA,cAP6BwT,IAAKc,EAAAlV,EAAA,oBAanDiT,EAAY,CAAFiC,EAAAlV,EAAA,SACJqK,EAAM4J,EAAW,aAAE5J,EAAM4J,EAAc,GAAC,CAAAiB,EAAAlV,EAAA,SAEtB,OADnBmT,EAAYzK,EAAU0M,QAAQ/K,EAAK,IAC/BR,KAAK,UAAUqL,EAAAlV,EAAA,GACnByI,EAAQqB,OAAM,WAEfqJ,EAAU7H,OAAO,GAAG,GAAI,CAAF4J,EAAAlV,EAAA,SAEP,OADlB8T,EAAaX,EACbF,GAAa,EAAKiC,EAAAtU,EAAA,cAP6ByJ,IAAK6K,EAAAlV,EAAA,iBAcrDiT,IACHa,EAAapL,EAAU0M,QAAQnB,EAAc,EAAG,IACjDiB,EAAAlV,EAAA,iBAGmE,OAApEoM,EAAYvC,KAAK,CAAC,cAAe,WAAY,WAAY,WAAWqL,EAAAlV,EAAA,GAC9DyI,EAAQqB,OAAM,QAEdS,GAAS6B,EAAY5B,YAGrBc,GAASc,EAAYd,OACvByH,GAAc3G,EAAY9B,SAGrBnL,GAAImM,GAAOpM,OAAS,EAAC,aAAEC,IAAK,GAAC,CAAA+V,EAAAlV,EAAA,YACf,OAAjBsL,GAAOnM,IAAG,SAAgC7B,IAAjBgO,GAAOnM,IAAG,IAAqC,KAAjBmM,GAAOnM,IAAG,GAAS,CAAA+V,EAAAlV,EAAA,SACrC,OAAvC+S,GAAc3G,EAAY9B,SAAWnL,GAAE+V,EAAAtU,EAAA,cAFHzB,KAAG+V,EAAAlV,EAAA,iBAcb,OAL1BgT,GADE2B,GAAW5B,GAAc,EAE3BE,IAAa,GAGX6B,GAAiBpM,EAAU0M,QAAQT,GAAUpK,KACpCV,KAAK,UAAUqL,EAAAlV,EAAA,GACxByI,EAAQqB,OAAM,WAEgB,OAAhCgL,GAAexJ,OAAO,GAAG,SAA+ChO,IAAhCwX,GAAexJ,OAAO,GAAG,IAAoD,KAAhCwJ,GAAexJ,OAAO,GAAG,GAAS,CAAA4J,EAAAlV,EAAA,SACzHgT,GAAY2B,GACZ1B,IAAa,EAAKiC,EAAAlV,EAAA,iBAGTb,GAAI,EAAC,aAAEA,GAAI,IAAE,CAAA+V,EAAAlV,EAAA,SAEK,OADnBmT,GAAYzK,EAAU0M,QAAQT,GAAWxV,GAAGoL,KACxCV,KAAK,UAAUqL,EAAAlV,EAAA,GACnByI,EAAQqB,OAAM,QAEoB,GACpCsJ,OADEA,GAAYD,GAAU7H,OAAO,GAAG,KAC6B,KAAd8H,GAAgB,CAAA8B,EAAAlV,EAAA,SAEjD,OADlBgT,GAAY2B,GAAWxV,GACvB8T,IAAa,EAAKiC,EAAAtU,EAAA,cAREzB,KAAG+V,EAAAlV,EAAA,iBAexBiT,KACHD,GAAY2B,GAAW,IAGzBb,EAAapL,EAAU0M,QAAQpC,GAAWzI,IAAQ,QAGf,OAArCuJ,EAAWuB,SAAW,CAAC,CAAC/B,IAAa4B,EAAAlV,EAAA,GAC/ByI,EAAQqB,OAAM,QAEmB,OAAvCgK,EAAWjK,KAAK,CAAC,SAAU,YAAYqL,EAAAlV,EAAA,GACjCyI,EAAQqB,OAAM,eAAAoL,EAAAtU,EAAA,EAEb,CACLmL,SAAS,EACT7H,QAAS,GAAFmK,OAAKyF,EAAW3J,QAAO,kBAAAkE,OAAiBiH,EAAaxB,EAAWxI,OAAO,GAAG,KACjFpK,MAAO4S,EAAWxI,OAAO,GAAG,KAC7B,eAAA4J,EAAAtU,EAAA,KAAAwR,EAAA,4BAEJ7P,MAAA,KAAAD,UAAA,UAGcoT,EAAUC,GAAA,OAAAC,EAAArT,MAAC,KAADD,UAAA,CA2BzB,SAAAsT,IAFC,OAEDA,EAAAvT,EAAAX,IAAAhE,EA3BA,SAAAmY,EAA0BpN,GAAO,IAAAC,EAAAO,EAAAmC,EAAAjC,EAAAhK,EAAA,OAAAuC,IAAAC,EAAA,SAAAmU,GAAA,cAAAA,EAAA9V,GAAA,OAEW,GADpC0I,EAAYD,EAAQgB,SAASC,WAAWC,qBACxCV,EAAYP,EAAUoC,eAEZ,CAAFgL,EAAA9V,EAAA,eAAA8V,EAAAlV,EAAA,EACL,IAAE,OAG+B,OAA1CqI,EAAUY,KAAK,CAAC,SAAU,gBAAgBiM,EAAA9V,EAAA,EACpCyI,EAAQqB,OAAM,OAKpB,GAHMsB,EAAU,GACVjC,EAAYF,EAAUqC,OAAO,GAGjC,IAASnM,EAAI,EAAGA,EAAIgK,EAAUjK,OAAQC,IACpCiM,EAAQlB,KAAK,CACXK,OAAQpL,EAAI,EACZqM,aAAcC,EAAgBtM,GAC9BuM,MAAOvC,EAAUhK,GAAKgK,EAAUhK,GAAGwM,WAAa,KAGrD,OAAAmK,EAAAlV,EAAA,EAEMwK,GAAO,EAAAyK,EAAA,KACftT,MAAA,KAAAD,UAAA,UAGc+N,EAAc0F,EAAAC,GAAA,OAAAC,EAAA1T,MAAC,KAADD,UAAA,CAmS7B,SAAA2T,IAFC,OAEDA,EAAA5T,EAAAX,IAAAhE,EAnSA,SAAAwY,EAA8BzN,EAASsH,GAAM,IAAArH,EAAA0D,EAAA+J,EAAAC,EAAAnN,EAAAuB,EAAAgB,EAAA6K,EAAAlX,EAAAmX,EAAAlL,EAAAmL,EAAAC,EAAAC,EAAAnM,EAAA1B,EAAAE,EAAA4N,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAjD,EAAA3I,EAAAZ,EAAAe,EAAAyH,EAAAiE,EAAArC,EAAA3B,EAAAC,EAAA6B,EAAAmC,EAAA9D,EAAAC,EAAA8D,EAAA,OAAAxV,IAAAC,EAAA,SAAAwV,GAAA,cAAAA,EAAA5X,EAAA4X,EAAAnX,GAAA,OAIpB,GAHjB0I,EAAYD,EAAQgB,SAASC,WAAWC,qBAE1CwM,EAAmB,GACnBC,EAAiB,GAAEe,EAAA5X,EAAA,EAIM,WAAvBwQ,EAAOxD,YAAwB,CAAA4K,EAAAnX,EAAA,aAC7B+P,EAAOxF,OAAQ,CAAF4M,EAAAnX,EAAA,QAE2B,GAApCiJ,EAAYP,EAAUoC,eACZ,CAAFqM,EAAAnX,EAAA,eAAAmX,EAAAvW,EAAA,EACL,CAAEmL,SAAS,EAAO9H,MAAO,eAAc,OAGJ,OAA5CgF,EAAUY,KAAK,CAAC,WAAY,gBAAgBsN,EAAAnX,EAAA,EACtCyI,EAAQqB,OAAM,OAEgC,MAA9CU,EAAcuF,EAAOxF,OAAOiL,WAAW,GAAK,IAChC,GAAKhL,GAAevB,EAAU2B,aAAW,CAAAuM,EAAAnX,EAAA,eAAAmX,EAAAvW,EAAA,EAClD,CAAEmL,SAAS,EAAO9H,MAAO,kBAAiB,YAI/CgF,EAAUyB,SAAW,GAAC,CAAAyM,EAAAnX,EAAA,QACxBoM,EAAc1D,EAAUyM,kBAAkB,EAAG3K,EAAavB,EAAUyB,SAAW,EAAG,GAClFyL,EAAmB,GAAH9H,OAAM0B,EAAOxF,OAAM,KAAI4M,EAAAnX,EAAA,sBAAAmX,EAAAvW,EAAA,EAEhC,CAAEmL,SAAS,EAAO9H,MAAO,uBAAsB,OAG1B,OAA9BmI,EAAYvC,KAAK,CAAC,YAAYsN,EAAAnX,EAAA,EACxByI,EAAQqB,OAAM,OACpBsM,EAAiB,YAAH/H,OAAejC,EAAYjC,QAAO,KAAIgN,EAAAnX,EAAA,oBAE3C+P,EAAOlD,WAAY,CAAFsK,EAAAnX,EAAA,aAEtB+P,EAAOlD,WAAW0I,MAAM,YAAa,CAAF4B,EAAAnX,EAAA,SAKrC,IAHMwL,EAAeuE,EAAOlD,WAExBrC,EAAc,EACTrL,EAAI,EAAGA,EAAIqM,EAAatM,OAAQC,IACvCqL,EAA4B,GAAdA,GAAoBgB,EAAagK,WAAWrW,GAAK,IAIvB,GAF1CqL,IAEMvB,EAAYP,EAAUoC,eACZ,CAAFqM,EAAAnX,EAAA,eAAAmX,EAAAvW,EAAA,EACL,CAAEmL,SAAS,EAAO9H,MAAO,eAAc,OAGJ,OAA5CgF,EAAUY,KAAK,CAAC,WAAY,gBAAgBsN,EAAAnX,EAAA,GACtCyI,EAAQqB,OAAM,aAEhBU,EAAc,GAAKA,GAAevB,EAAU2B,aAAW,CAAAuM,EAAAnX,EAAA,gBAAAmX,EAAAvW,EAAA,EAClD,CAAEmL,SAAS,EAAO9H,MAAO,kBAAiB,aAI/CgF,EAAUyB,SAAW,GAAC,CAAAyM,EAAAnX,EAAA,SACxBoM,EAAc1D,EAAUyM,kBAAkB,EAAG3K,EAAavB,EAAUyB,SAAW,EAAG,GAClFyL,EAAmB,GAAH9H,OAAM0B,EAAOlD,WAAU,KAAIsK,EAAAnX,EAAA,wBAAAmX,EAAAvW,EAAA,EAEpC,CAAEmL,SAAS,EAAO9H,MAAO,uBAAsB,QAG1B,OAA9BmI,EAAYvC,KAAK,CAAC,YAAYsN,EAAAnX,EAAA,GACxByI,EAAQqB,OAAM,QACpBsM,EAAiB,YAAH/H,OAAejC,EAAYjC,QAAO,KAAIgN,EAAAnX,EAAA,wBAAAmX,EAAAnX,EAAA,GAG9B0V,EAAWjN,GAAQ,QAC0B,GAD7D2C,EAAO+L,EAAAxW,EACP4V,EAAanL,EAAQgM,KAAK,SAAAC,GAAC,OAAIA,EAAE3L,QAAUqE,EAAOlD,UAAU,GAEjD,CAAFsK,EAAAnX,EAAA,gBAAAmX,EAAAvW,EAAA,EACN,CAAEmL,SAAS,EAAO9H,MAAO,IAAFoK,OAAM0B,EAAOlD,WAAU,qBAAmB,QAI7C,OADvB5D,EAAYP,EAAUoC,gBAClBjB,KAAK,CAAC,aAAasN,EAAAnX,EAAA,GACvByI,EAAQqB,OAAM,aAEhBb,EAAUyB,SAAW,GAAC,CAAAyM,EAAAnX,EAAA,SACxBoM,EAAc1D,EAAUyM,kBAAkB,EAAGoB,EAAWhM,OAAS,EAAGtB,EAAUyB,SAAW,EAAG,GAC5FyL,EAAmB,IAAH9H,OAAO0B,EAAOlD,WAAU,OAAMsK,EAAAnX,EAAA,wBAAAmX,EAAAvW,EAAA,EAEvC,CAAEmL,SAAS,EAAO9H,MAAO,uBAAsB,QAG1B,OAA9BmI,EAAYvC,KAAK,CAAC,YAAYsN,EAAAnX,EAAA,GACxByI,EAAQqB,OAAM,QACpBsM,EAAiB,YAAH/H,OAAejC,EAAYjC,QAAO,KAAI,QAAAgN,EAAAnX,EAAA,oBAGxB,QAAvB+P,EAAOxD,YAAqB,CAAA4K,EAAAnX,EAAA,SAEK,GAApCiJ,EAAYP,EAAUoC,eACZ,CAAFqM,EAAAnX,EAAA,gBAAAmX,EAAAvW,EAAA,EACL,CAAEmL,SAAS,EAAO9H,MAAO,eAAc,QAGJ,OAA5CgF,EAAUY,KAAK,CAAC,WAAY,gBAAgBsN,EAAAnX,EAAA,GACtCyI,EAAQqB,OAAM,QAEa,MAA3BQ,EAAWyF,EAAO1F,IAAM,GACf,GAAKC,GAAYrB,EAAUyB,UAAQ,CAAAyM,EAAAnX,EAAA,gBAAAmX,EAAAvW,EAAA,EACzC,CAAEmL,SAAS,EAAO9H,MAAO,kBAAiB,QAOqB,OAHxEmI,EAAc1D,EAAUyM,kBAAkB7K,EAAU,EAAG,EAAGrB,EAAU2B,aACpEuL,EAAmB,GAAH9H,OAAM0B,EAAO1F,IAAG,KAEhC+B,EAAYvC,KAAK,CAAC,UAAW,WAAY,cAAe,gBAAgBsN,EAAAnX,EAAA,GAClEyI,EAAQqB,OAAM,QACpBsM,EAAiB,YAAH/H,OAAejC,EAAYjC,QAAO,KAAIgN,EAAAnX,EAAA,qBAE3C+P,EAAO3D,YAAa,CAAF+K,EAAAnX,EAAA,SAKG,OAH9BoM,EAAc1D,EAAUoJ,SAAS/B,EAAO3D,aACxC+J,EAAmBpG,EAAO3D,YAE1BA,EAAYvC,KAAK,CAAC,YAAYsN,EAAAnX,EAAA,GACxByI,EAAQqB,OAAM,QACpBsM,EAAiB,YAAH/H,OAAejC,EAAYjC,QAAO,KAAIgN,EAAAnX,EAAA,iBAON,OAPMmX,EAAA5X,EAAA,IAM5CqJ,EAAiBH,EAAQgB,SAASG,qBACzBC,KAAK,CAAC,QAAS,cAAcsN,EAAAnX,EAAA,GACtCyI,EAAQqB,OAAM,aAEhBlB,EAAemB,UAAY,GAAC,CAAAoN,EAAAnX,EAAA,SAI9B,IAFM8I,EAAiB,GAEd3J,EAAI,EAAGA,EAAIyJ,EAAeoB,MAAMC,MAAM/K,OAAQC,IACxCyJ,EAAeoB,MAAMC,MAAM9K,GACnC0K,KAAK,WACX,OAAAsN,EAAAnX,EAAA,GACKyI,EAAQqB,OAAM,QAEpB,IAAS3K,EAAI,EAAGA,EAAIyJ,EAAeoB,MAAMC,MAAM/K,OAAQC,IACrD2J,EAAeoB,KAAKtB,EAAeoB,MAAMC,MAAM9K,GAAGgL,SAQqB,OALzEiM,EAAiB,YAAH/H,OAAevF,EAAesB,KAAK,KAAI,KACrD+L,EAAmB,SAGnB/J,EAAcxD,EAAeoB,MAAMC,MAAM,IAC7BJ,KAAK,CAAC,cAAe,WAAY,WAAY,gBAAgBsN,EAAAnX,EAAA,GACnEyI,EAAQqB,OAAM,QAAAqN,EAAAnX,EAAA,iBAOgE,OAHpFoM,EAAc3D,EAAQgB,SAASsI,mBAC/BoE,EAAmB,SAEnB/J,EAAYvC,KAAK,CAAC,cAAe,WAAY,WAAY,cAAe,YAAYsN,EAAAnX,EAAA,GAC9EyI,EAAQqB,OAAM,QACpBsM,EAAiB,YAAH/H,OAAejC,EAAYjC,QAAO,KAAI,QAAAgN,EAAAnX,EAAA,iBAOR,OAPQmX,EAAA5X,EAAA,GAAA4X,EAAAxW,EAAAwW,EAAA5X,EAAA,IAM9CqJ,EAAiBH,EAAQgB,SAASG,qBACzBC,KAAK,CAAC,QAAS,cAAcsN,EAAAnX,EAAA,GACtCyI,EAAQqB,OAAM,aAEhBlB,EAAeoB,MAAMC,MAAM/K,OAAS,GAAC,CAAAiY,EAAAnX,EAAA,SAEvC,IADM8I,EAAiB,GACd3J,EAAI,EAAGA,EAAIyJ,EAAeoB,MAAMC,MAAM/K,OAAQC,IACxCyJ,EAAeoB,MAAMC,MAAM9K,GACnC0K,KAAK,WACX,OAAAsN,EAAAnX,EAAA,GACKyI,EAAQqB,OAAM,QAEpB,IAAS3K,EAAI,EAAGA,EAAIyJ,EAAeoB,MAAMC,MAAM/K,OAAQC,IACrD2J,EAAeoB,KAAKtB,EAAeoB,MAAMC,MAAM9K,GAAGgL,SAMqB,OAHzEiM,EAAiB,YAAH/H,OAAevF,EAAesB,KAAK,KAAI,KACrD+L,EAAmB,SACnB/J,EAAcxD,EAAeoB,MAAMC,MAAM,IAC7BJ,KAAK,CAAC,cAAe,WAAY,WAAY,gBAAgBsN,EAAAnX,EAAA,GACnEyI,EAAQqB,OAAM,QAAAqN,EAAAnX,EAAA,uBAEd,IAAIX,MAAM,sBAAqB,QAAA8X,EAAAnX,EAAA,wBAAAmX,EAAA5X,EAAA,GAAA4X,EAAAxW,EAAAwW,EAAAvW,EAAA,EAGhC,CAAEmL,SAAS,EAAO9H,MAAO,wCAAuC,QAMJ,OAAzEmI,EAAYvC,KAAK,CAAC,cAAe,WAAY,WAAY,gBAAgBsN,EAAAnX,EAAA,GACnEyI,EAAQqB,OAAM,YAIhBiG,EAAO+D,WAAY,CAAFqD,EAAAnX,EAAA,SACnB8T,EAAapL,EAAUoJ,SAAS/B,EAAO+D,YAAYqD,EAAAnX,EAAA,oBACnB,QAAvB+P,EAAOxD,YAAqB,CAAA4K,EAAAnX,EAAA,SAE/BmL,EAAaiB,EAAY5B,YAAc4B,EAAYxB,YACzDkJ,EAAapL,EAAU0M,QAAQhJ,EAAY9B,SAAUa,GAAYgM,EAAAnX,EAAA,iBAGpC,OAA7BoM,EAAYvC,KAAK,CAAC,WAAWsN,EAAAnX,EAAA,GACvByI,EAAQqB,OAAM,QAEdS,EAAS6B,EAAY5B,YAGrBc,EAASc,EAAYd,OACvByH,EAAc3G,EAAY9B,SAGrBnL,EAAImM,EAAOpM,OAAS,EAAC,aAAEC,GAAK,GAAC,CAAAgY,EAAAnX,EAAA,YACf,OAAjBsL,EAAOnM,GAAG,SAAgC7B,IAAjBgO,EAAOnM,GAAG,IAAqC,KAAjBmM,EAAOnM,GAAG,GAAS,CAAAgY,EAAAnX,EAAA,SACrC,OAAvC+S,EAAc3G,EAAY9B,SAAWnL,EAAEgY,EAAAvW,EAAA,cAFHzB,IAAGgY,EAAAnX,EAAA,iBAcb,OAL1BgT,EADE2B,EAAW5B,EAAc,EAE3BE,GAAa,GAGX6B,EAAiBpM,EAAU0M,QAAQT,EAAUpK,IACpCV,KAAK,UAAUsN,EAAAnX,EAAA,GACxByI,EAAQqB,OAAM,WAEgB,OAAhCgL,EAAexJ,OAAO,GAAG,SAA+ChO,IAAhCwX,EAAexJ,OAAO,GAAG,IAAoD,KAAhCwJ,EAAexJ,OAAO,GAAG,GAAS,CAAA6L,EAAAnX,EAAA,SACzHgT,EAAY2B,EACZ1B,GAAa,EAAKkE,EAAAnX,EAAA,iBAGTb,EAAI,EAAC,aAAEA,EAAI,IAAE,CAAAgY,EAAAnX,EAAA,SAEK,OADnBmT,EAAYzK,EAAU0M,QAAQT,EAAWxV,EAAGoL,IACxCV,KAAK,UAAUsN,EAAAnX,EAAA,GACnByI,EAAQqB,OAAM,QAEoB,GACpCsJ,OADEA,EAAYD,EAAU7H,OAAO,GAAG,KAC6B,KAAd8H,EAAgB,CAAA+D,EAAAnX,EAAA,SAEjD,OADlBgT,EAAY2B,EAAWxV,EACvB8T,GAAa,EAAKkE,EAAAvW,EAAA,cAREzB,IAAGgY,EAAAnX,EAAA,iBAexBiT,IACHD,EAAY2B,EAAW,IAGzBb,EAAapL,EAAU0M,QAAQpC,EAAWzI,GAAQ,QAKV,OAD1CuJ,EAAWuB,SAAW,CAAC,CAACe,IACxBtC,EAAWlH,aAAe,CAAC,CAAC,aAAcuK,EAAAnX,EAAA,GACpCyI,EAAQqB,OAAM,QAEmB,OAAvCgK,EAAWjK,KAAK,CAAC,SAAU,YAAYsN,EAAAnX,EAAA,GACjCyI,EAAQqB,OAAM,eAAAqN,EAAAvW,EAAA,EAEb,CACLmL,SAAS,EACT7H,QAAS,GAAFmK,OAAK8H,EAAgB,UAAA9H,OAASyF,EAAW3J,QAAO,cAAAkE,OAAaiH,EAAaxB,EAAWxI,OAAO,GAAG,KACtGpK,MAAO4S,EAAWxI,OAAO,GAAG,KAC7B,eAAA6L,EAAA5X,EAAA,GAAA2X,EAAAC,EAAAxW,EAAAwW,EAAAvW,EAAA,EAGM,CACLmL,SAAS,EACT9H,MAAO,kBAAFoK,OAAoB6I,EAAMhT,WAChC,EAAAgS,EAAA,mCAEJ3T,MAAA,KAAAD,UAAA,UAGcgO,EAAYgH,EAAAC,GAAA,OAAAC,EAAAjV,MAAC,KAADD,UAAA,CAyD3B,SAAAkV,IAFC,OAEDA,EAAAnV,EAAAX,IAAAhE,EAzDA,SAAA+Z,EAA4BhP,EAASsH,GAAM,IAAArH,EAAA0D,EAAAsL,EAAAC,EAAAlF,EAAAxJ,EAAAiC,EAAA0M,EAAA,OAAAlW,IAAAC,EAAA,SAAAkW,GAAA,cAAAA,EAAA7X,GAAA,OAIX,OAHxB0I,EAAYD,EAAQgB,SAASC,WAAWC,sBACxCyC,EAAc2D,EAAO3D,YAAc1D,EAAUoJ,SAAS/B,EAAO3D,aAAe3D,EAAQgB,SAASsI,oBAEvFlI,KAAK,CAAC,YAAYgO,EAAA7X,EAAA,EACxByI,EAAQqB,OAAM,OAuBnB,GApBwB,YAArBiG,EAAO+H,gBAAgDxa,IAArByS,EAAOgI,WAGzCJ,EADsB,aAApB5H,EAAOiI,SACE,KAAH3J,OAAQ0B,EAAOgI,UAAS,MACH,WAApBhI,EAAOiI,SACuB,iBAArBjI,EAAOgI,UAAyB,IAAH1J,OAAO0B,EAAOgI,UAAS,KAAMhI,EAAOgI,UAC1EhI,EAAOiI,UAAY,CAAC,IAAK,IAAK,KAAM,KAAM,MAAMpU,SAASmM,EAAOiI,UAC9D,IAAH3J,OAAO0B,EAAOiI,UAAQ3J,OAAG0B,EAAOgI,UAAS,KAEjB,iBAArBhI,EAAOgI,UACL,KAAH1J,OAAQ0B,EAAOgI,UAAS,MAErBhI,EAAOgI,UAGtBL,EAAU,YAAHrJ,OAAejC,EAAYjC,QAAO,MAAAkE,OAAKsJ,EAAQ,MAEtDD,EAD8B,WAArB3H,EAAO+H,UACN,WAAHzJ,OAAcjC,EAAYjC,QAAO,KAE9B,UAAHkE,OAAajC,EAAYjC,QAAO,MAIrC4F,EAAO+D,WAAY,CAAF+D,EAAA7X,EAAA,QACnByS,EAAa/J,EAAUoJ,SAAS/B,EAAO+D,YAAY+D,EAAA7X,EAAA,eAET,OAApCiJ,EAAYP,EAAUoC,eAAc+M,EAAA7X,EAAA,EACpCyI,EAAQqB,OAAM,OAEdoB,EAAUjC,EAAYA,EAAUyB,SAAW,EAC3CkN,EAAU3O,EAAYA,EAAU2B,YAAc,EACpD6H,EAAa/J,EAAU0M,QAAQlK,EAAS0M,GAAS,OAGjB,OAAlCnF,EAAW4C,SAAW,CAAC,CAACqC,IAAUG,EAAA7X,EAAA,EAC5ByI,EAAQqB,OAAM,OAEM,OAA1B2I,EAAW5I,KAAK,UAAUgO,EAAA7X,EAAA,EACpByI,EAAQqB,OAAM,cAAA+N,EAAAjX,EAAA,EAEb,CACLmL,SAAS,EACT7H,QAA8B,YAArB6L,EAAO+H,UAA0B,IAAHzJ,OACjC0B,EAAOgI,UAAS,sBAAA1J,OAAqBiH,EAAa7C,EAAWnH,OAAO,GAAG,IAAG,oBAAA+C,OAC/DiH,EAAa7C,EAAWnH,OAAO,GAAG,IAAG,KACtDpK,MAAOuR,EAAWnH,OAAO,GAAG,KAC7B,EAAAmM,EAAA,KACFlV,MAAA,KAAAD,UAAA,UAGciO,EAAa0H,EAAAC,GAAA,OAAAC,EAAA5V,MAAC,KAADD,UAAA,CAkG5B,SAAA6V,IAFC,OAEDA,EAAA9V,EAAAX,IAAAhE,EAlGA,SAAA0a,EAA6B3P,EAASsH,GAAM,IAAArH,EAAA2P,EAAAzP,EAAAzJ,EAAAmZ,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAjX,IAAAC,EAAA,SAAAiX,GAAA,cAAAA,EAAArZ,EAAAqZ,EAAA5Y,GAAA,OAG3B,GADT0I,EAAYD,EAAQgB,SAASC,WAAWC,qBAC1C0O,EAAS,IAETtI,EAAO/G,MAAO,CAAF4P,EAAA5Y,EAAA,QACdqY,EAAOnO,KAAKxB,EAAUoJ,SAAS/B,EAAO/G,QAAQ4P,EAAA5Y,EAAA,eAKA,OALA4Y,EAAArZ,EAAA,GAItCqJ,EAAiBH,EAAQgB,SAASG,qBACzBC,KAAK,CAAC,QAAS,cAAc+O,EAAA5Y,EAAA,EACtCyI,EAAQqB,OAAM,OAEpB,GAAIlB,EAAemB,UAAY,EAE7B,IAAS5K,EAAI,EAAGA,EAAIyJ,EAAeoB,MAAMC,MAAM/K,OAAQC,IACrDkZ,EAAOnO,KAAKtB,EAAeoB,MAAMC,MAAM9K,SAIzCkZ,EAAOnO,KAAKzB,EAAQgB,SAASsI,oBAC9B6G,EAAA5Y,EAAA,sBAAA4Y,EAAArZ,EAAA,EAAAqZ,EAAAjY,EAAAiY,EAAAhY,EAAA,EAEM,CAAEmL,SAAS,EAAO9H,MAAO,wCAAuC,OAK3E,IAAAqU,EAAA,EAAAC,EAAoBF,EAAMC,EAAAC,EAAArZ,OAAAoZ,IAAVC,EAAAD,GACRzO,KAAK,UACZ,OAAA+O,EAAA5Y,EAAA,EACKyI,EAAQqB,OAAM,OAGpB,IAAA0O,EAAA,EAAAC,EAAoBJ,EAAMG,EAAAC,EAAAvZ,OAAAsZ,IAAfxP,EAAKyP,EAAAD,QACMlb,IAAhByS,EAAOtD,OACTzD,EAAM2P,OAAOE,KAAKpM,KAAOsD,EAAOtD,WAGZnP,IAAlByS,EAAO+I,SACT9P,EAAM2P,OAAOE,KAAKC,OAAS/I,EAAO+I,QAGhC/I,EAAOgJ,WACT/P,EAAM2P,OAAOE,KAAKG,KAAOjJ,EAAOgJ,UAG9BhJ,EAAOrD,YACT1D,EAAM2P,OAAOE,KAAKrS,MAAQuJ,EAAOrD,WAG/BqD,EAAOpD,kBACT3D,EAAM2P,OAAOM,KAAKzS,MAAQuJ,EAAOpD,iBAG/BoD,EAAOmJ,sBACTlQ,EAAM2P,OAAOO,oBAAqD,SAA/BnJ,EAAOmJ,oBAAiC,OACX,WAA/BnJ,EAAOmJ,oBAAmC,SACX,UAA/BnJ,EAAOmJ,oBAAkC,QAAU,WAGlFnJ,EAAOnD,eAGM,YADX+L,EAAS5I,EAAOnD,eACkB,OAAX+L,EACzBA,EAAS,QACW,aAAXA,GAAoC,OAAXA,GAA8B,QAAXA,GAA+B,OAAXA,EACzEA,EAAS,SACW,qBAAXA,GAA4C,UAAXA,EAC1CA,EAAS,YACW,eAAXA,GAAsC,QAAXA,GAA+B,QAAXA,EACxDA,EAAS,KACW,uBAAXA,GAA8C,WAAXA,EAC5CA,EAAS,QACW,SAAXA,GAAgC,OAAXA,EAC9BA,EAAS,aACW,SAAXA,GAAgC,OAAXA,EAC9BA,EAAS,WACW,SAAXA,GAAgC,QAAXA,EAC9BA,EAAS,IACW,YAAXA,GAAmC,OAAXA,IACjCA,EAAS,WAIX3P,EAAM4D,aAAe+L,GAExB,OAAAC,EAAA5Y,EAAA,EAEKyI,EAAQqB,OAAM,cAAA8O,EAAAhY,EAAA,EAEb,CACLmL,SAAS,EACT7H,QAAS,iBACV,EAAAkU,EAAA,kBACF7V,MAAA,KAAAD,UAAA,UAGckO,EAAW2I,EAAAC,GAAA,OAAAC,EAAA9W,MAAC,KAADD,UAAA,CAwB1B,SAAA+W,IAFC,OAEDA,EAAAhX,EAAAX,IAAAhE,EAxBA,SAAA4b,EAA2B7Q,EAASsH,GAAM,IAAArH,EAAAM,EAAAuB,EAAAgP,EAAA/N,EAAA,OAAA9J,IAAAC,EAAA,SAAA6X,GAAA,cAAAA,EAAAxZ,GAAA,OAYrC,OAXG0I,EAAYD,EAAQgB,SAASC,WAAWC,qBACxCX,EAAQ+G,EAAO/G,MAAQN,EAAUoJ,SAAS/B,EAAO/G,OAASN,EAAUoC,eAEpEP,EAASwF,EAAOxF,QAAU,EAC1BgP,OAAiCjc,IAArByS,EAAOwJ,WAA0BxJ,EAAOwJ,UAE1DvQ,EAAMyQ,KAAKlX,MAAM,CACf,CACEwD,IAAKwE,EAAS,EACdgP,UAAWA,KAEZC,EAAAxZ,EAAA,EAEGyI,EAAQqB,OAAM,OAE4B,OAA1C0B,EAAeC,EAAgBlB,EAAS,GAAEiP,EAAA5Y,EAAA,EAEzC,CACLmL,SAAS,EACT7H,QAAS,GAAFmK,OAAK7C,EAAY,WAAA6C,OAAUkL,EAAY,OAAS,OAAM,eAC9D,EAAAD,EAAA,KACF/W,MAAA,KAAAD,UAAA,UAGcuO,EAAY6I,EAAAC,GAAA,OAAAC,EAAArX,MAAC,KAADD,UAAA,CAkM3B,SAAAsX,IAFC,OAEDA,EAAAvX,EAAAX,IAAAhE,EAlMA,SAAAmc,EAA4BpR,EAASsH,GAAM,IAAArH,EAAAoR,EAAAC,EAAAnR,EAAAoR,EAAA7a,EAAA8a,EAAAhR,EAAAiR,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAvR,EAAAwR,EAAAC,EAAApQ,EAAAqQ,EAAAC,EAAAzZ,EAAA0Z,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAvZ,IAAAC,EAAA,SAAAuZ,GAAA,cAAAA,EAAA3b,EAAA2b,EAAAlb,GAAA,OAGrB,GAFd0I,EAAYD,EAAQgB,SAASC,WAAWC,qBAE1CoQ,EAAc,IAGdhK,EAAO/G,MAAO,CAAFkS,EAAAlb,EAAA,QAEyB,OADvC8Z,EAAapR,EAAUoJ,SAAS/B,EAAO/G,QAC5Ba,KAAK,CAAC,UAAW,WAAWqR,EAAAlb,EAAA,EACjCyI,EAAQqB,OAAM,OACpBiQ,EAAcD,EAAW3P,QAAQ+Q,EAAAlb,EAAA,gBAKa,OALbkb,EAAA3b,EAAA,GAIzBqJ,EAAiBH,EAAQgB,SAASG,qBACzBC,KAAK,CAAC,QAAS,cAAcqR,EAAAlb,EAAA,EACtCyI,EAAQqB,OAAM,YAEhBlB,EAAemB,UAAY,GAAC,CAAAmR,EAAAlb,EAAA,SAK9B,IADMga,EAAY,GACT7a,EAAI,EAAGA,EAAIyJ,EAAeoB,MAAMC,MAAM/K,OAAQC,KAC/C8a,EAAOrR,EAAeoB,MAAMC,MAAM9K,IACnC0K,KAAK,CAAC,UAAW,SAAU,WAAY,gBAC5CmQ,EAAU9P,KAAK+P,GAChB,OAAAiB,EAAAlb,EAAA,EACKyI,EAAQqB,OAAM,OAIwC,OADtDb,EAAYP,EAAUyS,4BAClBtR,KAAK,CAAC,eAAgB,WAAY,gBAAgBqR,EAAAlb,EAAA,EACtDyI,EAAQqB,OAAM,OASpB,IAPMoQ,EAAgBjR,EAAUmS,aAAwC,EAAzBnS,EAAUyB,SAAW,EAC9DyP,EAAe,EAGfC,EAAmB,GACrBC,EAAa,EAEjBC,EAAA,EAAAC,EAAoBP,EAASM,EAAAC,EAAArb,OAAAob,IAC3B,IADStR,EAAKuR,EAAAD,IACJhP,QAAUtC,EAAMsC,OAAOpM,OAAS,EAAG,CAC3Csb,EAAAjL,EACkBvG,EAAMsC,QAAM,IAA9B,IAAAkP,EAAAhL,MAAAiL,EAAAD,EAAAxa,KAAAiB,MAAWoJ,EAAGoQ,EAAAvZ,MACZkZ,EAAiBlQ,KAAKG,GACtBgQ,EAAagB,KAAKC,IAAIjB,EAAYhQ,EAAInL,OACvC,OAAAqc,GAAAf,EAAAzc,EAAAwd,EAAA,SAAAf,EAAAha,GAAA,CACH,CAGF,KACI4Z,EAAiBlb,OAAS,GAAC,CAAAgc,EAAAlb,EAAA,YAAAkb,EAAA3b,EAAA,GAIvB6a,EAAiBoB,MAAM,SAAAnR,GAAG,OAAmB,IAAfA,EAAInL,MAAY,GAAG,CAAFgc,EAAAlb,EAAA,QAGjD,IADM0a,EAAkB,GACfvb,EAAI,EAAGA,EAAIib,EAAiBlb,OAAQC,IAGvC+B,OAFEA,EAAQkZ,EAAiBjb,GAAG,KAEqB,KAAV+B,GAC3CwZ,EAAgBxQ,KAAK,CAAC,QAADmE,OAASlP,EAAE,GAAK+B,IAExC,GAE8B,IAA3BwZ,EAAgBxb,OAAY,CAAAgc,EAAAlb,EAAA,eAAAkb,EAAAta,EAAA,EACvB,CAAEmL,SAAS,EAAO9H,MAAO,0BAAyB,OAWxB,OAP7B2W,EAAYlS,EAAUyM,kBAC1B+E,EACAC,EACAO,EAAgBxb,OAChB,IAGQoM,OAASoP,EAAgBQ,EAAAlb,EAAA,EAC7ByI,EAAQqB,OAAM,OAEpBgQ,EAAac,EAAUM,EAAAlb,EAAA,gBAUa,OAP9B4a,EAAYlS,EAAUyM,kBAC1B+E,EACAC,EACAC,EAAiBlb,OACjBmb,IAGQ/O,OAAS8O,EAAiBc,EAAAlb,EAAA,GAC9ByI,EAAQqB,OAAM,QAEpBgQ,EAAac,EAAU,QAGyC,OAAlEd,EAAWjQ,KAAK,CAAC,UAAW,SAAU,WAAY,gBAAgBqR,EAAAlb,EAAA,GAC5DyI,EAAQqB,OAAM,QAGpBiQ,EAAcD,EAAW3P,QAAQ+Q,EAAAlb,EAAA,wBAAAkb,EAAA3b,EAAA,GAAA2b,EAAAva,EAAAua,EAAAta,EAAA,EAE1B,CAAEmL,SAAS,EAAO9H,MAAO,+BAA8B,QAAAiX,EAAAlb,EAAA,wBAAAkb,EAAAta,EAAA,EAGzD,CAAEmL,SAAS,EAAO9H,MAAO,sBAAqB,QAAAiX,EAAAlb,EAAA,iBAKhB,OADvC8Z,EAAarR,EAAQgB,SAASsI,oBACnBlI,KAAK,CAAC,UAAW,WAAWqR,EAAAlb,EAAA,GACjCyI,EAAQqB,OAAM,QACpBiQ,EAAcD,EAAW3P,QAAQ,QAAA+Q,EAAAlb,EAAA,wBAAAkb,EAAA3b,EAAA,GAAA2b,EAAAva,EAAAua,EAAAta,EAAA,EAG5B,CAAEmL,SAAS,EAAO9H,MAAO,wCAAuC,QAkB1E,GAVC6W,EADuB,QAArB/K,EAAO+K,WAA4C,OAArB/K,EAAO+K,UAC3B3X,MAAMsY,UAAUC,gBACE,SAArB3L,EAAO+K,WAA6C,MAArB/K,EAAO+K,UACnC3X,MAAMsY,UAAUE,KACE,QAArB5L,EAAO+K,WAA4C,MAArB/K,EAAO+K,UAClC3X,MAAMsY,UAAUG,IACE,YAArB7L,EAAO+K,WAAgD,QAArB/K,EAAO+K,UACtC3X,MAAMsY,UAAUI,UAGhB1Y,MAAMsY,UAAUC,gBAC7BR,EAAA3b,EAAA,GAIMua,EAAY,CAAFoB,EAAAlb,EAAA,gBAAAkb,EAAAta,EAAA,EACN,CAAEmL,SAAS,EAAO9H,MAAO,kBAAiB,QAkBvB,OAbtB8W,EAAQrS,EAAUoT,OAAO5U,IAAI4T,EAAWhB,EAAY3W,MAAM4Y,cAAcC,OAGxEvV,MAAM+H,KAAOuB,EAAOtJ,OAAS,KACnCsU,EAAMkB,OAAS,IACflB,EAAMmB,MAAQ,IAGdnB,EAAMoB,KAAOpM,EAAOqM,SAAW,IAC/BrB,EAAMsB,IAAMtM,EAAOuM,SAAW,IAG9BvB,EAAMwB,OAAOC,SAAWrZ,MAAMsZ,oBAAoBC,OAClD3B,EAAMwB,OAAOI,SAAU,EAAKzB,EAAAlb,EAAA,GAEtByI,EAAQqB,OAAM,QAAAoR,EAAAlb,EAAA,oBAAAkb,EAAA3b,EAAA,GAAA0b,EAAAC,EAAAva,EAKhBma,IAAc3X,MAAMsY,UAAUC,gBAAe,CAAAR,EAAAlb,EAAA,SAOX,OAPWkb,EAAA3b,EAAA,IAEvCwb,EAAQrS,EAAUoT,OAAO5U,IAAI/D,MAAMsY,UAAUC,gBAAiB5B,EAAY3W,MAAM4Y,cAAcC,OAC9FvV,MAAM+H,KAAOuB,EAAOtJ,OAAS,KACnCsU,EAAMkB,OAAS,IACflB,EAAMmB,MAAQ,IACdnB,EAAMoB,KAAOpM,EAAOqM,SAAW,IAC/BrB,EAAMsB,IAAMtM,EAAOuM,SAAW,IAAIpB,EAAAlb,EAAA,GAC5ByI,EAAQqB,OAAM,eAAAoR,EAAAta,EAAA,EAEb,CACLmL,SAAS,EACT7H,QAAS,GAAFmK,OAAK0L,EAAW,kEACxB,eAAAmB,EAAA3b,EAAA,GAAA2b,EAAAva,EAAAua,EAAAta,EAAA,EAEM,CAAEmL,SAAS,EAAO9H,MAAO,mCAAkC,eAAAiX,EAAAta,EAAA,EAI/D,CAAEmL,SAAS,EAAO9H,MAAO,eAAFoK,OAAiB4M,EAAW/W,WAAW,eAAAgX,EAAAta,EAAA,EAGhE,CACLmL,SAAS,EACT7H,QAAS,GAAFmK,OAAK0L,EAAW,SAAA1L,OAAQ0B,EAAO+K,WAAa,KAAI,mBACxD,EAAAjB,EAAA,0CACFtX,MAAA,KAAAD,UAAA,UAGcwO,EAAwB8L,EAAAC,GAAA,OAAAC,EAAAva,MAAC,KAADD,UAAA,CAyFvC,SAAAwa,IAFC,OAEDA,EAAAza,EAAAX,IAAAhE,EAzFA,SAAAqf,EAAwCtU,EAASsH,GAAM,IAAArH,EAAA2P,EAAApP,EAAA+T,EAAAC,EAAAC,EAAAlU,EAAAmU,EAAAC,EAAA,OAAA1b,IAAAC,EAAA,SAAA0b,GAAA,cAAAA,EAAA9d,EAAA8d,EAAArd,GAAA,OAEtC,GADT0I,EAAYD,EAAQgB,SAASC,WAAWC,qBAC1C0O,EAAS,IAGTtI,EAAO/G,MAAO,CAAFqU,EAAArd,EAAA,QACdqY,EAAOnO,KAAKxB,EAAUoJ,SAAS/B,EAAO/G,QAAQqU,EAAArd,EAAA,eAIf,OADzBiJ,EAAYP,EAAUyS,4BAClBtR,KAAK,gBAAgBwT,EAAArd,EAAA,EACzByI,EAAQqB,OAAM,OAEfb,EAAUmS,cAMP4B,EAAetU,EAAUoJ,SAAS,iBACxCuG,EAAOnO,KAAK8S,IALZ3E,EAAOnO,KAAKjB,GAMb,OAAAoU,EAAA9d,EAAA,EAAA0d,EAAA,EAAAC,EAKmB7E,EAAM,YAAA4E,EAAAC,EAAAhe,QAAA,CAAAme,EAAArd,EAAA,QAEF,OAFbgJ,EAAKkU,EAAAD,IAERpT,KAAK,WAAWwT,EAAArd,EAAA,EAChByI,EAAQqB,OAAM,OAKdqT,EAAoBnU,EAAMsU,mBAAmBpW,IAAI/D,MAAMoa,sBAAsBnK,WAG1D,iBAArBrD,EAAOgI,gBAAiDza,IAAjByS,EAAO7O,MAChDic,EAAkB/J,UAAUoK,KAAO,CACjCC,SAAU1N,EAAO7O,MAAMyK,WACvBqM,SAAU7U,MAAMua,6BAA6BC,aAEjB,cAArB5N,EAAOgI,gBAA8Cza,IAAjByS,EAAO7O,MACpDic,EAAkB/J,UAAUoK,KAAO,CACjCC,SAAU1N,EAAO7O,MAAMyK,WACvBqM,SAAU7U,MAAMua,6BAA6BE,UAEjB,aAArB7N,EAAOgI,gBAA6Cza,IAAjByS,EAAO7O,MACnDic,EAAkB/J,UAAUoK,KAAO,CACjCC,SAAU1N,EAAO7O,MAAMyK,WACvBqM,SAAU7U,MAAMua,6BAA6BG,SAEjB,kBAArB9N,EAAOgI,gBAAkDza,IAAjByS,EAAO7O,MACxDic,EAAkB/J,UAAUoK,KAAO,CACjCC,SAAU1N,EAAO7O,MAAMyK,WACvBqM,SAAU7U,MAAMua,6BAA6BI,cAI/CX,EAAkB/J,UAAUoK,KAAO,CACjCC,UAAW1N,EAAO7O,OAAS,GAAGyK,WAC9BqM,SAAU7U,MAAMua,6BAA6BC,aAKjDR,EAAkB/J,UAAUuF,OAAOM,KAAKzS,MAAQuJ,EAAOpD,iBAAmB,UACtEoD,EAAOrD,YACTyQ,EAAkB/J,UAAUuF,OAAOE,KAAKrS,MAAQuJ,EAAOrD,WAErDqD,EAAOtD,OACT0Q,EAAkB/J,UAAUuF,OAAOE,KAAKpM,MAAO,GAChD,OAAAwQ,IAAAI,EAAArd,EAAA,eAAAqd,EAAArd,EAAA,sBAAAqd,EAAA9d,EAAA,EAAA6d,EAAAC,EAAA1c,EAAA0c,EAAAzc,EAAA,EAGI,CACLmL,SAAS,EACT9H,MAAO,mBAAFoK,OAAqB+O,EAAYlZ,WACvC,cAAAmZ,EAAArd,EAAA,GAGGyI,EAAQqB,OAAM,eAAAuT,EAAAzc,EAAA,EAEb,CACLmL,SAAS,EACT7H,QAAS,qBAAFmK,OAAuB0B,EAAOgI,UAAS,KAAA1J,OAAI0B,EAAO7O,OAAS,GAAE,OACrE,EAAA6b,EAAA,kBACFxa,MAAA,KAAAD,UAAA,UAGcyO,EAAgBgN,EAAAC,GAAA,OAAAC,EAAA1b,MAAC,KAADD,UAAA,CA+O/B,SAAA2b,IAFC,OAEDA,EAAA5b,EAAAX,IAAAhE,EA/OA,SAAAwgB,EAAgCzV,EAASsH,GAAM,IAAArH,EAAA0D,EAAA+R,EAAAlV,EAAAuC,EAAAhB,EAAA4T,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAvf,EAAAwf,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAApV,EAAAqV,EAAAC,EAAAC,EAAAC,EAAAC,EAAA3M,EAAA4M,EAAAC,EAAA,OAAAve,IAAAC,EAAA,SAAAue,GAAA,cAAAA,EAAAlgB,GAAA,OACqB,GAA5D0I,EAAYD,EAAQgB,SAASC,WAAWC,qBAEzCoG,EAAOoQ,eAAgB,CAAFD,EAAAlgB,EAAA,eAAAkgB,EAAAtf,EAAA,EACjB,CAAEmL,SAAS,EAAO9H,MAAO,mBAAkB,WAMhD8L,EAAO3D,YAAa,CAAF8T,EAAAlgB,EAAA,YAEhB+P,EAAO3D,YAAYmJ,MAAM,mBAAoB,CAAF2K,EAAAlgB,EAAA,QACH,GAApCiJ,EAAYP,EAAUoC,eACZ,CAAFoV,EAAAlgB,EAAA,eAAAkgB,EAAAtf,EAAA,EACL,CAAEmL,SAAS,EAAO9H,MAAO,mBAAkB,OAGR,OAA5CgF,EAAUY,KAAK,CAAC,WAAY,gBAAgBqW,EAAAlgB,EAAA,EACtCyI,EAAQqB,OAAM,OAOpB,GAHM0B,EAAeuE,EAAO3D,YAAYgU,MAAM,KAAK,GAC7C5V,EAAcgB,EAAagK,WAAW,GAAK,KAG7CvM,EAAUyB,SAAW,GAAC,CAAAwV,EAAAlgB,EAAA,QACxBoM,EAAc1D,EAAUyM,kBAAkB,EAAG3K,EAAavB,EAAUyB,SAAW,EAAG,GAAGwV,EAAAlgB,EAAA,sBAAAkgB,EAAAtf,EAAA,EAE9E,CAAEmL,SAAS,EAAO9H,MAAO,mBAAkB,OAIhD8L,EAAOqP,aAAerP,EAAOqP,YAAY7J,MAAM,oBAC3C6I,EAAqBrO,EAAOqP,YAAYgB,MAAM,KAAK,GACzDjC,EAAoBC,EAAmB5I,WAAW,GAAK,IAGvD2I,EAAoB3T,EAAc,EACnC0V,EAAAlgB,EAAA,eAGDoM,EAAc1D,EAAUoJ,SAAS/B,EAAO3D,aAGpC2D,EAAOqP,aACLrP,EAAOqP,YAAY7J,MAAM,qBAErB6I,EAAqBrO,EAAOqP,YAAYgB,MAAM,KAAK,GACzDjC,EAAoBC,EAAmB5I,WAAW,GAAK,IAE1D,OAAA0K,EAAAlgB,EAAA,oBAEM+P,EAAOsQ,aAAc,CAAFH,EAAAlgB,EAAA,SAGC,OAFvBwK,EAAcuF,EAAOsQ,aAAa7K,WAAW,GAAK,IAClDvM,EAAYP,EAAUoC,gBAClBjB,KAAK,CAAC,aAAaqW,EAAAlgB,EAAA,EACvByI,EAAQqB,OAAM,YAEhBb,EAAUyB,SAAW,GAAC,CAAAwV,EAAAlgB,EAAA,SACxBoM,EAAc1D,EAAUyM,kBAAkB,EAAG3K,EAAavB,EAAUyB,SAAW,EAAG,GAAGwV,EAAAlgB,EAAA,wBAAAkgB,EAAAtf,EAAA,EAE9E,CAAEmL,SAAS,EAAO9H,MAAO,mBAAkB,QAGpDka,EAA4C,SAAxBpO,EAAOuQ,aAA0B9V,EAAc,EAChDuF,EAAOuQ,aAAevQ,EAAOuQ,aAAa9K,WAAW,GAAK,GAAKhL,EAAc,EAAE0V,EAAAlgB,EAAA,wBAAAkgB,EAAAtf,EAAA,EAE3F,CAAEmL,SAAS,EAAO9H,MAAO,mBAAkB,QAGgB,OAApEmI,EAAYvC,KAAK,CAAC,SAAU,WAAY,cAAe,aAAaqW,EAAAlgB,EAAA,GAC9DyI,EAAQqB,OAAM,QAGmB,IAAjC0U,EAAepS,EAAYd,SACY,IAAxBkT,EAAatf,OAAY,CAAAghB,EAAAlgB,EAAA,gBAAAkgB,EAAAtf,EAAA,EACrC,CAAEmL,SAAS,EAAO9H,MAAO,mBAAkB,QAG9Cwa,EAAe,GACfC,EAAY,GAGTvf,EAAI,EAAC,aAAEA,EAAIqf,EAAatf,QAAM,CAAAghB,EAAAlgB,EAAA,SAE2B,GAD1D2e,EAAQH,EAAa+B,MAAMphB,EAAGkc,KAAKmF,IAAIrhB,EAAIuf,EAAWF,EAAatf,YACnE0f,EAAaD,EAAM8B,IAAI,SAAApW,GAAG,OAAIA,EAAI,EAAE,GAAEqW,OAAO,SAAAlS,GAAI,OAAIA,CAAI,IAEhDtP,OAAS,GAAC,CAAAghB,EAAAlgB,EAAA,gBAAAkgB,EAAAlgB,EAAA,GACO2gB,EAAe/B,EAAY7O,EAAOoQ,eAAgBpQ,EAAO6Q,gBAAe,QAGtG,IAHM/B,EAAeqB,EAAAvf,IAGI0O,MAAMC,QAAQuP,GAYrC,IADIE,EAAmB,EACdD,EAAI,EAAGA,EAAIH,EAAMzf,OAAQ4f,IAC5BH,EAAMG,GAAG,KACLG,EAAiBJ,EAAgBE,IAAqB,KAEX,KAA1BE,EAAerX,OAGpC6W,EAAavU,KAAK,CAAC,CAAEsE,KAAMyQ,EAAgB4B,SAAS,KAFpDpC,EAAavU,KAAK,CAAC,CAAEsE,KAAM,QAASqS,SAAS,KAM/C9B,KAGAN,EAAavU,KAAK,CAAC,CAAEsE,KAAM,GAAIqS,SAAS,UAxB5C,IAAS/B,EAAI,EAAGA,EAAIH,EAAMzf,OAAQ4f,IAC5BH,EAAMG,GAAG,GACXL,EAAavU,KAAK,CAAC,CAAEsE,KAAM,QAASqS,SAAS,KAE7CpC,EAAavU,KAAK,CAAC,CAAEsE,KAAM,GAAIqS,SAAS,KAuB7CX,EAAAlgB,EAAA,iBAED,IAAS8e,EAAI,EAAGA,EAAIH,EAAMzf,OAAQ4f,IAChCL,EAAavU,KAAK,CAAC,CAAEsE,KAAM,GAAIqS,SAAS,KACzC,QAIC1hB,EAAI,KAAQ,GAAKA,EAAI,GACvB0E,EAAW,WAADwK,OAAYgN,KAAKyF,MAAO3hB,EAAIqf,EAAatf,OAAU,KAAI,OAAAmP,OAAMlP,EAAC,KAAAkP,OAAImQ,EAAatf,OAAM,KAAK,QACrG,QA/CsCC,GAAKuf,EAASwB,EAAAlgB,EAAA,iBAqDvD,IAASb,EAAI,EAAGA,EAAIkc,KAAKmF,IAAI,EAAG/B,EAAavf,QAASC,KAgBd,YAZd7B,IAAtB6gB,IAEFA,EAAoB/R,EAAY5B,YAAc,IAG1C4U,EAAc1W,EAAUyM,kBAC5B/I,EAAY9B,SACZ6T,EACAM,EAAavf,OACb,IAGU2K,KAAK,CAAC,UAAW,WAAWqW,EAAAlgB,EAAA,GAClCyI,EAAQqB,OAAM,QAG2B,OAA/CsV,EAAY2B,MAAM5d,MAAM6d,aAAaC,UAAUf,EAAAlgB,EAAA,GACzCyI,EAAQqB,OAAM,QAQpB,IAHMuV,EAAqB,GACrBC,EAAY,GAETngB,EAAI,EAAGA,EAAIsf,EAAavf,OAAQC,KACjCqgB,EAAcf,EAAatf,GAAG,KACM,WAAvB+hB,EAAO1B,IACxBH,EAAmBnV,KAAK,CAACsV,EAAYhR,OACjCgR,EAAYqB,SACdvB,EAAUpV,KAAK/K,IAIjBkgB,EAAmBnV,KAAK,CAACiX,OAAO3B,GAAe,MAMX,OAAxCJ,EAAY9T,OAAS+T,EAAmBa,EAAAlgB,EAAA,GAClCyI,EAAQqB,OAAM,aAGhBwV,EAAUpgB,OAAS,GAAC,CAAAghB,EAAAlgB,EAAA,SAAAyf,EAAAlQ,EACC+P,GAAS,IAAhC,IAAAG,EAAAjQ,MAAAkQ,EAAAD,EAAAzf,KAAAiB,MAAWqJ,EAAQoV,EAAAxe,OACXye,EAAYP,EAAYhK,QAAQ9K,EAAU,IACtCqO,OAAOM,KAAKzS,MAAQ,UAC9BmZ,EAAUhH,OAAOE,KAAKrS,MAAQ,UAC9BmZ,EAAUhH,OAAOE,KAAKpM,MAAO,CAC9B,OAAA8O,GAAAkE,EAAA1hB,EAAAwd,EAAA,SAAAkE,EAAAjf,GAAA,QAAA0f,EAAAlgB,EAAA,GACKyI,EAAQqB,OAAM,QAK6B,OAAnDsV,EAAYvV,KAAK,CAAC,SAAU,OAAQ,eAAeqW,EAAAlgB,EAAA,GAC7CyI,EAAQqB,OAAM,aAGhB2U,EAAavf,OAAS,GAAC,CAAAghB,EAAAlgB,EAAA,SAC6E,GAArFof,EAAY9T,OAAO,IAAO8T,EAAY9T,OAAO,GAAG,IAAmC,KAA7B8T,EAAY9T,OAAO,GAAG,GAEhF,CAAF4U,EAAAlgB,EAAA,SAEAb,EAAI,EAAC,aAAEA,EAAIkc,KAAKmF,IAAI,EAAG/B,EAAavf,SAAO,CAAAghB,EAAAlgB,EAAA,SAMtB,OALtB6f,EAAUzT,EAAY9B,SAAWnL,EACjC2gB,EAAU3B,GAAqB/R,EAAY5B,YAAc,EACzDuV,EAAOrX,EAAU0M,QAAQyK,EAASC,GAClC1M,EAAYiM,EAAmBlgB,GAAG,GAExC4gB,EAAKzU,OAAS,CAAC,CAAC8H,IAAY8M,EAAAlgB,EAAA,GAEtByI,EAAQqB,OAAM,QAGA,OAApBiW,EAAKlW,KAAK,UAAUqW,EAAAlgB,EAAA,GACdyI,EAAQqB,OAAM,QAZgC3K,IAAG+gB,EAAAlgB,EAAA,iBAoB7B,OAF1BggB,EAAatX,EAAU0M,QAAQ,EAAG+I,GAAqB/R,EAAY5B,YAAc,IACjFyV,EAAmBvX,EAAU0M,QAAQ,EAAGhJ,EAAY5B,cACzCX,KAAK,UAAUqW,EAAAlgB,EAAA,GAC1ByI,EAAQqB,OAAM,QAEkE,OAAtFkW,EAAW1U,OAAS,CAAC,CAAC,GAAD+C,OAAI4R,EAAiB3U,OAAO,GAAG,GAAE,MAAA+C,OAAK0B,EAAOoQ,eAAc,OAAMD,EAAAlgB,EAAA,GAChFyI,EAAQqB,OAAM,eAAAoW,EAAAtf,EAAA,EAEb,CACLmL,SAAS,EACT7H,QAAS,iBAAFmK,OAAmBmQ,EAAatf,OAAM,WAC9C,EAAAgf,EAAA,KACF3b,MAAA,KAAAD,UAAA,UAGcqe,EAAcS,EAAAC,EAAAC,GAAA,OAAAC,EAAAhf,MAAC,KAADD,UAAA,CAsD7B,SAAAif,IAFC,OAEDA,EAAAlf,EAAAX,IAAAhE,EAtDA,SAAA8jB,EAA8BC,EAAOtB,EAAgBS,GAAc,IAAAvT,EAAA1I,EAAA2I,EAAAC,EAAAC,EAAAjE,EAAA,OAAA7H,IAAAC,EAAA,SAAA+f,GAAA,cAAAA,EAAAniB,EAAAmiB,EAAA1hB,GAAA,OAyB9D,OAzB8D0hB,EAAAniB,EAAA,EAIzD8N,EAAgB5I,aAAaC,QAAQ,+BAAiC,wBACtEC,EAAUF,aAAaC,QAAQ,wBAC/B4I,EAAY7I,aAAaC,QAAQ,0BAGjC6I,EAAc,CAClB5H,QAAS,4BAAF0I,OAA8B8R,EAAc,MAAA9R,OAAKoT,EAAMrX,KAAK,OACnElB,aAAc,CACZ+C,UAAW,kBACXwV,MAAOA,EACPtB,eAAgBA,EAChBS,eAAgBA,GAElB/S,MAAOR,EACPS,WAAY,SAIQ,qBAAlBT,IACFE,EAAY5I,QAAUA,EACtB4I,EAAYD,UAAYA,GACzBoU,EAAA1hB,EAAA,EAEsB+N,MAAMnL,EAAe,CAC1CoL,OAAQ,OACR5C,QAAS,CACP,eAAgB,oBAElB6C,KAAMC,KAAKC,UAAUZ,KACrB,OANY,IAARC,EAAQkU,EAAA/gB,GASAyN,GAAI,CAAFsT,EAAA1hB,EAAA,cACR,IAAIX,MAAM,uBAADgP,OAAwBb,EAASc,SAAS,cAAAoT,EAAA1hB,EAAA,EAGtCwN,EAASe,OAAM,OAAxB,MAANhF,EAAMmY,EAAA/gB,GAEDoL,SAAWxC,EAAOyC,MAAQzC,EAAOyC,KAAKyS,cAAY,CAAAiD,EAAA1hB,EAAA,eAAA0hB,EAAA9gB,EAAA,EACpD2I,EAAOyC,KAAKyS,cAAY,WACtBlV,EAAOtF,MAAO,CAAFyd,EAAA1hB,EAAA,cACf,IAAIX,MAAMkK,EAAOtF,OAAM,aAEvB,IAAI5E,MAAM,qBAAoB,OAAAqiB,EAAA1hB,EAAA,sBAAA0hB,EAAAniB,EAAA,EAAAmiB,EAAA/gB,EAAA+gB,EAAA9gB,EAAA,EAG/B6gB,EAAMhB,IAAI,iBAAM,EAAE,IAAC,cAAAiB,EAAA9gB,EAAA,KAAA4gB,EAAA,kBAE7Bjf,MAAA,KAAAD,UAAA,CAGD,SAASmJ,EAAgBjB,GAIvB,IAHA,IAAIgB,EAAe,GACfmW,EAAYnX,EAETmX,GAAa,GAClBnW,EAAe2V,OAAOS,aAAcD,EAAY,GAAM,IAAMnW,EAC5DmW,EAAYtG,KAAKwG,MAAMF,EAAY,IAAM,EAG3C,OAAOnW,CACT,CAEA,SAAS8J,EAAapU,GACpB,MAAqB,iBAAVA,EACL4gB,OAAOC,UAAU7gB,GACZA,EAAM8gB,eAAe,SAErB9gB,EAAM8gB,eAAe,QAAS,CAAEC,sBAAuB,EAAGC,sBAAuB,IAGrFhhB,CACT,CAEA,SAAS2C,EAAWK,EAASie,GAC3B,IAAM7T,EAAS3P,SAAS2E,eAAe,UACvCgL,EAAOxK,YAAcI,EACrBoK,EAAO8T,UAAY,kBAAoBD,EACvC7T,EAAOjI,MAAMgc,QAAU,QAEnBrkB,OAAOskB,eACTC,aAAavkB,OAAOskB,eAGT,YAATH,IACFnkB,OAAOskB,cAAgBvV,WAAW,WAChCuB,EAAOjI,MAAMgc,QAAU,MACzB,EAAG,KAEP,CAEA,SAAS5e,IACP9E,SAAS2E,eAAe,gBAAgBpC,MAAQ,GAChDvC,SAAS2E,eAAe,UAAU+C,MAAMgc,QAAU,MACpD,CASA,SAAS/d,IACP,IAAMK,EAAUF,aAAaC,QAAQ,wBAC/B4I,EAAY7I,aAAaC,QAAQ,0BACjC8d,EAAa7jB,SAAS2E,eAAe,cAEvCqB,GAAW2I,GACbkV,EAAW1e,YAAc,QACzB0e,EAAWvb,UAAUC,IAAI,mBAEzBsb,EAAW1e,YAAc,KACzB0e,EAAWvb,UAAUO,OAAO,iBAEhC,CAGA,SAASpD,IACP,IAAMO,EAAUF,aAAaC,QAAQ,wBAC/B4I,EAAY7I,aAAaC,QAAQ,0BAEnCC,GAAW2I,EAWf3O,SAAS2E,eAAe,eAAe+C,MAAMgc,QAAU,QANrDI,GAEJ,CAQA,SAAStd,IACPxG,SAAS2E,eAAe,eAAe+C,MAAMgc,QAAU,MACzD,CAGA,SAAShd,IACP,IAGEZ,aAAaie,WAAW,wBACxBje,aAAaie,WAAW,0BAGxB/jB,SAAS2E,eAAe,eAAepC,MAAQ,wBAG/CoD,IAGAa,IAGAtB,EAAW,6BAA8B,UAC3C,CAAE,MAAOI,GACPJ,EAAW,sBAAuB,QACpC,CACF,CAGA,SAAS4e,IACP9jB,SAAS2E,eAAe,aAAa+C,MAAMgc,QAAU,OACvD,CAEA,SAAStd,IACPpG,SAAS2E,eAAe,aAAa+C,MAAMgc,QAAU,OACrD1jB,SAAS2E,eAAe,kBAAkBpC,MAAQ,GAClDvC,SAAS2E,eAAe,gBAAgBpC,MAAQ,GAChDvC,SAAS2E,eAAe,cAAc+C,MAAMgc,QAAU,MACxD,CAAC,SAEcjd,IAAa,OAAAud,EAAApgB,MAAC,KAADD,UAAA,UAAAqgB,IA8F3B,OA9F2BA,EAAAtgB,EAAAX,IAAAhE,EAA5B,SAAAklB,IAAA,IAAAje,EAAAke,EAAArV,EAAAxB,EAAA,OAAAtK,IAAAC,EAAA,SAAAmhB,GAAA,cAAAA,EAAAvjB,EAAAujB,EAAA9iB,GAAA,OAEsE,GAD9D2E,EAAUhG,SAAS2E,eAAe,gBAAgBpC,MAAM0G,OACxDib,EAAQlkB,SAAS2E,eAAe,kBAAkBpC,MAAM0G,OAElD,CAAFkb,EAAA9iB,EAAA,QACmC,OAA3C+iB,EAAe,kBAAmB,SAASD,EAAAliB,EAAA,UAKE,GAA5B,6BACHxB,KAAKyjB,GAAQ,CAAFC,EAAA9iB,EAAA,QACoB,OAA7C+iB,EAAe,oBAAqB,SAASD,EAAAliB,EAAA,aAI1C+D,EAAS,CAAFme,EAAA9iB,EAAA,QAC8B,OAAxC+iB,EAAe,eAAgB,SAASD,EAAAliB,EAAA,eAKtC+D,EAAQzF,OAAS,GAAC,CAAA4jB,EAAA9iB,EAAA,QAC6B,OAAjD+iB,EAAe,wBAAyB,SAASD,EAAAliB,EAAA,UAWnD,OANAmiB,EAAe,mBAAoB,QAGnCte,aAAaG,QAAQ,uBAAwBD,GAC7CF,aAAaG,QAAQ,yBAA0Bie,GAE/CC,EAAAvjB,EAAA,EAAAujB,EAAA9iB,EAAA,EAEyB+N,MAAMnL,EAAe,CAC1CoL,OAAQ,OACR5C,QAAS,CACP,eAAgB,oBAElB6C,KAAMC,KAAKC,UAAU,CACnBxI,QAAS,MACTuD,aAAc,CACZ+B,YAAa,CAAEd,QAAS,MACxBe,QAAS,EACTC,WAAY,EACZC,QAAS,IAEXyC,MAAO,mBACPlJ,QAASA,EACT2I,UAAWuV,MAEb,OAjBY,GAoBU,OApBlBrV,EAAQsV,EAAAniB,GAoBD2N,OAAc,CAAAwU,EAAA9iB,EAAA,QAIyB,OAFlD+iB,EAAe,kBAAmB,SAClCte,aAAaie,WAAW,wBACxBje,aAAaie,WAAW,0BAA0BI,EAAAliB,EAAA,iBAAAkiB,EAAA9iB,EAAA,EAIjCwN,EAASe,OAAM,SAA5BvC,EAAI8W,EAAAniB,GAGAoL,SAAWC,EAAK/H,OAAS+H,EAAKgX,OAGtCD,EADqB/W,EAAK/H,QAAU+H,EAAKgX,MAAQ,kBAAoB,kBACxC,SAC7Bve,aAAaie,WAAW,wBACxBje,aAAaie,WAAW,4BAGxBK,EAAe,eAAgB,WAG/Bze,IAGoB3F,SAAS2E,eAAe,eAChCpC,MAAQ,mBACpBqE,KAEAwH,WAAW,WACThI,GACF,EAAG,MACJ+d,EAAA9iB,EAAA,gBAAA8iB,EAAAvjB,EAAA,EAAAujB,EAAAniB,EAEDoiB,EAAe,sBAAuB,SACtCte,aAAaie,WAAW,wBACxBje,aAAaie,WAAW,0BAA0B,eAAAI,EAAAliB,EAAA,KAAAgiB,EAAA,kBAErDrgB,MAAA,KAAAD,UAAA,CAED,SAASygB,EAAe7e,EAASie,GAC/B,IAAMc,EAAYtkB,SAAS2E,eAAe,cAC1C2f,EAAUnf,YAAcI,EACxB+e,EAAUb,UAAY,eAAH/T,OAAkB8T,GACrCc,EAAU5c,MAAMgc,QAAU,OAC5B,CAEA,SAAShe,KACPrG,OAAOklB,KAAK,2BAA4B,SAC1C,CAEA,SAAS3d,KACP,IAkBI4d,EAlBE5e,EAAc5F,SAAS2E,eAAe,eACtC+J,EAAgB9I,EAAYrD,MAGlC,GAAsB,qBAAlBmM,IACc5I,aAAaC,QAAQ,wBAKnC,OAHAb,EAAW,6BAA8B,WACzCU,EAAYrD,MAAQ,6BACpBuhB,IAMJhe,aAAaG,QAAQ,6BAA8ByI,GAKjD8V,EADE9V,EAAczJ,SAAS,QACb,aACHyJ,EAAczJ,SAAS,QACpB,aAEA,QAEdC,EAAW,OAADwK,OAAQ8U,EAAS,cAAc,UAC3C,CAwBA,SAAA/f,KAFC,OAEDA,GAAAf,EAAAX,IAAAhE,EArBA,SAAA0lB,IAAA,IAAA5V,EAAA,OAAA9L,IAAAC,EAAA,SAAA0hB,GAAA,cAAAA,EAAA9jB,EAAA8jB,EAAArjB,GAAA,OAEqE,OAFrEqjB,EAAA9jB,EAAA,EAEqE8jB,EAAArjB,EAAA,EAE1C+N,MAFP,kDAEsB,CACpCC,OAAQ,OACR5C,QAAS,CACP,eAAgB,oBAElB6C,KAAMC,KAAKC,UAAU,CAAE/O,MAAM,MAC7B,OANY,OAARoO,EAAQ6V,EAAA1iB,EAAA0iB,EAAArjB,EAAG,EASEwN,EAASe,OAAM,OAAxB8U,EAAA1iB,EAEVkD,EAAW,gBAAiB,WAAWwf,EAAArjB,EAAA,eAAAqjB,EAAA9jB,EAAA,EAEvCsE,EAAW,kBAF4Bwf,EAAA1iB,EAEFuD,QAAS,SAAS,cAAAmf,EAAAziB,EAAA,KAAAwiB,EAAA,kBAE1D7gB,MAAA,KAAAD,UAAA,UAGc6O,GAAmBmS,EAAAC,GAAA,OAAAC,GAAAjhB,MAAC,KAADD,UAAA,CA6JlC,SAAAkhB,KAHC,OAGDA,GAAAnhB,EAAAX,IAAAhE,EA7JA,SAAA+lB,EAAmChb,EAASsH,GAAM,IAAArH,EAAAgb,EAAAlY,EAAAhB,EAAAvB,EAAAiC,EAAAlC,EAAA2a,EAAA/a,EAAAzJ,EAAAykB,EAAAC,EAAAC,EAAAC,EAAAC,EAAAxd,EAAAH,EAAA4d,EAAAC,EAAAC,EAAA/E,EAAAgF,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAljB,IAAAC,EAAA,SAAAkjB,GAAA,cAAAA,EAAAtlB,EAAAslB,EAAA7kB,GAAA,OAM9C,GALI0I,EAAYD,EAAQgB,SAASC,WAAWC,qBAAoBkb,EAAAtlB,EAAA,EAG5DmkB,EAAe,IAGf3T,EAAOsQ,aAAc,CAAFwE,EAAA7kB,EAAA,QAOwB,OALvCwL,EAAeuE,EAAOsQ,aACtB7V,EAAcgB,EAAagK,WAAW,GAAK,IAG3CvM,EAAYP,EAAUyS,4BAClBtR,KAAK,CAAC,WAAY,iBAAiBgb,EAAA7kB,EAAA,EACvCyI,EAAQqB,OAAM,OAEfb,EAAUmS,cAOPpS,EAAQN,EAAUyM,kBAAkB,EAAG3K,EAAa,EAAG,GAC7DkZ,EAAaxZ,KAAKlB,KANZkC,EAAUjC,EAAUyB,SACpB1B,EAAQN,EAAUyM,kBAAkB,EAAG3K,EAAaU,EAAS,GACnEwY,EAAaxZ,KAAKlB,IAKnB6b,EAAA7kB,EAAA,mBACS+P,EAAO/G,MAAO,CAAF6b,EAAA7kB,EAAA,QAIwB,OAJxB6kB,EAAAtlB,EAAA,GAGdqJ,EAAiBH,EAAQgB,SAASG,qBACzBC,KAAK,CAAC,QAAS,cAAcgb,EAAA7kB,EAAA,EACtCyI,EAAQqB,OAAM,OAEpB,GAAIlB,EAAemB,UAAY,EAE7B,IAAS5K,EAAI,EAAGA,EAAIyJ,EAAeoB,MAAMC,MAAM/K,OAAQC,IACrDukB,EAAaxZ,KAAKtB,EAAeoB,MAAMC,MAAM9K,SAI/CukB,EAAaxZ,KAAKzB,EAAQgB,SAASsI,oBACpC8S,EAAA7kB,EAAA,sBAAA6kB,EAAAtlB,EAAA,EAAAslB,EAAAlkB,EAAAkkB,EAAAjkB,EAAA,EAEM,CAAEmL,SAAS,EAAO9H,MAAO,wCAAuC,OAAA4gB,EAAA7kB,EAAA,mBAE/C,QAAjB+P,EAAO/G,OAAoC,OAAjB+G,EAAO/G,MAAc,CAAA6b,EAAA7kB,EAAA,SAGzB,OADzBiJ,EAAYP,EAAUyS,4BAClBtR,KAAK,gBAAgBgb,EAAA7kB,EAAA,EACzByI,EAAQqB,OAAM,WAEhBb,EAAUmS,aAAc,CAAFyJ,EAAA7kB,EAAA,gBAAA6kB,EAAAjkB,EAAA,EACjB,CAAEmL,SAAS,EAAO9H,MAAO,mBAAkB,QAElDyf,EAAaxZ,KAAKjB,GAAW,QAAA4b,EAAA7kB,EAAA,iBAI/B0jB,EAAaxZ,KAAKxB,EAAUoJ,SAAS/B,EAAO/G,QAAQ,QAItD,IAAA6a,EAAA,EAAAC,EAAoBJ,EAAYG,EAAAC,EAAA5kB,OAAA2kB,IAAhBC,EAAAD,GACRha,KAAK,CAAC,UAAW,WAAY,gBACpC,OAAAgb,EAAA7kB,EAAA,GACKyI,EAAQqB,OAAM,QAEpB,IAAS3K,EAAI,EAAGA,EAAIukB,EAAaxkB,OAAQC,KAsBzC,IAlBM6kB,EAAajU,EAAOiU,YAAc,MAClCxd,EAAQuJ,EAAOvJ,OAAS,UACxBH,EAAQ0J,EAAO1J,OAAS,aAaxB4d,EAVW,CACf,WAAc,aACd,KAAQ,OACR,QAAW,UACX,OAAU,SACV,IAAO,MACP,WAAc,aACd,aAAgB,gBAGU5d,EAAMoP,gBAAkB,aAGpDyO,EAAA,EAAAC,EAA0BT,EAAYQ,EAAAC,EAAAjlB,OAAAglB,IACpC,GADS9E,EAAW+E,EAAAD,GACD,QAAfF,EAIF,IAAAI,EAAA,EAAAC,EAFoB,CAAC,UAAW,aAAc,WAAY,YAAa,iBAAkB,oBAErDD,EAAAC,EAAAnlB,OAAAklB,IAAE,CAA3BE,EAAUD,EAAAD,GACnB,KACQG,EAASnF,EAAYzG,OAAOmM,QAAQpgB,QAAQ4f,IAC3Cje,MAAQ4d,EACfM,EAAO/d,MAAQA,EACf+d,EAAOQ,OAAS,MAClB,CAAE,MAAOhnB,GACP,CAEJ,MACK,GAAmB,WAAfimB,EAAyB,CAElC,KACQQ,EAAUpF,EAAYzG,OAAOmM,QAAQpgB,QAAQ,mBAC3C2B,MAAQ4d,EAChBO,EAAQhe,MAAQA,EAChBge,EAAQO,OAAS,MACnB,CAAE,MAAOhnB,GACT,CAEA,KACQ0mB,EAAUrF,EAAYzG,OAAOmM,QAAQpgB,QAAQ,qBAC3C2B,MAAQ4d,EAChBQ,EAAQje,MAAQA,EAChBie,EAAQM,OAAS,MACnB,CAAE,MAAOhnB,GACT,CACF,MASQ2mB,EAPY,CAChB,IAAO,UACP,OAAU,aACV,KAAQ,WACR,MAAS,aAGkBV,EAAWvO,mBAEhC8O,EAASnF,EAAYzG,OAAOmM,QAAQpgB,QAAQggB,IAC3Cre,MAAQ4d,EACfM,EAAO/d,MAAQA,EACf+d,EAAOQ,OAAS,QAGrB,OAAAF,EAAA7kB,EAAA,GAEKyI,EAAQqB,OAAM,eAAA+a,EAAAjkB,EAAA,EAEb,CACLmL,SAAS,EACT7H,QAAS,qBACV,eAAA2gB,EAAAtlB,EAAA,GAAAqlB,EAAAC,EAAAlkB,EAAAkkB,EAAAjkB,EAAA,EAGM,CACLmL,SAAS,EACT9H,MAAO,sBAAFoK,OAAwBuW,EAAM1gB,WACpC,EAAAuf,EAAA,yBAEJlhB,MAAA,KAAAD,UAAA,UAKc0O,GAAegU,EAAAC,GAAA,OAAAC,GAAA3iB,MAAC,KAADD,UAAA,UAAA4iB,KA8G7B,OA9G6BA,GAAA7iB,EAAAX,IAAAhE,EAA9B,SAAAynB,EAA+B1c,EAASsH,GAAM,IAAArH,EAAAkJ,EAAAwT,EAAA5Z,EAAA6Z,EAAAC,EAAAha,EAAAia,EAAApmB,EAAAiU,EAAAoS,EAAAC,EAAAxc,EAAA2B,EAAA8a,EAAAC,EAAArb,EAAAsb,EAAA,OAAAlkB,IAAAC,EAAA,SAAAkkB,GAAA,cAAAA,EAAAtmB,EAAAsmB,EAAA7lB,GAAA,OACsB,GAA5D0I,EAAYD,EAAQgB,SAASC,WAAWC,qBAAoBkc,EAAAtmB,EAAA,EAG3DwQ,EAAO/G,MAAO,CAAF6c,EAAA7lB,EAAA,eAAA6lB,EAAAjlB,EAAA,EACR,CAAEmL,SAAS,EAAO9H,MAAO,gBAAe,OAMjD,GAFI2N,EAAe7B,EAAO/G,OAGtB,WAAW5J,KAAKwS,KAAiB,kBAAkBxS,KAAKwS,GAAa,CAAAiU,EAAA7lB,EAAA,QAE7B,GAApCiJ,EAAYP,EAAUoC,eACZ,CAAF+a,EAAA7lB,EAAA,eAAA6lB,EAAAjlB,EAAA,EACL,CAAEmL,SAAS,EAAO9H,MAAO,qBAAoB,OAGzB,OAA7BgF,EAAUY,KAAK,CAAC,aAAagc,EAAA7lB,EAAA,EACvByI,EAAQqB,OAAM,OAGd0B,EAAeoG,EAAawO,MAAM,KAAK,GAC7CxO,EAAe,GAAHvD,OAAM7C,EAAY,MAAA6C,OAAK7C,GAAY6C,OAAGpF,EAAUyB,UAAW,OAKK,OADxE2a,EAAa3c,EAAUoJ,SAASF,IAC3B/H,KAAK,CAAC,WAAY,WAAY,cAAe,SAAU,YAAYgc,EAAA7lB,EAAA,EACxEyI,EAAQqB,OAAM,UAIfub,EAAW/Z,OAAQ,CAAFua,EAAA7lB,EAAA,eAAA6lB,EAAAjlB,EAAA,EACb,CACLmL,SAAS,EACT9H,MAAO,uBACR,OAIGqhB,EAAY,GACZha,EAAS+Z,EAAW/Z,OAGtBia,GAAmB,EACdpmB,EAAImM,EAAOpM,OAAS,EAAC,YAAEC,GAAK,GAAC,CAAA0mB,EAAA7lB,EAAA,SACN,GAC1BoT,OADEA,EAAY9H,EAAOnM,GAAG,KACuC,KAAdiU,GAC1B,iBAAdA,GAA+C,KAArBA,EAAUxL,OAAc,CAAAie,EAAA7lB,EAAA,QACzC,OAApBulB,EAAkBpmB,EAAE0mB,EAAAjlB,EAAA,aAJgBzB,IAAG0mB,EAAA7lB,EAAA,oBASlB,IAArBulB,EAAsB,CAAAM,EAAA7lB,EAAA,gBAAA6lB,EAAAjlB,EAAA,EACjB,CACLmL,SAAS,EACT7H,QAAS,kBACV,QAIH,IAAS/E,EAAI,EAAGA,GAAKomB,EAAiBpmB,KAEhCiU,OADEA,EAAY9H,EAAOnM,GAAG,KACuC,KAAdiU,GAC3B,iBAAdA,GAA+C,KAArBA,EAAUxL,SAG9C0d,EAAUpb,KAAKmb,EAAW/a,SAAWnL,GAExC,GAGwB,IAArBmmB,EAAUpmB,OAAY,CAAA2mB,EAAA7lB,EAAA,gBAAA6lB,EAAAjlB,EAAA,EACjB,CACLmL,SAAS,EACT7H,QAAS,mBACV,QAQ6B,OAJhCohB,EAAU7L,KAAK,SAAC7Y,EAAGpB,GAAC,OAAKA,EAAIoB,CAAC,IAGxBqI,EAAYP,EAAUoC,gBAClBjB,KAAK,CAAC,gBAAgBgc,EAAA7lB,EAAA,GAC1ByI,EAAQqB,OAAM,QAEdc,EAAc3B,EAAU2B,aAAe,IAAG8a,EAAA,EAAAC,EAEzBL,EAAS,aAAAI,EAAAC,EAAAzmB,QAAA,CAAA2mB,EAAA7lB,EAAA,SAGoB,OAHzCsK,EAAQqb,EAAAD,GAEGhd,EAAUyM,kBAAkB7K,EAAU,EAAG,EAAGM,GACpDkb,OAAO3iB,MAAM4iB,qBAAqBC,IAAIH,EAAA7lB,EAAA,GAC5CyI,EAAQqB,OAAM,QAAA4b,IAAAG,EAAA7lB,EAAA,wBAAA6lB,EAAAjlB,EAAA,EAGf,CACLmL,SAAS,EACT7H,QAAS,GAAFmK,OAAKiX,EAAUpmB,OAAM,sBAC7B,eAAA2mB,EAAAtmB,EAAA,GAAAqmB,EAAAC,EAAAllB,EAAAklB,EAAAjlB,EAAA,EAGM,CACLmL,SAAS,EACT9H,MAAO,mBAAFoK,OAAqBuX,EAAM1hB,WACjC,EAAAihB,EAAA,mBAEJ5iB,MAAA,KAAAD,UAAA,UAEcmO,GAAawV,EAAAC,GAAA,OAAAC,GAAA5jB,MAAC,KAADD,UAAA,UAAA6jB,KAa3B,OAb2BA,GAAA9jB,EAAAX,IAAAhE,EAA5B,SAAA0oB,EAA6B3d,EAASsH,GAAM,IAAArH,EAAAM,EAAA,OAAAtH,IAAAC,EAAA,SAAA0kB,GAAA,cAAAA,EAAArmB,GAAA,OAKF,OAJlC0I,EAAYD,EAAQgB,SAASC,WAAWC,sBACxCX,EAAQ+G,EAAO/G,MAAQN,EAAUoJ,SAAS/B,EAAO/G,OAASN,EAAUoC,gBAGpEpC,UAAU4d,WAAW/jB,MAAMyG,GAAOqd,EAAArmB,EAAA,EAElCyI,EAAQqB,OAAM,cAAAuc,EAAAzlB,EAAA,EAEb,CACLmL,SAAS,EACT7H,QAAS,iBACV,EAAAkiB,EAAA,KACF7jB,MAAA,KAAAD,UAAA,UAEcoO,GAAa6V,EAAAC,GAAA,OAAAC,GAAAlkB,MAAC,KAADD,UAAA,UAAAmkB,KAoB3B,OApB2BA,GAAApkB,EAAAX,IAAAhE,EAA5B,SAAAgpB,EAA6Bje,EAASsH,GAAM,IAAArH,EAAAyZ,EAAA3F,EAAAmK,EAAA,OAAAjlB,IAAAC,EAAA,SAAAilB,GAAA,cAAAA,EAAA5mB,GAAA,OAYzC,OAXK0I,EAAYD,EAAQgB,SAASC,WAAWC,qBACxCwY,EAAOpS,EAAOoS,MAAQ,MACtB3F,EAAWzM,EAAOyM,UAAY,EAC9BmK,EAAQ5W,EAAO4W,OAAS,EAEjB,QAATxE,EACYzZ,EAAUyM,kBAAkBqH,EAAW,EAAG,EAAGmK,EAAO,GAC5DE,OAAO1jB,MAAM2jB,qBAAqBC,MAE1Bre,EAAUyM,kBAAkB,EAAGqH,EAAW,EAAG,EAAGmK,GACxDE,OAAO1jB,MAAM2jB,qBAAqBE,OACzCJ,EAAA5mB,EAAA,EAEKyI,EAAQqB,OAAM,cAAA8c,EAAAhmB,EAAA,EAEb,CACLmL,SAAS,EACT7H,QAAS,GAAFmK,OAAKsY,EAAK,OAAAtY,OAAe,QAAT8T,EAAiB,IAAM,IAAG,gBAClD,EAAAuE,EAAA,KACFnkB,MAAA,KAAAD,UAAA,UAEcqO,GAAasW,EAAAC,GAAA,OAAAC,GAAA5kB,MAAC,KAADD,UAAA,UAAA6kB,KA8G3B,OA9G2BA,GAAA9kB,EAAAX,IAAAhE,EAA5B,SAAA0pB,EAA6B3e,EAASsH,GAAM,IAAArH,EAAA8B,EAAArL,EAAAkoB,EAAAC,EAAAC,EAAAC,EAAA5c,EAAAF,EAAAyX,EAAA3F,EAAAmK,EAAAc,EAAA,OAAA/lB,IAAAC,EAAA,SAAA+lB,GAAA,cAAAA,EAAA1nB,GAAA,OAG1C,GAFM0I,EAAYD,EAAQgB,SAASC,WAAWC,sBAG1CoG,EAAOvD,WAAY,CAAFkb,EAAA1nB,EAAA,SAAAynB,EACX1X,EAAOvD,WAAUkb,EAAA1nB,EAClB,WADkBynB,EACV,EAsBR,QAtBQA,EAsBH,EAeL,YAfKA,EAeI,EA2BT,SA3BSA,EA2BH,sBA9DJ1X,EAAOxF,OAAQ,CAAFmd,EAAA1nB,EAAA,eAAA0nB,EAAA9mB,EAAA,EACT,CAAEmL,SAAS,EAAO9H,MAAO,mBAAkB,OAKpD,IADIuG,EAAc,EACTrL,EAAI,EAAGA,EAAI4Q,EAAOxF,OAAOrL,OAAQC,IACxCqL,EAA4B,GAAdA,GAAoBuF,EAAOxF,OAAOiL,WAAWrW,GAAK,IAKd,OAHpDqL,IAEoB9B,EAAUyM,kBAAkB,EAAG3K,EAAa,QAAS,GAC7Dsb,OAAO3iB,MAAM4iB,qBAAqB5J,MAAMuL,EAAA1nB,EAAA,EAC9CyI,EAAQqB,OAAM,cAAA4d,EAAA9mB,EAAA,EAEb,CACLmL,SAAS,EACT7H,QAAS,GAAFmK,OAAK0B,EAAOxF,OAAM,iBAC1B,UAIIwF,EAAO1F,IAAK,CAAFqd,EAAA1nB,EAAA,eAAA0nB,EAAA9mB,EAAA,EACN,CAAEmL,SAAS,EAAO9H,MAAO,mBAAkB,OAIL,OAD9ByE,EAAUyM,kBAAkBpF,EAAO1F,IAAM,EAAG,EAAG,EAAG,OAC1Dyb,OAAO3iB,MAAM4iB,qBAAqBC,IAAI0B,EAAA1nB,EAAA,EACzCyI,EAAQqB,OAAM,cAAA4d,EAAA9mB,EAAA,EAEb,CACLmL,SAAS,EACT7H,QAAS,GAAFmK,OAAK0B,EAAO1F,IAAG,iBACvB,UAII0F,EAAO4X,aAAgB5X,EAAO6X,UAAS,CAAAF,EAAA1nB,EAAA,eAAA0nB,EAAA9mB,EAAA,EACnC,CAAEmL,SAAS,EAAO9H,MAAO,sBAAqB,OAKvD,IADIojB,EAAa,EAAGC,EAAW,EACtBnoB,EAAI,EAAGA,EAAI4Q,EAAO4X,YAAYzoB,OAAQC,IAC7CkoB,EAA0B,GAAbA,GAAmBtX,EAAO4X,YAAYnS,WAAWrW,GAAK,IAErE,IAASA,EAAI,EAAGA,EAAI4Q,EAAO6X,UAAU1oB,OAAQC,IAC3CmoB,EAAsB,GAAXA,GAAiBvX,EAAO6X,UAAUpS,WAAWrW,GAAK,IAOV,OALrDkoB,IACAC,IAEM1c,EAAc0c,EAAWD,EAAa,EACvB3e,EAAUyM,kBAAkB,EAAGkS,EAAY,QAASzc,GAC5Dkb,OAAO3iB,MAAM4iB,qBAAqB5J,MAAMuL,EAAA1nB,EAAA,EAC/CyI,EAAQqB,OAAM,cAAA4d,EAAA9mB,EAAA,EAEb,CACLmL,SAAS,EACT7H,QAAS,GAAFmK,OAAK0B,EAAO4X,YAAW,KAAAtZ,OAAI0B,EAAO6X,UAAS,iBACnD,WAII7X,EAAO4E,UAAa5E,EAAO8X,OAAM,CAAAH,EAAA1nB,EAAA,gBAAA0nB,EAAA9mB,EAAA,EAC7B,CAAEmL,SAAS,EAAO9H,MAAO,sBAAqB,QAKP,OAF1CyG,EAAWqF,EAAO8X,OAAS9X,EAAO4E,SAAW,EACjCjM,EAAUyM,kBAAkBpF,EAAO4E,SAAW,EAAG,EAAGjK,EAAU,OACtEob,OAAO3iB,MAAM4iB,qBAAqBC,IAAI0B,EAAA1nB,EAAA,GAC1CyI,EAAQqB,OAAM,eAAA4d,EAAA9mB,EAAA,EAEb,CACLmL,SAAS,EACT7H,QAAS,GAAFmK,OAAK0B,EAAO4E,SAAQ,KAAAtG,OAAI0B,EAAO8X,OAAM,iBAC7C,eAAAH,EAAA9mB,EAAA,EAGM,CAAEmL,SAAS,EAAO9H,MAAO,qBAAoB,QAezD,OAVKke,EAAOpS,EAAOoS,MAAQ,MACtB3F,EAAWzM,EAAOyM,UAAY,EAC9BmK,EAAQ5W,EAAO4W,OAAS,EAEjB,QAATxE,EACYzZ,EAAUyM,kBAAkBqH,EAAW,EAAG,EAAGmK,EAAO,GAC5Db,OAAO3iB,MAAM4iB,qBAAqBC,IAE1Btd,EAAUyM,kBAAkB,EAAGqH,EAAW,EAAG,EAAGmK,GACxDb,OAAO3iB,MAAM4iB,qBAAqB5J,MACzCuL,EAAA1nB,EAAA,GAEKyI,EAAQqB,OAAM,eAAA4d,EAAA9mB,EAAA,EAEb,CACLmL,SAAS,EACT7H,QAAS,GAAFmK,OAAKsY,EAAK,OAAAtY,OAAe,QAAT8T,EAAiB,IAAM,IAAG,gBAClD,EAAAiF,EAAA,KACF7kB,MAAA,KAAAD,UAAA,UAEcsO,GAAckX,EAAAC,GAAA,OAAAC,GAAAzlB,MAAC,KAADD,UAAA,UAAA0lB,KAe5B,OAf4BA,GAAA3lB,EAAAX,IAAAhE,EAA7B,SAAAuqB,EAA8Bxf,EAASsH,GAAM,IAAArH,EAAAM,EAAA,OAAAtH,IAAAC,EAAA,SAAAumB,GAAA,cAAAA,EAAAloB,GAAA,OAEwD,GAD7F0I,EAAYD,EAAQgB,SAASC,WAAWC,qBACxCX,EAAQ+G,EAAO/G,MAAQN,EAAUoJ,SAAS/B,EAAO/G,OAASP,EAAQgB,SAASsI,mBAE5EhC,EAAO2H,QAAS,CAAFwQ,EAAAloB,EAAA,eAAAkoB,EAAAtnB,EAAA,EACV,CAAEmL,SAAS,EAAO9H,MAAO,gBAAe,OAGb,OAApC+E,EAAMqM,SAAW,CAAC,CAACtF,EAAO2H,UAAUwQ,EAAAloB,EAAA,EAC9ByI,EAAQqB,OAAM,cAAAoe,EAAAtnB,EAAA,EAEb,CACLmL,SAAS,EACT7H,QAAS,iBACV,EAAA+jB,EAAA,KACF1lB,MAAA,KAAAD,UAAA,UAEc2O,GAAuBkX,EAAAC,GAAA,OAAAC,GAAA9lB,MAAC,KAADD,UAAA,UAAA+lB,KAOrC,OAPqCA,GAAAhmB,EAAAX,IAAAhE,EAAtC,SAAA4qB,EAAuC7f,EAASsH,GAAM,OAAArO,IAAAC,EAAA,SAAA4mB,GAAA,cAAAA,EAAAvoB,EAAA,OAAAuoB,EAAA3nB,EAAA,EAG7C,CACLmL,SAAS,EACT9H,MAAO,qBACR,EAAAqkB,EAAA,KACF/lB,MAAA,KAAAD,UAAA,UAEc4O,GAAmBsX,EAAAC,GAAA,OAAAC,GAAAnmB,MAAC,KAADD,UAAA,CAkJlC,SAAAomB,KAFC,OAEDA,GAAArmB,EAAAX,IAAAhE,EAlJA,SAAAirB,EAAmClgB,EAASsH,GAAM,IAAArH,EAAAgb,EAAAlY,EAAAhB,EAAAvB,EAAAiC,EAAAlC,EAAA4f,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAtgB,EAAAzJ,EAAAgqB,EAAAC,EAAAC,EAAArF,EAAAsF,EAAAC,EAAAnK,EAAAoK,EAAAC,EAAA,OAAA/nB,IAAAC,EAAA,SAAA+nB,GAAA,cAAAA,EAAAnqB,EAAAmqB,EAAA1pB,GAAA,OAM9C,GALI0I,EAAYD,EAAQgB,SAASC,WAAWC,qBAAoB+f,EAAAnqB,EAAA,EAG5DmkB,EAAe,IAGf3T,EAAOsQ,aAAc,CAAFqJ,EAAA1pB,EAAA,QAOwB,OALvCwL,EAAeuE,EAAOsQ,aACtB7V,EAAcgB,EAAagK,WAAW,GAAK,IAG3CvM,EAAYP,EAAUyS,4BAClBtR,KAAK,CAAC,WAAY,iBAAiB6f,EAAA1pB,EAAA,EACvCyI,EAAQqB,OAAM,OAEfb,EAAUmS,cAOPpS,EAAQN,EAAUyM,kBAAkB,EAAG3K,EAAa,EAAG,GAC7DkZ,EAAaxZ,KAAKlB,KANZkC,EAAUjC,EAAUyB,SACpB1B,EAAQN,EAAUyM,kBAAkB,EAAG3K,EAAaU,EAAS,GACnEwY,EAAaxZ,KAAKlB,IAKnB0gB,EAAA1pB,EAAA,oBACQ+P,EAAO/G,MAAO,CAAF0gB,EAAA1pB,EAAA,YAEA,QAAjB+P,EAAO/G,OAAoC,OAAjB+G,EAAO/G,MAAc,CAAA0gB,EAAA1pB,EAAA,QAGlB,OADzBiJ,EAAYP,EAAUyS,4BAClBtR,KAAK,gBAAgB6f,EAAA1pB,EAAA,EACzByI,EAAQqB,OAAM,WAEhBb,EAAUmS,aAAc,CAAFsO,EAAA1pB,EAAA,eAAA0pB,EAAA9oB,EAAA,EACjB,CAAEmL,SAAS,EAAM7H,QAAS,mCAAkC,OAGI,OAAvE+E,EAAUY,KAAK,CAAC,WAAY,cAAe,WAAY,gBAAgB6f,EAAA1pB,EAAA,EACjEyI,EAAQqB,OAAM,OAGdgf,EAAezN,KAAKmF,IAAIvX,EAAUyB,SAAW,IAAK,SAClDqe,EAAe1N,KAAKmF,IAAIvX,EAAU2B,YAAc,GAAI,OAC1D8Y,EAAaxZ,KAAKxB,EAAUyM,kBAAkB,EAAG,EAAG2T,EAAcC,IAAe,OAAAW,EAAA1pB,EAAA,oBAE1E+P,EAAO/G,MAAMuM,MAAM,mBAAoB,CAAFmU,EAAA1pB,EAAA,SAEJ,GAApCiJ,EAAYP,EAAUoC,eACZ,CAAF4e,EAAA1pB,EAAA,eAAA0pB,EAAA9oB,EAAA,EACL,CAAEmL,SAAS,EAAO9H,MAAO,eAAc,OAGJ,OAA5CgF,EAAUY,KAAK,CAAC,WAAY,gBAAgB6f,EAAA1pB,EAAA,GACtCyI,EAAQqB,OAAM,QAGd0B,EAAeuE,EAAO/G,MAAMoX,MAAM,KAAK,GACvC5V,EAAcgB,EAAagK,WAAW,GAAK,GAGjDkO,EAAaxZ,KAAKxB,EAAUyM,kBAAkB,EAAG3K,EAAavB,EAAUyB,SAAU,IAAIgf,EAAA1pB,EAAA,iBAGtF0jB,EAAaxZ,KAAKxB,EAAUoJ,SAAS/B,EAAO/G,QAAQ,QAAA0gB,EAAA1pB,EAAA,iBAMR,OANQ0pB,EAAAnqB,EAAA,IAK9CqJ,EAAiBH,EAAQgB,SAASG,qBACzBC,KAAK,CAAC,QAAS,cAAc6f,EAAA1pB,EAAA,GACtCyI,EAAQqB,OAAM,QAEpB,GAAIlB,EAAemB,UAAY,EAE7B,IAAS5K,EAAI,EAAGA,EAAIyJ,EAAeoB,MAAMC,MAAM/K,OAAQC,IACrDukB,EAAaxZ,KAAKtB,EAAeoB,MAAMC,MAAM9K,SAI/CukB,EAAaxZ,KAAKzB,EAAQgB,SAASsI,oBACpC2X,EAAA1pB,EAAA,wBAAA0pB,EAAAnqB,EAAA,GAAAmqB,EAAA/oB,EAAA+oB,EAAA9oB,EAAA,EAEM,CAAEmL,SAAS,EAAO9H,MAAO,wCAAuC,QAK3E,IAAAklB,EAAA,EAAAC,EAAoB1F,EAAYyF,EAAAC,EAAAlqB,OAAAiqB,IAAhBC,EAAAD,GACRtf,KAAK,CAAC,UAAW,WAAY,gBACpC,OAAA6f,EAAA1pB,EAAA,GACKyI,EAAQqB,OAAM,QAEpB,IAAS3K,EAAI,EAAGA,EAAIukB,EAAaxkB,OAAQC,KAInC6kB,EAAajU,EAAOiU,YAAc,MAExCsF,EAAA,EAAAC,EAC0B7F,EAAY,aAAA4F,EAAAC,EAAArqB,QAAA,CAAAwqB,EAAA1pB,EAAA,SAAhB,GAAXof,EAAWmK,EAAAD,GACD,QAAftF,EAAoB,CAAA0F,EAAA1pB,EAAA,SAEtBof,EAAYzG,OAAOmM,QAAQpgB,QAAQvB,MAAMwmB,YAAYC,UAAUvjB,MAAQlD,MAAM0mB,gBAAgBC,KAC7F1K,EAAYzG,OAAOmM,QAAQpgB,QAAQvB,MAAMwmB,YAAYI,WAAW1jB,MAAQlD,MAAM0mB,gBAAgBC,KAC9F1K,EAAYzG,OAAOmM,QAAQpgB,QAAQvB,MAAMwmB,YAAYK,SAAS3jB,MAAQlD,MAAM0mB,gBAAgBC,KAC5F1K,EAAYzG,OAAOmM,QAAQpgB,QAAQvB,MAAMwmB,YAAYM,YAAY5jB,MAAQlD,MAAM0mB,gBAAgBC,KAC/F1K,EAAYzG,OAAOmM,QAAQpgB,QAAQvB,MAAMwmB,YAAYO,kBAAkB7jB,MAAQlD,MAAM0mB,gBAAgBC,KACrG1K,EAAYzG,OAAOmM,QAAQpgB,QAAQvB,MAAMwmB,YAAYQ,gBAAgB9jB,MAAQlD,MAAM0mB,gBAAgBC,KAAKJ,EAAA1pB,EAAA,iBAAAwpB,EAGhGxF,EAAU0F,EAAA1pB,EACX,UADWwpB,EACJ,GAGP,SAHOA,EAGD,GAGN,QAHMA,EAGD,GAGL,WAHKA,EAGG,oBARwF,OAAnGpK,EAAYzG,OAAOmM,QAAQpgB,QAAQvB,MAAMwmB,YAAYI,WAAW1jB,MAAQlD,MAAM0mB,gBAAgBC,KAAKJ,EAAA9oB,EAAA,cAGD,OAAlGwe,EAAYzG,OAAOmM,QAAQpgB,QAAQvB,MAAMwmB,YAAYC,UAAUvjB,MAAQlD,MAAM0mB,gBAAgBC,KAAKJ,EAAA9oB,EAAA,cAGD,OAAjGwe,EAAYzG,OAAOmM,QAAQpgB,QAAQvB,MAAMwmB,YAAYK,SAAS3jB,MAAQlD,MAAM0mB,gBAAgBC,KAAKJ,EAAA9oB,EAAA,cAGG,OAApGwe,EAAYzG,OAAOmM,QAAQpgB,QAAQvB,MAAMwmB,YAAYM,YAAY5jB,MAAQlD,MAAM0mB,gBAAgBC,KAAKJ,EAAA9oB,EAAA,qBAAA8oB,EAAA9oB,EAAA,EAG7F,CAAEmL,SAAS,EAAO9H,MAAO,kBAAFoK,OAAoB2V,KAAc,QAAAsF,IAAAI,EAAA1pB,EAAA,wBAAA0pB,EAAA1pB,EAAA,GAKlEyI,EAAQqB,OAAM,eAAA4f,EAAA9oB,EAAA,EAEb,CACLmL,SAAS,EACT7H,QAAS,GAAFmK,OAAoB,QAAf2V,EAAuB,KAAOA,EAAU,oBACrD,eAAA0F,EAAAnqB,EAAA,GAAAkqB,EAAAC,EAAA/oB,EAAA+oB,EAAA9oB,EAAA,EAGM,CACLmL,SAAS,EACT9H,MAAO,mBAAFoK,OAAqBob,EAAMvlB,WACjC,EAAAykB,EAAA,2BAEJpmB,MAAA,KAAAD,UAAA,UAGc8O,GAAwBgZ,GAAA,OAAAC,GAAA9nB,MAAC,KAADD,UAAA,CAmFvC,SAAA+nB,KAFC,OAEDA,GAAAhoB,EAAAX,IAAAhE,EAnFA,SAAA4sB,EAAwCva,GAAM,IAAAwa,EAAA,OAAA7oB,IAAAC,EAAA,SAAA6oB,GAAA,cAAAA,EAAAjrB,EAAAirB,EAAAxqB,GAAA,cAAAwqB,EAAAjrB,EAAA,EAAAirB,EAAAxqB,EAAA,EAE7BmD,MAAMmF,IAAG,eAAAmiB,EAAApoB,EAAAX,IAAAhE,EAAC,SAAAgtB,EAAOjiB,GAAO,IAAAC,EAAAM,EAAA6D,EAAArC,EAAAY,EAAAI,EAAAuH,EAAA5T,EAAA+B,EAAAwW,EAAA1E,EAAA2X,EAAA,OAAAjpB,IAAAC,EAAA,SAAAipB,GAAA,cAAAA,EAAA5qB,GAAA,OAIG,GAHhC0I,EAAYD,EAAQgB,SAASC,WAAWC,qBAGxCX,EAAQN,EAAUoC,eACZ,CAAF8f,EAAA5qB,EAAA,eAAA4qB,EAAAhqB,EAAA,EACD,CAAEmL,SAAS,EAAO9H,MAAO,mBAAkB,OAGF,OAAlD+E,EAAMa,KAAK,CAAC,SAAU,WAAY,gBAAgB+gB,EAAA5qB,EAAA,EAC5CyI,EAAQqB,OAAM,UAEfd,EAAMsC,UAAUtC,EAAM0B,SAAW,GAAC,CAAAkgB,EAAA5qB,EAAA,eAAA4qB,EAAAhqB,EAAA,EAC9B,CAAEmL,SAAS,EAAO9H,MAAO,mBAAkB,OAMpD,GAHM4I,EAAakD,EAAOsQ,aACtB7V,GAAe,GAGf,YAAYpL,KAAKyN,GAAa,CAAF+d,EAAA5qB,EAAA,QAE9BwK,EAAcqC,EAAW/N,cAAc0W,WAAW,GAAK,GAAGoV,EAAA5qB,EAAA,eAMxD,GAHIoL,EAAUpC,EAAMsC,OAAO,IAKR,KAJrBd,EAAcY,EAAQyf,UAAU,SAAAC,GAAM,OACpCA,GAAUA,EAAOnf,WAAW8J,gBAAkB5I,EAAW4I,aAAa,IAGlD,CAAAmV,EAAA5qB,EAAA,eAAA4qB,EAAAhqB,EAAA,EACb,CAAEmL,SAAS,EAAO9H,MAAO,MAAFoK,OAAQxB,EAAU,mBAAiB,YAIjErC,GAAexB,EAAM4B,aAAW,CAAAggB,EAAA5qB,EAAA,eAAA4qB,EAAAhqB,EAAA,EAC3B,CAAEmL,SAAS,EAAO9H,MAAO,uBAAsB,OAQxD,IAJMuH,EAAe2V,OAAOS,aAAa,GAAKpX,GAG1CuI,EAAc,EACT5T,EAAI,EAAGA,EAAI6J,EAAM0B,SAAUvL,IAE9B+B,OADEA,EAAQ8H,EAAMsC,OAAOnM,GAAGqL,KACyB,KAAVtJ,GAAiB6pB,MAAM7pB,KAClE6R,EAAc5T,EAAI,GAErB,KAEG4T,GAAe,GAAC,CAAA6X,EAAA5qB,EAAA,eAAA4qB,EAAAhqB,EAAA,EACX,CAAEmL,SAAS,EAAO9H,MAAO,sBAAqB,OAYpB,OAR7ByT,EAAU,YAAHrJ,OAAe7C,EAAY,MAAA6C,OAAK7C,GAAY6C,OAAG0E,EAAW,KAGjEC,EAAYD,EAAc,EAC1B4X,EAAoB,GAAHtc,OAAM7C,GAAY6C,OAAG2E,GAGxBtK,EAAUoJ,SAAS6Y,GAC3BtV,SAAW,CAAC,CAACqC,IAAUkT,EAAA5qB,EAAA,EAE7ByI,EAAQqB,OAAM,cAAA8gB,EAAAhqB,EAAA,EAEb,CACLmL,SAAS,EACT7H,QAAS,GAAFmK,OAAK7C,EAAY,aAAA6C,OAAYsc,EAAiB,gBACtD,EAAAD,EAAA,IACF,gBAAAM,GAAA,OAAAP,EAAAloB,MAAA,KAAAD,UAAA,EAxEqB,IAwEpB,cAAAkoB,EAAA5pB,EAAA,EAAA4pB,EAAA7pB,GAAA,cAAA6pB,EAAAjrB,EAAA,EAAAgrB,EAAAC,EAAA7pB,EAAA6pB,EAAA5pB,EAAA,EAEK,CACLmL,SAAS,EACT9H,MAAO,iBAAFoK,OAAmBkc,EAAMrmB,SAAWqmB,EAAM5e,cAChD,EAAA2e,EAAA,iBAEJD,GAAA9nB,MAAA,KAAAD,UAAA,UAGc+O,GAAe4Z,GAAA,OAAAC,GAAA3oB,MAAC,KAADD,UAAA,CA+E9B,SAAA4oB,KAFC,OAEDA,GAAA7oB,EAAAX,IAAAhE,EA/EA,SAAAytB,EAA+Bpb,GAAM,IAAAqb,EAAA,OAAA1pB,IAAAC,EAAA,SAAA0pB,GAAA,cAAAA,EAAA9rB,EAAA8rB,EAAArrB,GAAA,cAAAqrB,EAAA9rB,EAAA,EAAA8rB,EAAArrB,EAAA,EAEpBmD,MAAMmF,IAAG,eAAAgjB,EAAAjpB,EAAAX,IAAAhE,EAAC,SAAA6tB,EAAO9iB,GAAO,IAAAC,EAAAM,EAAA6D,EAAArC,EAAAY,EAAAI,EAAAuH,EAAA5T,EAAA+B,EAAAwW,EAAA1E,EAAA2X,EAAA,OAAAjpB,IAAAC,EAAA,SAAA6pB,GAAA,cAAAA,EAAAxrB,GAAA,OAIG,GAHhC0I,EAAYD,EAAQgB,SAASC,WAAWC,qBAGxCX,EAAQN,EAAUoC,eACZ,CAAF0gB,EAAAxrB,EAAA,eAAAwrB,EAAA5qB,EAAA,EACD,CAAEmL,SAAS,EAAO9H,MAAO,mBAAkB,OAGF,OAAlD+E,EAAMa,KAAK,CAAC,SAAU,WAAY,gBAAgB2hB,EAAAxrB,EAAA,EAC5CyI,EAAQqB,OAAM,UAEfd,EAAMsC,UAAUtC,EAAM0B,SAAW,GAAC,CAAA8gB,EAAAxrB,EAAA,eAAAwrB,EAAA5qB,EAAA,EAC9B,CAAEmL,SAAS,EAAO9H,MAAO,mBAAkB,OAMtD,GAHM4I,EAAakD,EAAOsQ,aACtB7V,GAAe,GAGf,YAAYpL,KAAKyN,GAAa,CAAF2e,EAAAxrB,EAAA,QAE9BwK,EAAcqC,EAAW/N,cAAc0W,WAAW,GAAK,GAAGgW,EAAAxrB,EAAA,eAMxD,GAHIoL,EAAUpC,EAAMsC,OAAO,IAKR,KAJrBd,EAAcY,EAAQyf,UAAU,SAAAC,GAAM,OACpCA,GAAUA,EAAOnf,WAAW8J,gBAAkB5I,EAAW4I,aAAa,IAGlD,CAAA+V,EAAAxrB,EAAA,eAAAwrB,EAAA5qB,EAAA,EACb,CAAEmL,SAAS,EAAO9H,MAAO,MAAFoK,OAAQxB,EAAU,mBAAiB,OASrE,IAJMrB,EAAe2V,OAAOS,aAAa,GAAKpX,GAG1CuI,EAAc,EACT5T,EAAI,EAAGA,EAAI6J,EAAM0B,SAAUvL,IAE9B+B,OADEA,EAAQ8H,EAAMsC,OAAOnM,GAAGqL,KACyB,KAAVtJ,GAAiB6pB,MAAM7pB,KAClE6R,EAAc5T,EAAI,GAErB,KAEG4T,GAAe,GAAC,CAAAyY,EAAAxrB,EAAA,eAAAwrB,EAAA5qB,EAAA,EACX,CAAEmL,SAAS,EAAO9H,MAAO,sBAAqB,OAYpB,OAR7ByT,EAAU,QAAHrJ,OAAW7C,EAAY,MAAA6C,OAAK7C,GAAY6C,OAAG0E,EAAW,KAG7DC,EAAYD,EAAc,EAC1B4X,EAAoB,GAAHtc,OAAM7C,GAAY6C,OAAG2E,GAGxBtK,EAAUoJ,SAAS6Y,GAC3BtV,SAAW,CAAC,CAACqC,IAAU8T,EAAAxrB,EAAA,EAE7ByI,EAAQqB,OAAM,cAAA0hB,EAAA5qB,EAAA,EAEb,CACLmL,SAAS,EACT7H,QAAS,GAAFmK,OAAK7C,EAAY,YAAA6C,OAAWsc,EAAiB,gBACrD,EAAAY,EAAA,IACF,gBAAAE,GAAA,OAAAH,EAAA/oB,MAAA,KAAAD,UAAA,EApEuB,IAoEtB,cAAA+oB,EAAAzqB,EAAA,EAAAyqB,EAAA1qB,GAAA,cAAA0qB,EAAA9rB,EAAA,EAAA6rB,EAAAC,EAAA1qB,EAAA0qB,EAAAzqB,EAAA,EAEO,CACLmL,SAAS,EACT9H,MAAO,gBAAFoK,OAAkB+c,EAAMlnB,SAAWknB,EAAMzf,cAC/C,EAAAwf,EAAA,iBAEJD,GAAA3oB,MAAA,KAAAD,UAAA,UAGcgP,GAAuBoa,GAAA,OAAAC,GAAAppB,MAAC,KAADD,UAAA,CAkGtC,SAAAqpB,KAFC,OAEDA,GAAAtpB,EAAAX,IAAAhE,EAlGA,SAAAkuB,EAAuC7b,GAAM,IAAA8b,EAAA,OAAAnqB,IAAAC,EAAA,SAAAmqB,GAAA,cAAAA,EAAAvsB,EAAAusB,EAAA9rB,GAAA,cAAA8rB,EAAAvsB,EAAA,EAAAusB,EAAA9rB,EAAA,EAE5BmD,MAAMmF,IAAG,eAAAyjB,EAAA1pB,EAAAX,IAAAhE,EAAC,SAAAsuB,EAAOvjB,GAAO,IAAAC,EAAAM,EAAA6D,EAAArC,EAAAY,EAAAI,EAAAygB,EAAAC,EAAAC,EAAAhtB,EAAA+B,EAAAkrB,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAA9qB,IAAAC,EAAA,SAAA8qB,GAAA,cAAAA,EAAAzsB,GAAA,OAIG,GAHhC0I,EAAYD,EAAQgB,SAASC,WAAWC,qBAGxCX,EAAQN,EAAUoC,eACZ,CAAF2hB,EAAAzsB,EAAA,eAAAysB,EAAA7rB,EAAA,EACD,CAAEmL,SAAS,EAAO9H,MAAO,mBAAkB,OAGF,OAAlD+E,EAAMa,KAAK,CAAC,SAAU,WAAY,gBAAgB4iB,EAAAzsB,EAAA,EAC5CyI,EAAQqB,OAAM,UAEfd,EAAMsC,UAAUtC,EAAM0B,SAAW,GAAC,CAAA+hB,EAAAzsB,EAAA,eAAAysB,EAAA7rB,EAAA,EAC9B,CAAEmL,SAAS,EAAO9H,MAAO,mBAAkB,OAMtD,GAHM4I,EAAakD,EAAOsQ,aACtB7V,GAAe,GAGf,YAAYpL,KAAKyN,GAAa,CAAF4f,EAAAzsB,EAAA,QAE4B,MAA1DwK,EAAcqC,EAAW/N,cAAc0W,WAAW,GAAK,KAEpCxM,EAAM4B,aAAW,CAAA6hB,EAAAzsB,EAAA,eAAAysB,EAAA7rB,EAAA,EAC3B,CAAEmL,SAAS,EAAO9H,MAAO,MAAFoK,OAAQxB,EAAU,mBAAiB,OAAA4f,EAAAzsB,EAAA,eAOjE,GAHIoL,EAAUpC,EAAMsC,OAAO,IAKR,KAJrBd,EAAcY,EAAQyf,UAAU,SAAAC,GAAM,OACpCA,GAAUA,EAAOnf,WAAW8J,gBAAkB5I,EAAW4I,aAAa,IAGlD,CAAAgX,EAAAzsB,EAAA,eAAAysB,EAAA7rB,EAAA,EACb,CAAEmL,SAAS,EAAO9H,MAAO,MAAFoK,OAAQxB,EAAU,mBAAiB,OAgBrE,IAXMrB,EAAe2V,OAAOS,aAAa,GAAKpX,GAGxCyhB,EAAO,IAAIS,IAEbP,EAAe,GADbD,EAAa,IAIRhiB,KAAK,CAAClB,EAAMsC,OAAO,GAAGd,KAGxBrL,EAAI,EAAGA,EAAI6J,EAAM0B,SAAUvL,IAE9B+B,OADEA,EAAQ8H,EAAMsC,OAAOnM,GAAGqL,KACyB,KAAVtJ,IACrCkrB,EAAWjL,OAAOjgB,GACnB+qB,EAAKU,IAAIP,GAIZD,KAHAF,EAAK/kB,IAAIklB,GACTF,EAAWhiB,KAAK,CAAChJ,MAavB,IAJMmrB,EAAc3jB,EAAUoJ,SAAS,GAADzD,OAAI7C,EAAY,MAAA6C,OAAK7C,GAAY6C,OAAGrF,EAAM0B,WAG1E4hB,EAAc,GACXntB,EAAI,EAAGA,EAAI+sB,EAAWhtB,OAAQC,IACrCmtB,EAAYpiB,KAAKgiB,EAAW/sB,IAG9B,IAASA,EAAI+sB,EAAWhtB,OAAQC,EAAI6J,EAAM0B,SAAUvL,IAClDmtB,EAAYpiB,KAAK,CAAC,KAIa,OAAjCmiB,EAAY/gB,OAASghB,EAAYG,EAAAzsB,EAAA,EAE3ByI,EAAQqB,OAAM,cAAA2iB,EAAA7rB,EAAA,EAEb,CACLmL,SAAS,EACT7H,QAAS,GAAFmK,OAAK7C,EAAY,QAAA6C,OAAO8d,EAAY,sBAC5C,EAAAH,EAAA,IACF,gBAAAY,GAAA,OAAAb,EAAAxpB,MAAA,KAAAD,UAAA,EAvFuB,IAuFtB,cAAAwpB,EAAAlrB,EAAA,EAAAkrB,EAAAnrB,GAAA,cAAAmrB,EAAAvsB,EAAA,EAAAssB,EAAAC,EAAAnrB,EAAAmrB,EAAAlrB,EAAA,EAEO,CACLmL,SAAS,EACT9H,MAAO,gBAAFoK,OAAkBwd,EAAM3nB,SAAW2nB,EAAMlgB,cAC/C,EAAAigB,EAAA,iBAEJD,GAAAppB,MAAA,KAAAD,UAAA,UAGciP,GAAwBsb,EAAAC,GAAA,OAAAC,GAAAxqB,MAAC,KAADD,UAAA,CAgNvC,SAAAyqB,KAFC,OAEDA,GAAA1qB,EAAAX,IAAAhE,EAhNA,SAAAsvB,EAAwCvkB,EAASsH,GAAM,IAAArH,EAAAM,EAAA8K,EAAAmZ,EAAA7gB,EAAAZ,EAAAhB,EAAA0iB,EAAAC,EAAAhuB,EAAAiuB,EAAAC,EAAAC,EAAAC,EAAAC,EAAApiB,EAAAqiB,EAAAC,EAAArjB,EAAAsjB,EAAAvZ,EAAAwZ,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAA1sB,IAAAC,EAAA,SAAA0sB,GAAA,cAAAA,EAAA9uB,EAAA8uB,EAAAruB,GAAA,OAKb,GALaquB,EAAA9uB,EAAA,EAE7CmJ,EAAYD,EAAQgB,SAASC,WAAWC,qBAGxCX,EAAQN,EAAUoC,eACZ,CAAFujB,EAAAruB,EAAA,eAAAquB,EAAAztB,EAAA,EACD,CAAEmL,SAAS,EAAO9H,MAAO,eAAc,OAG6B,OAA7E+E,EAAMa,KAAK,CAAC,SAAU,WAAY,cAAe,cAAe,aAAawkB,EAAAruB,EAAA,EACvEyI,EAAQqB,OAAM,WAGhBiG,EAAOue,qBAAsBve,EAAOwe,mBAAkB,CAAAF,EAAAruB,EAAA,eAAAquB,EAAAruB,EAAA,EAC3CwuB,GAA0B/lB,EAASC,EAAWqH,EAAQ/G,GAAM,cAAAqlB,EAAAztB,EAAA,EAAAytB,EAAA1tB,GAAA,OAO3E,GAHImT,EAAa/D,EAAO+D,WACpBmZ,EAAkBld,EAAO2H,QAGC,aAA1B3H,EAAO0e,eAA6B,CAAAJ,EAAAruB,EAAA,QAgBtC,IAdMoM,EAAc2D,EAAO3D,YACvBZ,EAAe,IACfhB,EAAc,EAEd4B,IACI8gB,EAAc9gB,EAAYmJ,MAAM,gBAEpC/J,EAAe0hB,EAAY,GAC3B1iB,EAAcgB,EAAagK,WAAW,GAAK,IAK3C2X,EAAgB,EACXhuB,EAAI,EAAGA,EAAI6J,EAAM0B,SAAUvL,IACG,OAAjC6J,EAAMsC,OAAOnM,GAAGqL,SACiBlN,IAAjC0L,EAAMsC,OAAOnM,GAAGqL,IACiB,KAAjCxB,EAAMsC,OAAOnM,GAAGqL,KAClB2iB,EAAgBhuB,EAAI,GAIxB2U,EAAa,GAAHzF,OAAM7C,GAAY6C,OAAG8e,EAAgB,GAG3Cpd,EAAO2H,SAAW3H,EAAO3D,aAAe2D,EAAO3D,YAAYmJ,MAAM,qBAG7D6X,EAAaD,IADE,IAUnBF,GALAA,EAAkBld,EAAO2H,QAAQpY,QAC/B,IAAIovB,OAAO,GAADrgB,OAAI7C,EAAY,KAAA6C,OAAI7C,GAAgB,KAAI,GAAA6C,OAC/C7C,GAAY6C,OAPE,EAOa,KAAAA,OAAI7C,GAAY6C,OAAG+e,KAGjB9tB,QAChC,IAAIovB,OAAO,GAADrgB,OAAI7C,EAAY,MAAA6C,OAAK7C,EAAY,WAAW,KAAI,GAAA6C,OACvD7C,GAAY6C,OAZE,EAYa,KAAAA,OAAI7C,GAAY6C,OAAG+e,KAGtDiB,EAAAruB,EAAA,kBAEkC,gBAA1B+P,EAAO0e,eAAgC,CAAAJ,EAAAruB,EAAA,QAE1CqtB,EAAgBlM,OAAOS,aAAa,GAAK5Y,EAAM4B,aACrDkJ,EAAa,GAAHzF,OAAMgf,EAAa,KAAKgB,EAAAruB,EAAA,kBAEH,SAAtB+P,EAAO+D,WAAqB,CAAAua,EAAAruB,EAAA,QAGkC,OADjEstB,EAAY7kB,EAAQgB,SAASsI,oBACzBlI,KAAK,CAAC,cAAe,WAAY,cAAe,aAAawkB,EAAAruB,EAAA,EACjEyI,EAAQqB,OAAM,OAEU,IAA1BwjB,EAAU1iB,aAENY,EAAe2V,OAAOS,aAAa,GAAK0L,EAAU9iB,aACxDsJ,EAAa,GAAHzF,OAAM7C,GAAY6C,OAAGrF,EAAM0B,SAAW,KAG1C2iB,EAAgBlM,OAAOS,aAAa,GAAK5Y,EAAM4B,aACrDkJ,EAAa,GAAHzF,OAAMgf,GAAahf,OAAGif,EAAUhjB,SAAW,IACtD,OASH,GALKwJ,GAA6B,SAAfA,IAEjBA,EAAa,IAAHzF,OAAOrF,EAAM0B,SAAW,KAIhCuiB,IAAmBA,EAAgBrpB,SAAS,KAAI,CAAAyqB,EAAAruB,EAAA,SAE5CoL,EAAUpC,EAAMsC,OAAO,GACvBqjB,EAAe,EACjBvB,EAAapkB,EAAM0B,SAGdL,EAAMrB,EAAM0B,SAAW,EAAC,YAAEL,GAAO,GAAC,CAAAgkB,EAAAruB,EAAA,SACrC2tB,GAAU,EACLvZ,EAAM,EAAC,aAAEA,EAAMpL,EAAM4B,aAAW,CAAAyjB,EAAAruB,EAAA,YACR,OAA3BgJ,EAAMsC,OAAOjB,GAAK+J,SACS9W,IAA3B0L,EAAMsC,OAAOjB,GAAK+J,IACS,KAA3BpL,EAAMsC,OAAOjB,GAAK+J,GAAW,CAAAia,EAAAruB,EAAA,SAChB,OAAf2tB,GAAU,EAAKU,EAAAztB,EAAA,cAJwBwT,IAAKia,EAAAruB,EAAA,qBAQ5C2tB,EAAS,CAAFU,EAAAruB,EAAA,SACa,OAAtBotB,EAAa/iB,EAAM,EAAGgkB,EAAAztB,EAAA,cAXmByJ,IAAKgkB,EAAAruB,EAAA,gBAuClD,IAvBAoL,EAAQ3F,QAAQ,SAACqlB,EAAQ8D,GACvB,GAAI9D,EAAQ,CACV,IAAMtf,EAAe2V,OAAOS,aAAa,GAAKgN,GACxCC,EAAY1N,OAAO2J,GAWzBmC,GAPAA,EAAkBA,EAAgB3tB,QAChC,IAAIovB,OAAO,MAADrgB,OAAOwgB,EAAS,KAAAxgB,OAAIwgB,EAAS,OAAO,KAAI,GAAAxgB,OAC/C7C,GAAY6C,OAAGsgB,EAAY,KAAAtgB,OAAI7C,GAAY6C,OAAG+e,KAKjB9tB,QAChC,IAAIovB,OAAO,MAADrgB,OAAOwgB,EAAS,YAAY,KAAI,GAAAxgB,OACvC7C,GAAY6C,OAAGsgB,EAAY,KAAAtgB,OAAI7C,GAAY6C,OAAG+e,GAErD,CACF,GAISjuB,EAAI,EAAGA,EAAI,GAAIA,IAChBqM,EAAe2V,OAAOS,aAAa,GAAKziB,GAC9C8tB,EAAkBA,EAAgB3tB,QAChC,IAAIovB,OAAO,MAADrgB,OAAO7C,EAAY,KAAA6C,OAAI7C,EAAY,OAAO,KAAI,GAAA6C,OACrD7C,GAAY6C,OAAGsgB,EAAY,KAAAtgB,OAAI7C,GAAY6C,OAAG+e,IAKrD,IAASjuB,EAAI,EAAGA,EAAI,GAAIA,IAChBqM,EAAe2V,OAAOS,aAAa,GAAKziB,GAE9C8tB,EAAkBA,EAAgB3tB,QAChC,IAAIovB,OAAO,MAADrgB,OAAO7C,EAAY,MAAA6C,OAAK7C,EAAY,cAAc,KAAI,GAAA6C,OAC7D7C,GAAY6C,OAAGsgB,EAAY,KAAAtgB,OAAI7C,GAAY6C,OAAG+e,IAEpD,YAICrd,EAAO+e,mBAAoBzf,MAAMC,QAAQS,EAAO+e,kBAAiB,CAAAT,EAAAruB,EAAA,SAAAguB,EAAAze,EACzCQ,EAAO+e,kBAAgB,IAAjD,IAAAd,EAAAxe,MAAAye,EAAAD,EAAAhuB,KAAAiB,MAAWitB,EAAWD,EAAA/sB,MACAwH,EAAUoJ,SAASoc,EAAYnO,MACvC1K,SAAW,CAAC,CAAC6Y,EAAYxW,SACtC,OAAA6D,GAAAyS,EAAAjwB,EAAAwd,EAAA,SAAAyS,EAAAxtB,GAAA,QAAA6tB,EAAAruB,EAAA,GACKyI,EAAQqB,OAAM,eAAAukB,EAAAztB,EAAA,EACb,CACLmL,SAAS,EACT7H,QAAS,GAAFmK,OAAK0B,EAAO+e,iBAAiB5vB,OAAM,qBAC3C,YAIC4U,IAAcmZ,EAAe,CAAAoB,EAAAruB,EAAA,SAQ9B,OAPKof,EAAc1W,EAAUoJ,SAASgC,GAGlCmZ,EAAgB8B,WAAW,KAG9B3P,EAAY/J,SAAW,CAAC,CAAC4X,IAFzB7N,EAAY9T,OAAS,CAAC,CAAC2hB,IAGxBoB,EAAAruB,EAAA,GAEKyI,EAAQqB,OAAM,eAAAukB,EAAAztB,EAAA,EAEb,CACLmL,SAAS,EACT7H,QAAS6L,EAAOif,aAAe,OAAJ3gB,OAAWyF,EAAU,eAAAzF,OAAc4e,KAC/D,eAAAoB,EAAAztB,EAAA,EAGI,CACLmL,SAAS,EACT9H,MAAO,oBACR,eAAAoqB,EAAA9uB,EAAA,GAAA6uB,EAAAC,EAAA1tB,EAAA0tB,EAAAztB,EAAA,EAGM,CACLmL,SAAS,EACT9H,MAAO,eAAFoK,OAAiB+f,EAAMlqB,SAAWkqB,EAAMziB,cAC9C,EAAAqhB,EAAA,mBAEJzqB,MAAA,KAAAD,UAAA,UAGcksB,GAAyBS,EAAAC,EAAAC,EAAAC,GAAA,OAAAC,GAAA9sB,MAAC,KAADD,UAAA,UAAA+sB,KAoEvC,OApEuCA,GAAAhtB,EAAAX,IAAAhE,EAAxC,SAAA4xB,EAAyC7mB,EAASC,EAAWqH,EAAQ/G,GAAK,IAAAoD,EAAA8gB,EAAA1hB,EAAAhB,EAAA+kB,EAAAzE,EAAA3rB,EAAAqwB,EAAAC,EAAAC,EAAAC,EAAA,OAAAjuB,IAAAC,EAAA,SAAAiuB,GAAA,cAAAA,EAAArwB,EAAAqwB,EAAA5vB,GAAA,OAEhC,GAFgC4vB,EAAArwB,EAAA,EAEhE6M,EAAc2D,EAAO3D,YACT,CAAFwjB,EAAA5vB,EAAA,eAAA4vB,EAAAhvB,EAAA,EACP,CAAEmL,SAAS,EAAO9H,MAAO,wBAAuB,OAIP,GAA5CipB,EAAc9gB,EAAYmJ,MAAM,aACpB,CAAFqa,EAAA5vB,EAAA,eAAA4vB,EAAAhvB,EAAA,EACP,CAAEmL,SAAS,EAAO9H,MAAO,oBAAmB,OAIF,GAD7CuH,EAAe0hB,EAAY,MAC3B1iB,EAAcgB,EAAagK,WAAW,GAAK,KAE9BxM,EAAM4B,aAAW,CAAAglB,EAAA5vB,EAAA,eAAA4vB,EAAAhvB,EAAA,EAC3B,CAAEmL,SAAS,EAAO9H,MAAO,KAAFoK,OAAO7C,EAAY,kBAAgB,OAI7D+jB,EAAkB,GAClBzE,EAAS9hB,EAAMsC,OAAO,GAAGd,GAC/B+kB,EAAgBrlB,KAAK,CAAC4gB,IAEb3rB,EAAI,EAAC,YAAEA,EAAI6J,EAAM0B,UAAQ,CAAAklB,EAAA5vB,EAAA,SACkB,GAC9CwvB,OADEA,EAAgBxmB,EAAMsC,OAAOnM,GAAGqL,KACyC,KAAlBglB,EAAoB,CAAAI,EAAA5vB,EAAA,QAC3EyvB,OAAQ,EAAAC,EAEJ3f,EAAOwe,mBAAkBqB,EAAA5vB,EAC1B,WAD0B0vB,GAE1B,WADQA,GAER,SADQA,EADA,EAEF,eAMR,OAHCD,EAD2B,iBAAlBD,EACEnU,KAAKwG,MAAsB,IAAhBxG,KAAKwU,UAEhB,GAAHxhB,OAAM0B,EAAOwe,mBAAkB,KAAAlgB,OAAIlP,GAC5CywB,EAAAhvB,EAAA,YAGD6uB,EAAWD,EAAc,OAG7BD,EAAgBrlB,KAAK,CAACulB,IAAWG,EAAA5vB,EAAA,eAEjCuvB,EAAgBrlB,KAAK,CAAC,KAAK,OAtBK/K,IAAGywB,EAAA5vB,EAAA,gBA4BF,OADjB0I,EAAUoJ,SAAS,GAADzD,OAAI7C,EAAY,MAAA6C,OAAK7C,GAAY6C,OAAGrF,EAAM0B,WACpEY,OAASikB,EAAgBK,EAAA5vB,EAAA,GAE/ByI,EAAQqB,OAAM,eAAA8lB,EAAAhvB,EAAA,EAEb,CACLmL,SAAS,EACT7H,QAAS,GAAFmK,OAAK7C,EAAY,OAAA6C,OAAM0B,EAAOwe,mBAAkB,oBACxD,eAAAqB,EAAArwB,EAAA,GAAAowB,EAAAC,EAAAjvB,EAAAivB,EAAAhvB,EAAA,EAGM,CACLmL,SAAS,EACT9H,MAAO,gBAAFoK,OAAkBshB,EAAMzrB,SAAWyrB,EAAMhkB,cAC/C,EAAA2jB,EAAA,mBAEJ/sB,MAAA,KAAAD,UAAA,C","sources":["webpack://worksai-excel-addon/webpack/bootstrap","webpack://worksai-excel-addon/webpack/runtime/global","webpack://worksai-excel-addon/webpack/runtime/hasOwnProperty shorthand","webpack://worksai-excel-addon/webpack/runtime/publicPath","webpack://worksai-excel-addon/webpack/runtime/jsonp chunk loading","webpack://worksai-excel-addon/./src/taskpane/taskpane.html","webpack://worksai-excel-addon/./src/taskpane/taskpane.js"],"sourcesContent":["// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript && document.currentScript.tagName.toUpperCase() === 'SCRIPT')\n\t\tscriptUrl = document.currentScript.src;\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) {\n\t\t\tvar i = scripts.length - 1;\n\t\t\twhile (i > -1 && (!scriptUrl || !/^http(s?):/.test(scriptUrl))) scriptUrl = scripts[i--].src;\n\t\t}\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/^blob:/, \"\").replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","__webpack_require__.b = document.baseURI || self.location.href;\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t926: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n// no on chunks loaded\n\n// no jsonp function","// Imports\nvar ___HTML_LOADER_IMPORT_0___ = new URL(\"./taskpane.css\", import.meta.url);\n// Module\nvar code = \"<!DOCTYPE html> <html> <head> <meta charset=\\\"UTF-8\\\"/> <meta http-equiv=\\\"X-UA-Compatible\\\" content=\\\"IE=Edge\\\"/> <meta name=\\\"viewport\\\" content=\\\"width=device-width,initial-scale=1\\\"> <title>셀리 - 셀과 나의 연결고리</title> <\" + \"script src=\\\"https://appsforoffice.microsoft.com/lib/1.1/hosted/office.js\\\"><\" + \"/script> <link rel=\\\"stylesheet\\\" href=\\\"https://static2.sharepointonline.com/files/fabric/office-ui-fabric-js/1.4.0/css/fabric.min.css\\\"/> <link rel=\\\"stylesheet\\\" href=\\\"https://static2.sharepointonline.com/files/fabric/office-ui-fabric-js/1.4.0/css/fabric.components.min.css\\\"/> <link href=\\\"\" + ___HTML_LOADER_IMPORT_0___ + \"\\\" rel=\\\"stylesheet\\\"/> </head> <body class=\\\"ms-font-m ms-welcome ms-Fabric\\\"> <main id=\\\"app-body\\\" class=\\\"ms-welcome__main\\\"> <div class=\\\"container\\\"> <div class=\\\"header-section\\\"> <h2 class=\\\"ms-font-xl\\\" style=\\\"font-weight:700\\\">셀리 : Celly</h2> <p class=\\\"help-text\\\">자연어로 Excel 작업을 요청하세요. (대용량 번역 지원)</p> </div> <div class=\\\"voice-section\\\"> <button id=\\\"voiceButton\\\" class=\\\"voice-button\\\"> <svg width=\\\"24\\\" height=\\\"24\\\" viewBox=\\\"0 0 24 24\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"> <path d=\\\"M12 14c1.66 0 3-1.34 3-3V5c0-1.66-1.34-3-3-3S9 3.34 9 5v6c0 1.66 1.34 3 3 3z\\\"/> <path d=\\\"M17 11c0 2.76-2.24 5-5 5s-5-2.24-5-5H5c0 3.53 2.61 6.43 6 6.92V21h2v-3.08c3.39-.49 6-3.39 6-6.92h-2z\\\"/> </svg> </button> <div class=\\\"voice-status\\\" id=\\\"voiceStatus\\\">음성 인식 준비</div> </div> <div class=\\\"model-selection\\\"> <label for=\\\"modelSelect\\\">AI 모델:</label> <select id=\\\"modelSelect\\\" class=\\\"model-dropdown\\\"> <option value=\\\"gpt-5-nano-2025-08-07\\\">GPT-5 nano (무료)</option> <option value=\\\"gpt-5-mini-2025-08-07\\\">GPT-5 mini (무료)</option> <option value=\\\"gpt-5-2025-08-07\\\">GPT-5 (인증 필요)</option> </select> </div> <div class=\\\"input-container\\\"> <textarea id=\\\"commandInput\\\" placeholder=\\\"예: A1부터 A10까지 합계를 구해줘\\\" rows=\\\"3\\\"></textarea> <div class=\\\"button-container\\\"> <button id=\\\"executeButton\\\" class=\\\"ms-Button ms-Button--primary\\\"> <span class=\\\"ms-Button-label\\\">실행</span> </button> <button id=\\\"clearButton\\\" class=\\\"ms-Button\\\"> <span class=\\\"ms-Button-label\\\">지우기</span> </button> </div> </div> <div id=\\\"status\\\" class=\\\"status-message\\\"></div> <div class=\\\"examples\\\"> <h3>예제 명령어</h3> <div class=\\\"example-list\\\"> <div class=\\\"example-item\\\" data-command=\\\"A1:B5 셀을 병합해줘\\\"> <strong>셀 병합:</strong> A1:B5 셀을 병합해줘 </div> <div class=\\\"example-item\\\" data-command=\\\"A열의 합계를 구해줘\\\"> <strong>합계 계산:</strong> A열의 합계를 구해줘 </div> <div class=\\\"example-item\\\" data-command=\\\"Name 열의 합계를 구해줘\\\"> <strong>레이블로 합계:</strong> Name 열의 합계를 구해줘 </div> <div class=\\\"example-item\\\" data-command=\\\"C열 평균을 구해줘\\\"> <strong>열 평균:</strong> C열 평균을 구해줘 </div> <div class=\\\"example-item\\\" data-command=\\\"B열의 표준편차를 계산해줘\\\"> <strong>표준편차:</strong> B열의 표준편차를 계산해줘 </div> <div class=\\\"example-item\\\" data-command=\\\"A열의 최댓값을 찾아줘\\\"> <strong>최댓값:</strong> A열의 최댓값을 찾아줘 </div> <div class=\\\"example-item\\\" data-command=\\\"C열의 중복값을 제거해줘\\\"> <strong>중복 제거:</strong> C열의 중복값을 제거해줘 </div> <div class=\\\"example-item\\\" data-command=\\\"선택한 셀을 굵게 만들고 파란색으로 바꿔줘\\\"> <strong>서식 지정:</strong> 선택한 셀을 굵게 만들고 파란색으로 바꿔줘 </div> <div class=\\\"example-item\\\" data-command=\\\"B열 기준으로 내림차순 정렬해줘\\\"> <strong>정렬:</strong> B열 기준으로 내림차순 정렬해줘 </div> <div class=\\\"example-item\\\" data-command=\\\"값이 100보다 큰 셀은 녹색 배경으로 표시해줘\\\"> <strong>조건부 서식:</strong> 값이 100보다 큰 셀은 녹색 배경으로 표시해줘 </div> <div class=\\\"example-item\\\" data-command=\\\"A1:B10 데이터로 막대 차트를 만들어줘\\\"> <strong>차트 생성:</strong> A1:B10 데이터로 막대 차트를 만들어줘 </div> <div class=\\\"example-item\\\" data-command=\\\"D열을 중국어로 번역해서 다음 열에 추가해줘\\\"> <strong>번역:</strong> D열을 중국어로 번역해서 다음 열에 추가해줘 </div> <div class=\\\"example-item\\\" data-command=\\\"A열의 10000개 행을 영어로 번역해줘\\\"> <strong>대용량 번역:</strong> A열의 10000개 행을 영어로 번역해줘 </div> <div class=\\\"example-item\\\" data-command=\\\"D2:D170 사이의 빈 행을 제거해줘\\\"> <strong>빈 행 제거:</strong> D2:D170 사이의 빈 행을 제거해줘 </div> <div class=\\\"example-item\\\" data-command=\\\"C열의 오른쪽 테두리를 없애줘\\\"> <strong>테두리 제거:</strong> C열의 오른쪽 테두리를 없애줘 </div> </div> </div> <div class=\\\"settings-section\\\"> <button id=\\\"authButton\\\" class=\\\"settings-link\\\">인증</button> <button id=\\\"contactButton\\\" class=\\\"settings-link\\\">문의/요청</button> </div> <div id=\\\"authModal\\\" class=\\\"modal\\\" style=\\\"display:none\\\"> <div class=\\\"modal-content\\\"> <span class=\\\"close\\\">&times;</span> <h3>인증키 입력</h3> <p>GPT-5 모델을 사용하려면 인증 정보를 입력하세요.</p> <input type=\\\"email\\\" id=\\\"authEmailInput\\\" placeholder=\\\"회사 이메일 주소\\\" style=\\\"width:100%;margin-bottom:10px;padding:10px;box-sizing:border-box\\\"/> <input type=\\\"text\\\" id=\\\"authKeyInput\\\" placeholder=\\\"인증키를 입력하세요\\\" style=\\\"width:100%;margin-bottom:15px;padding:10px;box-sizing:border-box\\\"/> <button id=\\\"submitAuthKey\\\" class=\\\"ms-Button ms-Button--primary\\\" style=\\\"width:100%;padding:10px\\\"> <span class=\\\"ms-Button-label\\\">인증</span> </button> <div id=\\\"authStatus\\\" class=\\\"auth-status\\\"></div> </div> </div> <div id=\\\"deauthModal\\\" class=\\\"modal\\\" style=\\\"display:none\\\"> <div class=\\\"modal-content\\\"> <h3>인증 해제 확인</h3> <p>더 이상 사용하지 않아 인증을 해제합니다.</p> <p>인증 해제 후 나중에 필요해지면 다시 인증해 사용할 수 있습니다.</p> <p style=\\\"margin-top:16px;font-weight:700\\\">정말 인증을 해제하시겠습니까?</p> <div style=\\\"display:flex;gap:10px;margin-top:20px\\\"> <button id=\\\"confirmDeauth\\\" class=\\\"ms-Button ms-Button--primary\\\" style=\\\"background:#dc2626\\\"> <span class=\\\"ms-Button-label\\\">인증 해제</span> </button> <button id=\\\"cancelDeauth\\\" class=\\\"ms-Button\\\"> <span class=\\\"ms-Button-label\\\">취소</span> </button> </div> </div> </div> <div class=\\\"footer-section\\\"> <p class=\\\"disclaimer\\\" style=\\\"font-style:normal\\\">AI는 잘못된 작업을 할 수 있습니다. 사용자의 데이터는 AI 학습에 일절 활용되지 않습니다.</p> <p class=\\\"disclaimer\\\" style=\\\"margin-top:8px;font-style:normal\\\"> <a href=\\\"https://wrks.ai/ko/policies/celly-privacy-policy\\\" target=\\\"_blank\\\" style=\\\"color:#6b7280;text-decoration:underline\\\">개인정보처리방침</a> </p> </div> </div> </main> </body> </html>\";\n// Exports\nexport default code;","/*\n * Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n * See LICENSE in the project root for license information.\n */\n\n/* global document, Office, Excel */\n\n// Voice recognition variables\nlet recognition = null;\nlet isListening = false;\n\n// Backend API URL - Vercel 배포\nconst API_PROXY_URL = process.env.API_PROXY_URL || 'https://excel-addon-backend.vercel.app/api/openai-proxy';\n\nOffice.onReady((info) => {\n  if (info.host === Office.HostType.Excel) {\n    // Test backend connection\n    testBackendConnection();\n    \n    // Assign event handlers\n    document.getElementById(\"executeButton\").onclick = executeCommand;\n    document.getElementById(\"clearButton\").onclick = clearInput;\n    document.getElementById(\"voiceButton\").onclick = () => toggleVoiceRecognition();\n    \n    // Auth and contact buttons\n    document.getElementById(\"authButton\").onclick = handleAuthAction;\n    document.getElementById(\"contactButton\").onclick = showContactInfo;\n    \n    // Update auth button text based on auth state\n    updateAuthButton();\n    \n    // Initialize model selection dropdown\n    const modelSelect = document.getElementById(\"modelSelect\");\n    const savedModel = localStorage.getItem(\"excel_addon_selected_model\");\n    const authKey = localStorage.getItem(\"excel_addon_auth_key\");\n    \n    // If premium model is saved but no auth key, reset to free model\n    if (savedModel === \"gpt-5-2025-08-07\" && !authKey) {\n      localStorage.setItem(\"excel_addon_selected_model\", \"gpt-5-nano-2025-08-07\");\n      modelSelect.value = \"gpt-5-nano-2025-08-07\";\n    } else if (savedModel) {\n      modelSelect.value = savedModel;\n    } else {\n      // Default to free model\n      modelSelect.value = \"gpt-5-nano-2025-08-07\";\n      localStorage.setItem(\"excel_addon_selected_model\", \"gpt-5-nano-2025-08-07\");\n    }\n    \n    // Modal handlers\n    const authModal = document.getElementById(\"authModal\");\n    const closeBtn = authModal.querySelector(\".close\");\n    closeBtn.onclick = () => hideAuthModal();\n    \n    const deauthModal = document.getElementById(\"deauthModal\");\n    \n    window.onclick = (event) => {\n      if (event.target == authModal) {\n        hideAuthModal();\n      } else if (event.target == deauthModal) {\n        hideDeauthModal();\n      }\n    };\n    \n    document.getElementById(\"submitAuthKey\").onclick = submitAuthKey;\n    document.getElementById(\"confirmDeauth\").onclick = confirmDeauth;\n    document.getElementById(\"cancelDeauth\").onclick = hideDeauthModal;\n    \n    // Model selection handler\n    document.getElementById(\"modelSelect\").onchange = handleModelChange;\n\n    // Handle example clicks\n    const exampleItems = document.querySelectorAll('.example-item');\n    exampleItems.forEach(item => {\n      item.onclick = function() {\n        setCommand(this.getAttribute('data-command'));\n      };\n    });\n\n    // Handle Enter key\n    document.getElementById('commandInput').addEventListener('keydown', function(event) {\n      if (event.key === 'Enter' && !event.shiftKey) {\n        event.preventDefault();\n        executeCommand();\n      }\n    });\n\n    // Initialize speech recognition\n    initializeSpeechRecognition();\n  }\n});\n\n// Initialize speech recognition\nfunction initializeSpeechRecognition() {\n  // Check if we're in a web environment (Excel Online) - disable voice feature\n  const isWebEnvironment = window.location.protocol === 'https:' && \n                          !window.location.hostname.includes('localhost');\n  \n  if (isWebEnvironment) {\n    const voiceButton = document.getElementById('voiceButton');\n    const voiceStatus = document.getElementById('voiceStatus');\n    \n    voiceButton.disabled = true;\n    voiceButton.style.opacity = '0.5';\n    voiceButton.style.cursor = 'not-allowed';\n    voiceStatus.textContent = '웹 환경에서는 음성 인식 미지원';\n    voiceStatus.style.color = '#666';\n    \n    // Add tooltip\n    voiceButton.title = 'Excel Online에서는 보안상 음성 인식을 사용할 수 없습니다. 데스크톱 Excel을 사용해주세요.';\n    \n    return null;\n  }\n  \n  const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n  \n  if (!SpeechRecognition) {\n    showStatus('음성 인식이 지원되지 않는 브라우저입니다.', 'error');\n    document.getElementById('voiceButton').disabled = true;\n    document.getElementById('voiceStatus').textContent = '음성 인식 미지원';\n    return null;\n  }\n  \n  recognition = new SpeechRecognition();\n  recognition.lang = 'ko-KR';\n  recognition.continuous = false;\n  recognition.interimResults = true;\n  recognition.maxAlternatives = 1;\n  \n  recognition.onstart = function() {\n    isListening = true;\n    document.getElementById('voiceButton').classList.add('listening');\n    document.getElementById('voiceStatus').textContent = '듣고 있습니다... 말씀해주세요';\n    document.getElementById('voiceStatus').classList.add('listening');\n  };\n  \n  recognition.onresult = function(event) {\n    const transcript = event.results[0][0].transcript;\n    document.getElementById('commandInput').value = transcript;\n    \n    if (event.results[0].isFinal) {\n      document.getElementById('voiceStatus').textContent = '음성 인식 완료';\n    } else {\n      document.getElementById('voiceStatus').textContent = '인식중: ' + transcript;\n    }\n  };\n  \n  recognition.onerror = function(event) {\n    isListening = false;\n    document.getElementById('voiceButton').classList.remove('listening');\n    document.getElementById('voiceStatus').classList.remove('listening');\n    \n    let errorMessage = '음성 인식 오류';\n    \n    // Check if we're in a web environment - use broader detection\n    const isWebEnvironment = window.location.protocol === 'https:' && \n                            !window.location.hostname.includes('localhost');\n    \n    switch(event.error) {\n      case 'no-speech':\n        errorMessage = '음성이 감지되지 않았습니다.';\n        break;\n      case 'audio-capture':\n        errorMessage = '마이크를 찾을 수 없습니다.';\n        break;\n      case 'not-allowed':\n        // Always show web environment message for not-allowed in HTTPS contexts\n        if (isWebEnvironment) {\n          errorMessage = 'Excel Online에서는 보안 정책상 음성 인식을 사용할 수 없습니다. 데스크톱 Excel에서 이용해주세요.';\n          document.getElementById('voiceStatus').textContent = '웹 버전 미지원';\n        } else {\n          errorMessage = '마이크 권한이 거부되었습니다. 브라우저 설정을 확인해주세요.';\n        }\n        break;\n      case 'network':\n        errorMessage = '네트워크 오류가 발생했습니다.';\n        break;\n      default:\n        // For any other error in web environment, show the web limitation message\n        if (isWebEnvironment && event.error) {\n          errorMessage = 'Excel Online에서는 보안 정책상 음성 인식을 사용할 수 없습니다. 데스크톱 Excel에서 이용해주세요.';\n          document.getElementById('voiceStatus').textContent = '웹 버전 미지원';\n        }\n        break;\n    }\n    \n    // Override the status text display for web environment\n    if (isWebEnvironment && event.error === 'not-allowed') {\n      document.getElementById('voiceStatus').textContent = '웹 버전 미지원';\n    } else {\n      document.getElementById('voiceStatus').textContent = errorMessage;\n    }\n    \n    showStatus(errorMessage, 'error');\n  };\n  \n  recognition.onend = function() {\n    isListening = false;\n    document.getElementById('voiceButton').classList.remove('listening');\n    document.getElementById('voiceStatus').classList.remove('listening');\n    \n    const command = document.getElementById('commandInput').value.trim();\n    if (command) {\n      document.getElementById('voiceStatus').textContent = '음성 인식 완료. 실행 버튼을 눌러주세요.';\n      document.getElementById('executeButton').focus();\n    } else {\n      document.getElementById('voiceStatus').textContent = '음성 인식 준비';\n    }\n  };\n  \n  return recognition;\n}\n\n// Toggle voice recognition\nfunction toggleVoiceRecognition() {\n  // Check if we're in Excel Online/web environment\n  const isWebEnvironment = window.location.protocol === 'https:' && \n                          !window.location.hostname.includes('localhost');\n  \n  if (isWebEnvironment) {\n    showStatus('Excel Online에서는 보안 정책상 음성 인식을 사용할 수 없습니다. 데스크톱 Excel에서 이용해주세요.', 'error');\n    document.getElementById('voiceStatus').textContent = '웹 버전 미지원';\n    return;\n  }\n  \n  if (!recognition) {\n    // Recognition would be null if unsupported browser\n    showStatus('이 브라우저는 음성 인식을 지원하지 않습니다.', 'error');\n    return;\n  }\n  \n  if (isListening) {\n    recognition.stop();\n  } else {\n    try {\n      recognition.start();\n    } catch (error) {\n      \n      // More user-friendly error messages\n      if (error.message && error.message.includes('not-allowed')) {\n        showStatus('마이크 권한이 필요합니다. 브라우저 설정에서 마이크 접근을 허용해주세요.', 'error');\n      } else {\n        showStatus('음성 인식을 시작할 수 없습니다.', 'error');\n      }\n    }\n  }\n}\n\n// Execute command\n// Add flag to prevent duplicate execution\nlet isExecuting = false;\n\nasync function executeCommand() {\n  // Prevent duplicate execution\n  if (isExecuting) {\n    return;\n  }\n  \n  const command = document.getElementById('commandInput').value.trim();\n  \n  if (!command) {\n    showStatus('명령어를 입력해주세요.', 'error');\n    return;\n  }\n  \n  isExecuting = true;\n  \n  const button = document.getElementById('executeButton');\n  const originalText = '<span class=\"ms-Button-label\">실행</span>';\n  \n  // Show loading state\n  button.disabled = true;\n  button.innerHTML = '<span class=\"loading\"></span><span>처리중...</span>';\n  showStatus('명령을 처리하고 있습니다...', 'info');\n  \n  try {\n    await Excel.run(async (context) => {\n      // Get current worksheet context\n      const worksheet = context.workbook.worksheets.getActiveWorksheet();\n      // Handle both single and multiple range selections\n      let activeRangeInfo = null;\n      let isMultipleRanges = false;\n      \n      try {\n        // Try to get selected ranges first\n        const selectedRanges = context.workbook.getSelectedRanges();\n        selectedRanges.load([\"areas\", \"areaCount\"]);\n        await context.sync();\n        \n        if (selectedRanges.areaCount > 1) {\n          // Multiple non-contiguous ranges\n          isMultipleRanges = true;\n          const firstRange = selectedRanges.areas.items[0];\n          firstRange.load([\"address\", \"rowIndex\", \"columnIndex\", \"rowCount\", \"columnCount\"]);\n          await context.sync();\n          \n          // Build combined address string\n          const rangeAddresses = [];\n          for (let i = 0; i < selectedRanges.areas.items.length; i++) {\n            const area = selectedRanges.areas.items[i];\n            area.load(\"address\");\n          }\n          await context.sync();\n          \n          for (let i = 0; i < selectedRanges.areas.items.length; i++) {\n            rangeAddresses.push(selectedRanges.areas.items[i].address);\n          }\n          \n          activeRangeInfo = {\n            address: rangeAddresses.join(','),\n            row: firstRange.rowIndex + 1,\n            column: firstRange.columnIndex + 1,\n            numRows: firstRange.rowCount,\n            numColumns: firstRange.columnCount,\n            isMultipleRanges: true\n          };\n        } else {\n          // Single range\n          const range = selectedRanges.areas.items[0];\n          range.load([\"address\", \"rowIndex\", \"columnIndex\", \"rowCount\", \"columnCount\"]);\n          await context.sync();\n          \n          activeRangeInfo = {\n            address: range.address,\n            row: range.rowIndex + 1,\n            column: range.columnIndex + 1,\n            numRows: range.rowCount,\n            numColumns: range.columnCount,\n            isMultipleRanges: false\n          };\n        }\n      } catch (error) {\n        // If getting selected ranges fails, provide a default\n        activeRangeInfo = {\n          address: 'A1',\n          row: 1,\n          column: 1,\n          numRows: 1,\n          numColumns: 1,\n          isMultipleRanges: false\n        };\n      }\n      \n      // Load necessary properties\n      worksheet.load(\"name\");\n      \n      // Get sheet data for context\n      const usedRange = worksheet.getUsedRange();\n      usedRange.load([\"rowCount\", \"columnCount\", \"values\"]);\n      \n      await context.sync();\n      \n      // Build sheet context\n      const sheetContext = {\n        sheetName: worksheet.name,\n        activeRange: activeRangeInfo,\n        lastRow: usedRange ? usedRange.rowCount : 0,\n        lastColumn: usedRange ? usedRange.columnCount : 0,\n        headers: [],\n        dataRange: usedRange ? usedRange.values : [],\n        isLargeSheet: usedRange && usedRange.rowCount > 1000\n      };\n      \n      // Extract headers\n      if (usedRange && usedRange.rowCount > 0) {\n        const headerRow = usedRange.values[0];\n        for (let i = 0; i < headerRow.length; i++) {\n          sheetContext.headers.push({\n            column: i + 1,\n            columnLetter: getColumnLetter(i),\n            label: headerRow[i] ? headerRow[i].toString() : ''\n          });\n        }\n      }\n      \n      // Call OpenAI API to interpret the command\n      const interpretation = await callOpenAI(command, sheetContext);\n      \n      // Debug: Log the API response\n      console.log('API Response:', interpretation);\n      \n      if (!interpretation.success) {\n        throw new Error(interpretation.error);\n      }\n      \n      // Check if interpretation.data exists and has required fields\n      if (!interpretation.data) {\n        throw new Error('API 응답에 데이터가 없습니다.');\n      }\n      \n      // Handle Excel-specific response format where operation is not wrapped\n      let commandData = interpretation.data;\n      \n      // If the response doesn't have an operation field, check if it's an Excel-format response\n      if (!commandData.operation && !commandData.operations) {\n        // Check if it has typical parameter fields (sumType, averageType, etc.)\n        if (commandData.sumType || commandData.sourceRange || commandData.addNewRow) {\n          // It's a sum operation in Excel format\n          commandData = {\n            operation: 'sum',\n            parameters: interpretation.data\n          };\n        } else if (commandData.averageType || (commandData.column && !commandData.deleteType)) {\n          // It's an average operation in Excel format\n          commandData = {\n            operation: 'average',\n            parameters: interpretation.data\n          };\n        } else if (commandData.bold !== undefined || commandData.fontColor || commandData.backgroundColor || commandData.numberFormat) {\n          // It's a format operation in Excel format\n          commandData = {\n            operation: 'format',\n            parameters: interpretation.data\n          };\n        } else if (commandData.deleteType) {\n          // It's a delete operation in Excel format\n          commandData = {\n            operation: 'delete',\n            parameters: interpretation.data\n          };\n        } else if (commandData.columnName && !commandData.sumType) {\n          // Could be various operations that reference a column\n          // Try to infer from context or default to sum\n          commandData = {\n            operation: 'sum',\n            parameters: interpretation.data\n          };\n        } else {\n          console.error('Cannot determine operation from response:', interpretation.data);\n          throw new Error('API 응답 형식을 해석할 수 없습니다.');\n        }\n        \n        console.log('Converted Excel format to standard format:', commandData);\n      }\n      \n      // Execute the interpreted command\n      const result = await executeInterpretedCommand(context, commandData);\n      \n      // Reset button and show success\n      button.disabled = false;\n      button.innerHTML = originalText;\n      \n      if (result.success) {\n        showStatus(result.message || '명령이 성공적으로 실행되었습니다.', 'success');\n        setTimeout(() => {\n          document.getElementById('commandInput').value = '';\n        }, 1000);\n      } else {\n        showStatus(result.error || '명령 실행에 실패했습니다.', 'error');\n      }\n      \n    });\n  } catch (error) {\n    button.disabled = false;\n    button.innerHTML = originalText;\n    showStatus('오류가 발생했습니다: ' + error.message, 'error');\n  } finally {\n    // Reset execution flag\n    isExecuting = false;\n  }\n}\n\n// Call OpenAI API through proxy\nasync function callOpenAI(command, sheetContext) {\n  try {\n    // Get selected model and auth key\n    const selectedModel = localStorage.getItem(\"excel_addon_selected_model\") || \"gpt-5-nano-2025-08-07\";\n    const authKey = localStorage.getItem(\"excel_addon_auth_key\");\n    const authEmail = localStorage.getItem(\"excel_addon_auth_email\");\n    \n    // Only send auth info for premium model\n    const requestBody = {\n      command: command,\n      sheetContext: sheetContext,\n      model: selectedModel,\n      clientType: 'excel' // Identify this as Excel client\n    };\n    \n    // Only add auth info if using premium model\n    if (selectedModel === \"gpt-5-2025-08-07\") {\n      requestBody.authKey = authKey;\n      requestBody.authEmail = authEmail;\n    }\n    \n    \n    const response = await fetch(API_PROXY_URL, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(requestBody)\n    });\n    \n    if (!response.ok) {\n      let errorMessage = `서버 오류 (${response.status})`;\n      try {\n        const errorData = await response.json();\n        errorMessage = errorData.error || errorMessage;\n      } catch (e) {\n        // Response is not JSON, try to get text\n        try {\n          const errorText = await response.text();\n          errorMessage = errorText.substring(0, 100) + '...';\n        } catch (textError) {\n          errorMessage = `서버 오류: ${response.status} ${response.statusText}`;\n        }\n      }\n      return {\n        success: false,\n        error: errorMessage\n      };\n    }\n    \n    const result = await response.json();\n    return result;\n    \n  } catch (error) {\n    return {\n      success: false,\n      error: `API 요청 오류: ${error.toString()}`\n    };\n  }\n}\n\n// Original OpenAI API call (no longer used)\nasync function callOpenAIDirectly(command, sheetContext) {\n  const systemPrompt = `You are an Excel assistant that interprets natural language commands and returns JSON instructions for Excel operations.\n  \nAvailable operations:\n1. merge: Merge cells\n2. sum: Sum values in a range or column\n3. average: Calculate average\n4. count: Count cells (can count all, numbers only, or based on conditions)\n5. format: Format cells (bold, italic, font color, background color, etc.)\n6. sort: Sort data\n7. filter: Filter data\n8. insert: Insert rows/columns\n9. delete: Delete rows/columns\n10. formula: Add custom formula\n11. chart: Create chart\n12. conditional_format: Add conditional formatting\n13. translate: Translate cell contents to another language\n14. compress: Remove empty rows in a specific column range\n15. retry_translation: Retry translation for failed items marked as [번역 실패]\n\nFor sum operation:\n- If user mentions a column by header name (e.g., \"totalToken 열의 합\", \"totalToken 합산\"), return: { \"sumType\": \"column\", \"columnName\": \"totalToken\" }\n- The system will automatically find the column, determine the data range, and place the sum in the first empty cell below the data\n- For specific range sum, use: { \"sourceRange\": \"A2:A10\" }\n- For adding sum below selection, use: { \"addNewRow\": true }\n\nCurrent sheet context:\n- Active range: ${sheetContext.activeRange.address}\n- Sheet dimensions: ${sheetContext.lastRow} rows x ${sheetContext.lastColumn} columns\n- Headers: ${sheetContext.headers.map(h => `Column ${h.columnLetter}: \"${h.label}\"`).join(', ')}\n\nReturn JSON in this format:\n{\n  \"operation\": \"operation_name\",\n  \"parameters\": {\n    // operation-specific parameters\n  }\n}`;\n\n  const url = 'https://api.openai.com/v1/chat/completions';\n  \n  const payload = {\n    model: 'gpt-5-2025-08-07',\n    messages: [\n      { role: 'system', content: systemPrompt },\n      { role: 'user', content: `Current Excel state:\nHeaders: ${sheetContext.headers.map(h => `Column ${h.columnLetter}: \"${h.label}\"`).join(', ')}\nActive sheet: ${sheetContext.sheetName}\n\nUser command: ${command}` }\n    ],\n    temperature: 0.3,\n    max_tokens: 500\n  };\n  \n  try {\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${OPENAI_API_KEY}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(payload)\n    });\n    \n    if (!response.ok) {\n      const errorData = await response.json();\n      if (response.status === 429) {\n        return {\n          success: false,\n          error: 'API 요청 한도를 초과했습니다. 잠시 후 다시 시도해주세요.'\n        };\n      } else if (response.status === 401) {\n        return {\n          success: false,\n          error: 'API 키가 유효하지 않습니다. API 키를 확인해주세요.'\n        };\n      }\n      return {\n        success: false,\n        error: `API 오류 (${response.status}): ${errorData.error?.message || '알 수 없는 오류'}`\n      };\n    }\n    \n    const result = await response.json();\n    \n    if (result.choices && result.choices[0]) {\n      const content = result.choices[0].message.content;\n      try {\n        const parsedCommand = JSON.parse(content);\n        return {\n          success: true,\n          data: parsedCommand\n        };\n      } catch (parseError) {\n        return {\n          success: false,\n          error: 'AI 응답을 해석할 수 없습니다. 다시 시도해주세요.'\n        };\n      }\n    } else {\n      return {\n        success: false,\n        error: 'OpenAI API 응답을 파싱할 수 없습니다.'\n      };\n    }\n  } catch (error) {\n    return {\n      success: false,\n      error: `OpenAI API 오류: ${error.toString()}`\n    };\n  }\n}\n\n// Execute the interpreted command\nasync function executeInterpretedCommand(context, commandData) {\n  // Check if multiple operations\n  if (commandData.operations && Array.isArray(commandData.operations)) {\n    const results = [];\n    let successCount = 0;\n    \n    for (const op of commandData.operations) {\n      const result = await executeSingleOperation(context, op.operation, op.parameters || {});\n      results.push(result);\n      if (result.success) successCount++;\n    }\n    \n    return {\n      success: successCount === commandData.operations.length,\n      message: `${successCount}/${commandData.operations.length} 작업이 완료되었습니다.`,\n      results: results\n    };\n  }\n  \n  // Single operation\n  return await executeSingleOperation(context, commandData.operation, commandData.parameters || {});\n}\n\n// Execute a single operation\nasync function executeSingleOperation(context, operation, params) {\n  \n  try {\n    switch (operation) {\n      case 'merge':\n        return await executeMerge(context, params);\n      \n      case 'sum':\n        return await executeSum(context, params);\n      \n      case 'average':\n        return await executeAverage(context, params);\n      \n      case 'count':\n        return await executeCount(context, params);\n      \n      case 'format':\n        return await executeFormat(context, params);\n      \n      case 'sort':\n        return await executeSort(context, params);\n      \n      case 'filter':\n        return await executeFilter(context, params);\n      \n      case 'insert':\n        return await executeInsert(context, params);\n      \n      case 'delete':\n        return await executeDelete(context, params);\n      \n      case 'formula':\n        return await executeFormula(context, params);\n      \n      case 'chart':\n        return await executeChart(context, params);\n      \n      case 'conditional_format':\n        return await executeConditionalFormat(context, params);\n      \n      case 'translate':\n        return await executeTranslate(context, params);\n      \n      case 'compress':\n        return await executeCompress(context, params);\n      \n      case 'retry_translation':\n        return await executeRetryTranslation(context, params);\n      \n      case 'remove_border':\n        return await executeRemoveBorder(context, params);\n      \n      case 'border_format':\n        return await executeBorderFormat(context, params);\n      \n      case 'standard_deviation':\n        return await executeStandardDeviation(params);\n      \n      case 'max_value':\n        return await executeMaxValue(params);\n      \n      case 'remove_duplicates':\n        return await executeRemoveDuplicates(params);\n      \n      case 'formula_generation':\n        return await executeFormulaGeneration(context, params);\n      \n      default:\n        return {\n          success: false,\n          error: `알 수 없는 작업: ${operation}`\n        };\n    }\n  } catch (error) {\n    return {\n      success: false,\n      error: `작업 실행 중 오류: ${error.message || error.toString()}`\n    };\n  }\n}\n\n// Merge cells\nasync function executeMerge(context, params) {\n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  const range = params.range ? worksheet.getRange(params.range) : context.workbook.getSelectedRange();\n  \n  // Load address property before using it\n  range.load('address');\n  await context.sync();\n  \n  const rangeAddress = range.address;\n  \n  range.merge();\n  await context.sync();\n  \n  return {\n    success: true,\n    message: `${rangeAddress} 범위가 병합되었습니다.`\n  };\n}\n\n// Sum values\nasync function executeSum(context, params) {\n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  \n  // Handle row sum\n  if (params.sumType === 'row' && params.row) {\n    \n    // Get the used range to find the maximum possible columns\n    const usedRange = worksheet.getUsedRange();\n    if (!usedRange) {\n      return {\n        success: false,\n        error: '시트에 데이터가 없습니다.'\n      };\n    }\n    \n    usedRange.load([\"columnCount\"]);\n    await context.sync();\n    \n    // Get the specific row to find where data ends\n    const rowRange = worksheet.getRangeByIndexes(\n      params.row - 1,  // row index (0-based)\n      0,               // starting column (A)\n      1,               // 1 row\n      usedRange.columnCount  // check all possible columns\n    );\n    \n    rowRange.load([\"values\"]);\n    await context.sync();\n    \n    // Find the last column with data in this specific row\n    const rowValues = rowRange.values[0];\n    let lastDataColumn = -1;\n    \n    for (let i = rowValues.length - 1; i >= 0; i--) {\n      if (rowValues[i] !== null && rowValues[i] !== '' && rowValues[i] !== undefined) {\n        lastDataColumn = i;\n        break;\n      }\n    }\n    \n    if (lastDataColumn === -1) {\n      return {\n        success: false,\n        error: `${params.row}행에 데이터가 없습니다.`\n      };\n    }\n    \n    // Calculate the column for the sum result (next column after last data)\n    const resultColumn = lastDataColumn + 1;\n    const resultCell = worksheet.getCell(params.row - 1, resultColumn);\n    \n    // Create the sum formula\n    const startCol = 'A';\n    const endCol = getColumnLetter(lastDataColumn);\n    const sumFormula = `=SUM(${startCol}${params.row}:${endCol}${params.row})`;\n    \n    resultCell.formulas = [[sumFormula]];\n    await context.sync();\n    \n    resultCell.load([\"values\", \"address\"]);\n    await context.sync();\n    \n    return {\n      success: true,\n      message: `${params.row}행의 합계를 ${resultCell.address}에 계산했습니다: ${formatNumber(resultCell.values[0][0])}`,\n      value: resultCell.values[0][0]\n    };\n  }\n  \n  // If column name is provided, find the column and create range\n  if (params.columnName || params.sumType === 'column') {\n    \n    // Get sheet context to find column by name\n    const usedRange = worksheet.getUsedRange();\n    usedRange.load([\"values\", \"rowCount\", \"columnCount\"]);\n    await context.sync();\n    \n    if (!usedRange || usedRange.rowCount === 0) {\n      return {\n        success: false,\n        error: '시트에 데이터가 없습니다.'\n      };\n    }\n    \n    let columnIndex = -1;\n    let columnLetter = '';\n    \n    // Check if columnName is a column letter reference (like \"D\", \"AA\", \"ABC\")\n    if (params.columnName && params.columnName.match(/^[A-Z]+$/)) {\n      // Direct column letter reference\n      columnLetter = params.columnName;\n      // Convert column letter(s) to index\n      columnIndex = 0;\n      for (let i = 0; i < columnLetter.length; i++) {\n        columnIndex = columnIndex * 26 + (columnLetter.charCodeAt(i) - 64);\n      }\n      columnIndex--; // Convert to 0-based index\n    } else {\n      // Find column by header name\n      const headers = usedRange.values[0];\n      \n      for (let i = 0; i < headers.length; i++) {\n        if (headers[i] && headers[i].toString().toLowerCase() === (params.columnName || '').toLowerCase()) {\n          columnIndex = i;\n          columnLetter = getColumnLetter(i);\n          break;\n        }\n      }\n    }\n    \n    if (columnIndex === -1) {\n      return {\n        success: false,\n        error: `\"${params.columnName}\" 열을 찾을 수 없습니다.`\n      };\n    }\n    \n    // Find last row with data in this column\n    let lastDataRow = 1; // Start from row 2 (after header)\n    for (let row = 1; row < usedRange.rowCount; row++) {\n      if (usedRange.values[row][columnIndex] !== null && \n          usedRange.values[row][columnIndex] !== undefined && \n          usedRange.values[row][columnIndex] !== '') {\n        lastDataRow = row + 1; // +1 because Excel rows are 1-indexed\n      }\n    }\n    \n    // Create range from row 2 to last data row\n    const rangeAddress = `${columnLetter}2:${columnLetter}${lastDataRow}`;\n    \n    // Find first empty cell below the data\n    let targetRow = lastDataRow; // Start from row after last data (0-based becomes 1-based)\n    let foundEmpty = false;\n    \n    // Check up to 10 rows below for an empty cell\n    for (let i = 0; i < 10; i++) {\n      const checkCell = worksheet.getCell(lastDataRow + i, columnIndex);\n      checkCell.load(\"values\");\n      await context.sync();\n      \n      const cellValue = checkCell.values[0][0];\n      if (cellValue === null || cellValue === undefined || cellValue === '') {\n        targetRow = lastDataRow + i;\n        foundEmpty = true;\n        break;\n      }\n    }\n    \n    // If no empty cell found, use the row after last data\n    if (!foundEmpty) {\n      targetRow = lastDataRow;\n    }\n    \n    const sumCell = worksheet.getCell(targetRow, columnIndex);\n    \n    \n    sumCell.formulas = [[`=SUM(${rangeAddress})`]];\n    await context.sync();\n    \n    sumCell.load([\"values\", \"address\"]);\n    await context.sync();\n    \n    return {\n      success: true,\n      message: `${params.columnName} 열의 합계를 ${sumCell.address}에 계산했습니다: ${formatNumber(sumCell.values[0][0])}`,\n      value: sumCell.values[0][0]\n    };\n  }\n  \n  // Original logic for range-based sum - handle multiple selections\n  let sourceRange;\n  let sumFormula;\n  \n  if (params.sourceRange) {\n    sourceRange = worksheet.getRange(params.sourceRange);\n    sourceRange.load([\"columnIndex\", \"rowIndex\", \"rowCount\", \"address\"]);\n    await context.sync();\n    sumFormula = `=SUM(${sourceRange.address})`;\n  } else {\n    // Handle multiple selections\n    try {\n      const selectedRanges = context.workbook.getSelectedRanges();\n      selectedRanges.load([\"areas\", \"areaCount\"]);\n      await context.sync();\n      \n      if (selectedRanges.areaCount > 1) {\n        // Multiple non-contiguous ranges selected\n        const rangeAddresses = [];\n        \n        for (let i = 0; i < selectedRanges.areas.items.length; i++) {\n          const area = selectedRanges.areas.items[i];\n          area.load(\"address\");\n        }\n        await context.sync();\n        \n        for (let i = 0; i < selectedRanges.areas.items.length; i++) {\n          rangeAddresses.push(selectedRanges.areas.items[i].address);\n        }\n        \n        sumFormula = `=SUM(${rangeAddresses.join(',')})`;\n        sourceRange = selectedRanges.areas.items[0];\n        sourceRange.load([\"columnIndex\", \"rowIndex\", \"rowCount\"]);\n        await context.sync();\n      } else {\n        // Single contiguous range\n        sourceRange = context.workbook.getSelectedRange();\n        sourceRange.load([\"columnIndex\", \"rowIndex\", \"rowCount\", \"address\"]);\n        await context.sync();\n        sumFormula = `=SUM(${sourceRange.address})`;\n      }\n    } catch (error) {\n      // For non-contiguous selections, getSelectedRange() fails\n      // Try to get selected ranges differently\n      try {\n        const selectedRanges = context.workbook.getSelectedRanges();\n        selectedRanges.load([\"areas\", \"areaCount\"]);\n        await context.sync();\n        \n        if (selectedRanges.areas.items.length > 0) {\n          const rangeAddresses = [];\n          for (let i = 0; i < selectedRanges.areas.items.length; i++) {\n            const area = selectedRanges.areas.items[i];\n            area.load(\"address\");\n          }\n          await context.sync();\n          \n          for (let i = 0; i < selectedRanges.areas.items.length; i++) {\n            rangeAddresses.push(selectedRanges.areas.items[i].address);\n          }\n          \n          sumFormula = `=SUM(${rangeAddresses.join(',')})`;\n          sourceRange = selectedRanges.areas.items[0];\n          sourceRange.load([\"columnIndex\", \"rowIndex\", \"rowCount\"]);\n          await context.sync();\n        } else {\n          throw new Error('No ranges selected');\n        }\n      } catch (fallbackError) {\n        return { success: false, error: '선택한 범위를 처리할 수 없습니다. 연속된 범위를 선택해주세요.' };\n      }\n    }\n  }\n  \n  if (params.addNewRow === true) {\n    // Add new row for sum\n    sourceRange.load([\"columnIndex\", \"rowIndex\", \"rowCount\"]);\n    await context.sync();\n    \n    const column = sourceRange.columnIndex;\n    const lastRow = sourceRange.rowIndex + sourceRange.rowCount;\n    const newCell = worksheet.getCell(lastRow, column);\n    \n    newCell.formulas = [[sumFormula]];\n    await context.sync();\n    \n    newCell.load([\"values\", \"address\"]);\n    await context.sync();\n    \n    return {\n      success: true,\n      message: `${newCell.address}에 합계를 계산했습니다: ${formatNumber(newCell.values[0][0])}`,\n      value: newCell.values[0][0]\n    };\n  } else if (params.targetCell) {\n    // Sum to specific cell\n    const targetCell = worksheet.getRange(params.targetCell);\n    targetCell.formulas = [[sumFormula]];\n    await context.sync();\n    \n    targetCell.load([\"values\", \"address\"]);\n    await context.sync();\n    \n    return {\n      success: true,\n      message: `${targetCell.address}에 합계를 계산했습니다: ${formatNumber(targetCell.values[0][0])}`,\n      value: targetCell.values[0][0]\n    };\n  } else {\n    // Default: find an empty cell for the result\n    // For multiple non-contiguous selections, find an empty spot\n    const usedRange = worksheet.getUsedRange();\n    usedRange.load([\"rowCount\", \"columnCount\"]);\n    await context.sync();\n    \n    let targetCell;\n    \n    // If multiple ranges selected (formula contains comma), find empty cell strategically\n    if (sumFormula.includes(',')) {\n      // Multiple ranges - find empty area\n      const lastUsedRow = usedRange ? usedRange.rowCount : 1;\n      const lastUsedCol = usedRange ? usedRange.columnCount : 1;\n      \n      // Try to find empty cell to the right of selection\n      let foundEmpty = false;\n      for (let col = lastUsedCol; col < lastUsedCol + 5; col++) {\n        const checkCell = worksheet.getCell(sourceRange.rowIndex, col);\n        checkCell.load(\"values\");\n        await context.sync();\n        \n        if (!checkCell.values[0][0]) {\n          targetCell = checkCell;\n          foundEmpty = true;\n          break;\n        }\n      }\n      \n      // If not found to the right, try below the used range\n      if (!foundEmpty) {\n        for (let row = lastUsedRow; row < lastUsedRow + 5; row++) {\n          const checkCell = worksheet.getCell(row, 0);\n          checkCell.load(\"values\");\n          await context.sync();\n          \n          if (!checkCell.values[0][0]) {\n            targetCell = checkCell;\n            foundEmpty = true;\n            break;\n          }\n        }\n      }\n      \n      // If still not found, use a safe location below all data\n      if (!foundEmpty) {\n        targetCell = worksheet.getCell(lastUsedRow + 2, 0);\n      }\n    } else {\n      // Single range - find empty cell below the range\n      sourceRange.load([\"columnIndex\", \"rowIndex\", \"rowCount\", \"values\"]);\n      await context.sync();\n      \n      const column = sourceRange.columnIndex;\n      \n      // Find the last row with data in the source range\n      const values = sourceRange.values;\n      let lastDataRow = sourceRange.rowIndex;\n      \n      // Check from bottom to find last row with data\n      for (let i = values.length - 1; i >= 0; i--) {\n        if (values[i][0] !== null && values[i][0] !== undefined && values[i][0] !== '') {\n          lastDataRow = sourceRange.rowIndex + i;\n          break;\n        }\n      }\n      \n      // Start looking from the row after last data row\n      const startRow = lastDataRow + 1;\n      let targetRow = startRow;\n      let foundEmpty = false;\n      \n      // Check if the immediate next row is empty\n      const firstCheckCell = worksheet.getCell(startRow, column);\n      firstCheckCell.load(\"values\");\n      await context.sync();\n      \n      if (firstCheckCell.values[0][0] === null || firstCheckCell.values[0][0] === undefined || firstCheckCell.values[0][0] === '') {\n        targetRow = startRow;\n        foundEmpty = true;\n      } else {\n        // If not empty, check up to 10 more rows\n        for (let i = 1; i < 10; i++) {\n          const checkCell = worksheet.getCell(startRow + i, column);\n          checkCell.load(\"values\");\n          await context.sync();\n          \n          const cellValue = checkCell.values[0][0];\n          if (cellValue === null || cellValue === undefined || cellValue === '') {\n            targetRow = startRow + i;\n            foundEmpty = true;\n            break;\n          }\n        }\n      }\n      \n      // If no empty cell found, add after the last checked row\n      if (!foundEmpty) {\n        targetRow = startRow + 10;\n      }\n      \n      targetCell = worksheet.getCell(targetRow, column);\n    }\n    \n    targetCell.formulas = [[sumFormula]];\n    await context.sync();\n    \n    targetCell.load([\"values\", \"address\"]);\n    await context.sync();\n    \n    return {\n      success: true,\n      message: `${targetCell.address}에 합계를 계산했습니다: ${formatNumber(targetCell.values[0][0])}`,\n      value: targetCell.values[0][0]\n    };\n  }\n}\n\n// Helper function to get headers\nasync function getHeaders(context) {\n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  const usedRange = worksheet.getUsedRange();\n  \n  if (!usedRange) {\n    return [];\n  }\n  \n  usedRange.load([\"values\", \"columnCount\"]);\n  await context.sync();\n  \n  const headers = [];\n  const headerRow = usedRange.values[0];\n  \n  if (headerRow) {\n    for (let i = 0; i < headerRow.length; i++) {\n      headers.push({\n        column: i + 1,\n        columnLetter: getColumnLetter(i),\n        label: headerRow[i] ? headerRow[i].toString() : ''\n      });\n    }\n  }\n  \n  return headers;\n}\n\n// Calculate average\nasync function executeAverage(context, params) {\n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  let sourceRange;\n  let rangeDescription = '';\n  let averageFormula = '';\n  \n  try {\n    // Handle different average types\n    if (params.averageType === 'column') {\n      if (params.column) {\n        // Column specified by letter (e.g., \"C\")\n        const usedRange = worksheet.getUsedRange();\n        if (!usedRange) {\n          return { success: false, error: '데이터가 없습니다.' };\n        }\n        \n        usedRange.load([\"rowCount\", \"columnCount\"]);\n        await context.sync();\n        \n        const columnIndex = params.column.charCodeAt(0) - 65;\n        if (columnIndex < 0 || columnIndex >= usedRange.columnCount) {\n          return { success: false, error: '유효하지 않은 열입니다.' };\n        }\n        \n        // Get column data starting from row 2 (skip header)\n        if (usedRange.rowCount > 1) {\n          sourceRange = worksheet.getRangeByIndexes(1, columnIndex, usedRange.rowCount - 1, 1);\n          rangeDescription = `${params.column}열`;\n        } else {\n          return { success: false, error: '평균을 계산할 데이터가 없습니다.' };\n        }\n        \n        sourceRange.load([\"address\"]);\n        await context.sync();\n        averageFormula = `=AVERAGE(${sourceRange.address})`;\n        \n      } else if (params.columnName) {\n        // Check if columnName is a column letter reference (like \"E\", \"AA\", \"ABC\")\n        if (params.columnName.match(/^[A-Z]+$/)) {\n          // Direct column letter reference\n          const columnLetter = params.columnName;\n          // Convert column letter(s) to index (A=0, B=1, ..., Z=25, AA=26, AB=27, ...)\n          let columnIndex = 0;\n          for (let i = 0; i < columnLetter.length; i++) {\n            columnIndex = columnIndex * 26 + (columnLetter.charCodeAt(i) - 64);\n          }\n          columnIndex--; // Convert to 0-based index\n          \n          const usedRange = worksheet.getUsedRange();\n          if (!usedRange) {\n            return { success: false, error: '데이터가 없습니다.' };\n          }\n          \n          usedRange.load([\"rowCount\", \"columnCount\"]);\n          await context.sync();\n          \n          if (columnIndex < 0 || columnIndex >= usedRange.columnCount) {\n            return { success: false, error: '유효하지 않은 열입니다.' };\n          }\n          \n          // Get column data starting from row 2 (skip header)\n          if (usedRange.rowCount > 1) {\n            sourceRange = worksheet.getRangeByIndexes(1, columnIndex, usedRange.rowCount - 1, 1);\n            rangeDescription = `${params.columnName}열`;\n          } else {\n            return { success: false, error: '평균을 계산할 데이터가 없습니다.' };\n          }\n          \n          sourceRange.load([\"address\"]);\n          await context.sync();\n          averageFormula = `=AVERAGE(${sourceRange.address})`;\n        } else {\n          // Column specified by header name\n          const headers = await getHeaders(context);\n          const columnInfo = headers.find(h => h.label === params.columnName);\n          \n          if (!columnInfo) {\n            return { success: false, error: `\"${params.columnName}\" 열을 찾을 수 없습니다.` };\n          }\n          \n          const usedRange = worksheet.getUsedRange();\n          usedRange.load([\"rowCount\"]);\n          await context.sync();\n          \n          if (usedRange.rowCount > 1) {\n            sourceRange = worksheet.getRangeByIndexes(1, columnInfo.column - 1, usedRange.rowCount - 1, 1);\n            rangeDescription = `\"${params.columnName}\" 열`;\n          } else {\n            return { success: false, error: '평균을 계산할 데이터가 없습니다.' };\n          }\n          \n          sourceRange.load([\"address\"]);\n          await context.sync();\n          averageFormula = `=AVERAGE(${sourceRange.address})`;\n        }\n      }\n    } else if (params.averageType === 'row') {\n      // Row average (e.g., \"3행 평균\")\n      const usedRange = worksheet.getUsedRange();\n      if (!usedRange) {\n        return { success: false, error: '데이터가 없습니다.' };\n      }\n      \n      usedRange.load([\"rowCount\", \"columnCount\"]);\n      await context.sync();\n      \n      const rowIndex = params.row - 1; // Convert to 0-based\n      if (rowIndex < 0 || rowIndex >= usedRange.rowCount) {\n        return { success: false, error: '유효하지 않은 행입니다.' };\n      }\n      \n      // Get entire row data\n      sourceRange = worksheet.getRangeByIndexes(rowIndex, 0, 1, usedRange.columnCount);\n      rangeDescription = `${params.row}행`;\n      \n      sourceRange.load([\"address\", \"rowIndex\", \"columnIndex\", \"columnCount\"]);\n      await context.sync();\n      averageFormula = `=AVERAGE(${sourceRange.address})`;\n      \n    } else if (params.sourceRange) {\n      // Specific range (e.g., \"C1:C100\")\n      sourceRange = worksheet.getRange(params.sourceRange);\n      rangeDescription = params.sourceRange;\n      \n      sourceRange.load([\"address\"]);\n      await context.sync();\n      averageFormula = `=AVERAGE(${sourceRange.address})`;\n      \n    } else {\n      // Default: use selected range(s) - handle multiple selections\n      try {\n        // Try to get multiple selected ranges (for non-contiguous selections)\n        const selectedRanges = context.workbook.getSelectedRanges();\n        selectedRanges.load([\"areas\", \"areaCount\"]);\n        await context.sync();\n        \n        if (selectedRanges.areaCount > 1) {\n          // Multiple non-contiguous ranges selected\n          const rangeAddresses = [];\n          \n          for (let i = 0; i < selectedRanges.areas.items.length; i++) {\n            const area = selectedRanges.areas.items[i];\n            area.load(\"address\");\n          }\n          await context.sync();\n          \n          for (let i = 0; i < selectedRanges.areas.items.length; i++) {\n            rangeAddresses.push(selectedRanges.areas.items[i].address);\n          }\n          \n          averageFormula = `=AVERAGE(${rangeAddresses.join(',')})`;\n          rangeDescription = '선택한 셀';\n          \n          // Use the first selected range for positioning\n          sourceRange = selectedRanges.areas.items[0];\n          sourceRange.load([\"columnIndex\", \"rowIndex\", \"rowCount\", \"columnCount\"]);\n          await context.sync();\n          \n        } else {\n          // Single contiguous range\n          sourceRange = context.workbook.getSelectedRange();\n          rangeDescription = '선택한 범위';\n          \n          sourceRange.load([\"columnIndex\", \"rowIndex\", \"rowCount\", \"columnCount\", \"address\"]);\n          await context.sync();\n          averageFormula = `=AVERAGE(${sourceRange.address})`;\n        }\n        \n      } catch (error) {\n        // For non-contiguous selections, getSelectedRange() fails\n        try {\n          const selectedRanges = context.workbook.getSelectedRanges();\n          selectedRanges.load([\"areas\", \"areaCount\"]);\n          await context.sync();\n          \n          if (selectedRanges.areas.items.length > 0) {\n            const rangeAddresses = [];\n            for (let i = 0; i < selectedRanges.areas.items.length; i++) {\n              const area = selectedRanges.areas.items[i];\n              area.load(\"address\");\n            }\n            await context.sync();\n            \n            for (let i = 0; i < selectedRanges.areas.items.length; i++) {\n              rangeAddresses.push(selectedRanges.areas.items[i].address);\n            }\n            \n            averageFormula = `=AVERAGE(${rangeAddresses.join(',')})`;\n            rangeDescription = '선택한 셀';\n            sourceRange = selectedRanges.areas.items[0];\n            sourceRange.load([\"columnIndex\", \"rowIndex\", \"rowCount\", \"columnCount\"]);\n            await context.sync();\n          } else {\n            throw new Error('No ranges selected');\n          }\n        } catch (fallbackError) {\n          return { success: false, error: '선택한 범위를 처리할 수 없습니다. 연속된 범위를 선택해주세요.' };\n        }\n      }\n    }\n    \n    // Load sourceRange properties before using them\n    sourceRange.load([\"columnIndex\", \"rowIndex\", \"rowCount\", \"columnCount\"]);\n    await context.sync();\n    \n    // Determine where to place the result\n    let targetCell;\n    if (params.targetCell) {\n      targetCell = worksheet.getRange(params.targetCell);\n    } else if (params.averageType === 'row') {\n      // For row average, place result at the end of the row\n      const lastColumn = sourceRange.columnIndex + sourceRange.columnCount;\n      targetCell = worksheet.getCell(sourceRange.rowIndex, lastColumn);\n    } else {\n      // For column average or range, find first empty cell below the range\n      sourceRange.load([\"values\"]);\n      await context.sync();\n      \n      const column = sourceRange.columnIndex;\n      \n      // Find the last row with data in the source range\n      const values = sourceRange.values;\n      let lastDataRow = sourceRange.rowIndex;\n      \n      // Check from bottom to find last row with data\n      for (let i = values.length - 1; i >= 0; i--) {\n        if (values[i][0] !== null && values[i][0] !== undefined && values[i][0] !== '') {\n          lastDataRow = sourceRange.rowIndex + i;\n          break;\n        }\n      }\n      \n      // Start looking from the row after last data row\n      const startRow = lastDataRow + 1;\n      let targetRow = startRow;\n      let foundEmpty = false;\n      \n      // Check if the immediate next row is empty\n      const firstCheckCell = worksheet.getCell(startRow, column);\n      firstCheckCell.load(\"values\");\n      await context.sync();\n      \n      if (firstCheckCell.values[0][0] === null || firstCheckCell.values[0][0] === undefined || firstCheckCell.values[0][0] === '') {\n        targetRow = startRow;\n        foundEmpty = true;\n      } else {\n        // If not empty, check up to 10 more rows\n        for (let i = 1; i < 10; i++) {\n          const checkCell = worksheet.getCell(startRow + i, column);\n          checkCell.load(\"values\");\n          await context.sync();\n          \n          const cellValue = checkCell.values[0][0];\n          if (cellValue === null || cellValue === undefined || cellValue === '') {\n            targetRow = startRow + i;\n            foundEmpty = true;\n            break;\n          }\n        }\n      }\n      \n      // If no empty cell found, add after the last checked row\n      if (!foundEmpty) {\n        targetRow = startRow + 10;\n      }\n      \n      targetCell = worksheet.getCell(targetRow, column);\n    }\n    \n    // Apply AVERAGE formula\n    targetCell.formulas = [[averageFormula]];\n    targetCell.numberFormat = [[\"#,##0.00\"]]; // Format as number with 2 decimal places\n    await context.sync();\n    \n    targetCell.load([\"values\", \"address\"]);\n    await context.sync();\n    \n    return {\n      success: true,\n      message: `${rangeDescription}의 평균을 ${targetCell.address}에 계산했습니다: ${formatNumber(targetCell.values[0][0])}`,\n      value: targetCell.values[0][0]\n    };\n    \n  } catch (error) {\n    return {\n      success: false,\n      error: `평균 계산 중 오류 발생: ${error.message}`\n    };\n  }\n}\n\n// Count cells\nasync function executeCount(context, params) {\n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  const sourceRange = params.sourceRange ? worksheet.getRange(params.sourceRange) : context.workbook.getSelectedRange();\n  \n  sourceRange.load([\"address\"]);\n  await context.sync();\n  \n  let formula;\n  if (params.countType === 'countif' && params.condition !== undefined) {\n    let criteria;\n    if (params.operator === 'contains') {\n      criteria = `\"*${params.condition}*\"`;\n    } else if (params.operator === 'equals') {\n      criteria = typeof params.condition === 'string' ? `\"${params.condition}\"` : params.condition;\n    } else if (params.operator && ['>', '<', '>=', '<=', '<>'].includes(params.operator)) {\n      criteria = `\"${params.operator}${params.condition}\"`;\n    } else {\n      if (typeof params.condition === 'string') {\n        criteria = `\"*${params.condition}*\"`;\n      } else {\n        criteria = params.condition;\n      }\n    }\n    formula = `=COUNTIF(${sourceRange.address}, ${criteria})`;\n  } else if (params.countType === 'counta') {\n    formula = `=COUNTA(${sourceRange.address})`;\n  } else {\n    formula = `=COUNT(${sourceRange.address})`;\n  }\n  \n  let resultCell;\n  if (params.targetCell) {\n    resultCell = worksheet.getRange(params.targetCell);\n  } else {\n    const usedRange = worksheet.getUsedRange();\n    await context.sync();\n    \n    const lastRow = usedRange ? usedRange.rowCount : 1;\n    const lastCol = usedRange ? usedRange.columnCount : 1;\n    resultCell = worksheet.getCell(lastRow, lastCol);\n  }\n  \n  resultCell.formulas = [[formula]];\n  await context.sync();\n  \n  resultCell.load(\"values\");\n  await context.sync();\n  \n  return {\n    success: true,\n    message: params.countType === 'countif' ? \n      `\"${params.condition}\"을(를) 포함하는 셀의 개수: ${formatNumber(resultCell.values[0][0])}개` :\n      `개수를 계산했습니다: ${formatNumber(resultCell.values[0][0])}개`,\n    value: resultCell.values[0][0]\n  };\n}\n\n// Format cells\nasync function executeFormat(context, params) {\n  \n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  let ranges = [];\n  \n  if (params.range) {\n    ranges.push(worksheet.getRange(params.range));\n  } else {\n    // Handle multiple selections\n    try {\n      const selectedRanges = context.workbook.getSelectedRanges();\n      selectedRanges.load([\"areas\", \"areaCount\"]);\n      await context.sync();\n      \n      if (selectedRanges.areaCount > 1) {\n        // Multiple non-contiguous ranges selected\n        for (let i = 0; i < selectedRanges.areas.items.length; i++) {\n          ranges.push(selectedRanges.areas.items[i]);\n        }\n      } else {\n        // Single contiguous range\n        ranges.push(context.workbook.getSelectedRange());\n      }\n    } catch (error) {\n      return { success: false, error: '선택한 범위를 처리할 수 없습니다. 연속된 범위를 선택해주세요.' };\n    }\n  }\n  \n  // Load format for all ranges\n  for (const range of ranges) {\n    range.load(\"format\");\n  }\n  await context.sync();\n  \n  // Apply formatting to all ranges\n  for (const range of ranges) {\n    if (params.bold !== undefined) {\n      range.format.font.bold = params.bold;\n    }\n    \n    if (params.italic !== undefined) {\n      range.format.font.italic = params.italic;\n    }\n    \n    if (params.fontSize) {\n      range.format.font.size = params.fontSize;\n    }\n    \n    if (params.fontColor) {\n      range.format.font.color = params.fontColor;\n    }\n    \n    if (params.backgroundColor) {\n      range.format.fill.color = params.backgroundColor;\n    }\n    \n    if (params.horizontalAlignment) {\n      range.format.horizontalAlignment = params.horizontalAlignment === 'left' ? 'Left' :\n                                       params.horizontalAlignment === 'center' ? 'Center' :\n                                       params.horizontalAlignment === 'right' ? 'Right' : 'General';\n    }\n    \n    if (params.numberFormat) {\n      // Handle specific format types\n      let format = params.numberFormat;\n      if (format === 'number' || format === '숫자') {\n        format = '#,##0';\n      } else if (format === 'currency' || format === '원화' || format === 'won' || format === '통화') {\n        format = '₩#,##0';\n      } else if (format === 'currency_decimal' || format === '원화_소수') {\n        format = '₩#,##0.00';\n      } else if (format === 'percentage' || format === '퍼센트' || format === '백분율') {\n        format = '0%';\n      } else if (format === 'percentage_decimal' || format === '퍼센트_소수') {\n        format = '0.00%';\n      } else if (format === 'date' || format === '날짜') {\n        format = 'yyyy-mm-dd';\n      } else if (format === 'time' || format === '시간') {\n        format = 'hh:mm:ss';\n      } else if (format === 'text' || format === '텍스트') {\n        format = '@';\n      } else if (format === 'general' || format === '일반') {\n        format = 'General';\n      }\n      \n      // Set number format for the range\n      range.numberFormat = format;\n    }\n  }\n  \n  await context.sync();\n  \n  return {\n    success: true,\n    message: '서식이 적용되었습니다.'\n  };\n}\n\n// Sort data\nasync function executeSort(context, params) {\n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  const range = params.range ? worksheet.getRange(params.range) : worksheet.getUsedRange();\n  \n  const column = params.column || 1;\n  const ascending = params.ascending !== undefined ? params.ascending : true;\n  \n  range.sort.apply([\n    {\n      key: column - 1, // Excel API uses 0-based index\n      ascending: ascending\n    }\n  ]);\n  \n  await context.sync();\n  \n  const columnLetter = getColumnLetter(column - 1);\n  \n  return {\n    success: true,\n    message: `${columnLetter}열 기준으로 ${ascending ? '오름차순' : '내림차순'} 정렬되었습니다.`\n  };\n}\n\n// Create chart\nasync function executeChart(context, params) {\n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  let sourceData;\n  let dataAddress = '';\n  \n  \n  if (params.range) {\n    sourceData = worksheet.getRange(params.range);\n    sourceData.load([\"address\", \"values\"]);\n    await context.sync();\n    dataAddress = sourceData.address;\n  } else {\n    // Handle multiple selections for chart data\n    try {\n      const selectedRanges = context.workbook.getSelectedRanges();\n      selectedRanges.load([\"areas\", \"areaCount\"]);\n      await context.sync();\n      \n      if (selectedRanges.areaCount > 1) {\n        // For charts with multiple non-contiguous ranges, create a temporary data range\n        \n        // Collect all selected ranges\n        const allRanges = [];\n        for (let i = 0; i < selectedRanges.areas.items.length; i++) {\n          const area = selectedRanges.areas.items[i];\n          area.load([\"address\", \"values\", \"rowIndex\", \"columnIndex\"]);\n          allRanges.push(area);\n        }\n        await context.sync();\n        \n        // Find an empty area to create temporary consolidated data\n        const usedRange = worksheet.getUsedRangeOrNullObject();\n        usedRange.load([\"isNullObject\", \"rowCount\", \"columnCount\"]);\n        await context.sync();\n        \n        const tempStartRow = !usedRange.isNullObject ? usedRange.rowCount + 2 : 1;\n        const tempStartCol = 0;\n        \n        // Consolidate data into a contiguous range - handle individual cells\n        const consolidatedData = [];\n        let maxColumns = 1;\n        \n        for (const range of allRanges) {\n          if (range.values && range.values.length > 0) {\n            // Each range might be a single cell or a range of cells\n            for (const row of range.values) {\n              consolidatedData.push(row);\n              maxColumns = Math.max(maxColumns, row.length);\n            }\n          }\n        }\n        \n        // Write consolidated data to temporary location\n        if (consolidatedData.length > 0) {\n          \n          try {\n            // For individual cells, reorganize data for chart\n            if (consolidatedData.every(row => row.length === 1)) {\n              // All are single cells - create label-value pairs\n              const reorganizedData = [];\n              for (let i = 0; i < consolidatedData.length; i++) {\n                const value = consolidatedData[i][0];\n                // Skip empty cells\n                if (value !== null && value !== undefined && value !== '') {\n                  reorganizedData.push([`Item ${i+1}`, value]);\n                }\n              }\n              \n              if (reorganizedData.length === 0) {\n                return { success: false, error: '선택한 셀에 유효한 데이터가 없습니다.' };\n              }\n              \n              \n              const tempRange = worksheet.getRangeByIndexes(\n                tempStartRow, \n                tempStartCol, \n                reorganizedData.length, \n                2  // Always 2 columns for label-value pairs\n              );\n              \n              tempRange.values = reorganizedData;\n              await context.sync();\n              \n              sourceData = tempRange;\n            } else {\n              // Mixed or multi-column data - use as-is\n              const tempRange = worksheet.getRangeByIndexes(\n                tempStartRow, \n                tempStartCol, \n                consolidatedData.length, \n                maxColumns\n              );\n              \n              tempRange.values = consolidatedData;\n              await context.sync();\n              \n              sourceData = tempRange;\n            }\n            \n            sourceData.load([\"address\", \"values\", \"rowCount\", \"columnCount\"]);\n            await context.sync();\n            \n            \n            dataAddress = sourceData.address;\n          } catch (error) {\n            return { success: false, error: '임시 데이터 범위 생성 중 오류가 발생했습니다.' };\n          }\n        } else {\n          return { success: false, error: '선택한 셀에 데이터가 없습니다.' };\n        }\n      } else {\n        // Single contiguous range\n        sourceData = context.workbook.getSelectedRange();\n        sourceData.load([\"address\", \"values\"]);\n        await context.sync();\n        dataAddress = sourceData.address;\n      }\n    } catch (error) {\n      return { success: false, error: '선택한 범위를 처리할 수 없습니다. 연속된 범위를 선택해주세요.' };\n    }\n  }\n  \n  \n  // Determine chart type\n  let chartType;\n  if (params.chartType === 'bar' || params.chartType === '막대') {\n    chartType = Excel.ChartType.columnClustered;\n  } else if (params.chartType === 'line' || params.chartType === '선') {\n    chartType = Excel.ChartType.line;\n  } else if (params.chartType === 'pie' || params.chartType === '원') {\n    chartType = Excel.ChartType.pie;\n  } else if (params.chartType === 'scatter' || params.chartType === '분산형') {\n    chartType = Excel.ChartType.xyscatter;\n  } else {\n    // Default to column chart\n    chartType = Excel.ChartType.columnClustered;\n  }\n  \n  try {\n    // Validate source data before creating chart\n    if (!sourceData) {\n      return { success: false, error: '차트 데이터가 없습니다.' };\n    }\n    \n    // Create the chart with error handling\n    \n    const chart = worksheet.charts.add(chartType, sourceData, Excel.ChartSeriesBy.auto);\n    \n    // Set chart properties\n    chart.title.text = params.title || '차트';\n    chart.height = 300;\n    chart.width = 400;\n    \n    // Position the chart\n    chart.left = params.offsetX || 100;\n    chart.top = params.offsetY || 100;\n    \n    // Set legend position\n    chart.legend.position = Excel.ChartLegendPosition.bottom;\n    chart.legend.visible = true;\n    \n    await context.sync();\n    \n  } catch (chartError) {\n    \n    // Try a simpler chart type as fallback\n    if (chartType !== Excel.ChartType.columnClustered) {\n      try {\n        const chart = worksheet.charts.add(Excel.ChartType.columnClustered, sourceData, Excel.ChartSeriesBy.auto);\n        chart.title.text = params.title || '차트';\n        chart.height = 300;\n        chart.width = 400;\n        chart.left = params.offsetX || 100;\n        chart.top = params.offsetY || 100;\n        await context.sync();\n        \n        return {\n          success: true,\n          message: `${dataAddress} 범위로 막대 차트가 생성되었습니다. (원래 요청한 차트 타입이 지원되지 않아 막대 차트로 대체되었습니다.)`\n        };\n      } catch (fallbackError) {\n        return { success: false, error: '차트 생성에 실패했습니다. 데이터 형식을 확인해주세요.' };\n      }\n    }\n    \n    return { success: false, error: `차트 생성 중 오류: ${chartError.message}` };\n  }\n  \n  return {\n    success: true,\n    message: `${dataAddress} 범위로 ${params.chartType || '막대'} 차트가 생성되었습니다.`\n  };\n}\n\n// Add conditional formatting\nasync function executeConditionalFormat(context, params) {\n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  let ranges = [];\n  \n  \n  if (params.range) {\n    ranges.push(worksheet.getRange(params.range));\n  } else {\n    // If no range specified, use the entire used range of the worksheet\n    const usedRange = worksheet.getUsedRangeOrNullObject();\n    usedRange.load(\"isNullObject\");\n    await context.sync();\n    \n    if (!usedRange.isNullObject) {\n      // Use the entire used range\n      ranges.push(usedRange);\n    } else {\n      // If no used range, apply to a large default range\n      // Excel will optimize this automatically\n      const defaultRange = worksheet.getRange(\"A1:XFD1048576\");\n      ranges.push(defaultRange);\n    }\n  }\n  \n  // Apply conditional formatting to all ranges\n  try {\n    for (const range of ranges) {\n      // Load range to ensure it's valid\n      range.load(\"address\");\n      await context.sync();\n      \n      \n      // Simply apply conditional format to the entire range\n      // Excel will automatically skip non-numeric cells for numeric comparisons\n      const conditionalFormat = range.conditionalFormats.add(Excel.ConditionalFormatType.cellValue);\n      \n      // Set the rule based on condition\n      if (params.condition === 'greater_than' && params.value !== undefined) {\n        conditionalFormat.cellValue.rule = {\n          formula1: params.value.toString(),\n          operator: Excel.ConditionalCellValueOperator.greaterThan\n        };\n      } else if (params.condition === 'less_than' && params.value !== undefined) {\n        conditionalFormat.cellValue.rule = {\n          formula1: params.value.toString(),\n          operator: Excel.ConditionalCellValueOperator.lessThan\n        };\n      } else if (params.condition === 'equal_to' && params.value !== undefined) {\n        conditionalFormat.cellValue.rule = {\n          formula1: params.value.toString(),\n          operator: Excel.ConditionalCellValueOperator.equalTo\n        };\n      } else if (params.condition === 'text_contains' && params.value !== undefined) {\n        conditionalFormat.cellValue.rule = {\n          formula1: params.value.toString(),\n          operator: Excel.ConditionalCellValueOperator.containsText\n        };\n      } else {\n        // Default to greater than\n        conditionalFormat.cellValue.rule = {\n          formula1: (params.value || 0).toString(),\n          operator: Excel.ConditionalCellValueOperator.greaterThan\n        };\n      }\n      \n      // Set the format\n      conditionalFormat.cellValue.format.fill.color = params.backgroundColor || \"#00FF00\";\n      if (params.fontColor) {\n        conditionalFormat.cellValue.format.font.color = params.fontColor;\n      }\n      if (params.bold) {\n        conditionalFormat.cellValue.format.font.bold = true;\n      }\n    }\n  } catch (formatError) {\n    return {\n      success: false,\n      error: `조건부 서식 적용 중 오류: ${formatError.message}`\n    };\n  }\n  \n  await context.sync();\n  \n  return {\n    success: true,\n    message: `조건부 서식이 적용되었습니다. (${params.condition} ${params.value || ''})`\n  };\n}\n\n// Translate column contents\nasync function executeTranslate(context, params) {\n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  \n  if (!params.targetLanguage) {\n    return { success: false, error: '대상 언어를 지정해주세요.' };\n  }\n  \n  let sourceRange;\n  let targetColumnIndex;\n  \n  if (params.sourceRange) {\n    // Handle column ranges like \"C:C\" by intersecting with used range\n    if (params.sourceRange.match(/^[A-Z]+:[A-Z]+$/)) {\n      const usedRange = worksheet.getUsedRange();\n      if (!usedRange) {\n        return { success: false, error: '번역할 데이터가 없습니다.' };\n      }\n      \n      usedRange.load([\"rowCount\", \"columnCount\"]);\n      await context.sync();\n      \n      \n      // Get the column letter from the range (e.g., \"C\" from \"C:C\")\n      const columnLetter = params.sourceRange.split(':')[0];\n      const columnIndex = columnLetter.charCodeAt(0) - 65;\n      \n      // Get only the used portion of the column, starting from row 2 (skip header)\n      if (usedRange.rowCount > 1) {\n        sourceRange = worksheet.getRangeByIndexes(1, columnIndex, usedRange.rowCount - 1, 1);\n      } else {\n        return { success: false, error: '번역할 데이터가 없습니다.' };\n      }\n      \n      // Handle target range similarly\n      if (params.targetRange && params.targetRange.match(/^[A-Z]+:[A-Z]+$/)) {\n        const targetColumnLetter = params.targetRange.split(':')[0];\n        targetColumnIndex = targetColumnLetter.charCodeAt(0) - 65;\n      } else {\n        // If no target specified, use next column\n        targetColumnIndex = columnIndex + 1;\n      }\n    } else {\n      // Handle specific ranges like \"B2:B40\"\n      sourceRange = worksheet.getRange(params.sourceRange);\n      \n      // Parse target column if specified\n      if (params.targetRange) {\n        if (params.targetRange.match(/^[A-Z]+:[A-Z]+$/)) {\n          // Extract column letter from targetRange like \"E:E\"\n          const targetColumnLetter = params.targetRange.split(':')[0];\n          targetColumnIndex = targetColumnLetter.charCodeAt(0) - 65;\n        }\n      }\n    }\n  } else if (params.sourceColumn) {\n    const columnIndex = params.sourceColumn.charCodeAt(0) - 65;\n    const usedRange = worksheet.getUsedRange();\n    usedRange.load([\"rowCount\"]);\n    await context.sync();\n    \n    if (usedRange.rowCount > 1) {\n      sourceRange = worksheet.getRangeByIndexes(1, columnIndex, usedRange.rowCount - 1, 1);\n    } else {\n      return { success: false, error: '번역할 데이터가 없습니다.' };\n    }\n    \n    targetColumnIndex = params.targetColumn === 'next' ? columnIndex + 1 :\n                       params.targetColumn ? params.targetColumn.charCodeAt(0) - 65 : columnIndex + 1;\n  } else {\n    return { success: false, error: '번역할 열을 지정해주세요.' };\n  }\n  \n  sourceRange.load([\"values\", \"rowIndex\", \"columnIndex\", \"rowCount\"]);\n  await context.sync();\n  \n  \n  const sourceValues = sourceRange.values;\n  if (!sourceValues || sourceValues.length === 0) {\n    return { success: false, error: '번역할 데이터가 없습니다.' };\n  }\n  \n  const translations = [];\n  const batchSize = 20;\n  \n  // Translate in batches\n  for (let i = 0; i < sourceValues.length; i += batchSize) {\n    const batch = sourceValues.slice(i, Math.min(i + batchSize, sourceValues.length));\n    const batchTexts = batch.map(row => row[0]).filter(text => text);\n    \n    if (batchTexts.length > 0) {\n      const translatedBatch = await translateBatch(batchTexts, params.targetLanguage, params.sourceLanguage);\n      \n      // Check if translatedBatch is valid\n      if (!translatedBatch || !Array.isArray(translatedBatch)) {\n        // Mark all as translation failed\n        for (let j = 0; j < batch.length; j++) {\n          if (batch[j][0]) {\n            translations.push([{ text: '번역 실패', isError: true }]);\n          } else {\n            translations.push([{ text: '', isError: false }]);\n          }\n        }\n      } else {\n        \n        let translationIndex = 0;\n        for (let j = 0; j < batch.length; j++) {\n          if (batch[j][0]) {\n            const translatedText = translatedBatch[translationIndex] || '';\n            // Check if translation is empty or failed\n            if (!translatedText || translatedText.trim() === '') {\n              translations.push([{ text: '번역 실패', isError: true }]);\n            } else {\n              translations.push([{ text: translatedText, isError: false }]);\n            }\n            if (j < 3) {\n            }\n            translationIndex++;\n          } else {\n            // Keep empty rows as empty\n            translations.push([{ text: '', isError: false }]);\n          }\n        }\n      }\n    } else {\n      for (let j = 0; j < batch.length; j++) {\n        translations.push([{ text: '', isError: false }]);\n      }\n    }\n    \n    // Show progress\n    if (i % 100 === 0 && i > 0) {\n      showStatus(`번역 중... ${Math.round((i / sourceValues.length) * 100)}% (${i}/${sourceValues.length})`, 'info');\n    }\n  }\n  \n  // Write translations\n  \n  // DEBUG: Check if translations contain original text instead of translations\n  for (let i = 0; i < Math.min(5, translations.length); i++) {\n  }\n  \n  // Ensure targetColumnIndex is set correctly\n  if (targetColumnIndex === undefined) {\n    // If no target column specified, use the next column after source\n    targetColumnIndex = sourceRange.columnIndex + 1;\n  }\n  \n  const targetRange = worksheet.getRangeByIndexes(\n    sourceRange.rowIndex,\n    targetColumnIndex,\n    translations.length,\n    1\n  );\n  \n  targetRange.load([\"address\", \"values\"]);\n  await context.sync();\n  \n  // Clear existing values first\n  targetRange.clear(Excel.ClearApplyTo.contents);\n  await context.sync();\n  \n  // Ensure translations are properly formatted as 2D array\n  \n  // Process translations and prepare values\n  const stringTranslations = [];\n  const errorRows = [];\n  \n  for (let i = 0; i < translations.length; i++) {\n    const translation = translations[i][0];\n    if (translation && typeof translation === 'object') {\n      stringTranslations.push([translation.text]);\n      if (translation.isError) {\n        errorRows.push(i);\n      }\n    } else {\n      // Handle legacy format\n      stringTranslations.push([String(translation || '')]);\n    }\n  }\n  \n  \n  // Set the values\n  targetRange.values = stringTranslations;\n  await context.sync();\n  \n  // Apply error styling to failed translations\n  if (errorRows.length > 0) {\n    for (const rowIndex of errorRows) {\n      const errorCell = targetRange.getCell(rowIndex, 0);\n      errorCell.format.fill.color = \"#FFE6E6\"; // Light red background\n      errorCell.format.font.color = \"#CC0000\"; // Dark red text\n      errorCell.format.font.bold = true;\n    }\n    await context.sync();\n  }\n  \n  \n  // Verify the values were actually written\n  targetRange.load([\"values\", \"text\", \"valueTypes\"]);\n  await context.sync();\n  \n  // Try alternative method - set each cell individually for debugging\n  if (translations.length > 0) {\n    const isEmpty = !targetRange.values[0] || !targetRange.values[0][0] || targetRange.values[0][0] === '';\n    \n    if (isEmpty) {\n      // Try setting just the first few cells individually\n      for (let i = 0; i < Math.min(3, translations.length); i++) {\n        const cellRow = sourceRange.rowIndex + i;\n        const cellCol = targetColumnIndex || sourceRange.columnIndex + 1;\n        const cell = worksheet.getCell(cellRow, cellCol);\n        const cellValue = stringTranslations[i][0];\n        \n        cell.values = [[cellValue]];\n        \n        await context.sync();\n        \n        // Verify it was set\n        cell.load(\"values\");\n        await context.sync();\n      }\n    }\n  }\n  \n  // Add header\n  const headerCell = worksheet.getCell(0, targetColumnIndex || sourceRange.columnIndex + 1);\n  const sourceHeaderCell = worksheet.getCell(0, sourceRange.columnIndex);\n  sourceHeaderCell.load(\"values\");\n  await context.sync();\n  \n  headerCell.values = [[`${sourceHeaderCell.values[0][0]} (${params.targetLanguage})`]];\n  await context.sync();\n  \n  return {\n    success: true,\n    message: `번역이 완료되었습니다. (${sourceValues.length}개 항목)`\n  };\n}\n\n// Translate a batch of texts through proxy\nasync function translateBatch(texts, targetLanguage, sourceLanguage) {\n  try {\n    \n    // Get selected model and auth key\n    const selectedModel = localStorage.getItem(\"excel_addon_selected_model\") || \"gpt-5-nano-2025-08-07\";\n    const authKey = localStorage.getItem(\"excel_addon_auth_key\");\n    const authEmail = localStorage.getItem(\"excel_addon_auth_email\");\n    \n    // Only send auth info for premium model\n    const requestBody = {\n      command: `Translate these items to ${targetLanguage}: ${texts.join(', ')}`,\n      sheetContext: {\n        operation: 'translate_batch',\n        texts: texts,\n        targetLanguage: targetLanguage,\n        sourceLanguage: sourceLanguage\n      },\n      model: selectedModel,\n      clientType: 'excel' // Identify this as Excel client\n    };\n    \n    // Only add auth info if using premium model\n    if (selectedModel === \"gpt-5-2025-08-07\") {\n      requestBody.authKey = authKey;\n      requestBody.authEmail = authEmail;\n    }\n    \n    const response = await fetch(API_PROXY_URL, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(requestBody)\n    });\n    \n    \n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    \n    const result = await response.json();\n    \n    if (result.success && result.data && result.data.translations) {\n      return result.data.translations;\n    } else if (result.error) {\n      throw new Error(result.error);\n    } else {\n      throw new Error('번역 응답을 받을 수 없습니다.');\n    }\n  } catch (error) {\n    return texts.map(() => '');\n  }\n}\n\n// Helper functions\nfunction getColumnLetter(columnIndex) {\n  let columnLetter = '';\n  let tempIndex = columnIndex;\n  \n  while (tempIndex >= 0) {\n    columnLetter = String.fromCharCode((tempIndex % 26) + 65) + columnLetter;\n    tempIndex = Math.floor(tempIndex / 26) - 1;\n  }\n  \n  return columnLetter;\n}\n\nfunction formatNumber(value) {\n  if (typeof value === 'number') {\n    if (Number.isInteger(value)) {\n      return value.toLocaleString('ko-KR');\n    } else {\n      return value.toLocaleString('ko-KR', { minimumFractionDigits: 0, maximumFractionDigits: 2 });\n    }\n  }\n  return value;\n}\n\nfunction showStatus(message, type) {\n  const status = document.getElementById('status');\n  status.textContent = message;\n  status.className = 'status-message ' + type;\n  status.style.display = 'block';\n  \n  if (window.statusTimeout) {\n    clearTimeout(window.statusTimeout);\n  }\n  \n  if (type === 'success') {\n    window.statusTimeout = setTimeout(() => {\n      status.style.display = 'none';\n    }, 5000);\n  }\n}\n\nfunction clearInput() {\n  document.getElementById('commandInput').value = '';\n  document.getElementById('status').style.display = 'none';\n}\n\nfunction setCommand(command) {\n  document.getElementById('commandInput').value = command;\n  document.getElementById('commandInput').focus();\n}\n\n// Auth modal functions\n// Update auth button based on authentication state\nfunction updateAuthButton() {\n  const authKey = localStorage.getItem(\"excel_addon_auth_key\");\n  const authEmail = localStorage.getItem(\"excel_addon_auth_email\");\n  const authButton = document.getElementById(\"authButton\");\n  \n  if (authKey && authEmail) {\n    authButton.textContent = \"인증 해제\";\n    authButton.classList.add(\"authenticated\");\n  } else {\n    authButton.textContent = \"인증\";\n    authButton.classList.remove(\"authenticated\");\n  }\n}\n\n// Handle auth button click based on state\nfunction handleAuthAction() {\n  const authKey = localStorage.getItem(\"excel_addon_auth_key\");\n  const authEmail = localStorage.getItem(\"excel_addon_auth_email\");\n  \n  if (authKey && authEmail) {\n    // Show deauth confirmation modal\n    showDeauthModal();\n  } else {\n    // Show auth modal\n    showAuthModal();\n  }\n}\n\n// Show deauth modal\nfunction showDeauthModal() {\n  document.getElementById(\"deauthModal\").style.display = \"block\";\n}\n\n// Hide deauth modal\nfunction hideDeauthModal() {\n  document.getElementById(\"deauthModal\").style.display = \"none\";\n}\n\n// Confirm deauth action\nfunction confirmDeauth() {\n  try {\n    \n    // Clear auth data\n    localStorage.removeItem(\"excel_addon_auth_key\");\n    localStorage.removeItem(\"excel_addon_auth_email\");\n    \n    // Reset model to free version\n    document.getElementById(\"modelSelect\").value = \"gpt-5-nano-2025-08-07\";\n    \n    // Update button text\n    updateAuthButton();\n    \n    // Hide modal\n    hideDeauthModal();\n    \n    // Show success message\n    showStatus(\"인증이 해제되었습니다. 무료 모델로 전환됩니다.\", \"success\");\n  } catch (error) {\n    showStatus(\"인증 해제 중 오류가 발생했습니다.\", \"error\");\n  }\n}\n\n\nfunction showAuthModal() {\n  document.getElementById(\"authModal\").style.display = \"block\";\n}\n\nfunction hideAuthModal() {\n  document.getElementById(\"authModal\").style.display = \"none\";\n  document.getElementById(\"authEmailInput\").value = \"\";\n  document.getElementById(\"authKeyInput\").value = \"\";\n  document.getElementById(\"authStatus\").style.display = \"none\";\n}\n\nasync function submitAuthKey() {\n  const authKey = document.getElementById(\"authKeyInput\").value.trim();\n  const email = document.getElementById(\"authEmailInput\").value.trim();\n  \n  if (!email) {\n    showAuthStatus(\"이메일 주소를 입력해주세요.\", \"error\");\n    return;\n  }\n  \n  // 이메일 유효성 검사\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  if (!emailRegex.test(email)) {\n    showAuthStatus(\"올바른 이메일 형식이 아닙니다.\", \"error\");\n    return;\n  }\n  \n  if (!authKey) {\n    showAuthStatus(\"인증키를 입력해주세요.\", \"error\");\n    return;\n  }\n  \n  // Validate auth key format\n  if (authKey.length < 8) {\n    showAuthStatus(\"인증키는 최소 8자 이상이어야 합니다.\", \"error\");\n    return;\n  }\n  \n  // Test authentication with backend\n  showAuthStatus(\"인증을 확인하고 있습니다...\", \"info\");\n  \n  // Store temporarily for validation\n  localStorage.setItem(\"excel_addon_auth_key\", authKey);\n  localStorage.setItem(\"excel_addon_auth_email\", email);\n  \n  // Test with a simple API call that requires auth\n  try {\n    const response = await fetch(API_PROXY_URL, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        command: \"테스트\",\n        sheetContext: { \n          activeRange: { address: \"A1\" },\n          lastRow: 1,\n          lastColumn: 1,\n          headers: []\n        },\n        model: \"gpt-5-2025-08-07\",  // Force premium model to trigger auth check\n        authKey: authKey,\n        authEmail: email\n      })\n    });\n    \n    // Check response status first\n    if (response.status === 403) {\n      // Definitely invalid auth key\n      showAuthStatus(\"유효하지 않은 인증키입니다.\", \"error\");\n      localStorage.removeItem(\"excel_addon_auth_key\");\n      localStorage.removeItem(\"excel_addon_auth_email\");\n      return;\n    }\n    \n    const data = await response.json();\n    \n    // Check for any error in response or debug info\n    if (!data.success || data.error || data.debug) {\n      // Invalid auth key or other error\n      const errorMessage = data.error || (data.debug ? \"유효하지 않은 인증키입니다.\" : \"인증 오류가 발생했습니다.\");\n      showAuthStatus(errorMessage, \"error\");\n      localStorage.removeItem(\"excel_addon_auth_key\");\n      localStorage.removeItem(\"excel_addon_auth_email\");\n    } else {\n      // Valid auth key - command was processed successfully\n      showAuthStatus(\"인증이 완료되었습니다.\", \"success\");\n      \n      // Update auth button text\n      updateAuthButton();\n      \n      // Enable GPT-5 model\n      const modelSelect = document.getElementById(\"modelSelect\");\n      modelSelect.value = \"gpt-5-2025-08-07\";\n      handleModelChange();\n      \n      setTimeout(() => {\n        hideAuthModal();\n      }, 2000);\n    }\n  } catch (error) {\n    showAuthStatus(\"인증 확인 중 오류가 발생했습니다.\", \"error\");\n    localStorage.removeItem(\"excel_addon_auth_key\");\n    localStorage.removeItem(\"excel_addon_auth_email\");\n  }\n}\n\nfunction showAuthStatus(message, type) {\n  const statusDiv = document.getElementById(\"authStatus\");\n  statusDiv.textContent = message;\n  statusDiv.className = `auth-status ${type}`;\n  statusDiv.style.display = \"block\";\n}\n\nfunction showContactInfo() {\n  window.open('https://bit.ly/cellyform', '_blank');\n}\n\nfunction handleModelChange() {\n  const modelSelect = document.getElementById(\"modelSelect\");\n  const selectedModel = modelSelect.value;\n  \n  // Check if premium model is selected\n  if (selectedModel === \"gpt-5-2025-08-07\") {\n    const authKey = localStorage.getItem(\"excel_addon_auth_key\");\n    if (!authKey) {\n      showStatus(\"GPT-5 모델을 사용하려면 인증이 필요합니다.\", \"warning\");\n      modelSelect.value = \"gpt-5-nano-2025-08-07\"; // Reset to free model\n      showAuthModal();\n      return;\n    }\n  }\n  \n  // Store selected model\n  localStorage.setItem(\"excel_addon_selected_model\", selectedModel);\n  \n  // Show appropriate model name\n  let modelName;\n  if (selectedModel.includes(\"nano\")) {\n    modelName = \"GPT-5 nano\";\n  } else if (selectedModel.includes(\"mini\")) {\n    modelName = \"GPT-5 mini\";\n  } else {\n    modelName = \"GPT-5\";\n  }\n  showStatus(`모델이 ${modelName}로 변경되었습니다.`, \"success\");\n}\n\n// Test backend connection\nasync function testBackendConnection() {\n  try {\n    const testUrl = 'https://excel-addon-backend.vercel.app/api/test';\n    \n    const response = await fetch(testUrl, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({ test: true })\n    });\n    \n    \n    const data = await response.json();\n    \n    showStatus('백엔드 연결 테스트 성공', 'success');\n  } catch (error) {\n    showStatus('백엔드 연결 테스트 실패: ' + error.message, 'error');\n  }\n}\n\n// Format cell borders\nasync function executeBorderFormat(context, params) {\n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  \n  try {\n    let targetRanges = [];\n    \n    // Determine the range based on params\n    if (params.sourceColumn) {\n      // Column specified (e.g., \"C\" for C column)\n      const columnLetter = params.sourceColumn;\n      const columnIndex = columnLetter.charCodeAt(0) - 65; // A=0, B=1, C=2, etc.\n      \n      // Get the used range to find the last row with data\n      const usedRange = worksheet.getUsedRangeOrNullObject();\n      usedRange.load([\"rowCount\", \"isNullObject\"]);\n      await context.sync();\n      \n      if (!usedRange.isNullObject) {\n        // Apply to entire column with data\n        const lastRow = usedRange.rowCount;\n        const range = worksheet.getRangeByIndexes(0, columnIndex, lastRow, 1);\n        targetRanges.push(range);\n      } else {\n        // Empty sheet - apply to first cell of column\n        const range = worksheet.getRangeByIndexes(0, columnIndex, 1, 1);\n        targetRanges.push(range);\n      }\n    } else if (!params.range) {\n      // No range specified - handle multiple selections\n      try {\n        const selectedRanges = context.workbook.getSelectedRanges();\n        selectedRanges.load([\"areas\", \"areaCount\"]);\n        await context.sync();\n        \n        if (selectedRanges.areaCount > 1) {\n          // Multiple non-contiguous ranges selected\n          for (let i = 0; i < selectedRanges.areas.items.length; i++) {\n            targetRanges.push(selectedRanges.areas.items[i]);\n          }\n        } else {\n          // Single contiguous range\n          targetRanges.push(context.workbook.getSelectedRange());\n        }\n      } catch (error) {\n        return { success: false, error: '선택한 범위를 처리할 수 없습니다. 연속된 범위를 선택해주세요.' };\n      }\n    } else if (params.range === 'all' || params.range === '전체') {\n      // Entire sheet\n      const usedRange = worksheet.getUsedRangeOrNullObject();\n      usedRange.load(\"isNullObject\");\n      await context.sync();\n      \n      if (usedRange.isNullObject) {\n        return { success: false, error: '시트에 데이터가 없습니다.' };\n      } else {\n        targetRanges.push(usedRange);\n      }\n    } else {\n      // Specific range provided\n      targetRanges.push(worksheet.getRange(params.range));\n    }\n    \n    // Load all ranges\n    for (const range of targetRanges) {\n      range.load([\"address\", \"rowCount\", \"columnCount\"]);\n    }\n    await context.sync();\n    \n    for (let i = 0; i < targetRanges.length; i++) {\n    }\n    \n    // Determine which borders to format\n    const borderType = params.borderType || 'all';\n    const color = params.color || '#000000';\n    const style = params.style || 'Continuous';\n    \n    // Map style names to Excel constants\n    const styleMap = {\n      'continuous': 'Continuous',\n      'dash': 'Dash',\n      'dashdot': 'DashDot',\n      'double': 'Double',\n      'dot': 'Dot',\n      'dashdotdot': 'DashDotDot',\n      'slantdashdot': 'SlantDashDot'\n    };\n    \n    const excelStyle = styleMap[style.toLowerCase()] || 'Continuous';\n    \n    // Apply border formatting to all selected ranges\n    for (const targetRange of targetRanges) {\n      if (borderType === 'all') {\n        // Format all borders\n        const borderItems = ['EdgeTop', 'EdgeBottom', 'EdgeLeft', 'EdgeRight', 'InsideVertical', 'InsideHorizontal'];\n        \n        for (const borderItem of borderItems) {\n          try {\n            const border = targetRange.format.borders.getItem(borderItem);\n            border.style = excelStyle;\n            border.color = color;\n            border.weight = 'Thin';\n          } catch (e) {\n            // Some border items might not be applicable (e.g., InsideVertical for single cell)\n          }\n        }\n      } else if (borderType === 'inside') {\n        // Format only inside borders\n        try {\n          const insideV = targetRange.format.borders.getItem('InsideVertical');\n          insideV.style = excelStyle;\n          insideV.color = color;\n          insideV.weight = 'Thin';\n        } catch (e) {\n        }\n        \n        try {\n          const insideH = targetRange.format.borders.getItem('InsideHorizontal');\n          insideH.style = excelStyle;\n          insideH.color = color;\n          insideH.weight = 'Thin';\n        } catch (e) {\n        }\n      } else {\n        // Format specific border\n        const borderMap = {\n          'top': 'EdgeTop',\n          'bottom': 'EdgeBottom',\n          'left': 'EdgeLeft',\n          'right': 'EdgeRight'\n        };\n        \n        const borderName = borderMap[borderType.toLowerCase()];\n        if (borderName) {\n          const border = targetRange.format.borders.getItem(borderName);\n          border.style = excelStyle;\n          border.color = color;\n          border.weight = 'Thin';\n        }\n      }\n    }\n    \n    await context.sync();\n    \n    return {\n      success: true,\n      message: '테두리 서식이 적용되었습니다.'\n    };\n    \n  } catch (error) {\n    return {\n      success: false,\n      error: `테두리 서식 적용 중 오류 발생: ${error.message}`\n    };\n  }\n}\n\n// Additional operations (compress, filter, insert, delete, formula, retry_translation)\n// These would need to be implemented based on Excel JavaScript API capabilities\n\nasync function executeCompress(context, params) {\n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  \n  try {\n    if (!params.range) {\n      return { success: false, error: '범위를 지정해주세요.' };\n    }\n    \n    // Handle column reference like \"J\" or \"J:J\"\n    let rangeAddress = params.range;\n    \n    // Check if this is a column reference without row numbers\n    if (/^[A-Z]+$/.test(rangeAddress) || /^[A-Z]+:[A-Z]+$/.test(rangeAddress)) {\n      // Get used range to determine the actual data range\n      const usedRange = worksheet.getUsedRange();\n      if (!usedRange) {\n        return { success: false, error: '워크시트에 데이터가 없습니다.' };\n      }\n      \n      usedRange.load([\"rowCount\"]);\n      await context.sync();\n      \n      // Convert column reference to full range (e.g., \"J\" -> \"J1:J{rowCount}\")\n      const columnLetter = rangeAddress.split(':')[0];\n      rangeAddress = `${columnLetter}1:${columnLetter}${usedRange.rowCount}`;\n    }\n    \n    // Get the specified range\n    const checkRange = worksheet.getRange(rangeAddress);\n    checkRange.load([\"rowIndex\", \"rowCount\", \"columnIndex\", \"values\", \"address\"]);\n    await context.sync();\n    \n    \n    // Check if values is null or undefined\n    if (!checkRange.values) {\n      return {\n        success: false,\n        error: '지정된 범위를 읽을 수 없습니다.'\n      };\n    }\n    \n    // Find empty rows in the specified column\n    const emptyRows = [];\n    const values = checkRange.values;\n    \n    // Find the last row with data\n    let lastRowWithData = -1;\n    for (let i = values.length - 1; i >= 0; i--) {\n      const cellValue = values[i][0];\n      if (cellValue !== null && cellValue !== undefined && cellValue !== '' && \n          !(typeof cellValue === 'string' && cellValue.trim() === '')) {\n        lastRowWithData = i;\n        break;\n      }\n    }\n    \n    if (lastRowWithData === -1) {\n      return {\n        success: true,\n        message: '모든 행이 비어있습니다.'\n      };\n    }\n    \n    // Check each row up to the last row with data\n    for (let i = 0; i <= lastRowWithData; i++) {\n      const cellValue = values[i][0]; // First column of the range\n      if (cellValue === null || cellValue === undefined || cellValue === '' || \n          (typeof cellValue === 'string' && cellValue.trim() === '')) {\n        // This row is empty in the specified column\n        // Store the actual row index (rowIndex + i)\n        emptyRows.push(checkRange.rowIndex + i);\n      }\n    }\n    \n    \n    if (emptyRows.length === 0) {\n      return {\n        success: true,\n        message: '제거할 빈 행이 없습니다.'\n      };\n    }\n    \n    // Delete rows from bottom to top to avoid index shifting\n    emptyRows.sort((a, b) => b - a); // Sort in descending order\n    \n    // Get the used range to determine column count\n    const usedRange = worksheet.getUsedRange();\n    usedRange.load([\"columnCount\"]);\n    await context.sync();\n    \n    const columnCount = usedRange.columnCount || 100;\n    \n    for (const rowIndex of emptyRows) {\n      // Get the entire row\n      const rowToDelete = worksheet.getRangeByIndexes(rowIndex, 0, 1, columnCount);\n      rowToDelete.delete(Excel.DeleteShiftDirection.up);\n      await context.sync();\n    }\n    \n    return {\n      success: true,\n      message: `${emptyRows.length}개의 빈 행이 제거되었습니다.`\n    };\n    \n  } catch (error) {\n    return {\n      success: false,\n      error: `빈 행 제거 중 오류 발생: ${error.message}`\n    };\n  }\n}\n\nasync function executeFilter(context, params) {\n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  const range = params.range ? worksheet.getRange(params.range) : worksheet.getUsedRange();\n  \n  // Apply autofilter\n  range.worksheet.autoFilter.apply(range);\n  \n  await context.sync();\n  \n  return {\n    success: true,\n    message: '필터가 적용되었습니다.'\n  };\n}\n\nasync function executeInsert(context, params) {\n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  const type = params.type || 'row';\n  const position = params.position || 1;\n  const count = params.count || 1;\n  \n  if (type === 'row') {\n    const range = worksheet.getRangeByIndexes(position - 1, 0, count, 1);\n    range.insert(Excel.InsertShiftDirection.down);\n  } else {\n    const range = worksheet.getRangeByIndexes(0, position - 1, 1, count);\n    range.insert(Excel.InsertShiftDirection.right);\n  }\n  \n  await context.sync();\n  \n  return {\n    success: true,\n    message: `${count}개의 ${type === 'row' ? '행' : '열'}이 삽입되었습니다.`\n  };\n}\n\nasync function executeDelete(context, params) {\n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  \n  // Handle new parameter format\n  if (params.deleteType) {\n    switch (params.deleteType) {\n      case 'column':\n        // Delete single column\n        if (!params.column) {\n          return { success: false, error: '삭제할 열을 지정해주세요.' };\n        }\n        \n        // Convert column letter to index\n        let columnIndex = 0;\n        for (let i = 0; i < params.column.length; i++) {\n          columnIndex = columnIndex * 26 + (params.column.charCodeAt(i) - 64);\n        }\n        columnIndex--; // Convert to 0-based index\n        \n        const columnRange = worksheet.getRangeByIndexes(0, columnIndex, 1048576, 1); // Full column\n        columnRange.delete(Excel.DeleteShiftDirection.left);\n        await context.sync();\n        \n        return {\n          success: true,\n          message: `${params.column}열이 삭제되었습니다.`\n        };\n        \n      case 'row':\n        // Delete single row\n        if (!params.row) {\n          return { success: false, error: '삭제할 행을 지정해주세요.' };\n        }\n        \n        const rowRange = worksheet.getRangeByIndexes(params.row - 1, 0, 1, 16384); // Full row\n        rowRange.delete(Excel.DeleteShiftDirection.up);\n        await context.sync();\n        \n        return {\n          success: true,\n          message: `${params.row}행이 삭제되었습니다.`\n        };\n        \n      case 'columns':\n        // Delete multiple columns\n        if (!params.startColumn || !params.endColumn) {\n          return { success: false, error: '삭제할 열 범위를 지정해주세요.' };\n        }\n        \n        // Convert column letters to indices\n        let startIndex = 0, endIndex = 0;\n        for (let i = 0; i < params.startColumn.length; i++) {\n          startIndex = startIndex * 26 + (params.startColumn.charCodeAt(i) - 64);\n        }\n        for (let i = 0; i < params.endColumn.length; i++) {\n          endIndex = endIndex * 26 + (params.endColumn.charCodeAt(i) - 64);\n        }\n        startIndex--; // Convert to 0-based\n        endIndex--;   // Convert to 0-based\n        \n        const columnCount = endIndex - startIndex + 1;\n        const columnsRange = worksheet.getRangeByIndexes(0, startIndex, 1048576, columnCount);\n        columnsRange.delete(Excel.DeleteShiftDirection.left);\n        await context.sync();\n        \n        return {\n          success: true,\n          message: `${params.startColumn}-${params.endColumn}열이 삭제되었습니다.`\n        };\n        \n      case 'rows':\n        // Delete multiple rows\n        if (!params.startRow || !params.endRow) {\n          return { success: false, error: '삭제할 행 범위를 지정해주세요.' };\n        }\n        \n        const rowCount = params.endRow - params.startRow + 1;\n        const rowsRange = worksheet.getRangeByIndexes(params.startRow - 1, 0, rowCount, 16384);\n        rowsRange.delete(Excel.DeleteShiftDirection.up);\n        await context.sync();\n        \n        return {\n          success: true,\n          message: `${params.startRow}-${params.endRow}행이 삭제되었습니다.`\n        };\n        \n      default:\n        return { success: false, error: '알 수 없는 삭제 유형입니다.' };\n    }\n  }\n  \n  // Handle old parameter format (backward compatibility)\n  const type = params.type || 'row';\n  const position = params.position || 1;\n  const count = params.count || 1;\n  \n  if (type === 'row') {\n    const range = worksheet.getRangeByIndexes(position - 1, 0, count, 1);\n    range.delete(Excel.DeleteShiftDirection.up);\n  } else {\n    const range = worksheet.getRangeByIndexes(0, position - 1, 1, count);\n    range.delete(Excel.DeleteShiftDirection.left);\n  }\n  \n  await context.sync();\n  \n  return {\n    success: true,\n    message: `${count}개의 ${type === 'row' ? '행' : '열'}이 삭제되었습니다.`\n  };\n}\n\nasync function executeFormula(context, params) {\n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  const range = params.range ? worksheet.getRange(params.range) : context.workbook.getSelectedRange();\n  \n  if (!params.formula) {\n    return { success: false, error: '수식을 지정해주세요.' };\n  }\n  \n  range.formulas = [[params.formula]];\n  await context.sync();\n  \n  return {\n    success: true,\n    message: '수식이 적용되었습니다.'\n  };\n}\n\nasync function executeRetryTranslation(context, params) {\n  // Implementation would be similar to Google Sheets version\n  // but using Excel JavaScript API\n  return {\n    success: false,\n    error: '이 기능은 현재 구현 중입니다.'\n  };\n}\n\nasync function executeRemoveBorder(context, params) {\n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  \n  try {\n    let targetRanges = [];\n    \n    // Determine the range to apply border removal\n    if (params.sourceColumn) {\n      // Column specified (e.g., \"C\" for C column)\n      const columnLetter = params.sourceColumn;\n      const columnIndex = columnLetter.charCodeAt(0) - 65; // A=0, B=1, C=2, etc.\n      \n      // Get the used range to find the last row with data\n      const usedRange = worksheet.getUsedRangeOrNullObject();\n      usedRange.load([\"rowCount\", \"isNullObject\"]);\n      await context.sync();\n      \n      if (!usedRange.isNullObject) {\n        // Apply to entire column with data\n        const lastRow = usedRange.rowCount;\n        const range = worksheet.getRangeByIndexes(0, columnIndex, lastRow, 1);\n        targetRanges.push(range);\n      } else {\n        // Empty sheet - apply to first cell of column\n        const range = worksheet.getRangeByIndexes(0, columnIndex, 1, 1);\n        targetRanges.push(range);\n      }\n    } else if (params.range) {\n      // Handle special case for entire sheet\n      if (params.range === 'all' || params.range === '전체') {\n        // Use getUsedRangeOrNullObject to get the actual used range\n        const usedRange = worksheet.getUsedRangeOrNullObject();\n        usedRange.load(\"isNullObject\");\n        await context.sync();\n        \n        if (usedRange.isNullObject) {\n          return { success: true, message: '시트에 데이터가 없어 테두리를 제거할 필요가 없습니다.' };\n        } else {\n          // Expand the used range to ensure we get all cells that might have borders\n          usedRange.load([\"rowCount\", \"columnCount\", \"rowIndex\", \"columnIndex\"]);\n          await context.sync();\n          \n          // Get a slightly larger range to ensure we capture all borders\n          const expandedRows = Math.min(usedRange.rowCount + 100, 1048576);\n          const expandedCols = Math.min(usedRange.columnCount + 20, 16384);\n          targetRanges.push(worksheet.getRangeByIndexes(0, 0, expandedRows, expandedCols));\n        }\n      } else if (params.range.match(/^[A-Z]+:[A-Z]+$/)) {\n        // Handle column ranges like \"C:C\"\n        const usedRange = worksheet.getUsedRange();\n        if (!usedRange) {\n          return { success: false, error: '데이터가 없습니다.' };\n        }\n        \n        usedRange.load([\"rowCount\", \"columnCount\"]);\n        await context.sync();\n        \n        // Get the column letter from the range (e.g., \"C\" from \"C:C\")\n        const columnLetter = params.range.split(':')[0];\n        const columnIndex = columnLetter.charCodeAt(0) - 65;\n        \n        // Get the entire used portion of the column\n        targetRanges.push(worksheet.getRangeByIndexes(0, columnIndex, usedRange.rowCount, 1));\n      } else {\n        // Handle specific ranges like \"A1:B10\"\n        targetRanges.push(worksheet.getRange(params.range));\n      }\n    } else {\n      // If no range specified, handle multiple selections\n      try {\n        const selectedRanges = context.workbook.getSelectedRanges();\n        selectedRanges.load([\"areas\", \"areaCount\"]);\n        await context.sync();\n        \n        if (selectedRanges.areaCount > 1) {\n          // Multiple non-contiguous ranges selected\n          for (let i = 0; i < selectedRanges.areas.items.length; i++) {\n            targetRanges.push(selectedRanges.areas.items[i]);\n          }\n        } else {\n          // Single contiguous range\n          targetRanges.push(context.workbook.getSelectedRange());\n        }\n      } catch (error) {\n        return { success: false, error: '선택한 범위를 처리할 수 없습니다. 연속된 범위를 선택해주세요.' };\n      }\n    }\n    \n    // Load all ranges\n    for (const range of targetRanges) {\n      range.load([\"address\", \"rowCount\", \"columnCount\"]);\n    }\n    await context.sync();\n    \n    for (let i = 0; i < targetRanges.length; i++) {\n    }\n    \n    // Determine which borders to remove\n    const borderType = params.borderType || 'all';\n    \n    // Apply border removal to all selected ranges\n    for (const targetRange of targetRanges) {\n      if (borderType === 'all') {\n        // Remove all borders\n        targetRange.format.borders.getItem(Excel.BorderIndex.edgeLeft).style = Excel.BorderLineStyle.none;\n        targetRange.format.borders.getItem(Excel.BorderIndex.edgeRight).style = Excel.BorderLineStyle.none;\n        targetRange.format.borders.getItem(Excel.BorderIndex.edgeTop).style = Excel.BorderLineStyle.none;\n        targetRange.format.borders.getItem(Excel.BorderIndex.edgeBottom).style = Excel.BorderLineStyle.none;\n        targetRange.format.borders.getItem(Excel.BorderIndex.insideHorizontal).style = Excel.BorderLineStyle.none;\n        targetRange.format.borders.getItem(Excel.BorderIndex.insideVertical).style = Excel.BorderLineStyle.none;\n      } else {\n        // Remove specific border\n        switch (borderType) {\n          case 'right':\n            targetRange.format.borders.getItem(Excel.BorderIndex.edgeRight).style = Excel.BorderLineStyle.none;\n            break;\n          case 'left':\n            targetRange.format.borders.getItem(Excel.BorderIndex.edgeLeft).style = Excel.BorderLineStyle.none;\n            break;\n          case 'top':\n            targetRange.format.borders.getItem(Excel.BorderIndex.edgeTop).style = Excel.BorderLineStyle.none;\n            break;\n          case 'bottom':\n            targetRange.format.borders.getItem(Excel.BorderIndex.edgeBottom).style = Excel.BorderLineStyle.none;\n            break;\n          default:\n            return { success: false, error: `알 수 없는 테두리 유형: ${borderType}` };\n        }\n      }\n    }\n    \n    await context.sync();\n    \n    return {\n      success: true,\n      message: `${borderType === 'all' ? '모든' : borderType} 테두리가 제거되었습니다.`\n    };\n    \n  } catch (error) {\n    return {\n      success: false,\n      error: `테두리 제거 중 오류 발생: ${error.message}`\n    };\n  }\n}\n\n// Execute standard deviation calculation\nasync function executeStandardDeviation(params) {\n  try {\n    return await Excel.run(async (context) => {\n      const worksheet = context.workbook.worksheets.getActiveWorksheet();\n      \n      // Get used range to find data\n      const range = worksheet.getUsedRange();\n      if (!range) {\n        return { success: false, error: \"계산할 데이터가 없습니다.\" };\n      }\n      \n      range.load([\"values\", \"rowCount\", \"columnCount\"]);\n      await context.sync();\n      \n      if (!range.values || range.rowCount < 2) {\n        return { success: false, error: \"계산할 데이터가 없습니다.\" };\n      }\n      \n      const columnName = params.sourceColumn;\n      let columnIndex = -1;\n      \n      // Check if it's a column letter or header name\n      if (/^[A-Z]+$/i.test(columnName)) {\n        // It's a column letter\n        columnIndex = columnName.toUpperCase().charCodeAt(0) - 65;\n      } else {\n        // It's a header name - search for it\n        const headers = range.values[0];\n        columnIndex = headers.findIndex(header => \n          header && header.toString().toLowerCase() === columnName.toLowerCase()\n        );\n        \n        if (columnIndex === -1) {\n          return { success: false, error: `열 \"${columnName}\"을 찾을 수 없습니다.` };\n        }\n      }\n      \n      if (columnIndex >= range.columnCount) {\n        return { success: false, error: `열 인덱스가 범위를 벗어났습니다.` };\n      }\n      \n      // Get the column letter\n      const columnLetter = String.fromCharCode(65 + columnIndex);\n      \n      // Find last row with data in this column\n      let lastDataRow = 1; // Start from row 1 (header)\n      for (let i = 1; i < range.rowCount; i++) {\n        const value = range.values[i][columnIndex];\n        if (value !== null && value !== undefined && value !== '' && !isNaN(value)) {\n          lastDataRow = i + 1; // +1 because Excel rows are 1-indexed\n        }\n      }\n      \n      if (lastDataRow <= 1) {\n        return { success: false, error: \"계산할 숫자 데이터가 없습니다.\" };\n      }\n      \n      // Create formula avoiding circular reference\n      const formula = `=STDEV.S(${columnLetter}2:${columnLetter}${lastDataRow})`;\n      \n      // Determine target cell\n      const targetRow = lastDataRow + 1;\n      const targetCellAddress = `${columnLetter}${targetRow}`;\n      \n      // Set the formula\n      const targetRange = worksheet.getRange(targetCellAddress);\n      targetRange.formulas = [[formula]];\n      \n      await context.sync();\n      \n      return {\n        success: true,\n        message: `${columnLetter}열의 표준편차가 ${targetCellAddress}에 계산되었습니다.`\n      };\n    });\n  } catch (error) {\n    return {\n      success: false,\n      error: `표준편차 계산 중 오류: ${error.message || error.toString()}`\n    };\n  }\n}\n\n// Execute max value finding\nasync function executeMaxValue(params) {\n  try {\n    return await Excel.run(async (context) => {\n      const worksheet = context.workbook.worksheets.getActiveWorksheet();\n      \n      // Get used range to find data\n      const range = worksheet.getUsedRange();\n      if (!range) {\n        return { success: false, error: \"검색할 데이터가 없습니다.\" };\n      }\n      \n      range.load([\"values\", \"rowCount\", \"columnCount\"]);\n      await context.sync();\n      \n      if (!range.values || range.rowCount < 2) {\n        return { success: false, error: \"검색할 데이터가 없습니다.\" };\n      }\n    \n    const columnName = params.sourceColumn;\n    let columnIndex = -1;\n    \n    // Check if it's a column letter or header name\n    if (/^[A-Z]+$/i.test(columnName)) {\n      // It's a column letter\n      columnIndex = columnName.toUpperCase().charCodeAt(0) - 65;\n    } else {\n      // It's a header name - search for it\n      const headers = range.values[0];\n      columnIndex = headers.findIndex(header => \n        header && header.toString().toLowerCase() === columnName.toLowerCase()\n      );\n      \n      if (columnIndex === -1) {\n        return { success: false, error: `열 \"${columnName}\"을 찾을 수 없습니다.` };\n      }\n    }\n    \n    // Get the column letter\n    const columnLetter = String.fromCharCode(65 + columnIndex);\n    \n    // Find last row with data in this column\n    let lastDataRow = 1; // Start from row 1 (header)\n    for (let i = 1; i < range.rowCount; i++) {\n      const value = range.values[i][columnIndex];\n      if (value !== null && value !== undefined && value !== '' && !isNaN(value)) {\n        lastDataRow = i + 1; // +1 because Excel rows are 1-indexed\n      }\n    }\n    \n    if (lastDataRow <= 1) {\n      return { success: false, error: \"검색할 숫자 데이터가 없습니다.\" };\n    }\n    \n    // Create formula\n    const formula = `=MAX(${columnLetter}2:${columnLetter}${lastDataRow})`;\n    \n    // Determine target cell\n    const targetRow = lastDataRow + 1;\n    const targetCellAddress = `${columnLetter}${targetRow}`;\n    \n    // Set the formula\n    const targetRange = worksheet.getRange(targetCellAddress);\n    targetRange.formulas = [[formula]];\n    \n    await context.sync();\n    \n    return {\n      success: true,\n      message: `${columnLetter}열의 최댓값이 ${targetCellAddress}에 표시되었습니다.`\n    };\n  });\n  } catch (error) {\n    return {\n      success: false,\n      error: `최댓값 계산 중 오류: ${error.message || error.toString()}`\n    };\n  }\n}\n\n// Execute remove duplicates\nasync function executeRemoveDuplicates(params) {\n  try {\n    return await Excel.run(async (context) => {\n      const worksheet = context.workbook.worksheets.getActiveWorksheet();\n      \n      // Get used range to find data\n      const range = worksheet.getUsedRange();\n      if (!range) {\n        return { success: false, error: \"처리할 데이터가 없습니다.\" };\n      }\n      \n      range.load([\"values\", \"rowCount\", \"columnCount\"]);\n      await context.sync();\n      \n      if (!range.values || range.rowCount < 2) {\n        return { success: false, error: \"처리할 데이터가 없습니다.\" };\n      }\n    \n    const columnName = params.sourceColumn;\n    let columnIndex = -1;\n    \n    // Check if it's a column letter or header name\n    if (/^[A-Z]+$/i.test(columnName)) {\n      // It's a column letter\n      columnIndex = columnName.toUpperCase().charCodeAt(0) - 65;\n      \n      if (columnIndex >= range.columnCount) {\n        return { success: false, error: `열 \"${columnName}\"에 데이터가 없습니다.` };\n      }\n    } else {\n      // It's a header name - search for it\n      const headers = range.values[0];\n      columnIndex = headers.findIndex(header => \n        header && header.toString().toLowerCase() === columnName.toLowerCase()\n      );\n      \n      if (columnIndex === -1) {\n        return { success: false, error: `열 \"${columnName}\"을 찾을 수 없습니다.` };\n      }\n    }\n    \n    // Get the column letter\n    const columnLetter = String.fromCharCode(65 + columnIndex);\n    \n    // Collect unique values\n    const seen = new Set();\n    const uniqueData = [];\n    let removedCount = 0;\n    \n    // Always keep the header\n    uniqueData.push([range.values[0][columnIndex]]);\n    \n    // Process data rows\n    for (let i = 1; i < range.rowCount; i++) {\n      const value = range.values[i][columnIndex];\n      if (value !== null && value !== undefined && value !== '') {\n        const valueStr = String(value);\n        if (!seen.has(valueStr)) {\n          seen.add(valueStr);\n          uniqueData.push([value]);\n        } else {\n          removedCount++;\n        }\n      }\n    }\n    \n    // Instead of clearing, just update the values\n    // First, get the specific column range\n    const columnRange = worksheet.getRange(`${columnLetter}1:${columnLetter}${range.rowCount}`);\n    \n    // Create a new values array with the unique values and empty cells for the rest\n    const finalValues = [];\n    for (let i = 0; i < uniqueData.length; i++) {\n      finalValues.push(uniqueData[i]);\n    }\n    // Fill the rest with empty values\n    for (let i = uniqueData.length; i < range.rowCount; i++) {\n      finalValues.push([\"\"]);\n    }\n    \n    // Update the column with new values\n    columnRange.values = finalValues;\n    \n    await context.sync();\n    \n    return {\n      success: true,\n      message: `${columnLetter}열에서 ${removedCount}개의 중복값이 제거되었습니다.`\n    };\n  });\n  } catch (error) {\n    return {\n      success: false,\n      error: `중복값 제거 중 오류: ${error.message || error.toString()}`\n    };\n  }\n}\n\n// Execute formula generation (complex custom formulas)\nasync function executeFormulaGeneration(context, params) {\n  try {\n    const worksheet = context.workbook.worksheets.getActiveWorksheet();\n    \n    // Get the used range to understand data structure\n    const range = worksheet.getUsedRange();\n    if (!range) {\n      return { success: false, error: \"데이터가 없습니다.\" };\n    }\n    \n    range.load([\"values\", \"rowCount\", \"columnCount\", \"columnIndex\", \"rowIndex\"]);\n    await context.sync();\n    \n    // Handle data transformation (mockup, sample, test data)\n    if (params.dataTransformation && params.transformationType) {\n      return await executeDataTransformation(context, worksheet, params, range);\n    }\n    \n    // Prepare target cell and adjusted formula\n    let targetCell = params.targetCell;\n    let adjustedFormula = params.formula;\n    \n    // Automatic target location determination\n    if (params.targetLocation === 'next_row') {\n      // Place in next empty row\n      const sourceRange = params.sourceRange;\n      let columnLetter = 'A';\n      let columnIndex = 0;\n      \n      if (sourceRange) {\n        const columnMatch = sourceRange.match(/^([A-Z]+)/);\n        if (columnMatch) {\n          columnLetter = columnMatch[1];\n          columnIndex = columnLetter.charCodeAt(0) - 65;\n        }\n      }\n      \n      // Find actual last row with data in this column\n      let actualLastRow = 0;\n      for (let i = 0; i < range.rowCount; i++) {\n        if (range.values[i][columnIndex] !== null && \n            range.values[i][columnIndex] !== undefined && \n            range.values[i][columnIndex] !== '') {\n          actualLastRow = i + 1;\n        }\n      }\n      \n      targetCell = `${columnLetter}${actualLastRow + 1}`;\n      \n      // Prevent circular reference: adjust formulas that use entire column ranges\n      if (params.formula && params.sourceRange && params.sourceRange.match(/^[A-Z]+:[A-Z]+$/)) {\n        // Entire column range (e.g., B:B)\n        const dataStartRow = 2; // Exclude header\n        const dataEndRow = actualLastRow;\n        \n        if (dataEndRow >= dataStartRow) {\n          // Replace entire column references with specific ranges\n          adjustedFormula = params.formula.replace(\n            new RegExp(`${columnLetter}:${columnLetter}`, 'g'),\n            `${columnLetter}${dataStartRow}:${columnLetter}${dataEndRow}`\n          );\n          // Also handle B2:B format\n          adjustedFormula = adjustedFormula.replace(\n            new RegExp(`${columnLetter}2:${columnLetter}(?!\\\\d)`, 'g'),\n            `${columnLetter}${dataStartRow}:${columnLetter}${dataEndRow}`\n          );\n        }\n      }\n      \n    } else if (params.targetLocation === 'next_column') {\n      // Place in next empty column\n      const nextColLetter = String.fromCharCode(65 + range.columnCount);\n      targetCell = `${nextColLetter}2`; // Start from row 2 (after header)\n      \n    } else if (params.targetCell === 'AUTO') {\n      // Automatically select appropriate location\n      const selection = context.workbook.getSelectedRange();\n      selection.load([\"columnCount\", \"rowCount\", \"columnIndex\", \"rowIndex\"]);\n      await context.sync();\n      \n      if (selection.columnCount === 1) {\n        // Column selected -> next row\n        const columnLetter = String.fromCharCode(65 + selection.columnIndex);\n        targetCell = `${columnLetter}${range.rowCount + 1}`;\n      } else {\n        // Row selected or range -> next column\n        const nextColLetter = String.fromCharCode(65 + range.columnCount);\n        targetCell = `${nextColLetter}${selection.rowIndex + 1}`;\n      }\n    }\n    \n    // If still no target cell, use a default (C column to avoid circular reference)\n    if (!targetCell || targetCell === \"AUTO\") {\n      // Use C column by default to avoid circular reference when summing A and B columns\n      targetCell = `C${range.rowCount + 1}`;\n    }\n    \n    // Handle column name references in formula (e.g., totalToken:totalToken)\n    if (adjustedFormula && adjustedFormula.includes(':')) {\n      // Check if formula contains column names instead of letters\n      const headers = range.values[0];\n      const dataStartRow = 2; // Assuming row 1 is header\n      let dataEndRow = range.rowCount; // Total row count including header\n      \n      // Find the actual last row with data\n      for (let row = range.rowCount - 1; row >= 1; row--) {\n        let hasData = false;\n        for (let col = 0; col < range.columnCount; col++) {\n          if (range.values[row][col] !== null && \n              range.values[row][col] !== undefined && \n              range.values[row][col] !== '') {\n            hasData = true;\n            break;\n          }\n        }\n        if (hasData) {\n          dataEndRow = row + 1; // Convert to 1-based row number\n          break;\n        }\n      }\n      \n      headers.forEach((header, index) => {\n        if (header) {\n          const columnLetter = String.fromCharCode(65 + index);\n          const headerStr = String(header);\n          \n          // Replace column name references with specific data ranges\n          // e.g., totalToken:totalToken -> D2:D344\n          adjustedFormula = adjustedFormula.replace(\n            new RegExp(`\\\\b${headerStr}:${headerStr}\\\\b`, 'g'),\n            `${columnLetter}${dataStartRow}:${columnLetter}${dataEndRow}`\n          );\n          \n          // Also handle single column references in SUM formulas\n          // e.g., SUM(totalToken:totalToken) -> SUM(D2:D344)\n          adjustedFormula = adjustedFormula.replace(\n            new RegExp(`\\\\b${headerStr}\\\\b(?!:)`, 'g'),\n            `${columnLetter}${dataStartRow}:${columnLetter}${dataEndRow}`\n          );\n        }\n      });\n      \n      // Also handle any remaining column letter references (e.g., D:D -> D2:D344)\n      // This catches cases where column letters were already used\n      for (let i = 0; i < 26; i++) {\n        const columnLetter = String.fromCharCode(65 + i);\n        adjustedFormula = adjustedFormula.replace(\n          new RegExp(`\\\\b${columnLetter}:${columnLetter}\\\\b`, 'g'),\n          `${columnLetter}${dataStartRow}:${columnLetter}${dataEndRow}`\n        );\n      }\n      \n      // Handle incomplete ranges like A2:A (without end row)\n      for (let i = 0; i < 26; i++) {\n        const columnLetter = String.fromCharCode(65 + i);\n        // Replace A2:A with A2:A[dataEndRow]\n        adjustedFormula = adjustedFormula.replace(\n          new RegExp(`\\\\b${columnLetter}2:${columnLetter}\\\\b(?!\\\\d)`, 'g'),\n          `${columnLetter}${dataStartRow}:${columnLetter}${dataEndRow}`\n        );\n      }\n    }\n    \n    // Handle multiple formulas\n    if (params.multipleFormulas && Array.isArray(params.multipleFormulas)) {\n      for (const formulaInfo of params.multipleFormulas) {\n        const targetRange = worksheet.getRange(formulaInfo.cell);\n        targetRange.formulas = [[formulaInfo.formula]];\n      }\n      await context.sync();\n      return {\n        success: true,\n        message: `${params.multipleFormulas.length}개의 수식이 적용되었습니다.`\n      };\n    }\n    \n    // Apply single formula\n    if (targetCell && adjustedFormula) {\n      const targetRange = worksheet.getRange(targetCell);\n      \n      // Check if it's a formula or a value\n      if (!adjustedFormula.startsWith('=')) {\n        targetRange.values = [[adjustedFormula]];\n      } else {\n        targetRange.formulas = [[adjustedFormula]];\n      }\n      \n      await context.sync();\n      \n      return {\n        success: true,\n        message: params.description || `수식이 ${targetCell}에 적용되었습니다: ${adjustedFormula}`\n      };\n    }\n    \n    return {\n      success: false,\n      error: \"수식을 적용할 수 없습니다.\"\n    };\n    \n  } catch (error) {\n    return {\n      success: false,\n      error: `수식 생성 중 오류: ${error.message || error.toString()}`\n    };\n  }\n}\n\n// Execute data transformation (mockup, sample, test data)\nasync function executeDataTransformation(context, worksheet, params, range) {\n  try {\n    const sourceRange = params.sourceRange;\n    if (!sourceRange) {\n      return { success: false, error: \"변환할 범위가 지정되지 않았습니다.\" };\n    }\n    \n    // Parse the source range to get column\n    const columnMatch = sourceRange.match(/^([A-Z]+)/);\n    if (!columnMatch) {\n      return { success: false, error: \"올바른 열 범위가 아닙니다.\" };\n    }\n    \n    const columnLetter = columnMatch[1];\n    const columnIndex = columnLetter.charCodeAt(0) - 65;\n    \n    if (columnIndex >= range.columnCount) {\n      return { success: false, error: `열 ${columnLetter}에 데이터가 없습니다.` };\n    }\n    \n    // Generate transformed data based on type\n    const transformedData = [];\n    const header = range.values[0][columnIndex];\n    transformedData.push([header]); // Keep header\n    \n    for (let i = 1; i < range.rowCount; i++) {\n      const originalValue = range.values[i][columnIndex];\n      if (originalValue !== null && originalValue !== undefined && originalValue !== '') {\n        let newValue;\n        \n        switch (params.transformationType) {\n          case 'mockup':\n          case 'sample':\n          case 'test':\n            // Generate appropriate dummy data based on original data type\n            if (typeof originalValue === 'number') {\n              newValue = Math.floor(Math.random() * 1000);\n            } else {\n              newValue = `${params.transformationType}_${i}`;\n            }\n            break;\n          default:\n            newValue = originalValue;\n        }\n        \n        transformedData.push([newValue]);\n      } else {\n        transformedData.push(['']);\n      }\n    }\n    \n    // Apply transformed data\n    const targetRange = worksheet.getRange(`${columnLetter}1:${columnLetter}${range.rowCount}`);\n    targetRange.values = transformedData;\n    \n    await context.sync();\n    \n    return {\n      success: true,\n      message: `${columnLetter}열이 ${params.transformationType} 데이터로 변환되었습니다.`\n    };\n    \n  } catch (error) {\n    return {\n      success: false,\n      error: `데이터 변환 중 오류: ${error.message || error.toString()}`\n    };\n  }\n}"],"names":["__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","m","g","globalThis","this","Function","e","window","o","obj","prop","Object","prototype","hasOwnProperty","call","scriptUrl","importScripts","location","document","currentScript","tagName","toUpperCase","src","scripts","getElementsByTagName","length","i","test","Error","replace","p","b","baseURI","self","href","URL","t","r","Symbol","n","iterator","toStringTag","c","Generator","u","create","_regeneratorDefine2","f","y","G","v","a","d","bind","l","TypeError","done","value","return","GeneratorFunction","GeneratorFunctionPrototype","getPrototypeOf","setPrototypeOf","__proto__","displayName","_regenerator","w","defineProperty","_invoke","enumerable","configurable","writable","asyncGeneratorStep","Promise","resolve","then","_asyncToGenerator","arguments","apply","_next","_throw","recognition","isListening","API_PROXY_URL","process","Office","onReady","info","host","HostType","Excel","_testBackendConnection","testBackendConnection","getElementById","onclick","executeCommand","clearInput","protocol","hostname","includes","showStatus","textContent","stop","start","error","message","toggleVoiceRecognition","handleAuthAction","showContactInfo","updateAuthButton","modelSelect","savedModel","localStorage","getItem","authKey","setItem","authModal","querySelector","hideAuthModal","deauthModal","event","target","hideDeauthModal","submitAuthKey","confirmDeauth","onchange","handleModelChange","querySelectorAll","forEach","item","command","getAttribute","focus","addEventListener","key","shiftKey","preventDefault","voiceButton","voiceStatus","disabled","style","opacity","cursor","color","title","SpeechRecognition","webkitSpeechRecognition","lang","continuous","interimResults","maxAlternatives","onstart","classList","add","onresult","transcript","results","isFinal","onerror","remove","errorMessage","isWebEnvironment","onend","trim","initializeSpeechRecognition","isExecuting","_executeCommand","_callee2","button","originalText","_t2","_context2","innerHTML","run","_ref","_callee","context","worksheet","activeRangeInfo","selectedRanges","firstRange","rangeAddresses","_i","range","usedRange","sheetContext","headerRow","_i2","interpretation","commandData","result","_context","workbook","worksheets","getActiveWorksheet","getSelectedRanges","load","sync","areaCount","areas","items","push","address","join","row","rowIndex","column","columnIndex","numRows","rowCount","numColumns","columnCount","isMultipleRanges","getUsedRange","sheetName","name","activeRange","lastRow","lastColumn","headers","dataRange","values","isLargeSheet","columnLetter","getColumnLetter","label","toString","callOpenAI","console","log","success","data","operation","operations","sumType","sourceRange","addNewRow","parameters","averageType","deleteType","bold","fontColor","backgroundColor","numberFormat","columnName","executeInterpretedCommand","setTimeout","_x55","_x","_x2","_callOpenAI","_callee3","selectedModel","authEmail","requestBody","response","errorData","errorText","_t5","_context3","model","clientType","fetch","method","body","JSON","stringify","ok","concat","status","json","text","substring","statusText","_x5","_x6","_executeInterpretedCommand","_callee5","successCount","_iterator","_step","op","_t8","_context5","Array","isArray","_createForOfIteratorHelper","s","executeSingleOperation","_x7","_x8","_x9","_executeSingleOperation","_callee6","params","_t9","_t0","_context6","executeMerge","executeSum","executeAverage","executeCount","executeFormat","executeSort","executeFilter","executeInsert","executeDelete","executeFormula","executeChart","executeConditionalFormat","executeTranslate","executeCompress","executeRetryTranslation","executeRemoveBorder","executeBorderFormat","executeStandardDeviation","executeMaxValue","executeRemoveDuplicates","executeFormulaGeneration","_x0","_x1","_executeMerge","_callee7","rangeAddress","_context7","getRange","getSelectedRange","merge","_x10","_x11","_executeSum","_callee8","rowRange","rowValues","lastDataColumn","resultColumn","resultCell","endCol","_sumFormula","_usedRange","_i3","_i4","lastDataRow","targetRow","foundEmpty","_i5","checkCell","cellValue","sumCell","sumFormula","_i6","_i7","_selectedRanges","_rangeAddresses","_i8","_i9","newCell","targetCell","_usedRange2","_targetCell","lastUsedRow","lastUsedCol","_foundEmpty","col","_checkCell","_row","_checkCell2","_column","_lastDataRow","_i0","startRow","_targetRow","_foundEmpty2","firstCheckCell","_i1","_checkCell3","_cellValue","_context8","getRangeByIndexes","getCell","formulas","formatNumber","match","charCodeAt","toLowerCase","getHeaders","_x12","_getHeaders","_callee9","_context9","_x13","_x14","_executeAverage","_callee0","rangeDescription","averageFormula","_columnIndex","_usedRange3","columnInfo","_usedRange4","_usedRange5","_i10","_i11","_selectedRanges2","_rangeAddresses2","_i12","_i13","_i14","_i15","_t13","_context0","find","h","_x15","_x16","_executeCount","_callee1","formula","criteria","lastCol","_context1","countType","condition","operator","_x17","_x18","_executeFormat","_callee10","ranges","_i16","_ranges","_i17","_ranges2","_range","format","_context10","font","italic","fontSize","size","fill","horizontalAlignment","_x19","_x20","_executeSort","_callee11","ascending","_context11","sort","_x21","_x22","_executeChart","_callee12","sourceData","dataAddress","allRanges","area","tempStartRow","tempStartCol","consolidatedData","maxColumns","_i18","_allRanges","_iterator2","_step2","reorganizedData","_i19","tempRange","_tempRange","chartType","chart","_chart","_t17","_context12","getUsedRangeOrNullObject","isNullObject","Math","max","err","every","ChartType","columnClustered","line","pie","xyscatter","charts","ChartSeriesBy","auto","height","width","left","offsetX","top","offsetY","legend","position","ChartLegendPosition","bottom","visible","_x23","_x24","_executeConditionalFormat","_callee13","defaultRange","_i20","_ranges3","conditionalFormat","_t19","_context13","conditionalFormats","ConditionalFormatType","rule","formula1","ConditionalCellValueOperator","greaterThan","lessThan","equalTo","containsText","_x25","_x26","_executeTranslate","_callee14","targetColumnIndex","targetColumnLetter","_targetColumnLetter","_columnIndex2","_usedRange6","sourceValues","translations","batchSize","batch","batchTexts","translatedBatch","j","translationIndex","_j","translatedText","_j2","_i21","targetRange","stringTranslations","errorRows","_i22","translation","_iterator3","_step3","errorCell","_i23","cellRow","cellCol","cell","headerCell","sourceHeaderCell","_context14","targetLanguage","split","sourceColumn","targetColumn","slice","min","map","filter","translateBatch","sourceLanguage","isError","round","clear","ClearApplyTo","contents","_typeof","String","_x27","_x28","_x29","_translateBatch","_callee15","texts","_context15","tempIndex","fromCharCode","floor","Number","isInteger","toLocaleString","minimumFractionDigits","maximumFractionDigits","type","className","display","statusTimeout","clearTimeout","authButton","showAuthModal","removeItem","_submitAuthKey","_callee16","email","_context16","showAuthStatus","debug","statusDiv","open","modelName","_callee17","_context17","_x30","_x31","_executeBorderFormat","_callee18","targetRanges","_range2","_usedRange7","_i24","_targetRanges","_i25","borderType","excelStyle","_i26","_targetRanges2","_i27","_borderItems","borderItem","border","insideV","insideH","borderName","_border","_t24","_context18","borders","weight","_x32","_x33","_executeCompress","_callee19","_usedRange8","checkRange","emptyRows","lastRowWithData","_i28","_cellValue2","_i29","_emptyRows","_t25","_context19","delete","DeleteShiftDirection","up","_x34","_x35","_executeFilter","_callee20","_context20","autoFilter","_x36","_x37","_executeInsert","_callee21","count","_context21","insert","InsertShiftDirection","down","right","_x38","_x39","_executeDelete","_callee22","startIndex","endIndex","_i30","_i31","_t26","_context22","startColumn","endColumn","endRow","_x40","_x41","_executeFormula","_callee23","_context23","_x42","_x43","_executeRetryTranslation","_callee24","_context24","_x44","_x45","_executeRemoveBorder","_callee25","_range6","_usedRange9","expandedRows","expandedCols","_usedRange0","_columnLetter","_columnIndex3","_i32","_targetRanges3","_i33","_i34","_targetRanges4","_t28","_t29","_context25","BorderIndex","edgeLeft","BorderLineStyle","none","edgeRight","edgeTop","edgeBottom","insideHorizontal","insideVertical","_x46","_executeStandardDeviation","_callee27","_t30","_context27","_ref2","_callee26","targetCellAddress","_context26","findIndex","header","isNaN","_x56","_x47","_executeMaxValue","_callee29","_t31","_context29","_ref3","_callee28","_context28","_x57","_x48","_executeRemoveDuplicates","_callee31","_t32","_context31","_ref4","_callee30","seen","uniqueData","removedCount","valueStr","columnRange","finalValues","_i35","_i36","_context30","Set","has","_x58","_x49","_x50","_executeFormulaGeneration","_callee32","adjustedFormula","columnMatch","actualLastRow","dataEndRow","nextColLetter","selection","_columnLetter2","_nextColLetter","_dataStartRow","_dataEndRow","hasData","_i37","_columnLetter4","_i38","_columnLetter5","_iterator4","_step4","formulaInfo","_targetRange","_t33","_context32","dataTransformation","transformationType","executeDataTransformation","targetLocation","RegExp","dataStartRow","index","headerStr","multipleFormulas","startsWith","description","_x51","_x52","_x53","_x54","_executeDataTransformation","_callee33","transformedData","originalValue","newValue","_t34","_t35","_context33","random"],"sourceRoot":""}