{"version":3,"file":"taskpane.js","mappings":"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","sources":["webpack://worksai-excel-addon/webpack/bootstrap","webpack://worksai-excel-addon/webpack/runtime/global","webpack://worksai-excel-addon/webpack/runtime/hasOwnProperty shorthand","webpack://worksai-excel-addon/webpack/runtime/publicPath","webpack://worksai-excel-addon/webpack/runtime/jsonp chunk loading","webpack://worksai-excel-addon/./src/taskpane/taskpane.html","webpack://worksai-excel-addon/./src/taskpane/taskpane.js"],"sourcesContent":["// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript && document.currentScript.tagName.toUpperCase() === 'SCRIPT')\n\t\tscriptUrl = document.currentScript.src;\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) {\n\t\t\tvar i = scripts.length - 1;\n\t\t\twhile (i > -1 && (!scriptUrl || !/^http(s?):/.test(scriptUrl))) scriptUrl = scripts[i--].src;\n\t\t}\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/^blob:/, \"\").replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","__webpack_require__.b = document.baseURI || self.location.href;\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t926: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n// no on chunks loaded\n\n// no jsonp function","// Imports\nvar ___HTML_LOADER_IMPORT_0___ = new URL(\"./taskpane.css\", import.meta.url);\n// Module\nvar code = \"<!DOCTYPE html> <html> <head> <meta charset=\\\"UTF-8\\\"/> <meta http-equiv=\\\"X-UA-Compatible\\\" content=\\\"IE=Edge\\\"/> <meta name=\\\"viewport\\\" content=\\\"width=device-width,initial-scale=1\\\"> <title>웍스AI 엑셀 도우미</title> <\" + \"script src=\\\"https://appsforoffice.microsoft.com/lib/1.1/hosted/office.js\\\"><\" + \"/script> <link rel=\\\"stylesheet\\\" href=\\\"https://static2.sharepointonline.com/files/fabric/office-ui-fabric-js/1.4.0/css/fabric.min.css\\\"/> <link rel=\\\"stylesheet\\\" href=\\\"https://static2.sharepointonline.com/files/fabric/office-ui-fabric-js/1.4.0/css/fabric.components.min.css\\\"/> <link href=\\\"\" + ___HTML_LOADER_IMPORT_0___ + \"\\\" rel=\\\"stylesheet\\\"/> </head> <body class=\\\"ms-font-m ms-welcome ms-Fabric\\\"> <main id=\\\"app-body\\\" class=\\\"ms-welcome__main\\\"> <div class=\\\"container\\\"> <div class=\\\"header-section\\\"> <h2 class=\\\"ms-font-xl\\\" style=\\\"font-weight:700\\\">웍스AI 엑셀 도우미</h2> <p class=\\\"help-text\\\">자연어로 Excel 작업을 요청하세요. (대용량 번역 지원)</p> </div> <div class=\\\"voice-section\\\"> <button id=\\\"voiceButton\\\" class=\\\"voice-button\\\"> <svg width=\\\"24\\\" height=\\\"24\\\" viewBox=\\\"0 0 24 24\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"> <path d=\\\"M12 14c1.66 0 3-1.34 3-3V5c0-1.66-1.34-3-3-3S9 3.34 9 5v6c0 1.66 1.34 3 3 3z\\\"/> <path d=\\\"M17 11c0 2.76-2.24 5-5 5s-5-2.24-5-5H5c0 3.53 2.61 6.43 6 6.92V21h2v-3.08c3.39-.49 6-3.39 6-6.92h-2z\\\"/> </svg> </button> <div class=\\\"voice-status\\\" id=\\\"voiceStatus\\\">음성 인식 준비</div> </div> <div class=\\\"model-selection\\\"> <label for=\\\"modelSelect\\\">AI 모델:</label> <select id=\\\"modelSelect\\\" class=\\\"model-dropdown\\\"> <option value=\\\"gpt-4.1-mini-2025-04-14\\\">GPT-4.1-mini (무료)</option> <option value=\\\"gpt-4.1-2025-04-14\\\">GPT-4.1 (인증 필요)</option> </select> </div> <div class=\\\"input-container\\\"> <textarea id=\\\"commandInput\\\" placeholder=\\\"예: A1부터 A10까지 합계를 구해줘\\\" rows=\\\"3\\\"></textarea> <div class=\\\"button-container\\\"> <button id=\\\"executeButton\\\" class=\\\"ms-Button ms-Button--primary\\\"> <span class=\\\"ms-Button-label\\\">실행</span> </button> <button id=\\\"clearButton\\\" class=\\\"ms-Button\\\"> <span class=\\\"ms-Button-label\\\">지우기</span> </button> </div> </div> <div id=\\\"status\\\" class=\\\"status-message\\\"></div> <div class=\\\"examples\\\"> <h3>예제 명령어</h3> <div class=\\\"example-list\\\"> <div class=\\\"example-item\\\" data-command=\\\"A1:B5 셀을 병합해줘\\\"> <strong>셀 병합:</strong> A1:B5 셀을 병합해줘 </div> <div class=\\\"example-item\\\" data-command=\\\"A열의 합계를 구해줘\\\"> <strong>합계 계산:</strong> A열의 합계를 구해줘 </div> <div class=\\\"example-item\\\" data-command=\\\"Name 열의 합계를 구해줘\\\"> <strong>레이블로 합계:</strong> Name 열의 합계를 구해줘 </div> <div class=\\\"example-item\\\" data-command=\\\"C열 평균을 구해줘\\\"> <strong>열 평균:</strong> C열 평균을 구해줘 </div> <div class=\\\"example-item\\\" data-command=\\\"3행 평균을 계산해줘\\\"> <strong>행 평균:</strong> 3행 평균을 계산해줘 </div> <div class=\\\"example-item\\\" data-command=\\\"선택한 셀을 굵게 만들고 파란색으로 바꿔줘\\\"> <strong>서식 지정:</strong> 선택한 셀을 굵게 만들고 파란색으로 바꿔줘 </div> <div class=\\\"example-item\\\" data-command=\\\"B열 기준으로 내림차순 정렬해줘\\\"> <strong>정렬:</strong> B열 기준으로 내림차순 정렬해줘 </div> <div class=\\\"example-item\\\" data-command=\\\"값이 100보다 큰 셀은 녹색 배경으로 표시해줘\\\"> <strong>조건부 서식:</strong> 값이 100보다 큰 셀은 녹색 배경으로 표시해줘 </div> <div class=\\\"example-item\\\" data-command=\\\"A1:B10 데이터로 막대 차트를 만들어줘\\\"> <strong>차트 생성:</strong> A1:B10 데이터로 막대 차트를 만들어줘 </div> <div class=\\\"example-item\\\" data-command=\\\"D열을 중국어로 번역해서 다음 열에 추가해줘\\\"> <strong>번역:</strong> D열을 중국어로 번역해서 다음 열에 추가해줘 </div> <div class=\\\"example-item\\\" data-command=\\\"A열의 10000개 행을 영어로 번역해줘\\\"> <strong>대용량 번역:</strong> A열의 10000개 행을 영어로 번역해줘 </div> <div class=\\\"example-item\\\" data-command=\\\"D2:D170 사이의 빈 행을 제거해줘\\\"> <strong>빈 행 제거:</strong> D2:D170 사이의 빈 행을 제거해줘 </div> <div class=\\\"example-item\\\" data-command=\\\"C열의 오른쪽 테두리를 없애줘\\\"> <strong>테두리 제거:</strong> C열의 오른쪽 테두리를 없애줘 </div> </div> </div> <div class=\\\"settings-section\\\"> <button id=\\\"authButton\\\" class=\\\"settings-link\\\">인증</button> <button id=\\\"contactButton\\\" class=\\\"settings-link\\\">문의/요청</button> </div> <div id=\\\"authModal\\\" class=\\\"modal\\\" style=\\\"display:none\\\"> <div class=\\\"modal-content\\\"> <span class=\\\"close\\\">&times;</span> <h3>인증키 입력</h3> <p>GPT-4.1 모델을 사용하려면 인증키를 입력하세요.</p> <input type=\\\"text\\\" id=\\\"authKeyInput\\\" placeholder=\\\"인증키를 입력하세요\\\"/> <button id=\\\"submitAuthKey\\\" class=\\\"ms-Button ms-Button--primary\\\"> <span class=\\\"ms-Button-label\\\">인증</span> </button> <div id=\\\"authStatus\\\" class=\\\"auth-status\\\"></div> </div> </div> <div class=\\\"footer-section\\\"> <p class=\\\"disclaimer\\\">AI는 잘못된 작업을 할 수 있습니다. 모든 데이터는 AI 학습에 활용되지 않습니다.</p> <p class=\\\"disclaimer\\\" style=\\\"margin-top:8px\\\"> <a href=\\\"https://policies.wrks.ai/sheet-assistant-privacy-policy\\\" target=\\\"_blank\\\" style=\\\"color:#6b7280;text-decoration:underline\\\">개인정보처리방침</a> </p> </div> </div> </main> </body> </html>\";\n// Exports\nexport default code;","/*\n * Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n * See LICENSE in the project root for license information.\n */\n\n/* global document, Office, Excel */\n\n// Voice recognition variables\nlet recognition = null;\nlet isListening = false;\n\n// Backend API URL - Vercel 배포\nconst API_PROXY_URL = process.env.API_PROXY_URL || 'https://excel-addon-backend.vercel.app/api/openai-proxy';\n\nOffice.onReady((info) => {\n  if (info.host === Office.HostType.Excel) {\n    // Test backend connection\n    testBackendConnection();\n    \n    // Assign event handlers\n    document.getElementById(\"executeButton\").onclick = executeCommand;\n    document.getElementById(\"clearButton\").onclick = clearInput;\n    document.getElementById(\"voiceButton\").onclick = () => toggleVoiceRecognition();\n    \n    // Auth and contact buttons\n    document.getElementById(\"authButton\").onclick = showAuthModal;\n    document.getElementById(\"contactButton\").onclick = showContactInfo;\n    \n    // Modal handlers\n    const authModal = document.getElementById(\"authModal\");\n    const closeBtn = authModal.querySelector(\".close\");\n    closeBtn.onclick = () => hideAuthModal();\n    window.onclick = (event) => {\n      if (event.target == authModal) {\n        hideAuthModal();\n      }\n    };\n    \n    document.getElementById(\"submitAuthKey\").onclick = submitAuthKey;\n    \n    // Model selection handler\n    document.getElementById(\"modelSelect\").onchange = handleModelChange;\n\n    // Handle example clicks\n    const exampleItems = document.querySelectorAll('.example-item');\n    exampleItems.forEach(item => {\n      item.onclick = function() {\n        setCommand(this.getAttribute('data-command'));\n      };\n    });\n\n    // Handle Enter key\n    document.getElementById('commandInput').addEventListener('keydown', function(event) {\n      if (event.key === 'Enter' && !event.shiftKey) {\n        event.preventDefault();\n        executeCommand();\n      }\n    });\n\n    // Initialize speech recognition\n    initializeSpeechRecognition();\n  }\n});\n\n// Initialize speech recognition\nfunction initializeSpeechRecognition() {\n  // Check if we're in a web environment (Excel Online) - disable voice feature\n  const isWebEnvironment = window.location.protocol === 'https:' && \n                          !window.location.hostname.includes('localhost');\n  \n  if (isWebEnvironment) {\n    console.log('Voice recognition disabled in web environment');\n    const voiceButton = document.getElementById('voiceButton');\n    const voiceStatus = document.getElementById('voiceStatus');\n    \n    voiceButton.disabled = true;\n    voiceButton.style.opacity = '0.5';\n    voiceButton.style.cursor = 'not-allowed';\n    voiceStatus.textContent = '웹 환경에서는 음성 인식 미지원';\n    voiceStatus.style.color = '#666';\n    \n    // Add tooltip\n    voiceButton.title = 'Excel Online에서는 보안상 음성 인식을 사용할 수 없습니다. 데스크톱 Excel을 사용해주세요.';\n    \n    return null;\n  }\n  \n  const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n  \n  if (!SpeechRecognition) {\n    showStatus('음성 인식이 지원되지 않는 브라우저입니다.', 'error');\n    document.getElementById('voiceButton').disabled = true;\n    document.getElementById('voiceStatus').textContent = '음성 인식 미지원';\n    return null;\n  }\n  \n  recognition = new SpeechRecognition();\n  recognition.lang = 'ko-KR';\n  recognition.continuous = false;\n  recognition.interimResults = true;\n  recognition.maxAlternatives = 1;\n  \n  recognition.onstart = function() {\n    isListening = true;\n    document.getElementById('voiceButton').classList.add('listening');\n    document.getElementById('voiceStatus').textContent = '듣고 있습니다... 말씀해주세요';\n    document.getElementById('voiceStatus').classList.add('listening');\n  };\n  \n  recognition.onresult = function(event) {\n    const transcript = event.results[0][0].transcript;\n    document.getElementById('commandInput').value = transcript;\n    \n    if (event.results[0].isFinal) {\n      document.getElementById('voiceStatus').textContent = '음성 인식 완료';\n    } else {\n      document.getElementById('voiceStatus').textContent = '인식중: ' + transcript;\n    }\n  };\n  \n  recognition.onerror = function(event) {\n    console.log('Speech recognition error:', event.error, 'Location:', window.location.hostname);\n    isListening = false;\n    document.getElementById('voiceButton').classList.remove('listening');\n    document.getElementById('voiceStatus').classList.remove('listening');\n    \n    let errorMessage = '음성 인식 오류';\n    \n    // Check if we're in a web environment - use broader detection\n    const isWebEnvironment = window.location.protocol === 'https:' && \n                            !window.location.hostname.includes('localhost');\n    \n    switch(event.error) {\n      case 'no-speech':\n        errorMessage = '음성이 감지되지 않았습니다.';\n        break;\n      case 'audio-capture':\n        errorMessage = '마이크를 찾을 수 없습니다.';\n        break;\n      case 'not-allowed':\n        // Always show web environment message for not-allowed in HTTPS contexts\n        if (isWebEnvironment) {\n          errorMessage = 'Excel Online에서는 보안 정책상 음성 인식을 사용할 수 없습니다. 데스크톱 Excel에서 이용해주세요.';\n          document.getElementById('voiceStatus').textContent = '웹 버전 미지원';\n        } else {\n          errorMessage = '마이크 권한이 거부되었습니다. 브라우저 설정을 확인해주세요.';\n        }\n        break;\n      case 'network':\n        errorMessage = '네트워크 오류가 발생했습니다.';\n        break;\n      default:\n        // For any other error in web environment, show the web limitation message\n        if (isWebEnvironment && event.error) {\n          errorMessage = 'Excel Online에서는 보안 정책상 음성 인식을 사용할 수 없습니다. 데스크톱 Excel에서 이용해주세요.';\n          document.getElementById('voiceStatus').textContent = '웹 버전 미지원';\n        }\n        break;\n    }\n    \n    // Override the status text display for web environment\n    if (isWebEnvironment && event.error === 'not-allowed') {\n      document.getElementById('voiceStatus').textContent = '웹 버전 미지원';\n    } else {\n      document.getElementById('voiceStatus').textContent = errorMessage;\n    }\n    \n    showStatus(errorMessage, 'error');\n  };\n  \n  recognition.onend = function() {\n    isListening = false;\n    document.getElementById('voiceButton').classList.remove('listening');\n    document.getElementById('voiceStatus').classList.remove('listening');\n    \n    const command = document.getElementById('commandInput').value.trim();\n    if (command) {\n      document.getElementById('voiceStatus').textContent = '음성 인식 완료. 실행 버튼을 눌러주세요.';\n      document.getElementById('executeButton').focus();\n    } else {\n      document.getElementById('voiceStatus').textContent = '음성 인식 준비';\n    }\n  };\n  \n  return recognition;\n}\n\n// Toggle voice recognition\nfunction toggleVoiceRecognition() {\n  // Check if we're in Excel Online/web environment\n  const isWebEnvironment = window.location.protocol === 'https:' && \n                          !window.location.hostname.includes('localhost');\n  \n  if (isWebEnvironment) {\n    showStatus('Excel Online에서는 보안 정책상 음성 인식을 사용할 수 없습니다. 데스크톱 Excel에서 이용해주세요.', 'error');\n    document.getElementById('voiceStatus').textContent = '웹 버전 미지원';\n    return;\n  }\n  \n  if (!recognition) {\n    // Recognition would be null if unsupported browser\n    showStatus('이 브라우저는 음성 인식을 지원하지 않습니다.', 'error');\n    return;\n  }\n  \n  if (isListening) {\n    recognition.stop();\n  } else {\n    try {\n      recognition.start();\n    } catch (error) {\n      console.error('Voice recognition start error:', error);\n      \n      // More user-friendly error messages\n      if (error.message && error.message.includes('not-allowed')) {\n        showStatus('마이크 권한이 필요합니다. 브라우저 설정에서 마이크 접근을 허용해주세요.', 'error');\n      } else {\n        showStatus('음성 인식을 시작할 수 없습니다.', 'error');\n      }\n    }\n  }\n}\n\n// Execute command\n// Add flag to prevent duplicate execution\nlet isExecuting = false;\n\nasync function executeCommand() {\n  // Prevent duplicate execution\n  if (isExecuting) {\n    console.log('Command already executing, ignoring duplicate call');\n    return;\n  }\n  \n  const command = document.getElementById('commandInput').value.trim();\n  \n  if (!command) {\n    showStatus('명령어를 입력해주세요.', 'error');\n    return;\n  }\n  \n  isExecuting = true;\n  \n  const button = document.getElementById('executeButton');\n  const originalText = '<span class=\"ms-Button-label\">실행</span>';\n  \n  // Show loading state\n  button.disabled = true;\n  button.innerHTML = '<span class=\"loading\"></span><span>처리중...</span>';\n  showStatus('명령을 처리하고 있습니다...', 'info');\n  \n  try {\n    await Excel.run(async (context) => {\n      console.log('Starting Excel.run for command execution');\n      // Get current worksheet context\n      const worksheet = context.workbook.worksheets.getActiveWorksheet();\n      // Handle both single and multiple range selections\n      let activeRangeInfo = null;\n      let isMultipleRanges = false;\n      \n      try {\n        // Try to get selected ranges first\n        const selectedRanges = context.workbook.getSelectedRanges();\n        selectedRanges.load([\"areas\", \"areaCount\"]);\n        await context.sync();\n        \n        if (selectedRanges.areaCount > 1) {\n          // Multiple non-contiguous ranges\n          isMultipleRanges = true;\n          const firstRange = selectedRanges.areas.items[0];\n          firstRange.load([\"address\", \"rowIndex\", \"columnIndex\", \"rowCount\", \"columnCount\"]);\n          await context.sync();\n          \n          // Build combined address string\n          const rangeAddresses = [];\n          for (let i = 0; i < selectedRanges.areas.items.length; i++) {\n            const area = selectedRanges.areas.items[i];\n            area.load(\"address\");\n          }\n          await context.sync();\n          \n          for (let i = 0; i < selectedRanges.areas.items.length; i++) {\n            rangeAddresses.push(selectedRanges.areas.items[i].address);\n          }\n          \n          activeRangeInfo = {\n            address: rangeAddresses.join(','),\n            row: firstRange.rowIndex + 1,\n            column: firstRange.columnIndex + 1,\n            numRows: firstRange.rowCount,\n            numColumns: firstRange.columnCount,\n            isMultipleRanges: true\n          };\n        } else {\n          // Single range\n          const range = selectedRanges.areas.items[0];\n          range.load([\"address\", \"rowIndex\", \"columnIndex\", \"rowCount\", \"columnCount\"]);\n          await context.sync();\n          \n          activeRangeInfo = {\n            address: range.address,\n            row: range.rowIndex + 1,\n            column: range.columnIndex + 1,\n            numRows: range.rowCount,\n            numColumns: range.columnCount,\n            isMultipleRanges: false\n          };\n        }\n      } catch (error) {\n        console.log('Error getting selected ranges, using fallback:', error);\n        // If getting selected ranges fails, provide a default\n        activeRangeInfo = {\n          address: 'A1',\n          row: 1,\n          column: 1,\n          numRows: 1,\n          numColumns: 1,\n          isMultipleRanges: false\n        };\n      }\n      \n      // Load necessary properties\n      worksheet.load(\"name\");\n      \n      // Get sheet data for context\n      const usedRange = worksheet.getUsedRange();\n      usedRange.load([\"rowCount\", \"columnCount\", \"values\"]);\n      \n      await context.sync();\n      \n      // Build sheet context\n      const sheetContext = {\n        sheetName: worksheet.name,\n        activeRange: activeRangeInfo,\n        lastRow: usedRange ? usedRange.rowCount : 0,\n        lastColumn: usedRange ? usedRange.columnCount : 0,\n        headers: [],\n        dataRange: usedRange ? usedRange.values : [],\n        isLargeSheet: usedRange && usedRange.rowCount > 1000\n      };\n      \n      // Extract headers\n      if (usedRange && usedRange.rowCount > 0) {\n        const headerRow = usedRange.values[0];\n        for (let i = 0; i < headerRow.length; i++) {\n          sheetContext.headers.push({\n            column: i + 1,\n            columnLetter: getColumnLetter(i),\n            label: headerRow[i] ? headerRow[i].toString() : ''\n          });\n        }\n      }\n      \n      // Call OpenAI API to interpret the command\n      const interpretation = await callOpenAI(command, sheetContext);\n      \n      if (!interpretation.success) {\n        throw new Error(interpretation.error);\n      }\n      \n      // Execute the interpreted command\n      console.log('Executing interpreted command...');\n      const result = await executeInterpretedCommand(context, interpretation.data);\n      console.log('Command execution result:', result);\n      \n      // Reset button and show success\n      button.disabled = false;\n      button.innerHTML = originalText;\n      \n      if (result.success) {\n        console.log('Operation completed successfully:', result);\n        showStatus(result.message || '명령이 성공적으로 실행되었습니다.', 'success');\n        setTimeout(() => {\n          document.getElementById('commandInput').value = '';\n        }, 1000);\n      } else {\n        console.error('Operation failed:', result);\n        showStatus(result.error || '명령 실행에 실패했습니다.', 'error');\n      }\n      \n      console.log('Excel.run completing...');\n    });\n    console.log('Excel.run completed');\n  } catch (error) {\n    console.error('Error in executeCommand:', error);\n    console.error('Error stack:', error.stack);\n    button.disabled = false;\n    button.innerHTML = originalText;\n    showStatus('오류가 발생했습니다: ' + error.message, 'error');\n  } finally {\n    // Reset execution flag\n    isExecuting = false;\n  }\n}\n\n// Call OpenAI API through proxy\nasync function callOpenAI(command, sheetContext) {\n  try {\n    // Get selected model and auth key\n    const selectedModel = localStorage.getItem(\"excel_addon_selected_model\") || \"gpt-4.1-mini-2025-04-14\";\n    const authKey = localStorage.getItem(\"excel_addon_auth_key\");\n    \n    const response = await fetch(API_PROXY_URL, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        command: command,\n        sheetContext: sheetContext,\n        model: selectedModel,\n        authKey: authKey\n      })\n    });\n    \n    if (!response.ok) {\n      const errorData = await response.json();\n      return {\n        success: false,\n        error: errorData.error || `서버 오류 (${response.status})`\n      };\n    }\n    \n    return await response.json();\n    \n  } catch (error) {\n    console.error('Proxy API Error:', error);\n    return {\n      success: false,\n      error: `API 요청 오류: ${error.toString()}`\n    };\n  }\n}\n\n// Original OpenAI API call (no longer used)\nasync function callOpenAIDirectly(command, sheetContext) {\n  const systemPrompt = `You are an Excel assistant that interprets natural language commands and returns JSON instructions for Excel operations.\n  \nAvailable operations:\n1. merge: Merge cells\n2. sum: Sum values in a range or column\n3. average: Calculate average\n4. count: Count cells (can count all, numbers only, or based on conditions)\n5. format: Format cells (bold, italic, font color, background color, etc.)\n6. sort: Sort data\n7. filter: Filter data\n8. insert: Insert rows/columns\n9. delete: Delete rows/columns\n10. formula: Add custom formula\n11. chart: Create chart\n12. conditional_format: Add conditional formatting\n13. translate: Translate cell contents to another language\n14. compress: Remove empty rows in a specific column range\n15. retry_translation: Retry translation for failed items marked as [번역 실패]\n\nFor sum operation:\n- If user mentions a column by header name (e.g., \"totalToken 열의 합\", \"totalToken 합산\"), return: { \"sumType\": \"column\", \"columnName\": \"totalToken\" }\n- The system will automatically find the column, determine the data range, and place the sum in the first empty cell below the data\n- For specific range sum, use: { \"sourceRange\": \"A2:A10\" }\n- For adding sum below selection, use: { \"addNewRow\": true }\n\nCurrent sheet context:\n- Active range: ${sheetContext.activeRange.address}\n- Sheet dimensions: ${sheetContext.lastRow} rows x ${sheetContext.lastColumn} columns\n- Headers: ${sheetContext.headers.map(h => `Column ${h.columnLetter}: \"${h.label}\"`).join(', ')}\n\nReturn JSON in this format:\n{\n  \"operation\": \"operation_name\",\n  \"parameters\": {\n    // operation-specific parameters\n  }\n}`;\n\n  const url = 'https://api.openai.com/v1/chat/completions';\n  \n  const payload = {\n    model: 'gpt-4.1-2025-04-14',\n    messages: [\n      { role: 'system', content: systemPrompt },\n      { role: 'user', content: `Current Excel state:\nHeaders: ${sheetContext.headers.map(h => `Column ${h.columnLetter}: \"${h.label}\"`).join(', ')}\nActive sheet: ${sheetContext.sheetName}\n\nUser command: ${command}` }\n    ],\n    temperature: 0.3,\n    max_tokens: 500\n  };\n  \n  try {\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${OPENAI_API_KEY}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(payload)\n    });\n    \n    if (!response.ok) {\n      const errorData = await response.json();\n      if (response.status === 429) {\n        return {\n          success: false,\n          error: 'API 요청 한도를 초과했습니다. 잠시 후 다시 시도해주세요.'\n        };\n      } else if (response.status === 401) {\n        return {\n          success: false,\n          error: 'API 키가 유효하지 않습니다. API 키를 확인해주세요.'\n        };\n      }\n      return {\n        success: false,\n        error: `API 오류 (${response.status}): ${errorData.error?.message || '알 수 없는 오류'}`\n      };\n    }\n    \n    const result = await response.json();\n    \n    if (result.choices && result.choices[0]) {\n      const content = result.choices[0].message.content;\n      try {\n        const parsedCommand = JSON.parse(content);\n        return {\n          success: true,\n          data: parsedCommand\n        };\n      } catch (parseError) {\n        console.error('Failed to parse AI response:', content);\n        return {\n          success: false,\n          error: 'AI 응답을 해석할 수 없습니다. 다시 시도해주세요.'\n        };\n      }\n    } else {\n      return {\n        success: false,\n        error: 'OpenAI API 응답을 파싱할 수 없습니다.'\n      };\n    }\n  } catch (error) {\n    console.error('OpenAI API Error:', error);\n    return {\n      success: false,\n      error: `OpenAI API 오류: ${error.toString()}`\n    };\n  }\n}\n\n// Execute the interpreted command\nasync function executeInterpretedCommand(context, commandData) {\n  // Check if multiple operations\n  if (commandData.operations && Array.isArray(commandData.operations)) {\n    console.log('Executing multiple operations:', commandData.operations.length);\n    const results = [];\n    let successCount = 0;\n    \n    for (const op of commandData.operations) {\n      const result = await executeSingleOperation(context, op.operation, op.parameters || {});\n      results.push(result);\n      if (result.success) successCount++;\n    }\n    \n    return {\n      success: successCount === commandData.operations.length,\n      message: `${successCount}/${commandData.operations.length} 작업이 완료되었습니다.`,\n      results: results\n    };\n  }\n  \n  // Single operation\n  return await executeSingleOperation(context, commandData.operation, commandData.parameters || {});\n}\n\n// Execute a single operation\nasync function executeSingleOperation(context, operation, params) {\n  console.log(`[${new Date().toISOString()}] Executing operation: ${operation} with params:`, params);\n  \n  try {\n    switch (operation) {\n      case 'merge':\n        return await executeMerge(context, params);\n      \n      case 'sum':\n        return await executeSum(context, params);\n      \n      case 'average':\n        return await executeAverage(context, params);\n      \n      case 'count':\n        return await executeCount(context, params);\n      \n      case 'format':\n        return await executeFormat(context, params);\n      \n      case 'sort':\n        return await executeSort(context, params);\n      \n      case 'filter':\n        return await executeFilter(context, params);\n      \n      case 'insert':\n        return await executeInsert(context, params);\n      \n      case 'delete':\n        return await executeDelete(context, params);\n      \n      case 'formula':\n        return await executeFormula(context, params);\n      \n      case 'chart':\n        return await executeChart(context, params);\n      \n      case 'conditional_format':\n        return await executeConditionalFormat(context, params);\n      \n      case 'translate':\n        return await executeTranslate(context, params);\n      \n      case 'compress':\n        return await executeCompress(context, params);\n      \n      case 'retry_translation':\n        return await executeRetryTranslation(context, params);\n      \n      case 'remove_border':\n        return await executeRemoveBorder(context, params);\n      \n      case 'border_format':\n        return await executeBorderFormat(context, params);\n      \n      default:\n        return {\n          success: false,\n          error: `알 수 없는 작업: ${operation}`\n        };\n    }\n  } catch (error) {\n    console.error('Error in executeInterpretedCommand:', error);\n    return {\n      success: false,\n      error: `작업 실행 중 오류: ${error.message || error.toString()}`\n    };\n  }\n}\n\n// Merge cells\nasync function executeMerge(context, params) {\n  console.log('executeMerge started with params:', params);\n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  const range = params.range ? worksheet.getRange(params.range) : context.workbook.getSelectedRange();\n  \n  console.log('Loading range address...');\n  // Load address property before using it\n  range.load('address');\n  await context.sync();\n  \n  console.log('Range address loaded:', range.address);\n  const rangeAddress = range.address;\n  \n  console.log('Merging range...');\n  range.merge();\n  await context.sync();\n  \n  console.log('Merge completed successfully');\n  return {\n    success: true,\n    message: `${rangeAddress} 범위가 병합되었습니다.`\n  };\n}\n\n// Sum values\nasync function executeSum(context, params) {\n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  \n  // If column name is provided, find the column and create range\n  if (params.columnName || params.sumType === 'column') {\n    console.log('Sum by column name:', params.columnName);\n    \n    // Get sheet context to find column by name\n    const usedRange = worksheet.getUsedRange();\n    usedRange.load([\"values\", \"rowCount\", \"columnCount\"]);\n    await context.sync();\n    \n    if (!usedRange || usedRange.rowCount === 0) {\n      return {\n        success: false,\n        error: '시트에 데이터가 없습니다.'\n      };\n    }\n    \n    let columnIndex = -1;\n    let columnLetter = '';\n    \n    // Check if columnName is a column letter reference (like \"D\", \"AA\", \"ABC\")\n    if (params.columnName && params.columnName.match(/^[A-Z]+$/)) {\n      // Direct column letter reference\n      columnLetter = params.columnName;\n      // Convert column letter(s) to index\n      columnIndex = 0;\n      for (let i = 0; i < columnLetter.length; i++) {\n        columnIndex = columnIndex * 26 + (columnLetter.charCodeAt(i) - 64);\n      }\n      columnIndex--; // Convert to 0-based index\n      console.log('Column letter specified:', columnLetter, 'index:', columnIndex);\n    } else {\n      // Find column by header name\n      const headers = usedRange.values[0];\n      \n      for (let i = 0; i < headers.length; i++) {\n        if (headers[i] && headers[i].toString().toLowerCase() === (params.columnName || '').toLowerCase()) {\n          columnIndex = i;\n          columnLetter = getColumnLetter(i);\n          break;\n        }\n      }\n    }\n    \n    if (columnIndex === -1) {\n      return {\n        success: false,\n        error: `\"${params.columnName}\" 열을 찾을 수 없습니다.`\n      };\n    }\n    \n    // Find last row with data in this column\n    let lastDataRow = 1; // Start from row 2 (after header)\n    for (let row = 1; row < usedRange.rowCount; row++) {\n      if (usedRange.values[row][columnIndex] !== null && \n          usedRange.values[row][columnIndex] !== undefined && \n          usedRange.values[row][columnIndex] !== '') {\n        lastDataRow = row + 1; // +1 because Excel rows are 1-indexed\n      }\n    }\n    \n    // Create range from row 2 to last data row\n    const rangeAddress = `${columnLetter}2:${columnLetter}${lastDataRow}`;\n    \n    // Find first empty cell below the data\n    let targetRow = lastDataRow; // Start from row after last data (0-based becomes 1-based)\n    let foundEmpty = false;\n    \n    // Check up to 10 rows below for an empty cell\n    for (let i = 0; i < 10; i++) {\n      const checkCell = worksheet.getCell(lastDataRow + i, columnIndex);\n      checkCell.load(\"values\");\n      await context.sync();\n      \n      const cellValue = checkCell.values[0][0];\n      if (cellValue === null || cellValue === undefined || cellValue === '') {\n        targetRow = lastDataRow + i;\n        foundEmpty = true;\n        break;\n      }\n    }\n    \n    // If no empty cell found, use the row after last data\n    if (!foundEmpty) {\n      targetRow = lastDataRow;\n    }\n    \n    const sumCell = worksheet.getCell(targetRow, columnIndex);\n    \n    console.log(`Summing range: ${rangeAddress}, placing result in row ${targetRow + 1}`);\n    \n    sumCell.formulas = [[`=SUM(${rangeAddress})`]];\n    await context.sync();\n    \n    sumCell.load([\"values\", \"address\"]);\n    await context.sync();\n    \n    return {\n      success: true,\n      message: `${params.columnName} 열의 합계를 ${sumCell.address}에 계산했습니다: ${formatNumber(sumCell.values[0][0])}`,\n      value: sumCell.values[0][0]\n    };\n  }\n  \n  // Original logic for range-based sum - handle multiple selections\n  let sourceRange;\n  let sumFormula;\n  \n  if (params.sourceRange) {\n    sourceRange = worksheet.getRange(params.sourceRange);\n    sourceRange.load([\"columnIndex\", \"rowIndex\", \"rowCount\", \"address\"]);\n    await context.sync();\n    sumFormula = `=SUM(${sourceRange.address})`;\n  } else {\n    // Handle multiple selections\n    try {\n      const selectedRanges = context.workbook.getSelectedRanges();\n      selectedRanges.load([\"areas\", \"areaCount\"]);\n      await context.sync();\n      \n      if (selectedRanges.areaCount > 1) {\n        // Multiple non-contiguous ranges selected\n        const rangeAddresses = [];\n        \n        for (let i = 0; i < selectedRanges.areas.items.length; i++) {\n          const area = selectedRanges.areas.items[i];\n          area.load(\"address\");\n        }\n        await context.sync();\n        \n        for (let i = 0; i < selectedRanges.areas.items.length; i++) {\n          rangeAddresses.push(selectedRanges.areas.items[i].address);\n        }\n        \n        sumFormula = `=SUM(${rangeAddresses.join(',')})`;\n        sourceRange = selectedRanges.areas.items[0];\n        sourceRange.load([\"columnIndex\", \"rowIndex\", \"rowCount\"]);\n        await context.sync();\n      } else {\n        // Single contiguous range\n        sourceRange = context.workbook.getSelectedRange();\n        sourceRange.load([\"columnIndex\", \"rowIndex\", \"rowCount\", \"address\"]);\n        await context.sync();\n        sumFormula = `=SUM(${sourceRange.address})`;\n      }\n    } catch (error) {\n      console.log('Error getting selected ranges, trying fallback:', error);\n      // For non-contiguous selections, getSelectedRange() fails\n      // Try to get selected ranges differently\n      try {\n        const selectedRanges = context.workbook.getSelectedRanges();\n        selectedRanges.load([\"areas\", \"areaCount\"]);\n        await context.sync();\n        \n        if (selectedRanges.areas.items.length > 0) {\n          const rangeAddresses = [];\n          for (let i = 0; i < selectedRanges.areas.items.length; i++) {\n            const area = selectedRanges.areas.items[i];\n            area.load(\"address\");\n          }\n          await context.sync();\n          \n          for (let i = 0; i < selectedRanges.areas.items.length; i++) {\n            rangeAddresses.push(selectedRanges.areas.items[i].address);\n          }\n          \n          sumFormula = `=SUM(${rangeAddresses.join(',')})`;\n          sourceRange = selectedRanges.areas.items[0];\n          sourceRange.load([\"columnIndex\", \"rowIndex\", \"rowCount\"]);\n          await context.sync();\n        } else {\n          throw new Error('No ranges selected');\n        }\n      } catch (fallbackError) {\n        console.error('Fallback also failed:', fallbackError);\n        return { success: false, error: '선택한 범위를 처리할 수 없습니다. 연속된 범위를 선택해주세요.' };\n      }\n    }\n  }\n  \n  if (params.addNewRow === true) {\n    // Add new row for sum\n    const column = sourceRange.columnIndex;\n    const lastRow = sourceRange.rowIndex + sourceRange.rowCount;\n    const newCell = worksheet.getCell(lastRow, column);\n    \n    newCell.formulas = [[sumFormula]];\n    await context.sync();\n    \n    newCell.load([\"values\", \"address\"]);\n    await context.sync();\n    \n    return {\n      success: true,\n      message: `${newCell.address}에 합계를 계산했습니다: ${formatNumber(newCell.values[0][0])}`,\n      value: newCell.values[0][0]\n    };\n  } else if (params.targetCell) {\n    // Sum to specific cell\n    const targetCell = worksheet.getRange(params.targetCell);\n    targetCell.formulas = [[sumFormula]];\n    await context.sync();\n    \n    targetCell.load([\"values\", \"address\"]);\n    await context.sync();\n    \n    return {\n      success: true,\n      message: `${targetCell.address}에 합계를 계산했습니다: ${formatNumber(targetCell.values[0][0])}`,\n      value: targetCell.values[0][0]\n    };\n  } else {\n    // Default: find an empty cell for the result\n    // For multiple non-contiguous selections, find an empty spot\n    const usedRange = worksheet.getUsedRange();\n    usedRange.load([\"rowCount\", \"columnCount\"]);\n    await context.sync();\n    \n    let targetCell;\n    \n    // If multiple ranges selected (formula contains comma), find empty cell strategically\n    if (sumFormula.includes(',')) {\n      // Multiple ranges - find empty area\n      const lastUsedRow = usedRange ? usedRange.rowCount : 1;\n      const lastUsedCol = usedRange ? usedRange.columnCount : 1;\n      \n      // Try to find empty cell to the right of selection\n      let foundEmpty = false;\n      for (let col = lastUsedCol; col < lastUsedCol + 5; col++) {\n        const checkCell = worksheet.getCell(sourceRange.rowIndex, col);\n        checkCell.load(\"values\");\n        await context.sync();\n        \n        if (!checkCell.values[0][0]) {\n          targetCell = checkCell;\n          foundEmpty = true;\n          break;\n        }\n      }\n      \n      // If not found to the right, try below the used range\n      if (!foundEmpty) {\n        for (let row = lastUsedRow; row < lastUsedRow + 5; row++) {\n          const checkCell = worksheet.getCell(row, 0);\n          checkCell.load(\"values\");\n          await context.sync();\n          \n          if (!checkCell.values[0][0]) {\n            targetCell = checkCell;\n            foundEmpty = true;\n            break;\n          }\n        }\n      }\n      \n      // If still not found, use a safe location below all data\n      if (!foundEmpty) {\n        targetCell = worksheet.getCell(lastUsedRow + 2, 0);\n      }\n    } else {\n      // Single range - find empty cell below the range\n      const column = sourceRange.columnIndex;\n      const startRow = sourceRange.rowIndex + sourceRange.rowCount;\n      \n      let targetRow = startRow;\n      let foundEmpty = false;\n      \n      // Check up to 10 rows below for an empty cell\n      for (let i = 0; i < 10; i++) {\n        const checkCell = worksheet.getCell(startRow + i, column);\n        checkCell.load(\"values\");\n        await context.sync();\n        \n        const cellValue = checkCell.values[0][0];\n        if (cellValue === null || cellValue === undefined || cellValue === '') {\n          targetRow = startRow + i;\n          foundEmpty = true;\n          break;\n        }\n      }\n      \n      // If no empty cell found in the next 10 rows, use the immediate next row\n      if (!foundEmpty) {\n        targetRow = startRow;\n      }\n      \n      targetCell = worksheet.getCell(targetRow, column);\n    }\n    \n    targetCell.formulas = [[sumFormula]];\n    await context.sync();\n    \n    targetCell.load([\"values\", \"address\"]);\n    await context.sync();\n    \n    return {\n      success: true,\n      message: `${targetCell.address}에 합계를 계산했습니다: ${formatNumber(targetCell.values[0][0])}`,\n      value: targetCell.values[0][0]\n    };\n  }\n}\n\n// Helper function to get headers\nasync function getHeaders(context) {\n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  const usedRange = worksheet.getUsedRange();\n  \n  if (!usedRange) {\n    return [];\n  }\n  \n  usedRange.load([\"values\", \"columnCount\"]);\n  await context.sync();\n  \n  const headers = [];\n  const headerRow = usedRange.values[0];\n  \n  if (headerRow) {\n    for (let i = 0; i < headerRow.length; i++) {\n      headers.push({\n        column: i + 1,\n        columnLetter: getColumnLetter(i),\n        label: headerRow[i] ? headerRow[i].toString() : ''\n      });\n    }\n  }\n  \n  return headers;\n}\n\n// Calculate average\nasync function executeAverage(context, params) {\n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  let sourceRange;\n  let rangeDescription = '';\n  let averageFormula = '';\n  \n  try {\n    // Handle different average types\n    if (params.averageType === 'column') {\n      if (params.column) {\n        // Column specified by letter (e.g., \"C\")\n        const usedRange = worksheet.getUsedRange();\n        if (!usedRange) {\n          return { success: false, error: '데이터가 없습니다.' };\n        }\n        \n        usedRange.load([\"rowCount\", \"columnCount\"]);\n        await context.sync();\n        \n        const columnIndex = params.column.charCodeAt(0) - 65;\n        if (columnIndex < 0 || columnIndex >= usedRange.columnCount) {\n          return { success: false, error: '유효하지 않은 열입니다.' };\n        }\n        \n        // Get column data starting from row 2 (skip header)\n        if (usedRange.rowCount > 1) {\n          sourceRange = worksheet.getRangeByIndexes(1, columnIndex, usedRange.rowCount - 1, 1);\n          rangeDescription = `${params.column}열`;\n        } else {\n          return { success: false, error: '평균을 계산할 데이터가 없습니다.' };\n        }\n        \n        sourceRange.load([\"address\"]);\n        await context.sync();\n        averageFormula = `=AVERAGE(${sourceRange.address})`;\n        \n      } else if (params.columnName) {\n        // Check if columnName is a column letter reference (like \"E\", \"AA\", \"ABC\")\n        if (params.columnName.match(/^[A-Z]+$/)) {\n          // Direct column letter reference\n          const columnLetter = params.columnName;\n          // Convert column letter(s) to index (A=0, B=1, ..., Z=25, AA=26, AB=27, ...)\n          let columnIndex = 0;\n          for (let i = 0; i < columnLetter.length; i++) {\n            columnIndex = columnIndex * 26 + (columnLetter.charCodeAt(i) - 64);\n          }\n          columnIndex--; // Convert to 0-based index\n          \n          const usedRange = worksheet.getUsedRange();\n          if (!usedRange) {\n            return { success: false, error: '데이터가 없습니다.' };\n          }\n          \n          usedRange.load([\"rowCount\", \"columnCount\"]);\n          await context.sync();\n          \n          if (columnIndex < 0 || columnIndex >= usedRange.columnCount) {\n            return { success: false, error: '유효하지 않은 열입니다.' };\n          }\n          \n          // Get column data starting from row 2 (skip header)\n          if (usedRange.rowCount > 1) {\n            sourceRange = worksheet.getRangeByIndexes(1, columnIndex, usedRange.rowCount - 1, 1);\n            rangeDescription = `${params.columnName}열`;\n          } else {\n            return { success: false, error: '평균을 계산할 데이터가 없습니다.' };\n          }\n          \n          sourceRange.load([\"address\"]);\n          await context.sync();\n          averageFormula = `=AVERAGE(${sourceRange.address})`;\n        } else {\n          // Column specified by header name\n          const headers = await getHeaders(context);\n          const columnInfo = headers.find(h => h.label === params.columnName);\n          \n          if (!columnInfo) {\n            return { success: false, error: `\"${params.columnName}\" 열을 찾을 수 없습니다.` };\n          }\n          \n          const usedRange = worksheet.getUsedRange();\n          usedRange.load([\"rowCount\"]);\n          await context.sync();\n          \n          if (usedRange.rowCount > 1) {\n            sourceRange = worksheet.getRangeByIndexes(1, columnInfo.column - 1, usedRange.rowCount - 1, 1);\n            rangeDescription = `\"${params.columnName}\" 열`;\n          } else {\n            return { success: false, error: '평균을 계산할 데이터가 없습니다.' };\n          }\n          \n          sourceRange.load([\"address\"]);\n          await context.sync();\n          averageFormula = `=AVERAGE(${sourceRange.address})`;\n        }\n      }\n    } else if (params.averageType === 'row') {\n      // Row average (e.g., \"3행 평균\")\n      const usedRange = worksheet.getUsedRange();\n      if (!usedRange) {\n        return { success: false, error: '데이터가 없습니다.' };\n      }\n      \n      usedRange.load([\"rowCount\", \"columnCount\"]);\n      await context.sync();\n      \n      const rowIndex = params.row - 1; // Convert to 0-based\n      if (rowIndex < 0 || rowIndex >= usedRange.rowCount) {\n        return { success: false, error: '유효하지 않은 행입니다.' };\n      }\n      \n      // Get entire row data\n      sourceRange = worksheet.getRangeByIndexes(rowIndex, 0, 1, usedRange.columnCount);\n      rangeDescription = `${params.row}행`;\n      \n      sourceRange.load([\"address\", \"rowIndex\", \"columnIndex\", \"columnCount\"]);\n      await context.sync();\n      averageFormula = `=AVERAGE(${sourceRange.address})`;\n      \n    } else if (params.sourceRange) {\n      // Specific range (e.g., \"C1:C100\")\n      sourceRange = worksheet.getRange(params.sourceRange);\n      rangeDescription = params.sourceRange;\n      \n      sourceRange.load([\"address\"]);\n      await context.sync();\n      averageFormula = `=AVERAGE(${sourceRange.address})`;\n      \n    } else {\n      // Default: use selected range(s) - handle multiple selections\n      try {\n        // Try to get multiple selected ranges (for non-contiguous selections)\n        const selectedRanges = context.workbook.getSelectedRanges();\n        selectedRanges.load([\"areas\", \"areaCount\"]);\n        await context.sync();\n        \n        if (selectedRanges.areaCount > 1) {\n          // Multiple non-contiguous ranges selected\n          const rangeAddresses = [];\n          \n          for (let i = 0; i < selectedRanges.areas.items.length; i++) {\n            const area = selectedRanges.areas.items[i];\n            area.load(\"address\");\n          }\n          await context.sync();\n          \n          for (let i = 0; i < selectedRanges.areas.items.length; i++) {\n            rangeAddresses.push(selectedRanges.areas.items[i].address);\n          }\n          \n          averageFormula = `=AVERAGE(${rangeAddresses.join(',')})`;\n          rangeDescription = '선택한 셀';\n          \n          // Use the first selected range for positioning\n          sourceRange = selectedRanges.areas.items[0];\n          sourceRange.load([\"columnIndex\", \"rowIndex\", \"rowCount\", \"columnCount\"]);\n          await context.sync();\n          \n        } else {\n          // Single contiguous range\n          sourceRange = context.workbook.getSelectedRange();\n          rangeDescription = '선택한 범위';\n          \n          sourceRange.load([\"columnIndex\", \"rowIndex\", \"rowCount\", \"columnCount\", \"address\"]);\n          await context.sync();\n          averageFormula = `=AVERAGE(${sourceRange.address})`;\n        }\n        \n      } catch (error) {\n        console.log('Error getting selected ranges for average, trying fallback:', error);\n        // For non-contiguous selections, getSelectedRange() fails\n        try {\n          const selectedRanges = context.workbook.getSelectedRanges();\n          selectedRanges.load([\"areas\", \"areaCount\"]);\n          await context.sync();\n          \n          if (selectedRanges.areas.items.length > 0) {\n            const rangeAddresses = [];\n            for (let i = 0; i < selectedRanges.areas.items.length; i++) {\n              const area = selectedRanges.areas.items[i];\n              area.load(\"address\");\n            }\n            await context.sync();\n            \n            for (let i = 0; i < selectedRanges.areas.items.length; i++) {\n              rangeAddresses.push(selectedRanges.areas.items[i].address);\n            }\n            \n            averageFormula = `=AVERAGE(${rangeAddresses.join(',')})`;\n            rangeDescription = '선택한 셀';\n            sourceRange = selectedRanges.areas.items[0];\n            sourceRange.load([\"columnIndex\", \"rowIndex\", \"rowCount\", \"columnCount\"]);\n            await context.sync();\n          } else {\n            throw new Error('No ranges selected');\n          }\n        } catch (fallbackError) {\n          console.error('Average fallback also failed:', fallbackError);\n          return { success: false, error: '선택한 범위를 처리할 수 없습니다. 연속된 범위를 선택해주세요.' };\n        }\n      }\n    }\n    \n    // Determine where to place the result\n    let targetCell;\n    if (params.targetCell) {\n      targetCell = worksheet.getRange(params.targetCell);\n    } else if (params.averageType === 'row') {\n      // For row average, place result at the end of the row\n      const lastColumn = sourceRange.columnIndex + sourceRange.columnCount;\n      targetCell = worksheet.getCell(sourceRange.rowIndex, lastColumn);\n    } else {\n      // For column average or range, find first empty cell below the range\n      const column = sourceRange.columnIndex;\n      const startRow = sourceRange.rowIndex + sourceRange.rowCount;\n      \n      // Find the first empty cell below the selected range\n      let targetRow = startRow;\n      let foundEmpty = false;\n      \n      // Check up to 10 rows below for an empty cell\n      for (let i = 0; i < 10; i++) {\n        const checkCell = worksheet.getCell(startRow + i, column);\n        checkCell.load(\"values\");\n        await context.sync();\n        \n        const cellValue = checkCell.values[0][0];\n        if (cellValue === null || cellValue === undefined || cellValue === '') {\n          targetRow = startRow + i;\n          foundEmpty = true;\n          break;\n        }\n      }\n      \n      // If no empty cell found in the next 10 rows, use the immediate next row\n      if (!foundEmpty) {\n        targetRow = startRow;\n      }\n      \n      targetCell = worksheet.getCell(targetRow, column);\n    }\n    \n    // Apply AVERAGE formula\n    targetCell.formulas = [[averageFormula]];\n    targetCell.numberFormat = [[\"#,##0.00\"]]; // Format as number with 2 decimal places\n    await context.sync();\n    \n    targetCell.load([\"values\", \"address\"]);\n    await context.sync();\n    \n    return {\n      success: true,\n      message: `${rangeDescription}의 평균을 ${targetCell.address}에 계산했습니다: ${formatNumber(targetCell.values[0][0])}`,\n      value: targetCell.values[0][0]\n    };\n    \n  } catch (error) {\n    console.error('Error in executeAverage:', error);\n    return {\n      success: false,\n      error: `평균 계산 중 오류 발생: ${error.message}`\n    };\n  }\n}\n\n// Count cells\nasync function executeCount(context, params) {\n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  const sourceRange = params.sourceRange ? worksheet.getRange(params.sourceRange) : context.workbook.getSelectedRange();\n  \n  sourceRange.load([\"address\"]);\n  await context.sync();\n  \n  let formula;\n  if (params.countType === 'countif' && params.condition !== undefined) {\n    let criteria;\n    if (params.operator === 'contains') {\n      criteria = `\"*${params.condition}*\"`;\n    } else if (params.operator === 'equals') {\n      criteria = typeof params.condition === 'string' ? `\"${params.condition}\"` : params.condition;\n    } else if (params.operator && ['>', '<', '>=', '<=', '<>'].includes(params.operator)) {\n      criteria = `\"${params.operator}${params.condition}\"`;\n    } else {\n      if (typeof params.condition === 'string') {\n        criteria = `\"*${params.condition}*\"`;\n      } else {\n        criteria = params.condition;\n      }\n    }\n    formula = `=COUNTIF(${sourceRange.address}, ${criteria})`;\n  } else if (params.countType === 'counta') {\n    formula = `=COUNTA(${sourceRange.address})`;\n  } else {\n    formula = `=COUNT(${sourceRange.address})`;\n  }\n  \n  let resultCell;\n  if (params.targetCell) {\n    resultCell = worksheet.getRange(params.targetCell);\n  } else {\n    const usedRange = worksheet.getUsedRange();\n    await context.sync();\n    \n    const lastRow = usedRange ? usedRange.rowCount : 1;\n    const lastCol = usedRange ? usedRange.columnCount : 1;\n    resultCell = worksheet.getCell(lastRow, lastCol);\n  }\n  \n  resultCell.formulas = [[formula]];\n  await context.sync();\n  \n  resultCell.load(\"values\");\n  await context.sync();\n  \n  return {\n    success: true,\n    message: params.countType === 'countif' ? \n      `\"${params.condition}\"을(를) 포함하는 셀의 개수: ${formatNumber(resultCell.values[0][0])}개` :\n      `개수를 계산했습니다: ${formatNumber(resultCell.values[0][0])}개`,\n    value: resultCell.values[0][0]\n  };\n}\n\n// Format cells\nasync function executeFormat(context, params) {\n  console.log('executeFormat called with params:', params);\n  \n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  let ranges = [];\n  \n  if (params.range) {\n    ranges.push(worksheet.getRange(params.range));\n  } else {\n    // Handle multiple selections\n    try {\n      const selectedRanges = context.workbook.getSelectedRanges();\n      selectedRanges.load([\"areas\", \"areaCount\"]);\n      await context.sync();\n      \n      if (selectedRanges.areaCount > 1) {\n        // Multiple non-contiguous ranges selected\n        for (let i = 0; i < selectedRanges.areas.items.length; i++) {\n          ranges.push(selectedRanges.areas.items[i]);\n        }\n      } else {\n        // Single contiguous range\n        ranges.push(context.workbook.getSelectedRange());\n      }\n    } catch (error) {\n      console.log('Error getting selected ranges for format:', error);\n      return { success: false, error: '선택한 범위를 처리할 수 없습니다. 연속된 범위를 선택해주세요.' };\n    }\n  }\n  \n  // Load format for all ranges\n  for (const range of ranges) {\n    range.load(\"format\");\n  }\n  await context.sync();\n  \n  // Apply formatting to all ranges\n  for (const range of ranges) {\n    if (params.bold !== undefined) {\n      range.format.font.bold = params.bold;\n    }\n    \n    if (params.italic !== undefined) {\n      range.format.font.italic = params.italic;\n    }\n    \n    if (params.fontSize) {\n      range.format.font.size = params.fontSize;\n    }\n    \n    if (params.fontColor) {\n      range.format.font.color = params.fontColor;\n    }\n    \n    if (params.backgroundColor) {\n      range.format.fill.color = params.backgroundColor;\n    }\n    \n    if (params.horizontalAlignment) {\n      range.format.horizontalAlignment = params.horizontalAlignment === 'left' ? 'Left' :\n                                       params.horizontalAlignment === 'center' ? 'Center' :\n                                       params.horizontalAlignment === 'right' ? 'Right' : 'General';\n    }\n    \n    if (params.numberFormat) {\n      // Handle specific format types\n      let format = params.numberFormat;\n      if (format === 'number' || format === '숫자') {\n        format = '#,##0';\n      } else if (format === 'currency' || format === '원화' || format === 'won' || format === '통화') {\n        format = '₩#,##0';\n      } else if (format === 'currency_decimal' || format === '원화_소수') {\n        format = '₩#,##0.00';\n      } else if (format === 'percentage' || format === '퍼센트' || format === '백분율') {\n        format = '0%';\n      } else if (format === 'percentage_decimal' || format === '퍼센트_소수') {\n        format = '0.00%';\n      } else if (format === 'date' || format === '날짜') {\n        format = 'yyyy-mm-dd';\n      } else if (format === 'time' || format === '시간') {\n        format = 'hh:mm:ss';\n      } else if (format === 'text' || format === '텍스트') {\n        format = '@';\n      } else if (format === 'general' || format === '일반') {\n        format = 'General';\n      }\n      \n      // Set number format for the range\n      range.numberFormat = format;\n    }\n  }\n  \n  await context.sync();\n  \n  return {\n    success: true,\n    message: '서식이 적용되었습니다.'\n  };\n}\n\n// Sort data\nasync function executeSort(context, params) {\n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  const range = params.range ? worksheet.getRange(params.range) : worksheet.getUsedRange();\n  \n  const column = params.column || 1;\n  const ascending = params.ascending !== undefined ? params.ascending : true;\n  \n  range.sort.apply([\n    {\n      key: column - 1, // Excel API uses 0-based index\n      ascending: ascending\n    }\n  ]);\n  \n  await context.sync();\n  \n  const columnLetter = getColumnLetter(column - 1);\n  \n  return {\n    success: true,\n    message: `${columnLetter}열 기준으로 ${ascending ? '오름차순' : '내림차순'} 정렬되었습니다.`\n  };\n}\n\n// Create chart\nasync function executeChart(context, params) {\n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  let sourceData;\n  let dataAddress = '';\n  \n  console.log('Creating chart with params:', params);\n  \n  if (params.range) {\n    sourceData = worksheet.getRange(params.range);\n    sourceData.load([\"address\", \"values\"]);\n    await context.sync();\n    dataAddress = sourceData.address;\n  } else {\n    // Handle multiple selections for chart data\n    try {\n      const selectedRanges = context.workbook.getSelectedRanges();\n      selectedRanges.load([\"areas\", \"areaCount\"]);\n      await context.sync();\n      \n      if (selectedRanges.areaCount > 1) {\n        // For charts with multiple non-contiguous ranges, create a temporary data range\n        console.log('Multiple ranges selected for chart, need to consolidate data');\n        \n        // Collect all selected ranges\n        const allRanges = [];\n        for (let i = 0; i < selectedRanges.areas.items.length; i++) {\n          const area = selectedRanges.areas.items[i];\n          area.load([\"address\", \"values\", \"rowIndex\", \"columnIndex\"]);\n          allRanges.push(area);\n        }\n        await context.sync();\n        \n        // Find an empty area to create temporary consolidated data\n        const usedRange = worksheet.getUsedRangeOrNullObject();\n        usedRange.load([\"isNullObject\", \"rowCount\", \"columnCount\"]);\n        await context.sync();\n        \n        const tempStartRow = !usedRange.isNullObject ? usedRange.rowCount + 2 : 1;\n        const tempStartCol = 0;\n        \n        // Consolidate data into a contiguous range - handle individual cells\n        const consolidatedData = [];\n        let maxColumns = 1;\n        \n        for (const range of allRanges) {\n          if (range.values && range.values.length > 0) {\n            // Each range might be a single cell or a range of cells\n            for (const row of range.values) {\n              consolidatedData.push(row);\n              maxColumns = Math.max(maxColumns, row.length);\n            }\n          }\n        }\n        \n        // Write consolidated data to temporary location\n        if (consolidatedData.length > 0) {\n          console.log('Consolidated data:', consolidatedData);\n          console.log('Number of ranges:', allRanges.length);\n          \n          try {\n            // For individual cells, reorganize data for chart\n            if (consolidatedData.every(row => row.length === 1)) {\n              // All are single cells - create label-value pairs\n              const reorganizedData = [];\n              for (let i = 0; i < consolidatedData.length; i++) {\n                const value = consolidatedData[i][0];\n                // Skip empty cells\n                if (value !== null && value !== undefined && value !== '') {\n                  reorganizedData.push([`Item ${i+1}`, value]);\n                }\n              }\n              \n              if (reorganizedData.length === 0) {\n                return { success: false, error: '선택한 셀에 유효한 데이터가 없습니다.' };\n              }\n              \n              console.log('Reorganized data for chart:', reorganizedData);\n              \n              const tempRange = worksheet.getRangeByIndexes(\n                tempStartRow, \n                tempStartCol, \n                reorganizedData.length, \n                2  // Always 2 columns for label-value pairs\n              );\n              \n              tempRange.values = reorganizedData;\n              await context.sync();\n              \n              sourceData = tempRange;\n            } else {\n              // Mixed or multi-column data - use as-is\n              const tempRange = worksheet.getRangeByIndexes(\n                tempStartRow, \n                tempStartCol, \n                consolidatedData.length, \n                maxColumns\n              );\n              \n              tempRange.values = consolidatedData;\n              await context.sync();\n              \n              sourceData = tempRange;\n            }\n            \n            sourceData.load([\"address\", \"values\", \"rowCount\", \"columnCount\"]);\n            await context.sync();\n            \n            console.log('Temp range created:', {\n              address: sourceData.address,\n              rowCount: sourceData.rowCount,\n              columnCount: sourceData.columnCount,\n              firstValue: sourceData.values[0]\n            });\n            \n            dataAddress = sourceData.address;\n          } catch (error) {\n            console.error('Error creating temporary range:', error);\n            return { success: false, error: '임시 데이터 범위 생성 중 오류가 발생했습니다.' };\n          }\n        } else {\n          return { success: false, error: '선택한 셀에 데이터가 없습니다.' };\n        }\n      } else {\n        // Single contiguous range\n        sourceData = context.workbook.getSelectedRange();\n        sourceData.load([\"address\", \"values\"]);\n        await context.sync();\n        dataAddress = sourceData.address;\n      }\n    } catch (error) {\n      console.log('Error getting selected ranges for chart:', error);\n      return { success: false, error: '선택한 범위를 처리할 수 없습니다. 연속된 범위를 선택해주세요.' };\n    }\n  }\n  \n  console.log('Chart data range:', dataAddress);\n  \n  // Determine chart type\n  let chartType;\n  if (params.chartType === 'bar' || params.chartType === '막대') {\n    chartType = Excel.ChartType.columnClustered;\n  } else if (params.chartType === 'line' || params.chartType === '선') {\n    chartType = Excel.ChartType.line;\n  } else if (params.chartType === 'pie' || params.chartType === '원') {\n    chartType = Excel.ChartType.pie;\n  } else if (params.chartType === 'scatter' || params.chartType === '분산형') {\n    chartType = Excel.ChartType.xyscatter;\n  } else {\n    // Default to column chart\n    chartType = Excel.ChartType.columnClustered;\n  }\n  \n  try {\n    // Validate source data before creating chart\n    if (!sourceData) {\n      return { success: false, error: '차트 데이터가 없습니다.' };\n    }\n    \n    // Create the chart with error handling\n    console.log('Creating chart with type:', chartType);\n    console.log('Source data address:', dataAddress);\n    \n    const chart = worksheet.charts.add(chartType, sourceData, Excel.ChartSeriesBy.auto);\n    \n    // Set chart properties\n    chart.title.text = params.title || '차트';\n    chart.height = 300;\n    chart.width = 400;\n    \n    // Position the chart\n    chart.left = params.offsetX || 100;\n    chart.top = params.offsetY || 100;\n    \n    // Set legend position\n    chart.legend.position = Excel.ChartLegendPosition.bottom;\n    chart.legend.visible = true;\n    \n    await context.sync();\n    \n    console.log('Chart created successfully');\n  } catch (chartError) {\n    console.error('Error creating chart:', chartError);\n    console.error('Chart error details:', {\n      message: chartError.message,\n      stack: chartError.stack,\n      chartType: chartType,\n      dataAddress: dataAddress\n    });\n    \n    // Try a simpler chart type as fallback\n    if (chartType !== Excel.ChartType.columnClustered) {\n      console.log('Trying fallback to column chart...');\n      try {\n        const chart = worksheet.charts.add(Excel.ChartType.columnClustered, sourceData, Excel.ChartSeriesBy.auto);\n        chart.title.text = params.title || '차트';\n        chart.height = 300;\n        chart.width = 400;\n        chart.left = params.offsetX || 100;\n        chart.top = params.offsetY || 100;\n        await context.sync();\n        \n        return {\n          success: true,\n          message: `${dataAddress} 범위로 막대 차트가 생성되었습니다. (원래 요청한 차트 타입이 지원되지 않아 막대 차트로 대체되었습니다.)`\n        };\n      } catch (fallbackError) {\n        console.error('Fallback chart also failed:', fallbackError);\n        return { success: false, error: '차트 생성에 실패했습니다. 데이터 형식을 확인해주세요.' };\n      }\n    }\n    \n    return { success: false, error: `차트 생성 중 오류: ${chartError.message}` };\n  }\n  \n  return {\n    success: true,\n    message: `${dataAddress} 범위로 ${params.chartType || '막대'} 차트가 생성되었습니다.`\n  };\n}\n\n// Add conditional formatting\nasync function executeConditionalFormat(context, params) {\n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  let ranges = [];\n  \n  console.log('Applying conditional format with params:', params);\n  \n  if (params.range) {\n    ranges.push(worksheet.getRange(params.range));\n  } else {\n    // If no range specified, use the entire used range of the worksheet\n    console.log('No range specified for conditional format, using entire sheet');\n    const usedRange = worksheet.getUsedRangeOrNullObject();\n    usedRange.load(\"isNullObject\");\n    await context.sync();\n    \n    if (!usedRange.isNullObject) {\n      // Use the entire used range\n      ranges.push(usedRange);\n    } else {\n      // If no used range, apply to a large default range\n      // Excel will optimize this automatically\n      const defaultRange = worksheet.getRange(\"A1:XFD1048576\");\n      ranges.push(defaultRange);\n    }\n  }\n  \n  // Apply conditional formatting to all ranges\n  try {\n    for (const range of ranges) {\n      // Load range to ensure it's valid\n      range.load(\"address\");\n      await context.sync();\n      \n      console.log('Applying conditional format to range:', range.address);\n      \n      // Simply apply conditional format to the entire range\n      // Excel will automatically skip non-numeric cells for numeric comparisons\n      const conditionalFormat = range.conditionalFormats.add(Excel.ConditionalFormatType.cellValue);\n      \n      // Set the rule based on condition\n      if (params.condition === 'greater_than' && params.value !== undefined) {\n        conditionalFormat.cellValue.rule = {\n          formula1: params.value.toString(),\n          operator: Excel.ConditionalCellValueOperator.greaterThan\n        };\n      } else if (params.condition === 'less_than' && params.value !== undefined) {\n        conditionalFormat.cellValue.rule = {\n          formula1: params.value.toString(),\n          operator: Excel.ConditionalCellValueOperator.lessThan\n        };\n      } else if (params.condition === 'equal_to' && params.value !== undefined) {\n        conditionalFormat.cellValue.rule = {\n          formula1: params.value.toString(),\n          operator: Excel.ConditionalCellValueOperator.equalTo\n        };\n      } else if (params.condition === 'text_contains' && params.value !== undefined) {\n        conditionalFormat.cellValue.rule = {\n          formula1: params.value.toString(),\n          operator: Excel.ConditionalCellValueOperator.containsText\n        };\n      } else {\n        // Default to greater than\n        conditionalFormat.cellValue.rule = {\n          formula1: (params.value || 0).toString(),\n          operator: Excel.ConditionalCellValueOperator.greaterThan\n        };\n      }\n      \n      // Set the format\n      conditionalFormat.cellValue.format.fill.color = params.backgroundColor || \"#00FF00\";\n      if (params.fontColor) {\n        conditionalFormat.cellValue.format.font.color = params.fontColor;\n      }\n      if (params.bold) {\n        conditionalFormat.cellValue.format.font.bold = true;\n      }\n    }\n  } catch (formatError) {\n    console.error('Error applying conditional format:', formatError);\n    return {\n      success: false,\n      error: `조건부 서식 적용 중 오류: ${formatError.message}`\n    };\n  }\n  \n  await context.sync();\n  \n  return {\n    success: true,\n    message: `조건부 서식이 적용되었습니다. (${params.condition} ${params.value || ''})`\n  };\n}\n\n// Translate column contents\nasync function executeTranslate(context, params) {\n  console.log('executeTranslate called with params:', params);\n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  \n  if (!params.targetLanguage) {\n    return { success: false, error: '대상 언어를 지정해주세요.' };\n  }\n  \n  let sourceRange;\n  let targetColumnIndex;\n  \n  if (params.sourceRange) {\n    // Handle column ranges like \"C:C\" by intersecting with used range\n    if (params.sourceRange.match(/^[A-Z]+:[A-Z]+$/)) {\n      console.log('Handling column range:', params.sourceRange);\n      const usedRange = worksheet.getUsedRange();\n      if (!usedRange) {\n        return { success: false, error: '번역할 데이터가 없습니다.' };\n      }\n      \n      usedRange.load([\"rowCount\", \"columnCount\"]);\n      await context.sync();\n      \n      console.log('Used range:', {\n        rowCount: usedRange.rowCount,\n        columnCount: usedRange.columnCount\n      });\n      \n      // Get the column letter from the range (e.g., \"C\" from \"C:C\")\n      const columnLetter = params.sourceRange.split(':')[0];\n      const columnIndex = columnLetter.charCodeAt(0) - 65;\n      \n      // Get only the used portion of the column, starting from row 2 (skip header)\n      if (usedRange.rowCount > 1) {\n        sourceRange = worksheet.getRangeByIndexes(1, columnIndex, usedRange.rowCount - 1, 1);\n      } else {\n        return { success: false, error: '번역할 데이터가 없습니다.' };\n      }\n      \n      // Handle target range similarly\n      if (params.targetRange && params.targetRange.match(/^[A-Z]+:[A-Z]+$/)) {\n        const targetColumnLetter = params.targetRange.split(':')[0];\n        targetColumnIndex = targetColumnLetter.charCodeAt(0) - 65;\n        console.log('Target column calculation:', {\n          targetRange: params.targetRange,\n          targetColumnLetter,\n          targetColumnIndex\n        });\n      } else {\n        // If no target specified, use next column\n        targetColumnIndex = columnIndex + 1;\n        console.log('Using next column as target:', {\n          sourceColumnIndex: columnIndex,\n          targetColumnIndex\n        });\n      }\n    } else {\n      // Handle specific ranges like \"B2:B40\"\n      sourceRange = worksheet.getRange(params.sourceRange);\n      \n      // Parse target column if specified\n      if (params.targetRange) {\n        if (params.targetRange.match(/^[A-Z]+:[A-Z]+$/)) {\n          // Extract column letter from targetRange like \"E:E\"\n          const targetColumnLetter = params.targetRange.split(':')[0];\n          targetColumnIndex = targetColumnLetter.charCodeAt(0) - 65;\n          console.log('Target column parsed from targetRange:', {\n            targetRange: params.targetRange,\n            targetColumnLetter,\n            targetColumnIndex\n          });\n        }\n      }\n    }\n  } else if (params.sourceColumn) {\n    const columnIndex = params.sourceColumn.charCodeAt(0) - 65;\n    const usedRange = worksheet.getUsedRange();\n    usedRange.load([\"rowCount\"]);\n    await context.sync();\n    \n    if (usedRange.rowCount > 1) {\n      sourceRange = worksheet.getRangeByIndexes(1, columnIndex, usedRange.rowCount - 1, 1);\n    } else {\n      return { success: false, error: '번역할 데이터가 없습니다.' };\n    }\n    \n    targetColumnIndex = params.targetColumn === 'next' ? columnIndex + 1 :\n                       params.targetColumn ? params.targetColumn.charCodeAt(0) - 65 : columnIndex + 1;\n  } else {\n    return { success: false, error: '번역할 열을 지정해주세요.' };\n  }\n  \n  sourceRange.load([\"values\", \"rowIndex\", \"columnIndex\", \"rowCount\"]);\n  await context.sync();\n  \n  console.log('Source range loaded:', {\n    rowIndex: sourceRange.rowIndex,\n    columnIndex: sourceRange.columnIndex,\n    rowCount: sourceRange.rowCount,\n    values: sourceRange.values ? `${sourceRange.values.length} rows` : 'null'\n  });\n  \n  const sourceValues = sourceRange.values;\n  if (!sourceValues || sourceValues.length === 0) {\n    return { success: false, error: '번역할 데이터가 없습니다.' };\n  }\n  \n  const translations = [];\n  const batchSize = 20;\n  \n  // Translate in batches\n  for (let i = 0; i < sourceValues.length; i += batchSize) {\n    const batch = sourceValues.slice(i, Math.min(i + batchSize, sourceValues.length));\n    const batchTexts = batch.map(row => row[0]).filter(text => text);\n    \n    if (batchTexts.length > 0) {\n      const translatedBatch = await translateBatch(batchTexts, params.targetLanguage, params.sourceLanguage);\n      \n      // Check if translatedBatch is valid\n      if (!translatedBatch || !Array.isArray(translatedBatch)) {\n        console.error('Invalid translation batch received:', translatedBatch);\n        // Mark all as translation failed\n        for (let j = 0; j < batch.length; j++) {\n          if (batch[j][0]) {\n            translations.push([{ text: '번역 실패', isError: true }]);\n          } else {\n            translations.push([{ text: '', isError: false }]);\n          }\n        }\n      } else {\n        console.log('Processing translation batch:', {\n          batchLength: batch.length,\n          translatedBatchLength: translatedBatch.length,\n          sampleTranslations: translatedBatch.slice(0, 3),\n          firstTranslation: translatedBatch[0],\n          translationType: typeof translatedBatch[0],\n          rawData: JSON.stringify(translatedBatch.slice(0, 3))\n        });\n        \n        let translationIndex = 0;\n        for (let j = 0; j < batch.length; j++) {\n          if (batch[j][0]) {\n            const translatedText = translatedBatch[translationIndex] || '';\n            // Check if translation is empty or failed\n            if (!translatedText || translatedText.trim() === '') {\n              translations.push([{ text: '번역 실패', isError: true }]);\n            } else {\n              translations.push([{ text: translatedText, isError: false }]);\n            }\n            if (j < 3) {\n              console.log(`Translation ${j}: \"${batch[j][0]}\" -> \"${translatedText}\"`);\n            }\n            translationIndex++;\n          } else {\n            // Keep empty rows as empty\n            translations.push([{ text: '', isError: false }]);\n          }\n        }\n      }\n    } else {\n      for (let j = 0; j < batch.length; j++) {\n        translations.push([{ text: '', isError: false }]);\n      }\n    }\n    \n    // Show progress\n    if (i % 100 === 0 && i > 0) {\n      showStatus(`번역 중... ${Math.round((i / sourceValues.length) * 100)}%`, 'info');\n    }\n  }\n  \n  // Write translations\n  console.log('Writing translations to target column:', {\n    rowIndex: sourceRange.rowIndex,\n    targetColumnIndex: targetColumnIndex || sourceRange.columnIndex + 1,\n    translationsCount: translations.length,\n    sampleTranslations: translations.slice(0, 3).map(t => t[0])\n  });\n  console.log('First 5 translations raw:', JSON.stringify(translations.slice(0, 5)));\n  console.log('Translation content check:', {\n    first: translations[0] ? translations[0][0] : 'null',\n    second: translations[1] ? translations[1][0] : 'null',\n    third: translations[2] ? translations[2][0] : 'null',\n    isEmpty: translations[0] && translations[0][0] === ''\n  });\n  \n  // DEBUG: Check if translations contain original text instead of translations\n  console.log('DEBUG: Comparing source and translations:');\n  for (let i = 0; i < Math.min(5, translations.length); i++) {\n    console.log(`  [${i}] Source: \"${sourceValues[i][0]}\" -> Translation: \"${translations[i][0]}\"`);\n  }\n  \n  // Ensure targetColumnIndex is set correctly\n  if (targetColumnIndex === undefined) {\n    // If no target column specified, use the next column after source\n    targetColumnIndex = sourceRange.columnIndex + 1;\n    console.log('No target column specified, using next column:', targetColumnIndex);\n  }\n  \n  const targetRange = worksheet.getRangeByIndexes(\n    sourceRange.rowIndex,\n    targetColumnIndex,\n    translations.length,\n    1\n  );\n  \n  targetRange.load([\"address\", \"values\"]);\n  await context.sync();\n  console.log('Target range address:', targetRange.address);\n  console.log('Existing target values (first 3):', targetRange.values.slice(0, 3));\n  \n  // Clear existing values first\n  targetRange.clear(Excel.ClearApplyTo.contents);\n  await context.sync();\n  console.log('Target range cleared');\n  \n  // Ensure translations are properly formatted as 2D array\n  console.log('Setting target range values:', {\n    translationsLength: translations.length,\n    firstTranslation: translations[0],\n    isArray: Array.isArray(translations),\n    is2DArray: Array.isArray(translations[0])\n  });\n  \n  // Process translations and prepare values\n  const stringTranslations = [];\n  const errorRows = [];\n  \n  for (let i = 0; i < translations.length; i++) {\n    const translation = translations[i][0];\n    if (translation && typeof translation === 'object') {\n      stringTranslations.push([translation.text]);\n      if (translation.isError) {\n        errorRows.push(i);\n      }\n    } else {\n      // Handle legacy format\n      stringTranslations.push([String(translation || '')]);\n    }\n  }\n  \n  console.log('String translations (first 3):', stringTranslations.slice(0, 3));\n  console.log('Error rows:', errorRows.length, 'rows marked as errors');\n  \n  // Set the values\n  targetRange.values = stringTranslations;\n  await context.sync();\n  \n  // Apply error styling to failed translations\n  if (errorRows.length > 0) {\n    for (const rowIndex of errorRows) {\n      const errorCell = targetRange.getCell(rowIndex, 0);\n      errorCell.format.fill.color = \"#FFE6E6\"; // Light red background\n      errorCell.format.font.color = \"#CC0000\"; // Dark red text\n      errorCell.format.font.bold = true;\n    }\n    await context.sync();\n  }\n  \n  console.log('Translations written to Excel with error styling applied');\n  \n  // Verify the values were actually written\n  targetRange.load([\"values\", \"text\", \"valueTypes\"]);\n  await context.sync();\n  console.log('Verification - Target range:', {\n    address: targetRange.address,\n    values: targetRange.values.slice(0, 3),\n    text: targetRange.text.slice(0, 3),\n    valueTypes: targetRange.valueTypes.slice(0, 3),\n    actualFirstValue: targetRange.values[0] ? targetRange.values[0][0] : 'null',\n    firstThreeValues: [\n      targetRange.values[0] ? targetRange.values[0][0] : 'empty',\n      targetRange.values[1] ? targetRange.values[1][0] : 'empty',\n      targetRange.values[2] ? targetRange.values[2][0] : 'empty'\n    ]\n  });\n  \n  // Try alternative method - set each cell individually for debugging\n  if (translations.length > 0) {\n    const isEmpty = !targetRange.values[0] || !targetRange.values[0][0] || targetRange.values[0][0] === '';\n    console.log('Checking if values are empty:', {\n      isEmpty,\n      firstValue: targetRange.values[0] ? targetRange.values[0][0] : 'null',\n      firstValueLength: targetRange.values[0] && targetRange.values[0][0] ? targetRange.values[0][0].length : 0\n    });\n    \n    if (isEmpty) {\n      console.log('Values not visible, trying individual cell approach...');\n      // Try setting just the first few cells individually\n      for (let i = 0; i < Math.min(3, translations.length); i++) {\n        const cellRow = sourceRange.rowIndex + i;\n        const cellCol = targetColumnIndex || sourceRange.columnIndex + 1;\n        const cell = worksheet.getCell(cellRow, cellCol);\n        const cellValue = stringTranslations[i][0];\n        \n        console.log(`Setting cell (${cellRow},${cellCol}) to: \"${cellValue}\"`);\n        cell.values = [[cellValue]];\n        \n        await context.sync();\n        \n        // Verify it was set\n        cell.load(\"values\");\n        await context.sync();\n        console.log(`Cell ${i} after setting:`, cell.values[0][0]);\n      }\n    }\n  }\n  \n  // Add header\n  const headerCell = worksheet.getCell(0, targetColumnIndex || sourceRange.columnIndex + 1);\n  const sourceHeaderCell = worksheet.getCell(0, sourceRange.columnIndex);\n  sourceHeaderCell.load(\"values\");\n  await context.sync();\n  \n  headerCell.values = [[`${sourceHeaderCell.values[0][0]} (${params.targetLanguage})`]];\n  await context.sync();\n  \n  return {\n    success: true,\n    message: `번역이 완료되었습니다. (${sourceValues.length}개 항목)`\n  };\n}\n\n// Translate a batch of texts through proxy\nasync function translateBatch(texts, targetLanguage, sourceLanguage) {\n  try {\n    console.log('translateBatch called with', texts.length, 'texts');\n    \n    // Get selected model and auth key\n    const selectedModel = localStorage.getItem(\"excel_addon_selected_model\") || \"gpt-4.1-mini-2025-04-14\";\n    const authKey = localStorage.getItem(\"excel_addon_auth_key\");\n    \n    const response = await fetch(API_PROXY_URL, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        command: `Translate these items to ${targetLanguage}: ${texts.join(', ')}`,\n        sheetContext: {\n          operation: 'translate_batch',\n          texts: texts,\n          targetLanguage: targetLanguage,\n          sourceLanguage: sourceLanguage\n        },\n        model: selectedModel,\n        authKey: authKey\n      })\n    });\n    \n    console.log('Translation response status:', response.status);\n    \n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    \n    const result = await response.json();\n    console.log('Translation result:', result);\n    \n    if (result.success && result.data && result.data.translations) {\n      console.log('Translations received:', result.data.translations.length);\n      console.log('First 3 translations from API:', result.data.translations.slice(0, 3));\n      console.log('Raw translations data:', JSON.stringify(result.data.translations.slice(0, 5)));\n      return result.data.translations;\n    } else if (result.error) {\n      console.error('Translation API error:', result.error);\n      throw new Error(result.error);\n    } else {\n      console.error('Invalid translation response structure:', result);\n      throw new Error('번역 응답을 받을 수 없습니다.');\n    }\n  } catch (error) {\n    console.error('Translation error:', error);\n    return texts.map(() => '');\n  }\n}\n\n// Helper functions\nfunction getColumnLetter(columnIndex) {\n  let columnLetter = '';\n  let tempIndex = columnIndex;\n  \n  while (tempIndex >= 0) {\n    columnLetter = String.fromCharCode((tempIndex % 26) + 65) + columnLetter;\n    tempIndex = Math.floor(tempIndex / 26) - 1;\n  }\n  \n  return columnLetter;\n}\n\nfunction formatNumber(value) {\n  if (typeof value === 'number') {\n    if (Number.isInteger(value)) {\n      return value.toLocaleString('ko-KR');\n    } else {\n      return value.toLocaleString('ko-KR', { minimumFractionDigits: 0, maximumFractionDigits: 2 });\n    }\n  }\n  return value;\n}\n\nfunction showStatus(message, type) {\n  const status = document.getElementById('status');\n  status.textContent = message;\n  status.className = 'status-message ' + type;\n  status.style.display = 'block';\n  \n  if (window.statusTimeout) {\n    clearTimeout(window.statusTimeout);\n  }\n  \n  if (type === 'success') {\n    window.statusTimeout = setTimeout(() => {\n      status.style.display = 'none';\n    }, 5000);\n  }\n}\n\nfunction clearInput() {\n  document.getElementById('commandInput').value = '';\n  document.getElementById('status').style.display = 'none';\n}\n\nfunction setCommand(command) {\n  document.getElementById('commandInput').value = command;\n  document.getElementById('commandInput').focus();\n}\n\n// Auth modal functions\nfunction showAuthModal() {\n  document.getElementById(\"authModal\").style.display = \"block\";\n}\n\nfunction hideAuthModal() {\n  document.getElementById(\"authModal\").style.display = \"none\";\n  document.getElementById(\"authKeyInput\").value = \"\";\n  document.getElementById(\"authStatus\").style.display = \"none\";\n}\n\nasync function submitAuthKey() {\n  const authKey = document.getElementById(\"authKeyInput\").value.trim();\n  \n  if (!authKey) {\n    showAuthStatus(\"인증키를 입력해주세요.\", \"error\");\n    return;\n  }\n  \n  // For now, we'll just validate the format and store it locally\n  // In production, this would validate against a backend API\n  if (authKey.length >= 8) {\n    localStorage.setItem(\"excel_addon_auth_key\", authKey);\n    showAuthStatus(\"인증이 완료되었습니다.\", \"success\");\n    \n    // Enable GPT-4.1 model\n    const modelSelect = document.getElementById(\"modelSelect\");\n    modelSelect.value = \"gpt-4.1-2025-04-14\";\n    handleModelChange();\n    \n    setTimeout(() => {\n      hideAuthModal();\n    }, 1500);\n  } else {\n    showAuthStatus(\"유효하지 않은 인증키입니다.\", \"error\");\n  }\n}\n\nfunction showAuthStatus(message, type) {\n  const statusDiv = document.getElementById(\"authStatus\");\n  statusDiv.textContent = message;\n  statusDiv.className = `auth-status ${type}`;\n  statusDiv.style.display = \"block\";\n}\n\nfunction showContactInfo() {\n  showStatus('문의/요청: support@worksai.co.kr', 'info');\n}\n\nfunction handleModelChange() {\n  const modelSelect = document.getElementById(\"modelSelect\");\n  const selectedModel = modelSelect.value;\n  \n  // Check if premium model is selected\n  if (selectedModel === \"gpt-4.1-2025-04-14\") {\n    const authKey = localStorage.getItem(\"excel_addon_auth_key\");\n    if (!authKey) {\n      showStatus(\"GPT-4.1 모델을 사용하려면 인증이 필요합니다.\", \"warning\");\n      modelSelect.value = \"gpt-4.1-mini-2025-04-14\"; // Reset to free model\n      showAuthModal();\n      return;\n    }\n  }\n  \n  // Store selected model\n  localStorage.setItem(\"excel_addon_selected_model\", selectedModel);\n  showStatus(`모델이 ${selectedModel.includes(\"mini\") ? \"GPT-4.1-mini\" : \"GPT-4.1\"}로 변경되었습니다.`, \"success\");\n}\n\n// Test backend connection\nasync function testBackendConnection() {\n  try {\n    console.log('Testing backend connection...');\n    const testUrl = 'https://excel-addon-backend.vercel.app/api/test';\n    \n    const response = await fetch(testUrl, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({ test: true })\n    });\n    \n    console.log('Test response status:', response.status);\n    console.log('Test response headers:', response.headers);\n    \n    const data = await response.json();\n    console.log('Test response data:', data);\n    \n    showStatus('백엔드 연결 테스트 성공', 'success');\n  } catch (error) {\n    console.error('Backend test error:', error);\n    showStatus('백엔드 연결 테스트 실패: ' + error.message, 'error');\n  }\n}\n\n// Format cell borders\nasync function executeBorderFormat(context, params) {\n  console.log('executeBorderFormat called with params:', params);\n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  \n  try {\n    let targetRanges = [];\n    \n    // Determine the range based on params\n    if (!params.range) {\n      // No range specified - handle multiple selections\n      try {\n        const selectedRanges = context.workbook.getSelectedRanges();\n        selectedRanges.load([\"areas\", \"areaCount\"]);\n        await context.sync();\n        \n        if (selectedRanges.areaCount > 1) {\n          // Multiple non-contiguous ranges selected\n          for (let i = 0; i < selectedRanges.areas.items.length; i++) {\n            targetRanges.push(selectedRanges.areas.items[i]);\n          }\n        } else {\n          // Single contiguous range\n          targetRanges.push(context.workbook.getSelectedRange());\n        }\n      } catch (error) {\n        console.log('Error getting selected ranges for border format/removal:', error);\n        return { success: false, error: '선택한 범위를 처리할 수 없습니다. 연속된 범위를 선택해주세요.' };\n      }\n    } else if (params.range === 'all' || params.range === '전체') {\n      // Entire sheet\n      const usedRange = worksheet.getUsedRangeOrNullObject();\n      usedRange.load(\"isNullObject\");\n      await context.sync();\n      \n      if (usedRange.isNullObject) {\n        return { success: false, error: '시트에 데이터가 없습니다.' };\n      } else {\n        targetRanges.push(usedRange);\n      }\n    } else {\n      // Specific range provided\n      targetRanges.push(worksheet.getRange(params.range));\n    }\n    \n    // Load all ranges\n    for (const range of targetRanges) {\n      range.load([\"address\", \"rowCount\", \"columnCount\"]);\n    }\n    await context.sync();\n    \n    console.log('Target ranges for border format:', targetRanges.length);\n    for (let i = 0; i < targetRanges.length; i++) {\n      console.log(`Range ${i + 1}:`, {\n        address: targetRanges[i].address,\n        rowCount: targetRanges[i].rowCount,\n        columnCount: targetRanges[i].columnCount\n      });\n    }\n    \n    // Determine which borders to format\n    const borderType = params.borderType || 'all';\n    const color = params.color || '#000000';\n    const style = params.style || 'Continuous';\n    \n    // Map style names to Excel constants\n    const styleMap = {\n      'continuous': 'Continuous',\n      'dash': 'Dash',\n      'dashdot': 'DashDot',\n      'double': 'Double',\n      'dot': 'Dot',\n      'dashdotdot': 'DashDotDot',\n      'slantdashdot': 'SlantDashDot'\n    };\n    \n    const excelStyle = styleMap[style.toLowerCase()] || 'Continuous';\n    \n    // Apply border formatting to all selected ranges\n    for (const targetRange of targetRanges) {\n      if (borderType === 'all') {\n        // Format all borders\n        const borderItems = ['EdgeTop', 'EdgeBottom', 'EdgeLeft', 'EdgeRight', 'InsideVertical', 'InsideHorizontal'];\n        \n        for (const borderItem of borderItems) {\n          try {\n            const border = targetRange.format.borders.getItem(borderItem);\n            border.style = excelStyle;\n            border.color = color;\n            border.weight = 'Thin';\n          } catch (e) {\n            // Some border items might not be applicable (e.g., InsideVertical for single cell)\n            console.log(`Skipping ${borderItem}:`, e.message);\n          }\n        }\n      } else if (borderType === 'inside') {\n        // Format only inside borders\n        try {\n          const insideV = targetRange.format.borders.getItem('InsideVertical');\n          insideV.style = excelStyle;\n          insideV.color = color;\n          insideV.weight = 'Thin';\n        } catch (e) {\n          console.log('No inside vertical borders');\n        }\n        \n        try {\n          const insideH = targetRange.format.borders.getItem('InsideHorizontal');\n          insideH.style = excelStyle;\n          insideH.color = color;\n          insideH.weight = 'Thin';\n        } catch (e) {\n          console.log('No inside horizontal borders');\n        }\n      } else {\n        // Format specific border\n        const borderMap = {\n          'top': 'EdgeTop',\n          'bottom': 'EdgeBottom',\n          'left': 'EdgeLeft',\n          'right': 'EdgeRight'\n        };\n        \n        const borderName = borderMap[borderType.toLowerCase()];\n        if (borderName) {\n          const border = targetRange.format.borders.getItem(borderName);\n          border.style = excelStyle;\n          border.color = color;\n          border.weight = 'Thin';\n        }\n      }\n    }\n    \n    await context.sync();\n    \n    return {\n      success: true,\n      message: '테두리 서식이 적용되었습니다.'\n    };\n    \n  } catch (error) {\n    console.error('Error in executeBorderFormat:', error);\n    return {\n      success: false,\n      error: `테두리 서식 적용 중 오류 발생: ${error.message}`\n    };\n  }\n}\n\n// Additional operations (compress, filter, insert, delete, formula, retry_translation)\n// These would need to be implemented based on Excel JavaScript API capabilities\n\nasync function executeCompress(context, params) {\n  console.log('executeCompress called with params:', params);\n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  \n  try {\n    if (!params.range) {\n      return { success: false, error: '범위를 지정해주세요.' };\n    }\n    \n    // Get the specified range\n    const checkRange = worksheet.getRange(params.range);\n    checkRange.load([\"rowIndex\", \"rowCount\", \"columnIndex\", \"values\", \"address\"]);\n    await context.sync();\n    \n    console.log('Compress range:', {\n      address: checkRange.address,\n      rowIndex: checkRange.rowIndex,\n      rowCount: checkRange.rowCount,\n      columnIndex: checkRange.columnIndex\n    });\n    \n    // Find empty rows in the specified column\n    const emptyRows = [];\n    const values = checkRange.values;\n    \n    // Check each row in the range\n    for (let i = 0; i < values.length; i++) {\n      const cellValue = values[i][0]; // First column of the range\n      if (cellValue === null || cellValue === undefined || cellValue === '' || \n          (typeof cellValue === 'string' && cellValue.trim() === '')) {\n        // This row is empty in the specified column\n        // Store the actual row index (rowIndex + i)\n        emptyRows.push(checkRange.rowIndex + i);\n      }\n    }\n    \n    console.log('Found empty rows:', emptyRows.length, 'rows at indices:', emptyRows);\n    \n    if (emptyRows.length === 0) {\n      return {\n        success: true,\n        message: '제거할 빈 행이 없습니다.'\n      };\n    }\n    \n    // IMPORTANT: Only delete rows that are within the specified range\n    // This prevents accidentally deleting rows outside the range (like A1)\n    const minRowIndex = checkRange.rowIndex;\n    const maxRowIndex = checkRange.rowIndex + checkRange.rowCount - 1;\n    \n    // Filter out any row indices that are outside the specified range\n    const rowsToDelete = emptyRows.filter(rowIdx => rowIdx >= minRowIndex && rowIdx <= maxRowIndex);\n    \n    console.log('Rows to delete (filtered):', rowsToDelete);\n    \n    // Delete rows from bottom to top to avoid index shifting\n    rowsToDelete.sort((a, b) => b - a); // Sort in descending order\n    \n    for (const rowIndex of rowsToDelete) {\n      console.log('Deleting row:', rowIndex + 1); // Display 1-based for user\n      // Get the entire row using a fixed large column count to avoid getUsedRange() issues\n      const rowToDelete = worksheet.getRangeByIndexes(rowIndex, 0, 1, 1000);\n      rowToDelete.delete(Excel.DeleteShiftDirection.up);\n      await context.sync();\n    }\n    \n    return {\n      success: true,\n      message: `${rowsToDelete.length}개의 빈 행이 제거되었습니다.`\n    };\n    \n  } catch (error) {\n    console.error('Error in executeCompress:', error);\n    return {\n      success: false,\n      error: `빈 행 제거 중 오류 발생: ${error.message}`\n    };\n  }\n}\n\nasync function executeFilter(context, params) {\n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  const range = params.range ? worksheet.getRange(params.range) : worksheet.getUsedRange();\n  \n  // Apply autofilter\n  range.worksheet.autoFilter.apply(range);\n  \n  await context.sync();\n  \n  return {\n    success: true,\n    message: '필터가 적용되었습니다.'\n  };\n}\n\nasync function executeInsert(context, params) {\n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  const type = params.type || 'row';\n  const position = params.position || 1;\n  const count = params.count || 1;\n  \n  if (type === 'row') {\n    const range = worksheet.getRangeByIndexes(position - 1, 0, count, 1);\n    range.insert(Excel.InsertShiftDirection.down);\n  } else {\n    const range = worksheet.getRangeByIndexes(0, position - 1, 1, count);\n    range.insert(Excel.InsertShiftDirection.right);\n  }\n  \n  await context.sync();\n  \n  return {\n    success: true,\n    message: `${count}개의 ${type === 'row' ? '행' : '열'}이 삽입되었습니다.`\n  };\n}\n\nasync function executeDelete(context, params) {\n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  const type = params.type || 'row';\n  const position = params.position || 1;\n  const count = params.count || 1;\n  \n  if (type === 'row') {\n    const range = worksheet.getRangeByIndexes(position - 1, 0, count, 1);\n    range.delete(Excel.DeleteShiftDirection.up);\n  } else {\n    const range = worksheet.getRangeByIndexes(0, position - 1, 1, count);\n    range.delete(Excel.DeleteShiftDirection.left);\n  }\n  \n  await context.sync();\n  \n  return {\n    success: true,\n    message: `${count}개의 ${type === 'row' ? '행' : '열'}이 삭제되었습니다.`\n  };\n}\n\nasync function executeFormula(context, params) {\n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  const range = params.range ? worksheet.getRange(params.range) : context.workbook.getSelectedRange();\n  \n  if (!params.formula) {\n    return { success: false, error: '수식을 지정해주세요.' };\n  }\n  \n  range.formulas = [[params.formula]];\n  await context.sync();\n  \n  return {\n    success: true,\n    message: '수식이 적용되었습니다.'\n  };\n}\n\nasync function executeRetryTranslation(context, params) {\n  // Implementation would be similar to Google Sheets version\n  // but using Excel JavaScript API\n  return {\n    success: false,\n    error: '이 기능은 현재 구현 중입니다.'\n  };\n}\n\nasync function executeRemoveBorder(context, params) {\n  console.log('executeRemoveBorder called with params:', params);\n  const worksheet = context.workbook.worksheets.getActiveWorksheet();\n  \n  try {\n    let targetRanges = [];\n    \n    // Determine the range to apply border removal\n    if (params.range) {\n      // Handle special case for entire sheet\n      if (params.range === 'all' || params.range === '전체') {\n        console.log('Removing borders from entire sheet');\n        // Use getUsedRangeOrNullObject to get the actual used range\n        const usedRange = worksheet.getUsedRangeOrNullObject();\n        usedRange.load(\"isNullObject\");\n        await context.sync();\n        \n        if (usedRange.isNullObject) {\n          console.log('No used range in the sheet, nothing to remove borders from');\n          return { success: true, message: '시트에 데이터가 없어 테두리를 제거할 필요가 없습니다.' };\n        } else {\n          // Expand the used range to ensure we get all cells that might have borders\n          usedRange.load([\"rowCount\", \"columnCount\", \"rowIndex\", \"columnIndex\"]);\n          await context.sync();\n          \n          // Get a slightly larger range to ensure we capture all borders\n          const expandedRows = Math.min(usedRange.rowCount + 100, 1048576);\n          const expandedCols = Math.min(usedRange.columnCount + 20, 16384);\n          targetRanges.push(worksheet.getRangeByIndexes(0, 0, expandedRows, expandedCols));\n        }\n      } else if (params.range.match(/^[A-Z]+:[A-Z]+$/)) {\n        // Handle column ranges like \"C:C\"\n        console.log('Handling column range:', params.range);\n        const usedRange = worksheet.getUsedRange();\n        if (!usedRange) {\n          return { success: false, error: '데이터가 없습니다.' };\n        }\n        \n        usedRange.load([\"rowCount\", \"columnCount\"]);\n        await context.sync();\n        \n        // Get the column letter from the range (e.g., \"C\" from \"C:C\")\n        const columnLetter = params.range.split(':')[0];\n        const columnIndex = columnLetter.charCodeAt(0) - 65;\n        \n        // Get the entire used portion of the column\n        targetRanges.push(worksheet.getRangeByIndexes(0, columnIndex, usedRange.rowCount, 1));\n      } else {\n        // Handle specific ranges like \"A1:B10\"\n        targetRanges.push(worksheet.getRange(params.range));\n      }\n    } else {\n      // If no range specified, handle multiple selections\n      try {\n        const selectedRanges = context.workbook.getSelectedRanges();\n        selectedRanges.load([\"areas\", \"areaCount\"]);\n        await context.sync();\n        \n        if (selectedRanges.areaCount > 1) {\n          // Multiple non-contiguous ranges selected\n          for (let i = 0; i < selectedRanges.areas.items.length; i++) {\n            targetRanges.push(selectedRanges.areas.items[i]);\n          }\n        } else {\n          // Single contiguous range\n          targetRanges.push(context.workbook.getSelectedRange());\n        }\n      } catch (error) {\n        console.log('Error getting selected ranges for border format/removal:', error);\n        return { success: false, error: '선택한 범위를 처리할 수 없습니다. 연속된 범위를 선택해주세요.' };\n      }\n    }\n    \n    // Load all ranges\n    for (const range of targetRanges) {\n      range.load([\"address\", \"rowCount\", \"columnCount\"]);\n    }\n    await context.sync();\n    \n    console.log('Target ranges for border removal:', targetRanges.length);\n    for (let i = 0; i < targetRanges.length; i++) {\n      console.log(`Range ${i + 1}:`, {\n        address: targetRanges[i].address,\n        rowCount: targetRanges[i].rowCount,\n        columnCount: targetRanges[i].columnCount\n      });\n    }\n    \n    // Determine which borders to remove\n    const borderType = params.borderType || 'all';\n    \n    // Apply border removal to all selected ranges\n    for (const targetRange of targetRanges) {\n      if (borderType === 'all') {\n        // Remove all borders\n        targetRange.format.borders.getItem(Excel.BorderIndex.edgeLeft).style = Excel.BorderLineStyle.none;\n        targetRange.format.borders.getItem(Excel.BorderIndex.edgeRight).style = Excel.BorderLineStyle.none;\n        targetRange.format.borders.getItem(Excel.BorderIndex.edgeTop).style = Excel.BorderLineStyle.none;\n        targetRange.format.borders.getItem(Excel.BorderIndex.edgeBottom).style = Excel.BorderLineStyle.none;\n        targetRange.format.borders.getItem(Excel.BorderIndex.insideHorizontal).style = Excel.BorderLineStyle.none;\n        targetRange.format.borders.getItem(Excel.BorderIndex.insideVertical).style = Excel.BorderLineStyle.none;\n      } else {\n        // Remove specific border\n        switch (borderType) {\n          case 'right':\n            targetRange.format.borders.getItem(Excel.BorderIndex.edgeRight).style = Excel.BorderLineStyle.none;\n            break;\n          case 'left':\n            targetRange.format.borders.getItem(Excel.BorderIndex.edgeLeft).style = Excel.BorderLineStyle.none;\n            break;\n          case 'top':\n            targetRange.format.borders.getItem(Excel.BorderIndex.edgeTop).style = Excel.BorderLineStyle.none;\n            break;\n          case 'bottom':\n            targetRange.format.borders.getItem(Excel.BorderIndex.edgeBottom).style = Excel.BorderLineStyle.none;\n            break;\n          default:\n            return { success: false, error: `알 수 없는 테두리 유형: ${borderType}` };\n        }\n      }\n    }\n    \n    await context.sync();\n    \n    return {\n      success: true,\n      message: `${borderType === 'all' ? '모든' : borderType} 테두리가 제거되었습니다.`\n    };\n    \n  } catch (error) {\n    console.error('Error in executeRemoveBorder:', error);\n    return {\n      success: false,\n      error: `테두리 제거 중 오류 발생: ${error.message}`\n    };\n  }\n}"],"names":["__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","m","g","globalThis","this","Function","e","window","o","obj","prop","Object","prototype","hasOwnProperty","call","scriptUrl","importScripts","location","document","currentScript","tagName","toUpperCase","src","scripts","getElementsByTagName","length","i","test","Error","replace","p","b","baseURI","self","href","URL","t","r","Symbol","n","iterator","toStringTag","c","Generator","u","create","_regeneratorDefine2","f","y","G","v","a","d","bind","l","TypeError","done","value","return","GeneratorFunction","GeneratorFunctionPrototype","getPrototypeOf","setPrototypeOf","__proto__","displayName","_regenerator","w","defineProperty","_invoke","enumerable","configurable","writable","asyncGeneratorStep","Promise","resolve","then","_asyncToGenerator","arguments","apply","_next","_throw","recognition","isListening","API_PROXY_URL","process","Office","onReady","info","host","HostType","Excel","_testBackendConnection","testBackendConnection","getElementById","onclick","executeCommand","clearInput","protocol","hostname","includes","showStatus","textContent","stop","start","error","console","message","toggleVoiceRecognition","showAuthModal","showContactInfo","authModal","querySelector","hideAuthModal","event","target","submitAuthKey","onchange","handleModelChange","querySelectorAll","forEach","item","command","getAttribute","focus","addEventListener","key","shiftKey","preventDefault","log","voiceButton","voiceStatus","disabled","style","opacity","cursor","color","title","SpeechRecognition","webkitSpeechRecognition","lang","continuous","interimResults","maxAlternatives","onstart","classList","add","onresult","transcript","results","isFinal","onerror","remove","errorMessage","isWebEnvironment","onend","trim","initializeSpeechRecognition","isExecuting","_executeCommand","_callee2","button","originalText","_t2","_context2","innerHTML","run","_ref","_callee","context","worksheet","activeRangeInfo","selectedRanges","firstRange","rangeAddresses","_i","range","usedRange","sheetContext","headerRow","_i2","interpretation","result","_t","_context","workbook","worksheets","getActiveWorksheet","getSelectedRanges","load","sync","areaCount","areas","items","push","address","join","row","rowIndex","column","columnIndex","numRows","rowCount","numColumns","columnCount","isMultipleRanges","getUsedRange","sheetName","name","activeRange","lastRow","lastColumn","headers","dataRange","values","isLargeSheet","columnLetter","getColumnLetter","label","toString","callOpenAI","success","executeInterpretedCommand","data","setTimeout","_x46","stack","_x","_x2","_callOpenAI","_callee3","selectedModel","authKey","response","errorData","_t3","_context3","localStorage","getItem","fetch","method","body","JSON","stringify","model","ok","json","concat","status","_x5","_x6","_executeInterpretedCommand","_callee5","commandData","successCount","_iterator","_step","op","_t6","_context5","operations","Array","isArray","_createForOfIteratorHelper","s","executeSingleOperation","operation","parameters","_x7","_x8","_x9","_executeSingleOperation","_callee6","params","_t7","_t8","_context6","Date","toISOString","executeMerge","executeSum","executeAverage","executeCount","executeFormat","executeSort","executeFilter","executeInsert","executeDelete","executeFormula","executeChart","executeConditionalFormat","executeTranslate","executeCompress","executeRetryTranslation","executeRemoveBorder","executeBorderFormat","_x0","_x1","_executeMerge","_callee7","rangeAddress","_context7","getRange","getSelectedRange","merge","_x10","_x11","_executeSum","_callee8","_i3","lastDataRow","targetRow","foundEmpty","_i4","checkCell","cellValue","sumCell","sourceRange","sumFormula","_i5","_i6","_selectedRanges","_rangeAddresses","_i7","_i8","newCell","targetCell","_usedRange","_targetCell","lastUsedRow","lastUsedCol","_foundEmpty","col","_checkCell","_row","_checkCell2","_column","startRow","_targetRow","_foundEmpty2","_i9","_checkCell3","_cellValue","_t9","_t0","_context8","columnName","sumType","match","charCodeAt","toLowerCase","getCell","formulas","formatNumber","addNewRow","getHeaders","_x12","_getHeaders","_callee9","_context9","_x13","_x14","_executeAverage","_callee0","rangeDescription","averageFormula","_columnIndex","_usedRange2","columnInfo","_usedRange3","_usedRange4","_i0","_i1","_selectedRanges2","_rangeAddresses2","_i10","_i11","_i12","_t1","_t10","_t11","_context0","averageType","getRangeByIndexes","find","h","numberFormat","_x15","_x16","_executeCount","_callee1","formula","criteria","resultCell","lastCol","_context1","countType","condition","operator","_x17","_x18","_executeFormat","_callee10","ranges","_i13","_ranges","_i14","_ranges2","_range","format","_t12","_context10","bold","font","italic","fontSize","size","fontColor","backgroundColor","fill","horizontalAlignment","_x19","_x20","_executeSort","_callee11","ascending","_context11","sort","_x21","_x22","_executeChart","_callee12","sourceData","dataAddress","allRanges","area","tempStartRow","tempStartCol","consolidatedData","maxColumns","_i15","_allRanges","_iterator2","_step2","reorganizedData","_i16","tempRange","_tempRange","chartType","chart","_chart","_t13","_t14","_t15","_t16","_context12","getUsedRangeOrNullObject","isNullObject","Math","max","err","every","firstValue","ChartType","columnClustered","line","pie","xyscatter","charts","ChartSeriesBy","auto","text","height","width","left","offsetX","top","offsetY","legend","position","ChartLegendPosition","bottom","visible","_x23","_x24","_executeConditionalFormat","_callee13","defaultRange","_i17","_ranges3","conditionalFormat","_t17","_context13","conditionalFormats","ConditionalFormatType","rule","formula1","ConditionalCellValueOperator","greaterThan","lessThan","equalTo","containsText","_x25","_x26","_executeTranslate","_callee14","targetColumnIndex","targetColumnLetter","_targetColumnLetter","_columnIndex2","_usedRange5","sourceValues","translations","batchSize","batch","batchTexts","translatedBatch","j","translationIndex","_j","translatedText","_j2","_i18","targetRange","stringTranslations","errorRows","_i19","translation","_iterator3","_step3","errorCell","isEmpty","_i20","cellRow","cellCol","cell","headerCell","sourceHeaderCell","_context14","targetLanguage","split","sourceColumnIndex","sourceColumn","targetColumn","slice","min","map","filter","translateBatch","sourceLanguage","batchLength","translatedBatchLength","sampleTranslations","firstTranslation","translationType","_typeof","rawData","isError","round","translationsCount","first","second","third","clear","ClearApplyTo","contents","translationsLength","is2DArray","String","valueTypes","actualFirstValue","firstThreeValues","firstValueLength","_x27","_x28","_x29","_translateBatch","_callee15","texts","_t18","_context15","tempIndex","fromCharCode","floor","Number","isInteger","toLocaleString","minimumFractionDigits","maximumFractionDigits","type","className","display","statusTimeout","clearTimeout","_submitAuthKey","_callee16","_context16","showAuthStatus","setItem","statusDiv","modelSelect","_callee17","_t19","_context17","_x30","_x31","_executeBorderFormat","_callee18","targetRanges","_i21","_targetRanges","_i22","borderType","excelStyle","_i23","_targetRanges2","_i24","_borderItems","borderItem","border","insideV","insideH","borderName","_border","_t20","_t21","_context18","borders","weight","_x32","_x33","_executeCompress","_callee19","checkRange","emptyRows","minRowIndex","maxRowIndex","rowsToDelete","_iterator4","_step4","_t22","_t23","_context19","rowIdx","delete","DeleteShiftDirection","up","_x34","_x35","_executeFilter","_callee20","_context20","autoFilter","_x36","_x37","_executeInsert","_callee21","count","_context21","insert","InsertShiftDirection","down","right","_x38","_x39","_executeDelete","_callee22","_context22","_x40","_x41","_executeFormula","_callee23","_context23","_x42","_x43","_executeRetryTranslation","_callee24","_context24","_x44","_x45","_executeRemoveBorder","_callee25","expandedRows","expandedCols","_usedRange6","_i25","_targetRanges3","_i26","_i27","_targetRanges4","_t24","_t25","_t26","_context25","BorderIndex","edgeLeft","BorderLineStyle","none","edgeRight","edgeTop","edgeBottom","insideHorizontal","insideVertical"],"sourceRoot":""}